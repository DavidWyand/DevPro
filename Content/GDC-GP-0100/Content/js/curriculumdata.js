var GlobalCourseData = {"bIsChecked":false,"courses":[{"arcs":[{"bIsChecked":true,"description":"Learn about game theory, the history, and some of the common terminology of game development.","image":"image_wincondition.png","modules":[{"bIsChecked":true,"name":"course-introduction","title":"Course Introduction","topics":[{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"course-introduction","movie":".\/video\/gamedesignintro-introarcs-1.mp4","name":"Course Navigation","promptfile":null,"prompts":null,"reference":"course-introduction-1","text":null,"title":"Course Navigation"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"course-introduction","movie":".\/video\/gamedesignintro-introuserinterface-2.mp4","name":"User Interface","promptfile":null,"prompts":null,"reference":"course-introduction-2","text":null,"title":"User Interface"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"course-introduction","movie":".\/video\/gamedesignintro-intropopquiz-3.mp4","name":"Pop Quiz","promptfile":null,"prompts":null,"reference":"course-introduction-3","text":null,"title":"Pop Quiz"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"course-introduction","movie":".\/video\/GameStackIntro.mp4","name":"GameStackIntro","promptfile":null,"prompts":null,"reference":"course-introduction-4","text":null,"title":"Game Stack Intro"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"course-introduction","movie":".\/video\/GameStackFeatures.mp4","name":"GameStackFeatures","promptfile":null,"prompts":null,"reference":"course-introduction-4","text":null,"title":"Game Stack Features"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"reference","mod":"introduction","movie":null,"name":"Reference","promptfile":null,"prompts":null,"reference":null,"text":"<a id=\"course-introduction-1\" class=\"dest\"><\/a><div class=\"accent\"><h1>Course Navigation<\/h1><p>Hello and welcome to Dev|Pro's Computer Science in Game Design. In this, the game design curriculum, we will learn about game theory, game design, and along the way, make a few stops to consider the workings of the video game industry. Through video lectures, hands-on exercises, assessments, and more will we dive into the fascinating world of video game design and development.<\/p>  <p>The game design curriculum is divided into four arcs containing multiple related Modules:<\/p>  <h2>Arc One: Intro to Game Development<\/h2><img class=\"aligncenter size-full wp-image-701\" src=\".\/images\/navsection_arc1.png\" alt=\"navsection_arc1\" width=\"746\" height=\"417\" \/> <p>In Arc One, intro to game development, we look at the history of video games and the rise of technology and iconic game developers who have made the game industry what it is today. From there we examine some of the lexicon of developers and then dive into game theory as a primer for understanding how game designers think. <\/p> <h2>Arc Two: Game Design Basics<\/h2><img class=\"aligncenter size-full wp-image-701\" src=\".\/images\/navsection_arc2.png\" alt=\"navsection_arc2\" width=\"746\" height=\"417\" \/> <p>In Arc Two. Game Design Basics, we begin with the importance of documentation and quickly move on to discussions on mechanics, game structure, and level design.<\/p> <h2>Arc Three: Implementing Game Design<\/h2><img class=\"aligncenter size-full wp-image-701\" src=\".\/images\/navsection_arc3.png\" alt=\"navsection_arc3\" width=\"746\" height=\"417\" \/> <p>Arc three, implementing game design, will take us to deeper levels of understanding game design as we apply common design theories, discuss visuals and delve into characters and story.<\/p>  <h2>Arc Four: Game Design Project<\/h2><img class=\"aligncenter size-full wp-image-701\" src=\".\/images\/navsection_arc4.png\" alt=\"navsection_arc4\" width=\"746\" height=\"417\" \/> <p>Finally, in Arc Four, we will look some industry matters such as careers in video games and intellectual property issues, leading to our capstone exercise project.<\/p><div style=\"text-align: center;\"><ul class=\"anchorGroup\" style=\"text-align: left; display: inline-block;\"><li><a class=\"ankor\" href=\"#course-introduction-2\">User Interface<\/a><\/li><li><a class=\"ankor\" href=\"#course-introduction-3\">Pop-Up Quiz<\/a><\/li><li><a class=\"ankor\" href=\"#course-introduction-4\">Game Stack<\/a><\/li><\/ul><\/div><\/div><a class=\"dest\" id=\"course-introduction-2\"><\/a>&nbsp;<div class=\"accent\"><h1>User Interface<\/h1><img class=\"aligncenter size-full wp-image-701\" src=\".\/images\/navopening2.png\" alt=\"navopening2\" width=\"746\" height=\"417\" \/><p>The above screen is typical of all the Modules in the course. Each Module will include these buttons and features:<\/p><h1>Interface Navigation<\/h1><img class=\"aligncenter size-full wp-image-701\" src=\".\/images\/navtopbar.png\" alt=\"navtopbar\" width=\"746\" height=\"417\" \/> <p>At the top of a Module Page we will always see these Feature Buttons:<\/p><ol><li>Click here to access the course menu to quickly navigate to any Module in the Game Design curriculum. <\/li><li>Click here to return to this Module's Arc landing page. <\/li><li>Click here to instantly jump to the next, or previous, lesson in the curriculum.<\/li> <\/ol> <h1>Video Lessons<\/h1> <img class=\"aligncenter size-full wp-image-701\" src=\".\/images\/navplaylist.png\" alt=\"navplaylist\" width=\"746\" height=\"417\" \/> <p>Each Module features a number of video lectures broken up into topics.<\/p> <ol><li>Clicking the Playlist button will open a drop-down menu of all the topic videos in the Module. Click any video to play it. <\/li><li>This shows the video currently being watched.<\/li><li>This is the control panel to play the videos. Here, students can play or pause the video, skip ahead by sliding the bar, adjust the speed in which the videos play, mute sound, and view at full screen.<\/li> <\/ol> <h1>Reference Material<\/h1>  <img class=\"aligncenter size-full wp-image-701\" src=\".\/images\/navsectionintro_rm.png\" alt=\"navsectionintro_rm\" width=\"746\" height=\"417\" \/>  <p>All of the video lessons are accompanied by reference text. Think of reference text as a supporting textbook to the material covered in the video lesson.  Clicking the Reference Material button will access all the written text covering the entire Module.  At the end of the Overview section there is a listing of all the topics. Click on any topic in this list to instantly jump to that topic in the reference text.<\/p>  <h1>Game Stack Exercise<\/h1>  <img class=\"aligncenter size-full wp-image-701\" src=\".\/images\/gamestacklogo.png\" alt=\"gamestacklogo\" width=\"746\" height=\"417\" \/>   <p>Game Stack is a program where students will do hands-on game design exercises. For most Modules in this curriculum, there will be a Game Stack exercise involving game design logic covered in the video lessons and reference material.<\/p>      <h1>Writing Exercise<\/h1>   <img class=\"aligncenter size-full wp-image-701\" src=\".\/images\/writingexercise2.png\" alt=\"writingexercise2\" width=\"746\" height=\"417\" \/>    <p>Each Module will also have a written exercise pertaining to the entirety of all the topics. This exercise could be an essay or other project that will be completed outside of this interface. This is work you will hand in to your teacher on paper or document file.<\/p>\u0009 <h1>Index and Glossary<\/h1><img class=\"aligncenter size-full wp-image-701\" src=\".\/images\/navsectionintro_index.png\" alt=\"navsectionintro_index\" width=\"746\" height=\"417\" \/>  <p>Access the index and glossary with these buttons. They will allow for quick reference to a term definition or guidance to a particular topic.<\/p><h1>Jump Tab Buttons<\/h1><img class=\"aligncenter size-full wp-image-701\" src=\".\/images\/navpreviousandnext.png\" alt=\"navpreviousandnext\" width=\"746\" height=\"417\" \/>  <p>Skip ahead one tab on the Tab Bar or one tab back with these controls. This is another way to move from playlist to reference material and vice versa.<\/p><\/div><a id=\"course-introduction-3\" class=\"dest\"><\/a>&nbsp;<div class=\"accent\"><h1>Pop-Up Quiz<\/h1><img class=\"aligncenter size-full wp-image-701\" src=\".\/images\/Popcorn1.png\" alt=\"Popcorn1\" width=\"743\" height=\"575\" \/>  <p>As students watch the videos, they will start to see pop up questions. These questions appear within the video and test student's understanding of the material they have just watched.  When a pop up question appears, read question carefully and choose the correct answer.<\/p><img class=\"aligncenter size-full wp-image-701\" src=\".\/images\/Popcorn3.png\" alt=\"Popcorn3\" width=\"743\" height=\"575\" \/>  <p>To choose an answer, click it. Then click Submit.<\/p><img class=\"aligncenter size-full wp-image-701\" src=\".\/images\/Popcorn5.png\" alt=\"Popcorn5\" width=\"743\" height=\"575\" \/>  <p>You will then get a message telling you if you got the answer right or wrong. You will also receive some feedback, usually re-enforcing the correct answer. When you are done reading the feedback, click Continue.<\/p><img class=\"aligncenter size-full wp-image-701\" src=\".\/images\/Popcorn6.png\" alt=\"Popcorn6\" width=\"743\" height=\"575\" \/>  <p>Note that the green circles in the top right corner denote how many questions are in the video and which one the student is currently on.<\/p><img class=\"aligncenter size-full wp-image-701\" src=\".\/images\/Popcorn8.png\" alt=\"Popcorn8\" width=\"743\" height=\"575\" \/>  <p>When the last question is answered correctly, the student will see their total results.<\/p> <img class=\"aligncenter size-full wp-image-701\" src=\".\/images\/Popcorn9.png\" alt=\"Popcorn9\" width=\"743\" height=\"575\" \/>  <p>Click Continue to move forward to the next video lesson.<\/p><\/div><a id=\"course-introduction-4\" class=\"dest\"><\/a>&nbsp;<div class=\"accent\"><h1>Game Stack<\/h1><img class=\"aligncenter size-full wp-image-701\" src=\".\/images\/gamestacklogo.png\" alt=\"gamestacklogo\" width=\"743\" height=\"575\" \/>  <p>Throughout this section, we will be developing and testing our knowledge of game design using a game engine called Game Stack. With this tool we will be able to experiment, hands-on, with game mechanics such as balance, physics, and more. But first, we need to learn the features of the game editor and how to navigate the tools and options. Once we understand how the Game Stack tool works, we can begin our game design exercises and projects.<\/p><\/div><!--page:~~course-introduction-reference-text~~-->","title":"Reference Material"},{"bIsChecked":true,"exercise":".\/exercise\/DevProPongPro.stack","instructions":"<h1>Goals<\/h1><ol><li>Become familiar with Game Stack and the custom block types that are unique to this course and Game Design exercises.<\/li><li>Make adjustments to the PongPro game to learn more about how to use Game Stack and to design the most \"fun\" version of PongPro.<\/li><\/ol><h1>Steps<\/h1><ol><li>Click the <img src=\".\/images\/downloadbutton.png\" alt=\"layout.png\"\/> button at the top or bottom of this page to download the DevProPongPro.stack file.<\/li><li>Save the file to a location you can access on your computer.<\/li><li>Click to open the file in Game Stack.<\/li><img class=\"aligncenter\" src=\".\/images\/gamestackfilelocation.png\" alt=\"layout.png\"\/><li>Walk through the layout and UI of Game Stack:<img class=\"aligncenter\" src=\".\/images\/courseintroduction-layout.png\" alt=\"layout.png\"\/><ol><li>File - Use this menu for the standard file management options like Save, Save As, Open and Close.<\/li><li>Edit - Use this menu to access options to edit the Game Stack file. We will get into specific Edit options in future exercises.<\/li><li>Sprite Editing Short cuts - Duplicate\/Delete\/Grow\/Shrink.<\/li><li>Full Screen - Use this button to toggle the Game Stack game from full screen to the standard layout.<\/li><li>Start Game and Stop Game buttons.<\/li><li>Scripts Tab - This is where we can add and edit programming to sprites.<\/li><li>Costumes Tab - Use this tab to change the look and feel of sprites. <\/li><li>Sounds Tab - Use this tab to add music and sound effects to the game.<\/li><li>Design Tab - This is a special tab that we use to make game play adjustments during this course.<\/li><li>Stage and Backdrops - Add and edit backgrounds to the game. Backdrops are to the stage as Costumes are to all other sprites.<\/li><li>New Backdrop Shortcuts - Choose from library, Paint new backdrop, Upload backdrop from file, and New backdrop from camera. <\/li><li>Sprites - This is where all of the game sprites are located to select them for editing.<\/li><li>New Sprite Shortcuts - Choose from library, Paint new sprite, Upload sprite from file, and New sprite from camera.<\/li><\/ol><\/li><li>Play the Pong game<ol><img class=\"aligncenter\" src=\".\/images\/courseintroduction-ponggame.png\" alt=\"PongGame.png\" width=\"743\" height=\"574\"\/><li>Click the <img src=\".\/images\/gamestackflag.png\" alt=\"gamestackflag.png\"\/> to start the game. You may choose to use the <img src=\".\/images\/gamestackfullscreen.png\" alt=\"gamestackfullscreen.png\"\/> button to play the game in full screen mode<\/li><li>Follow the instructions on screen to start the game. Note that the left paddle is controlled by the W and S keys and the right paddle is controlled by the Up and Down Arrow keys (we will be able to change the controls to a single player game vs the Computer later in this exercise).<\/li><li>Note the game ends once one of the players (Left or Right) reaches 4 points (we will change this later in the exercise).<\/li><\/ol><\/li><li>Adjust the speed of the ball<ol><li>Select the Stage.<\/li><img class=\"alignleft\" src=\".\/images\/courseintroduction-stage.png\" alt=\"Stage.png\"\/><li>On the Scripts Tab find <img src=\".\/images\/focusarea1.png\" alt=\"FocusArea1.png\"\/>. <\/li><li>Inside <img src=\".\/images\/focusarea1.png\" alt=\"FocusArea1.png\"\/>  change the BallSpeed variable from 7 to a different number<\/li><li>After changing the BallSpeed variable click the <img src=\".\/images\/gamestackflag.png\" alt=\"gamestackflag.png\"\/> to make sure the changes are recognized by the program and play the game with the new settings.<\/li><li>Repeat steps a-d as necessary to determine the best BallSpeed value to make the game  as \"fun\" as possible.<\/li><\/ol><\/li><li>Consider the following questions<ol><li>What happens if you assign a negative number to the variable BallSpeed?<\/li><li>What happens if you assign the number 0 to the variable BallSpeed?<\/li><li>How does increasing the speed of the ball effect game play?<\/li><li>What did you determine was the best value for the variable BallSpeed to achieve the most “fun” for the pong game?<\/li><\/ol><\/li><li>Change the required score to win the game<ol><li>Select the stage.<\/li><img class=\"alignleft\" src=\".\/images\/courseintroduction-stage.png\" alt=\"Stage.png\"\/><li>From the Scripts tab find <img src=\".\/images\/focusarea2.png\" alt=\"FocusArea2.png\"\/> and change the Win Score for each team.<\/li><li>Select the <img src=\".\/images\/gamestackflag.png\" alt=\"gamestackflag.png\"\/> to play the game and test your changes.<\/li><\/ol><\/li><li>Consider the following questions:<ol><li>Why is the actual win score one more than the number you type into <img src=\".\/images\/winscore.png\" alt=\"WinScore.png\"\/>?<\/li><li>How does it affect the game to have different win scores assigned to the Left team and the Right team?<\/li><li>What happens if the WinScore is set to be more than 10?<\/li><\/ol><\/li><li>Change the game from Player vs Player to Player vs Computer:<p>Both paddles have programming blocks attached to them that can turn Computer AI on and off. If turned on, there are 3 AI Levels. AI Level 1 plays poorly, Level 2 is slower to react to the ball but plays tough and AI Level 3 is a very difficult opponent.<\/p><ol><li>Select the sprite of the paddle (Left or Right) that you want to have Computer AI turned on.<\/li><img class=\"alignleft\" src=\".\/images\/courseintroduction-spritespaddle.png\" alt=\"Paddle.png\"\/><li>Note that the AILevel is set to 0 - this means that the AI is turned off and the paddle is controlled by the player using whichever keys are assigned to move the paddle. Change the 0 to either a 1, 2, or 3 depending on the difficulty of Computer opponent youwant to play against. <\/li><img class=\"alignleft\" src=\".\/images\/courseintroduction-finalai.png\" alt=\"FinalAI.png\"\/><li>Click the <img src=\".\/images\/gamestackflag.png\" alt=\"gamestackflag.png\"\/> and play the game to test the changes.<\/li><\/ol><\/li><li>Consider the following questions:<ol><li>What differences in game play did you notice from AI Level 1, 2 and 3?<\/li><li>Can both paddles be set to an AI Level?<\/li><li>How is the game effected by using AI on one paddle and adjusting the ball speed?<\/li><\/ol><\/li><li>Submit your final work:<ol><li>Save a .stack file with the settings for the most \"fun\" version of PongPro.<\/li><li>On a separate piece of paper write a summary explaining the settings you used for the most \"fun\" version of PongPro.<\/li><li>Continue writing your summary explaining what settings made the game less \"fun\"or created poor game play.<\/li><li>Follow your teachers instructions to submit the .stack file and your written paragraphs to complete the exercise.<\/li><\/ol><\/li><\/ol><h1>Extra Credit<\/h1><ol><li>Set up a Computer vs Computer game and track results of different AILevels playing against each other.<\/li><li>Set up a AILevel 1 vs AILevel 3 game and adjust the winning score to see if you can get AILevel 1 to win.<\/li><\/ol><!--page:~~course-introduction-writing-exercise~~-->","link":"","mod":"course-introduction","movie":null,"name":"course-introduction-gamestack-exercise","promptfile":null,"prompts":null,"reference":null,"text":null,"title":"Game Stack Exercise"}]},{"bIsChecked":true,"name":"history-of-game-development","title":"History of Game Development","topics":[{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"history-of-game-development","movie":".\/video\/history-overview-micro-1.mp4","name":"Overview","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"million dollar industry"},{"order":0,"points":0,"sticky":false,"text":"multi-million dollar industry"},{"order":0,"points":0,"sticky":false,"text":"billion dollar industry"},{"order":0,"points":100,"sticky":false,"text":"multi-billion dollar industry"}],"failure":{"button":null,"message":"Video game development is now a multi-billion dollar industry."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn1-history-overview-micro-1","number_of_choices":4,"question":"As of 2015, video game development is a:","start":3600,"success":{"button":null,"message":"Video game development is now a multi-billion dollar industry."},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"World War I"},{"order":0,"points":0,"sticky":false,"text":"The 1950's"},{"order":0,"points":100,"sticky":false,"text":"World War II"},{"order":0,"points":0,"sticky":false,"text":"The first World's Fair"}],"failure":{"button":null,"message":"World War II saw the development of many new technologies later used to develop video games. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn2-history-overview-micro-1","number_of_choices":4,"question":"Much of the technology used to develop video games was first created during:","start":3600,"success":{"button":null,"message":"World War II saw the development of many new technologies later used to develop video games. "},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Theoretical Intelligence Test"},{"order":0,"points":0,"sticky":false,"text":"Goostman Cognitive Test "},{"order":0,"points":0,"sticky":false,"text":"Intelligence Quotient Test"},{"order":0,"points":100,"sticky":false,"text":"Turing Test"}],"failure":{"button":null,"message":"The test is named after Alan Turing. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn3-history-overview-micro-1","number_of_choices":4,"question":"What is the name of the test used to determine if a computer's artificial intelligence is indistinguishable from a human?","start":3600,"success":{"button":null,"message":"The test is named after Alan Turing. "},"type":null}],"reference":"history-of-game-development-1","text":null,"title":"Overview"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"history-of-game-development","movie":".\/video\/history-overview-micro-2.mp4","name":"Console Generations","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"Four"},{"order":0,"points":100,"sticky":false,"text":"Eight"},{"order":0,"points":0,"sticky":false,"text":"Twelve"},{"order":0,"points":0,"sticky":false,"text":"Three"}],"failure":{"button":null,"message":"There have been eight console \"generations\", so far!"},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn4-history-overview-micro-2","number_of_choices":4,"question":"This curriculum identifies how many distinct video game console generations?","start":3600,"success":{"button":null,"message":"There have been eight console \"generations\", so far!"},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Atari 2600"},{"order":0,"points":0,"sticky":false,"text":"Sega Genesis"},{"order":0,"points":0,"sticky":false,"text":"Microsoft Xbox "},{"order":0,"points":100,"sticky":false,"text":"Playstation 4"}],"failure":{"button":null,"message":"Playstation 4 was released in 2013."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn5-history-overview-micro-2","number_of_choices":4,"question":"Which of the following is considered a current generation console?","start":3600,"success":{"button":null,"message":"Playstation 4 was released in 2013."},"type":null}],"reference":"history-of-game-development-1","text":null,"title":"Console Generations"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"history-of-game-development","movie":".\/video\/history-overview-micro-3.mp4","name":"Non Digital Games","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"Monopoly "},{"order":0,"points":0,"sticky":false,"text":"Checkers"},{"order":0,"points":0,"sticky":false,"text":"Magic: The Gathering"},{"order":21,"points":100,"sticky":false,"text":"All of the above"}],"failure":{"button":null,"message":"Each of these games also have digital, video game versions. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn6-history-overview-micro-3","number_of_choices":4,"question":"Which of the following exists as a non-digital game?","start":3600,"success":{"button":null,"message":"Each of these games also have digital, video game versions. "},"type":"Multiple"}],"reference":"history-of-game-development-1","text":null,"title":"Non Digital Games"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"history-of-game-development","movie":".\/video\/history-overview-micro-4.mp4","name":"Video Game Genres","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"Platform jumper games"},{"order":0,"points":0,"sticky":false,"text":"Non-digital card games"},{"order":0,"points":0,"sticky":false,"text":"Eastern role-playing games"},{"order":0,"points":0,"sticky":false,"text":"Monopoly"}],"failure":{"button":null,"message":"The original Super Mario Bros. falls in the arcade platform jumper genre."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn7-history-overview-micro-4","number_of_choices":4,"question":"Which of these is a sub-genre of the Arcade game genre?","start":3600,"success":{"button":null,"message":"The original Super Mario Bros. falls in the arcade platform jumper genre."},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Arcade games"},{"order":0,"points":100,"sticky":false,"text":"Puzzle games"},{"order":0,"points":0,"sticky":false,"text":"Role-playing games"},{"order":0,"points":0,"sticky":false,"text":"Sports games"}],"failure":{"button":null,"message":"The puzzle game genre also includes maze games such as Pacman."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn8-history-overview-micro-4","number_of_choices":4,"question":"Trivia games are classified as what genre of video games?","start":3600,"success":{"button":null,"message":"The puzzle game genre also includes maze games such as Pacman."},"type":"Multiple"}],"reference":"history-of-game-development-1","text":null,"title":"Video Game Genres"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"history-of-game-development","movie":".\/video\/history-overview-micro-5.mp4","name":"Designers and Developers","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"Sid Meier's Pirates"},{"order":0,"points":0,"sticky":false,"text":"Donkey Kong"},{"order":0,"points":100,"sticky":false,"text":"Tetris"},{"order":0,"points":0,"sticky":false,"text":"Mario Bros."}],"failure":{"button":null,"message":"Pajitnov was only 30 when Tetris became a huge hit in the United States."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn9-history-overview-micro-5","number_of_choices":4,"question":"Alexey Pajitnov is most famous for his work on what video game?","start":3600,"success":{"button":null,"message":"Pajitnov was only 30 when Tetris became a huge hit in the United States."},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Sid Meier's Civilization V"},{"order":0,"points":100,"sticky":false,"text":"Legend of Zelda"},{"order":0,"points":0,"sticky":false,"text":"Tetris"},{"order":0,"points":0,"sticky":false,"text":"Monopoly"}],"failure":{"button":null,"message":"Miyamoto also created Mario Bros. and Donkey Kong."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn10-history-overview-micro-5","number_of_choices":4,"question":"Which of the following video games is credited to Shigeru Miyamoto?","start":3600,"success":{"button":null,"message":"Miyamoto also created Mario Bros. and Donkey Kong."},"type":null}],"reference":"history-of-game-development-1","text":null,"title":"Designers and Developers"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"history-of-game-development","movie":".\/video\/history-technology-1930s-micro-1.mp4","name":"History of Video Game Technology 1930s","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"the world's first working computer"},{"order":0,"points":0,"sticky":false,"text":"mass produced in the 1930's"},{"order":0,"points":0,"sticky":false,"text":"the first machine to beat a human in chess"},{"order":0,"points":100,"sticky":false,"text":"a hypothetical device "}],"failure":{"button":null,"message":"The Turing Machine is useful in describing how a modern computer works. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn11-history-technology-1930s-micro-1","number_of_choices":4,"question":"The Turing Machine was:","start":3600,"success":{"button":null,"message":"The Turing Machine is useful in describing how a modern computer works. "},"type":"Multiple"},{"choices":[{"order":0,"points":100,"sticky":false,"text":"central processing unit"},{"order":0,"points":0,"sticky":false,"text":"joystick"},{"order":0,"points":0,"sticky":false,"text":"radio"},{"order":0,"points":0,"sticky":false,"text":"monitor"}],"failure":{"button":null,"message":"The Turing Machine also helps us understand the limits of mechanical computations. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn12-history-technology-1930s-micro-1","number_of_choices":4,"question":"The Turing Machine is useful in explaining how a _____ works.","start":3600,"success":{"button":null,"message":"The Turing Machine also helps us understand the limits of mechanical computations. "},"type":"Multiple"}],"reference":"history-of-game-development-2","text":null,"title":"History of Video Game Technology 1930s"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"history-of-game-development","movie":".\/video\/history-technology-1940s-micro-2.mp4","name":"History of Video Game Technology 1940s","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"keyboard"},{"order":0,"points":0,"sticky":false,"text":"video monitor "},{"order":0,"points":100,"sticky":false,"text":"trackball"},{"order":0,"points":0,"sticky":false,"text":"B-17 bomber"}],"failure":{"button":null,"message":"The trackball was invented by Ralph Benjamin while working for the British Royal Navy  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn13-history-technology-1940s-micro-2","number_of_choices":4,"question":"The _____ was invented in the World War II era to improve radar accuracy.","start":3600,"success":{"button":null,"message":"The trackball was invented by Ralph Benjamin while working for the British Royal Navy  "},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"keyboard"},{"order":0,"points":100,"sticky":false,"text":"joystick "},{"order":0,"points":0,"sticky":false,"text":"mouse"},{"order":0,"points":0,"sticky":false,"text":"calculator"}],"failure":{"button":null,"message":"At the time, the computer mouse had not yet been invented. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn14-history-technology-1940s-micro-2","number_of_choices":4,"question":"The trackball was an improvement over the previously used _____ because it was more accurate and easier to use.","start":3600,"success":{"button":null,"message":"At the time, the computer mouse had not yet been invented. "},"type":null}],"reference":"history-of-game-development-2","text":null,"title":"History of Video Game Technology 1940s"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"history-of-game-development","movie":".\/video\/history-technology-1950s-micro-3.mp4","name":"History of Video Game Technology 1950s","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"the popularity of radio"},{"order":0,"points":0,"sticky":false,"text":"censorship"},{"order":0,"points":100,"sticky":false,"text":"World War II"},{"order":0,"points":0,"sticky":false,"text":"World War I"}],"failure":{"button":null,"message":"By the 1950's television were becoming much more common in households. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn15-history-technology-1950s-micro-3","number_of_choices":4,"question":"Although the television was introduced to the public in the late 1930's, they were not mass produced until the 1950's because of _____.","start":3600,"success":{"button":null,"message":"By the 1950's television were becoming much more common in households. "},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"court"},{"order":0,"points":100,"sticky":false,"text":"cathode ray oscilloscope "},{"order":0,"points":0,"sticky":false,"text":"Atari 2600"},{"order":0,"points":0,"sticky":false,"text":"board"}],"failure":{"button":null,"message":"The game was a big hit for visitors touring through the Brookhaven National Laboratory."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn16-history-technology-1950s-micro-3","number_of_choices":4,"question":"In 1958, William Higinbotham invented a game that was played on a _____, called Tennis for Two.","start":3600,"success":{"button":null,"message":"The game was a big hit for visitors touring through the Brookhaven National Laboratory."},"type":null}],"reference":"history-of-game-development-2","text":null,"title":"History of Video Game Technology 1950s"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"history-of-game-development","movie":".\/video\/history-technology-1960s-micro-4.mp4","name":"History of Video Game Technology 1960s","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"joystick"},{"order":0,"points":0,"sticky":false,"text":"Turning Machine"},{"order":0,"points":100,"sticky":false,"text":"keyboard"},{"order":0,"points":0,"sticky":false,"text":"radar trackball"}],"failure":{"button":null,"message":"It was the beginning of what we think of as personal computers today. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn17-history-technology-1960s-micro-4","number_of_choices":4,"question":"The video display terminal combined cathode ray tube technology and a _____. ","start":3600,"success":{"button":null,"message":"It was the beginning of what we think of as personal computers today. "},"type":null},{"choices":[{"order":0,"points":100,"sticky":false,"text":"Massachusetts Institute of Technology (MIT)"},{"order":0,"points":0,"sticky":false,"text":"University of California, Irvine"},{"order":0,"points":0,"sticky":false,"text":"Stanford University"},{"order":0,"points":0,"sticky":false,"text":"Harvard University"}],"failure":{"button":null,"message":"The game was wildly popular on the MIT campus."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn18-history-technology-1960s-micro-4","number_of_choices":4,"question":"In 1962, students at _____ invented the game Space War to show off the capabilities of the computer. ","start":3600,"success":{"button":null,"message":"The game was wildly popular on the MIT campus."},"type":null}],"reference":"history-of-game-development-2","text":null,"title":"History of Video Game Technology 1960s"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"history-of-game-development","movie":".\/video\/history-technology-1970s-micro-5.mp4","name":"History of Video Game Technology 1970s","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"1970"},{"order":0,"points":100,"sticky":false,"text":"1971"},{"order":0,"points":0,"sticky":false,"text":"1972"},{"order":0,"points":0,"sticky":false,"text":"1973"}],"failure":{"button":null,"message":"The game was called Galaxy Game and cost ten cents to play. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn19-history-technology-1970s-micro-5","number_of_choices":4,"question":"The first coin operated video game was installed at the Stanford University student union in _____.","start":3600,"success":{"button":null,"message":"The game was called Galaxy Game and cost ten cents to play. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Real Online Memory"},{"order":0,"points":0,"sticky":false,"text":"Read Online Memory"},{"order":0,"points":100,"sticky":false,"text":"Read Only Memory"},{"order":0,"points":0,"sticky":false,"text":"Read Only Mega-Processor"}],"failure":{"button":null,"message":"The Atari 2600 used ROM game cartridges, allowing for nearly unlimited game titles."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn20-history-technology-1970s-micro-5","number_of_choices":4,"question":"When describing game cartridges, ROM stands for:","start":3600,"success":{"button":null,"message":"The Atari 2600 used ROM game cartridges, allowing for nearly unlimited game titles."},"type":"Multiple"}],"reference":"history-of-game-development-2","text":null,"title":"History of Video Game Technology 1970s"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"history-of-game-development","movie":".\/video\/history-technology-1980s-micro-6.mp4","name":"History of Video Game Technology 1980s","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"CD-ROM"},{"order":0,"points":0,"sticky":false,"text":"Online"},{"order":0,"points":0,"sticky":false,"text":"Joystick"},{"order":0,"points":100,"sticky":false,"text":"Mouse"}],"failure":{"button":null,"message":"At the time, this was considered a risky move, as the mouse had not yet proven its usefulness or popularity. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn21-history-technology-1980s-micro-6","number_of_choices":4,"question":"In the 1980's Microsoft included _____ functionality with its MS-DOS program, Microsoft Word.  ","start":3600,"success":{"button":null,"message":"At the time, this was considered a risky move, as the mouse had not yet proven its usefulness or popularity. "},"type":null},{"choices":[{"order":0,"points":100,"sticky":false,"text":"D-pad"},{"order":0,"points":0,"sticky":false,"text":"Trackball"},{"order":0,"points":0,"sticky":false,"text":"Joystick"},{"order":0,"points":0,"sticky":false,"text":"Mouse"}],"failure":{"button":null,"message":"Nintendo had many arcade game successes in the early 1980s, such as Donkey Kong. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn22-history-technology-1980s-micro-6","number_of_choices":4,"question":"The Nintendo Entertainment System (NES) used an 8-bit micro-processor, played ROM cartridges, and used the first _____ controller.  ","start":3600,"success":{"button":null,"message":"Nintendo had many arcade game successes in the early 1980s, such as Donkey Kong. "},"type":null}],"reference":"history-of-game-development-2","text":null,"title":"History of Video Game Technology 1980s"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"history-of-game-development","movie":".\/video\/history-technology-1990s-micro-7.mp4","name":"History of Video Game Technology 1990s","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"color graphics"},{"order":0,"points":100,"sticky":false,"text":"3-D"},{"order":0,"points":0,"sticky":false,"text":"hand-held gaming"},{"order":0,"points":0,"sticky":false,"text":"wireless controller "}],"failure":{"button":null,"message":"Unfortunately, Virtual Boy was considered a market failure. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn23-history-technology-1990s-micro-7","number_of_choices":4,"question":"Nintendo's Virtual Boy brought _____ technology to the commercial spotlight for the first time.  ","start":3600,"success":{"button":null,"message":"Unfortunately, Virtual Boy was considered a market failure. "},"type":null},{"choices":[{"order":0,"points":100,"sticky":false,"text":"CD-ROM"},{"order":0,"points":0,"sticky":false,"text":"digital download"},{"order":0,"points":0,"sticky":false,"text":"floppy disks"},{"order":0,"points":0,"sticky":false,"text":"Gameboy"}],"failure":{"button":null,"message":"CD-ROM game storage allowed for much more storage space than ROM- cartridges.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn24-history-technology-1990s-micro-7","number_of_choices":4,"question":"By the late 1990's _____ began to replace ROM cartridges as the standard for purchasing video games. ","start":3600,"success":{"button":null,"message":"CD-ROM game storage allowed for much more storage space than ROM- cartridges.  "},"type":null}],"reference":"history-of-game-development-2","text":null,"title":"History of Video Game Technology 1990s"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"history-of-game-development","movie":".\/video\/history-technology-2000s-micro-8.mp4","name":"History of Video Game Technology 2000s","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"10,000"},{"order":0,"points":0,"sticky":false,"text":"one million"},{"order":0,"points":100,"sticky":false,"text":"355 million"},{"order":0,"points":0,"sticky":false,"text":"3 billion"}],"failure":{"button":null,"message":"The Playstation 2 also allowed access to the Internet. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn25-history-technology-2000s-micro-8","number_of_choices":4,"question":"The Sony Playstation 2 is the best selling console of all time, selling over _____ units to date.","start":3600,"success":{"button":null,"message":"The Playstation 2 also allowed access to the Internet. "},"type":"Multiple"},{"choices":[{"order":0,"points":100,"sticky":false,"text":"superior graphics"},{"order":0,"points":0,"sticky":false,"text":"Cheaper prices"},{"order":0,"points":0,"sticky":false,"text":"downloadable games"},{"order":21,"points":0,"sticky":false,"text":"All of the above"}],"failure":{"button":null,"message":"Gamers were also able to download patches and bug fixes from the Internet directly to their console."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn26-history-technology-2000s-micro-8","number_of_choices":4,"question":"Both the original Sony Playstation 2 and Microsoft's Xbox offered _____ over previous consoles. ","start":3600,"success":{"button":null,"message":"Gamers were also able to download patches and bug fixes from the Internet directly to their console."},"type":"Multiple"}],"reference":"history-of-game-development-2","text":null,"title":"History of Video Game Technology 2000s"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"history-of-game-development","movie":".\/video\/history-technology-today-micro-9.mp4","name":"History of Video Game Technology Today","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"8-bit games"},{"order":0,"points":0,"sticky":false,"text":"D-pad controllers"},{"order":0,"points":100,"sticky":false,"text":"mobile gaming apps"},{"order":0,"points":0,"sticky":false,"text":"CD-ROM"}],"failure":{"button":null,"message":"This trend coincides with the popularity of smartphones and tablets. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn27-history-technology-today-micro-","number_of_choices":4,"question":"Of the following, the biggest trend in today's video game market is _____.","start":3600,"success":{"button":null,"message":"This trend coincides with the popularity of smartphones and tablets. "},"type":null}],"reference":"history-of-game-development-2","text":null,"title":"History of Video Game Technology Today"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"history-of-game-development","movie":".\/video\/history-evolution-intro-1.mp4","name":"Evolution of the Game Industry","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"3D graphics on home consoles"},{"order":0,"points":0,"sticky":false,"text":"CD-ROM"},{"order":0,"points":100,"sticky":false,"text":"Pong"},{"order":0,"points":0,"sticky":false,"text":"The Internet"}],"failure":{"button":null,"message":"Pong may have been primitive by today's standards but it was a huge hit with consumers at the time. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn28-history-evolution-intro-micro-1","number_of_choices":4,"question":"Of the following, which technology most likey came first?","start":3600,"success":{"button":null,"message":"Pong may have been primitive by today's standards but it was a huge hit with consumers at the time. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Six"},{"order":0,"points":0,"sticky":false,"text":"Four"},{"order":0,"points":0,"sticky":false,"text":"Twelve "},{"order":0,"points":100,"sticky":false,"text":"Eight"}],"failure":{"button":null,"message":"8 generations since the 1970's demonstrates the incredible growth and popularity of video games. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn29-history-evolution-intro-micro-1","number_of_choices":4,"question":"How many generations of consoles are typically identified in the evolution of the home video game market?","start":3600,"success":{"button":null,"message":"8 generations since the 1970's demonstrates the incredible growth and popularity of video games. "},"type":"Multiple"}],"reference":"history-of-game-development-3","text":null,"title":"Evolution of the Game Industry"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"history-of-game-development","movie":".\/video\/history-evolution-firstgen-2.mp4","name":"1st Generation","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"1972"},{"order":0,"points":0,"sticky":false,"text":"1973"},{"order":0,"points":100,"sticky":false,"text":"1974"},{"order":0,"points":0,"sticky":false,"text":"1975"}],"failure":{"button":null,"message":"Pong was a huge success in 1974 and spawned many competitors in just a few years. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn30-history-evolution-firstgen-micro-2","number_of_choices":4,"question":"Pong was the featured game on the Atari Odyssey system released in:","start":3600,"success":{"button":null,"message":"Pong was a huge success in 1974 and spawned many competitors in just a few years. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"played"},{"order":0,"points":0,"sticky":false,"text":"purchased"},{"order":0,"points":0,"sticky":false,"text":"stolen"},{"order":0,"points":100,"sticky":false,"text":"imitated"}],"failure":{"button":null,"message":"Pong's popularity showed that video game development was a serious industry in the marketplace. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn31-history-evolution-firstgen-micro-2","number_of_choices":4,"question":"By 1979, Pong was so heavily _____ that it set the stage for the first video game industry crash.","start":3600,"success":{"button":null,"message":"Pong's popularity showed that video game development was a serious industry in the marketplace. "},"type":"Multiple"}],"reference":"history-of-game-development-3","text":null,"title":"1st Generation"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"history-of-game-development","movie":".\/video\/history-evolution-secondgen-3.mp4","name":"2nd Generation","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"Genesis"},{"order":0,"points":100,"sticky":false,"text":"2600"},{"order":0,"points":0,"sticky":false,"text":"7200"},{"order":0,"points":0,"sticky":false,"text":"360"}],"failure":{"button":null,"message":"The Atari 2600 was released in America in 1977."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn32-history-evolution-secondgen-micro-3","number_of_choices":4,"question":"The Atari _____ was the most successful second generation video game console from the 1970s. ","start":3600,"success":{"button":null,"message":"The Atari 2600 was released in America in 1977."},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Robot called R.O.B."},{"order":0,"points":0,"sticky":false,"text":"joystick"},{"order":0,"points":100,"sticky":false,"text":"wheel-controller"},{"order":0,"points":0,"sticky":false,"text":"D-pad"}],"failure":{"button":null,"message":"At the time, a wheel-controller was unheard of on a home console. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn33-history-evolution-secondgen-micro-3","number_of_choices":4,"question":"The Atari 2600 included a _____ for playing racing games.  ","start":3600,"success":{"button":null,"message":"At the time, a wheel-controller was unheard of on a home console. "},"type":"Multiple"},{"choices":[{"order":0,"points":100,"sticky":false,"text":"Pacman"},{"order":0,"points":0,"sticky":false,"text":"The Elder Scrolls V: Skyrim "},{"order":0,"points":0,"sticky":false,"text":"Pong"},{"order":0,"points":0,"sticky":false,"text":"Tennis for Two"}],"failure":{"button":null,"message":"Pacman was a cultural phenomenon in the early 1980's"},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn34-history-evolution-secondgen-micro-3","number_of_choices":4,"question":"The late 1970's saw the rise of mainstream popularity of video games thanks to arcade mega-hits like Donkey Kong and ______.","start":3600,"success":{"button":null,"message":"Pacman was a cultural phenomenon in the early 1980's"},"type":"Multiple"}],"reference":"history-of-game-development-3","text":null,"title":"2nd Generation"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"history-of-game-development","movie":".\/video\/history-evolution-thirdgen-4.mp4","name":"3rd Generation","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"The Super NES"},{"order":0,"points":0,"sticky":false,"text":"The Atari 2600"},{"order":0,"points":0,"sticky":false,"text":"Gameboy"},{"order":0,"points":100,"sticky":false,"text":"Nintendo Entertainment System"}],"failure":{"button":null,"message":"Released in America in 1985, the NES was a tremendous success. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn35-history-evolution-thirdgen-micro-4","number_of_choices":4,"question":"Nintendo's first gaming system is called _____.","start":3600,"success":{"button":null,"message":"Released in America in 1985, the NES was a tremendous success. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"wheel for racing games"},{"order":0,"points":100,"sticky":false,"text":"D-pad"},{"order":0,"points":0,"sticky":false,"text":"wireless connection"},{"order":0,"points":0,"sticky":false,"text":"monitor screen"}],"failure":{"button":null,"message":"Along with the controller, the NES system also came with a light-sensor gun and a robot called R.O.B."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn36-history-evolution-thirdgen-micro-4","number_of_choices":4,"question":"The Nintendo Entertainment System came with a newly designed, multi-button controller featuring a _____.","start":3600,"success":{"button":null,"message":"Along with the controller, the NES system also came with a light-sensor gun and a robot called R.O.B."},"type":"Multiple"}],"reference":"history-of-game-development-3","text":null,"title":"3rd Generation"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"history-of-game-development","movie":".\/video\/history-evolution-fourthgen-5.mp4","name":"4th Generation","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"8-bit"},{"order":0,"points":0,"sticky":false,"text":"12-bit"},{"order":0,"points":100,"sticky":false,"text":"16-bit"},{"order":0,"points":0,"sticky":false,"text":"32-bit"}],"failure":{"button":null,"message":"The 16-bit system also featured full spectrum color and amazing sound quality."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn37-history-evolution-forthgen-micro-5","number_of_choices":4,"question":"The Sega Genesis featured _____ graphics.","start":3600,"success":{"button":null,"message":"The 16-bit system also featured full spectrum color and amazing sound quality."},"type":"Multiple"},{"choices":[{"order":0,"points":100,"sticky":false,"text":"Super NES"},{"order":0,"points":0,"sticky":false,"text":"Gameboy"},{"order":0,"points":0,"sticky":false,"text":"Atari 7200"},{"order":0,"points":0,"sticky":false,"text":"Dreamcaster"}],"failure":{"button":null,"message":"The Super NES keep Nintendo at the top of consoles sales and the end of the fourth generation. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn38-history-evolution-forthgen-micro-5","number_of_choices":4,"question":"Nintendo introduced the _____ to America in 1990, which also featured 16-bit graphics. ","start":3600,"success":{"button":null,"message":"The Super NES keep Nintendo at the top of consoles sales and the end of the fourth generation. "},"type":"Multiple"}],"reference":"history-of-game-development-3","text":null,"title":"4th Generation"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"history-of-game-development","movie":".\/video\/history-evolution-fifthgen-6.mp4","name":"5th Generation","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"Saturn "},{"order":0,"points":0,"sticky":false,"text":"Omnyvox "},{"order":0,"points":0,"sticky":false,"text":"Dreamcaster"},{"order":0,"points":100,"sticky":false,"text":"Playstation"}],"failure":{"button":null,"message":"The Sony Playstation is an immediate hit. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn39-history-evolution-fifthgen-micro-6","number_of_choices":4,"question":"In the fifth generation of video game consoles, Sony enters the market with the release of the _____ home console.","start":3600,"success":{"button":null,"message":"The Sony Playstation is an immediate hit. "},"type":"Multiple"},{"choices":[{"order":0,"points":100,"sticky":false,"text":"Sony Playstation "},{"order":0,"points":0,"sticky":false,"text":"Microsoft Xbox"},{"order":0,"points":0,"sticky":false,"text":"Sega Saturn"},{"order":0,"points":0,"sticky":false,"text":"Nintendo 64"}],"failure":{"button":null,"message":"The Sony Playstation becomes the number one selling video game console of the fifth generation.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn40-history-evolution-fifthgen-micro-6","number_of_choices":4,"question":"The clear market winner of the fifth generation of video game consoles is the _____.","start":3600,"success":{"button":null,"message":"The Sony Playstation becomes the number one selling video game console of the fifth generation.  "},"type":"Multiple"}],"reference":"history-of-game-development-3","text":null,"title":"5th Generation"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"history-of-game-development","movie":".\/video\/history-evolution-sixthgen-7.mp4","name":"6th Generation","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"Sony Playstation 2"},{"order":0,"points":0,"sticky":false,"text":"Microsoft Xbox"},{"order":0,"points":0,"sticky":false,"text":"Nintendo Gamecube"},{"order":0,"points":0,"sticky":false,"text":"Nintendo Entertainment system"}],"failure":{"button":null,"message":"The Sony Playstation 2 dominated the market for years."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn41-history-evolution-sixthgen-micro-7 ","number_of_choices":4,"question":"Which of the following sixth generation consoles was the most popular gaming system of all time, up to that point?","start":3600,"success":{"button":null,"message":"The Sony Playstation 2 dominated the market for years."},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Atari, Sony, and Microsoft"},{"order":0,"points":0,"sticky":false,"text":"Sony, Sega, and Nintendo"},{"order":0,"points":100,"sticky":false,"text":"Nintendo, Microsoft, and Sony"},{"order":0,"points":0,"sticky":false,"text":"Nintendo, Sega, and Microsoft"}],"failure":{"button":null,"message":"Nintendo, Microsoft, and Sony were the top three in the sixth generation \"console wars\"."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn42-history-evolution-sixthgen-micro-7 ","number_of_choices":4,"question":"The top three companies selling game consoles from 2000-2005 were:","start":3600,"success":{"button":null,"message":"Nintendo, Microsoft, and Sony were the top three in the sixth generation \"console wars\"."},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"ROM cartridges"},{"order":0,"points":100,"sticky":false,"text":"PC-like processors"},{"order":0,"points":0,"sticky":false,"text":"mono sound"},{"order":0,"points":0,"sticky":false,"text":"cloud saving"}],"failure":{"button":null,"message":"Because they had processors that rivaled some PC's, this is the first generation of consoles to fully integrate with the Internet."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn43-history-evolution-sixthgen-micro-7 ","number_of_choices":4,"question":"Sixth Generation consoles boast near picture perfect graphics and _____.","start":3600,"success":{"button":null,"message":"Because they had processors that rivaled some PC's, this is the first generation of consoles to fully integrate with the Internet."},"type":"Multiple"}],"reference":"history-of-game-development-3","text":null,"title":"6th Generation"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"history-of-game-development","movie":".\/video\/history-evolution-seventhgen-8.mp4","name":"7th Generation","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"Sega Dreamcaster"},{"order":0,"points":0,"sticky":false,"text":"Microsoft Xbox One"},{"order":0,"points":0,"sticky":false,"text":"Sony Playstation"},{"order":0,"points":100,"sticky":false,"text":"Nintendo Wii"}],"failure":{"button":null,"message":"Seventh gen consoles also include Microsoft's Xbox 360 and Sony's Playstation 3. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn44-history-evolution-seventhgen-micro-8","number_of_choices":4,"question":"Which of the following is a seventh generation console?","start":3600,"success":{"button":null,"message":"Seventh gen consoles also include Microsoft's Xbox 360 and Sony's Playstation 3. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"the Atari 2600"},{"order":0,"points":0,"sticky":false,"text":"Pong"},{"order":0,"points":100,"sticky":false,"text":"Hollywood blockbusters"},{"order":0,"points":0,"sticky":false,"text":"fifth generation games"}],"failure":{"button":null,"message":"Because of massive sales and profits, the seventh gen is sometimes called the \"golden age\" of mega developers, such as Blizzard and Bungie. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn45-history-evolution-seventhgen-micro-8","number_of_choices":4,"question":"Several seventh gen game titles rival _____ in terms of sales.","start":3600,"success":{"button":null,"message":"Because of massive sales and profits, the seventh gen is sometimes called the \"golden age\" of mega developers, such as Blizzard and Bungie. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"CD-ROM"},{"order":0,"points":100,"sticky":false,"text":"digital downloads"},{"order":0,"points":0,"sticky":false,"text":"advanced graphics"},{"order":0,"points":0,"sticky":false,"text":"changes in copyright laws"}],"failure":{"button":null,"message":"Digital downloads allows smaller studios to skip expensive manufacturing, packaging, and distribution costs. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn46-history-evolution-seventhgen-micro-8","number_of_choices":4,"question":"Because of _____, many smaller game development studios are able to reach new heights in sales and distribution.","start":3600,"success":{"button":null,"message":"Digital downloads allows smaller studios to skip expensive manufacturing, packaging, and distribution costs. "},"type":"Multiple"}],"reference":"history-of-game-development-3","text":null,"title":"7th Generation"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"history-of-game-development","movie":".\/video\/history-evolution-eigthgen-9.mp4","name":"8th Generation","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"the Sony Playstation 4 and the Nintendo Wii U"},{"order":0,"points":0,"sticky":false,"text":"the Sony Playstation 4 and the Microsoft Xbox One"},{"order":0,"points":0,"sticky":false,"text":"the Nintendo Wii U and the Microsoft Xbox One"},{"order":21,"points":100,"sticky":false,"text":"All of the above"}],"failure":{"button":null,"message":"The big three console makers, Nintendo, Microsoft, and Sony, are still the market leaders in the Eighth Generation."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn47-history-evolution-eighthgen-micro-9","number_of_choices":4,"question":"Consoles in the Eighth (and current) generation include:","start":3600,"success":{"button":null,"message":"The big three console makers, Nintendo, Microsoft, and Sony, are still the market leaders in the Eighth Generation."},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Console"},{"order":0,"points":0,"sticky":false,"text":"Zelda title"},{"order":0,"points":100,"sticky":false,"text":"PC game"},{"order":0,"points":0,"sticky":false,"text":"arcade machine"}],"failure":{"button":null,"message":"Many are drawn to the PC's greater capacity for photo-realistic graphics and versatility. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn48-history-evolution-eighthgen-micro-9","number_of_choices":4,"question":"The Eighth generation sees a resurgence in _____ sales, largely due to the success of Valve's Steam platform.","start":3600,"success":{"button":null,"message":"Many are drawn to the PC's greater capacity for photo-realistic graphics and versatility. "},"type":"Multiple"},{"choices":[{"order":0,"points":100,"sticky":false,"text":"app games"},{"order":0,"points":0,"sticky":false,"text":"classic arcade games"},{"order":0,"points":0,"sticky":false,"text":"the Valve Corporation"},{"order":0,"points":0,"sticky":false,"text":"consoles"}],"failure":{"button":null,"message":"The smartphone is responsible for creating a new type of video game consumer, called the \"casual\" player."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn49-history-evolution-eighthgen-micro-9","number_of_choices":4,"question":"The Eighth generation sees the popular rise of _____ among smartphone users.  ","start":3600,"success":{"button":null,"message":"The smartphone is responsible for creating a new type of video game consumer, called the \"casual\" player."},"type":"Multiple"}],"reference":"history-of-game-development-3","text":null,"title":"8th Generation"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"history-of-game-development","movie":".\/video\/history-evolution-nonconsole-10.mp4","name":"Non-Console Gaming","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"Internet gaming"},{"order":0,"points":0,"sticky":false,"text":"non-digital games"},{"order":0,"points":0,"sticky":false,"text":"16-bit graphics"},{"order":0,"points":0,"sticky":false,"text":"puzzle games"}],"failure":{"button":null,"message":"Internet gaming is often associated with massive multi-player games or MMOs.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn50-history-evolution-today-micro-10","number_of_choices":4,"question":"Many video game developers see _____ as the future of gaming.  ","start":3600,"success":{"button":null,"message":"Internet gaming is often associated with massive multi-player games or MMOs.  "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"the elderly"},{"order":0,"points":0,"sticky":false,"text":"sports games"},{"order":0,"points":100,"sticky":false,"text":"smart device app markets"},{"order":0,"points":0,"sticky":false,"text":"classic arcade games"}],"failure":{"button":null,"message":"Games made for smartphones and tablets are dominating sales in video games today. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn51-history-evolution-today-micro-10","number_of_choices":4,"question":"The biggest new market in video game sales is _____. ","start":3600,"success":{"button":null,"message":"Games made for smartphones and tablets are dominating sales in video games today. "},"type":"Multiple"}],"reference":"history-of-game-development-3","text":null,"title":"Non-Console Gaming"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"history-of-game-development","movie":".\/video\/history-nondigital-intro-1.mp4","name":"Exploring Non-Digital Games","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"card games"},{"order":0,"points":100,"sticky":false,"text":"non-digital games"},{"order":0,"points":0,"sticky":false,"text":"game consoles"},{"order":0,"points":0,"sticky":false,"text":"puzzle games"}],"failure":{"button":null,"message":"These non-digital games also have multiple video game versions, as well. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn52-history-nondigital-intro-micro-1","number_of_choices":4,"question":"Monopoly, checkers, and Dungeons & Dragons are all examples of: ","start":3600,"success":{"button":null,"message":"These non-digital games also have multiple video game versions, as well. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"rule books"},{"order":0,"points":0,"sticky":false,"text":"visual components"},{"order":0,"points":0,"sticky":false,"text":"social components"},{"order":0,"points":100,"sticky":false,"text":"digital downloads"}],"failure":{"button":null,"message":"Besides the game itself, all you really need is some friends and a space to play. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn53-history-nondigital-intro-micro-1","number_of_choices":4,"question":"Non-digital games generally lack _____. ","start":3600,"success":{"button":null,"message":"Besides the game itself, all you really need is some friends and a space to play. "},"type":"Multiple"}],"reference":"history-of-game-development-4","text":null,"title":"Exploring Non-Digital Games"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"history-of-game-development","movie":".\/video\/history-nondigital-whyimportant-2.mp4","name":"Non-Digital Games Importance","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"game theory and audio design"},{"order":0,"points":0,"sticky":false,"text":"game mechanics and programming"},{"order":0,"points":100,"sticky":false,"text":"game theory and game mechanics"},{"order":0,"points":0,"sticky":false,"text":"audio design and game mechanics"}],"failure":{"button":null,"message":"Non-digital games use the same philosophies of game theory and game mechanics that video games do."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn54-history-nondigital-whyimportant-micro-2","number_of_choices":4,"question":"Non-digital games demonstrate _____, just like video games do.","start":3600,"success":{"button":null,"message":"Non-digital games use the same philosophies of game theory and game mechanics that video games do."},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Monopoly"},{"order":0,"points":0,"sticky":false,"text":"checkers"},{"order":0,"points":0,"sticky":false,"text":"Settlers of Catan"},{"order":0,"points":100,"sticky":false,"text":"Dungeons & Dragons"}],"failure":{"button":null,"message":"The pen and paper classic, Dungeons & Dragons has had a huge influence on fantasy role-playing video games. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn55-history-nondigital-whyimportant-micro-2","number_of_choices":4,"question":"The video game World of Warcraft takes at least some of its style of gameplay from _____.","start":3600,"success":{"button":null,"message":"The pen and paper classic, Dungeons & Dragons has had a huge influence on fantasy role-playing video games. "},"type":"Multiple"}],"reference":"history-of-game-development-4","text":null,"title":"Non-Digital Games Importance"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"history-of-game-development","movie":".\/video\/history-nondigital-earlyboardgames-3.mp4","name":"Early Board Games","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"World of Warcraft"},{"order":0,"points":0,"sticky":false,"text":"chess"},{"order":0,"points":100,"sticky":false,"text":"senet"},{"order":0,"points":0,"sticky":false,"text":"Battleship"}],"failure":{"button":null,"message":"Senet was played by the ancient Egyptians. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn56-history-nondigital-earlyboardgames-micro-3","number_of_choices":4,"question":"Dating back to 3500 B.C., _____ is the oldest known board game.","start":3600,"success":{"button":null,"message":"Senet was played by the ancient Egyptians. "},"type":"Multiple"},{"choices":[{"order":0,"points":100,"sticky":false,"text":"Backgammon "},{"order":0,"points":0,"sticky":false,"text":"Go Fish"},{"order":0,"points":0,"sticky":false,"text":"Pong"},{"order":0,"points":0,"sticky":false,"text":"Monopoly"}],"failure":{"button":null,"message":"Backgammon was played by the ancient Egyptians. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn57-history-nondigital-earlyboardgames-micro-3","number_of_choices":4,"question":"______ is the oldest known board game still widely played today.","start":3600,"success":{"button":null,"message":"Backgammon was played by the ancient Egyptians. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"6th century, B.C. "},{"order":0,"points":0,"sticky":false,"text":"1940's"},{"order":0,"points":100,"sticky":false,"text":"6th century, A.D."},{"order":0,"points":0,"sticky":false,"text":"1920's"}],"failure":{"button":null,"message":"Chess was spread from one nation to the next via conquest and assimilation.   "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn58-history-nondigital-earlyboardgames-micro-3","number_of_choices":4,"question":"Chess dates back to the _____.","start":3600,"success":{"button":null,"message":"Chess was spread from one nation to the next via conquest and assimilation.   "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"visuals "},{"order":0,"points":100,"sticky":false,"text":"game mechanics"},{"order":0,"points":0,"sticky":false,"text":"audio components"},{"order":0,"points":0,"sticky":false,"text":"coding components"}],"failure":{"button":null,"message":"These games have game mechanics that have passed the test of time and are often imitated in modern games. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn59-history-nondigital-earlyboardgames-micro-3","number_of_choices":4,"question":"Chess, backgammon, and checkers have _____ that are as well defined and functional as any modern video game. ","start":3600,"success":{"button":null,"message":"These games have game mechanics that have passed the test of time and are often imitated in modern games. "},"type":"Multiple"}],"reference":"history-of-game-development-4","text":null,"title":"Early Board Games"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"history-of-game-development","movie":".\/video\/history-nondigital-familyboardgames-4.mp4","name":"Family Board Games","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"1983"},{"order":0,"points":100,"sticky":false,"text":"1883"},{"order":0,"points":0,"sticky":false,"text":"1783"},{"order":0,"points":0,"sticky":false,"text":"2008"}],"failure":{"button":null,"message":"Monopoly was released to the public in 1903 as a denouncement of land ownership."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn60-history-nondigital-familyboardgames-micro-4","number_of_choices":4,"question":"Parker Brothers, makers of popular board games, such as Monopoly, was founded in _____ by George s. Parker.","start":3600,"success":{"button":null,"message":"Monopoly was released to the public in 1903 as a denouncement of land ownership."},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"an audience"},{"order":0,"points":0,"sticky":false,"text":"continued availability"},{"order":0,"points":0,"sticky":false,"text":"social components"},{"order":0,"points":100,"sticky":false,"text":"complexity"}],"failure":{"button":null,"message":"Mechanically, most family board games are little more than simple games of chance and luck. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn61-history-nondigital-familyboardgames-micro-4","number_of_choices":4,"question":"Compared to most video games, family board games generally lack _____.","start":3600,"success":{"button":null,"message":"Mechanically, most family board games are little more than simple games of chance and luck. "},"type":"Multiple"}],"reference":"history-of-game-development-4","text":null,"title":"Family Board Games"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"history-of-game-development","movie":".\/video\/history-nondigital-strategygames-5.mp4","name":"Straegy Games","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"book shelf games"},{"order":0,"points":0,"sticky":false,"text":"flip book games"},{"order":0,"points":0,"sticky":false,"text":"bookworm games"},{"order":0,"points":0,"sticky":false,"text":"role-playing games "}],"failure":{"button":null,"message":"Typically these games came in boxed sets that fit on a book shelf. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn62-history-nondigital-strategygames-micro-5","number_of_choices":4,"question":"Strategy war games are also sometimes called _____.","start":3600,"success":{"button":null,"message":"Typically these games came in boxed sets that fit on a book shelf. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"simplicity"},{"order":0,"points":0,"sticky":false,"text":"cooperation"},{"order":0,"points":100,"sticky":false,"text":"real historical battles"},{"order":0,"points":0,"sticky":false,"text":"quick play sessions"}],"failure":{"button":null,"message":"These complex, competitive games could take hours to play."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn63-history-nondigital-strategygames-micro-5","number_of_choices":4,"question":"Most strategy war games focus on _____.","start":3600,"success":{"button":null,"message":"These complex, competitive games could take hours to play."},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"A large rule book"},{"order":0,"points":100,"sticky":false,"text":"A way to save progress"},{"order":0,"points":0,"sticky":false,"text":"A large game board map"},{"order":0,"points":0,"sticky":false,"text":"Cardboard pieces called \"chits\""}],"failure":{"button":null,"message":"One aspect of strategy war games is there is no AI. You will have to find another living being to play with. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn64-history-nondigital-strategygames-micro-5","number_of_choices":4,"question":"Which of the following was NOT typically part of a strategy war game?","start":3600,"success":{"button":null,"message":"One aspect of strategy war games is there is no AI. You will have to find another living being to play with. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"simulate the complexity of the rules with simpler game play"},{"order":0,"points":0,"sticky":false,"text":"Improve upon the graphics and add audio components"},{"order":0,"points":0,"sticky":false,"text":"Allow solo play when friends aren't around"},{"order":21,"points":100,"sticky":false,"text":"All of the above"}],"failure":{"button":null,"message":"If you like strategy video games, keep a book shelf game handy for a rainy day when your computer is down."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn65-history-nondigital-strategygames-micro-5","number_of_choices":4,"question":"Video game versions of strategy war games are popular because they _____.","start":3600,"success":{"button":null,"message":"If you like strategy video games, keep a book shelf game handy for a rainy day when your computer is down."},"type":"Multiple"}],"reference":"history-of-game-development-4","text":null,"title":"Strategy Games"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"history-of-game-development","movie":".\/video\/history-nondigital-penpaperrpg-6.mp4","name":"Pen and Paper Games","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"Dungeons & Dragons"},{"order":0,"points":0,"sticky":false,"text":"Tunnels & Trolls"},{"order":0,"points":0,"sticky":false,"text":"Sword & Sorcery"},{"order":0,"points":0,"sticky":false,"text":"Orcs & Men"}],"failure":{"button":null,"message":"Dungeon & Dragons is still popular as a non-digital game and is currently in their 5th edition rules set. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn67-history-nondigital-penpaperrpg-micro-6","number_of_choices":4,"question":"Gray Gygax and Dave Arneson created a table-top role-playing game called _____.","start":3600,"success":{"button":null,"message":"Dungeon & Dragons is still popular as a non-digital game and is currently in their 5th edition rules set. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"imagination"},{"order":0,"points":0,"sticky":false,"text":"having fun"},{"order":0,"points":100,"sticky":false,"text":"winning"},{"order":0,"points":0,"sticky":false,"text":"cooperation"}],"failure":{"button":null,"message":"Role-playing games don't typically have winners, they are cooperative games that unfold a story rather than a set of win conditions.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn68-history-nondigital-penpaperrpg-micro-6","number_of_choices":4,"question":"In a typical role-playing game, _____ is secondary to storytelling.","start":3600,"success":{"button":null,"message":"Role-playing games don't typically have winners, they are cooperative games that unfold a story rather than a set of win conditions.  "},"type":"Multiple"},{"choices":[{"order":0,"points":100,"sticky":false,"text":"gameplay is not limited to what was pre-planned into a game"},{"order":0,"points":0,"sticky":false,"text":"they have better audio components"},{"order":0,"points":0,"sticky":false,"text":"they have better graphics and visuals"},{"order":0,"points":0,"sticky":false,"text":"They are more popular"}],"failure":{"button":null,"message":"While graphics and sound can add much to the presentation of a computer role-playing game, players are still restricted to what content was pre-programmed into the game.   "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn69-history-nondigital-penpaperrpg-micro-6","number_of_choices":4,"question":"For many, table-top role-playing games are superior to their video game counterparts because:","start":3600,"success":{"button":null,"message":"While graphics and sound can add much to the presentation of a computer role-playing game, players are still restricted to what content was pre-programmed into the game.   "},"type":"Multiple"}],"reference":"history-of-game-development-4","text":null,"title":"Pen and Paper Games"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"history-of-game-development","movie":".\/video\/history-nondigital-advancedboardgames-7.mp4","name":"Advanced Board Games","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"never use dice"},{"order":0,"points":0,"sticky":false,"text":"never have family friendly content"},{"order":0,"points":0,"sticky":false,"text":"are always set in space"},{"order":0,"points":100,"sticky":false,"text":"use better game mechanics that are not just based on chance and luck"}],"failure":{"button":null,"message":"Advanced board games use actual game theory principles in their game design."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn70-history-nondigital-advancedboardgames-micro-7","number_of_choices":4,"question":"The core difference between a family board game and an advanced board game is that advanced board games _____.","start":3600,"success":{"button":null,"message":"Advanced board games use actual game theory principles in their game design."},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Backgammon"},{"order":0,"points":100,"sticky":false,"text":"StarCraft"},{"order":0,"points":0,"sticky":false,"text":"Monopoly"},{"order":0,"points":0,"sticky":false,"text":"Senet"}],"failure":{"button":null,"message":"StarCraft was originally developed as a video game by Blizzard, and then, later made into a board game. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn71-history-nondigital-advancedboardgames-micro-7","number_of_choices":4,"question":"_____ is an example of an original video game being reverse engineered into an advanced board game.","start":3600,"success":{"button":null,"message":"StarCraft was originally developed as a video game by Blizzard, and then, later made into a board game. "},"type":"Multiple"}],"reference":"history-of-game-development-4","text":null,"title":"Advanced Board Games"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"history-of-game-development","movie":".\/video\/history-nondigital-cardgames-8.mp4","name":"Card Games","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"Go Fish"},{"order":0,"points":0,"sticky":false,"text":"Poker"},{"order":0,"points":100,"sticky":false,"text":"the standard 52-card deck"},{"order":0,"points":0,"sticky":false,"text":"flash card games"}],"failure":{"button":null,"message":"It is quite amazing how many complex card games are derived from 52 cards in four suites and two colors. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn72-history-nondigital-cardgames-micro-8","number_of_choices":4,"question":"Until recently, most card games were variations on _____.","start":3600,"success":{"button":null,"message":"It is quite amazing how many complex card games are derived from 52 cards in four suites and two colors. "},"type":"Multiple"},{"choices":[{"order":0,"points":100,"sticky":false,"text":"collectable card game "},{"order":0,"points":0,"sticky":false,"text":"creative card game "},{"order":0,"points":0,"sticky":false,"text":"counting cards game"},{"order":0,"points":0,"sticky":false,"text":"corporate card game "}],"failure":{"button":null,"message":"Collectable card games are fairly new but wildly popular. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn73-history-nondigital-cardgames-micro-8","number_of_choices":4,"question":"Magic: The Gathering is an example of a CCG, which stands for _____.","start":3600,"success":{"button":null,"message":"Collectable card games are fairly new but wildly popular. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"by real wizards"},{"order":0,"points":100,"sticky":false,"text":"digitally online"},{"order":0,"points":0,"sticky":false,"text":"in Las Vegas casinos"},{"order":0,"points":0,"sticky":false,"text":"in the 1930's"}],"failure":{"button":null,"message":"The online version plays exactly like the card version, only your card deck is virtual. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn74-history-nondigital-cardgames-micro-8","number_of_choices":4,"question":"Magic: The Gathering is also a game played _____.","start":3600,"success":{"button":null,"message":"The online version plays exactly like the card version, only your card deck is virtual. "},"type":"Multiple"}],"reference":"history-of-game-development-4","text":null,"title":"Card Games"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"history-of-game-development","movie":".\/video\/history-genres-intro-micro-1.mp4","name":"Video Game Genres","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"characters; story"},{"order":0,"points":100,"sticky":false,"text":"themes; mechanics "},{"order":0,"points":0,"sticky":false,"text":"colors; sounds"},{"order":0,"points":0,"sticky":false,"text":"price; maturity ratings"}],"failure":{"button":null,"message":"Genres group games by board themes (like sports) and mechanics (like puzzles)"},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn75-history-genres-intro-micro-1","number_of_choices":4,"question":"Genres helps consumers see how certain games are related in terms of _____ and _____.","start":3600,"success":{"button":null,"message":"Genres group games by board themes (like sports) and mechanics (like puzzles)"},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Social games"},{"order":0,"points":0,"sticky":false,"text":"Simulation games "},{"order":0,"points":100,"sticky":false,"text":"Short games"},{"order":0,"points":0,"sticky":false,"text":"Strategy games"}],"failure":{"button":null,"message":"Length of gameplay is not a factor in determining a game's genre."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn76-history-genres-intro-micro-1","number_of_choices":4,"question":"Which of the following is NOT a broad video game genre?","start":3600,"success":{"button":null,"message":"Length of gameplay is not a factor in determining a game's genre."},"type":"Multiple"}],"reference":"history-of-game-development-5","text":null,"title":"Video Game Genres"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"history-of-game-development","movie":".\/video\/history-genres-arcade-micro-2.mp4","name":"Arcade Games","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"smallest"},{"order":0,"points":0,"sticky":false,"text":"least popular"},{"order":0,"points":0,"sticky":false,"text":"most violent"},{"order":0,"points":100,"sticky":false,"text":"largest"}],"failure":{"button":null,"message":"More released games fall under the arcade genre than any other.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn77-history-genres-arcade-micro-2","number_of_choices":4,"question":"The arcade genre is by far the _____ genre of video games.","start":3600,"success":{"button":null,"message":"More released games fall under the arcade genre than any other.  "},"type":"Multiple"},{"choices":[{"order":0,"points":100,"sticky":false,"text":"arcade game"},{"order":0,"points":0,"sticky":false,"text":"puzzle game"},{"order":0,"points":0,"sticky":false,"text":"simulation game"},{"order":0,"points":0,"sticky":false,"text":"social media game"}],"failure":{"button":null,"message":"Pinball machines were among the first games found in arcades.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn78-history-genres-arcade-micro-2","number_of_choices":4,"question":"Although not truly a video game, pinball is considered a(n) _____.","start":3600,"success":{"button":null,"message":"Pinball machines were among the first games found in arcades.  "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"boxing"},{"order":0,"points":0,"sticky":false,"text":"baseball"},{"order":0,"points":100,"sticky":false,"text":"fighting"},{"order":0,"points":0,"sticky":false,"text":"platform"}],"failure":{"button":null,"message":"Fighting games can include first-person shooters."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn79-history-genres-arcade-micro-2","number_of_choices":4,"question":"Because of the huge amount of _____ games on the market, some consider them to be in their own genre.","start":3600,"success":{"button":null,"message":"Fighting games can include first-person shooters."},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"platform games"},{"order":0,"points":0,"sticky":false,"text":"pinball machines"},{"order":0,"points":0,"sticky":false,"text":"hack 'n slash games"},{"order":0,"points":100,"sticky":false,"text":"first-person shooters"}],"failure":{"button":null,"message":"First-person shooters represent some of the most successful video games of all time. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn80-history-genres-arcade-micro-2","number_of_choices":4,"question":"Because of advances in 3-D graphics, _____ have become very popular.","start":3600,"success":{"button":null,"message":"First-person shooters represent some of the most successful video games of all time. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"action; role-playing"},{"order":0,"points":0,"sticky":false,"text":"strategy; role-playing"},{"order":0,"points":100,"sticky":false,"text":"action; skill with a controller"},{"order":0,"points":0,"sticky":false,"text":"action; strategy"}],"failure":{"button":null,"message":"This goes back to the classic stand up arcade games of the 1980's."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn81-history-genres-arcade-micro-2","number_of_choices":4,"question":"Arcade games are defined by _____ and _____. ","start":3600,"success":{"button":null,"message":"This goes back to the classic stand up arcade games of the 1980's."},"type":"Multiple"}],"reference":"history-of-game-development-5","text":null,"title":"Arcade Games"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"history-of-game-development","movie":".\/video\/history-genres-rpg-micro-3.mp4","name":"Role Playing Games","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"Pen and paper role-playing games"},{"order":0,"points":0,"sticky":false,"text":"Magazines from the 1970's"},{"order":0,"points":0,"sticky":false,"text":"comic book conventions "},{"order":0,"points":0,"sticky":false,"text":"Saturday morning cartoons"}],"failure":{"button":null,"message":"Dungeons & Dragons largely started the entire roleplaying genre."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn82-history-genres-rpg-micro-3","number_of_choices":4,"question":"Early role-playing video games drew much of their inspiration and audience from _____.","start":3600,"success":{"button":null,"message":"Dungeons & Dragons largely started the entire roleplaying genre."},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"humor; technology; sound"},{"order":0,"points":0,"sticky":false,"text":"graphics; story; sound"},{"order":0,"points":100,"sticky":false,"text":"graphics; technology; story"},{"order":0,"points":0,"sticky":false,"text":"technology; story; sound"}],"failure":{"button":null,"message":"At their core, role-playing games primarily use visuals and technology to tell an interactive story. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn83-history-genres-rpg-micro-3","number_of_choices":4,"question":"Role-playing video games are the convergence of ______, _____, and _____.","start":3600,"success":{"button":null,"message":"At their core, role-playing games primarily use visuals and technology to tell an interactive story. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Historical setting"},{"order":0,"points":100,"sticky":false,"text":"Story based"},{"order":0,"points":0,"sticky":false,"text":"Only available on the Wii U"},{"order":21,"points":0,"sticky":false,"text":"None of the above"}],"failure":{"button":null,"message":"The difference between an Eastern rpg and a Western rpg is more about styles of play and storytelling than global locations. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn84-history-genres-rpg-micro-3","number_of_choices":4,"question":"Which of the following is a typical aspect of an Eastern role-playing game?","start":3600,"success":{"button":null,"message":"The difference between an Eastern rpg and a Western rpg is more about styles of play and storytelling than global locations. "},"type":"Multiple"}],"reference":"history-of-game-development-5","text":null,"title":"Role Playing Games"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"history-of-game-development","movie":".\/video\/history-genres-strategy-micro-4.mp4","name":"Strategy Games","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"role-playing games"},{"order":0,"points":0,"sticky":false,"text":"first person shooters"},{"order":0,"points":0,"sticky":false,"text":"advanced board games"},{"order":0,"points":100,"sticky":false,"text":"table top war games"}],"failure":{"button":null,"message":"Table top war games are also called book shelf war games."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn85-history-genres-strategy-micro-4","number_of_choices":4,"question":"Strategy war games draw much of their audience and inspiration from _____.","start":3600,"success":{"button":null,"message":"Table top war games are also called book shelf war games."},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Troop allocation"},{"order":0,"points":0,"sticky":false,"text":"Provision tracking"},{"order":0,"points":0,"sticky":false,"text":"Resource management"},{"order":21,"points":100,"sticky":false,"text":"All of the above"}],"failure":{"button":null,"message":"Strategy war games heavily emphasize the constant monitoring of many factors of a battlefield. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn86-history-genres-strategy-micro-4","number_of_choices":4,"question":"Which of the following is generally found in strategy war games?","start":3600,"success":{"button":null,"message":"Strategy war games heavily emphasize the constant monitoring of many factors of a battlefield. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Western strategy"},{"order":0,"points":100,"sticky":false,"text":"4X strategy"},{"order":0,"points":0,"sticky":false,"text":"Platform jumper strategy"},{"order":0,"points":0,"sticky":false,"text":"CCG strategy"}],"failure":{"button":null,"message":"Strategy war games are often divided into sub-categories that describe play methodologies such as real-time, 4X, and turn-based. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn87-history-genres-strategy-micro-4","number_of_choices":4,"question":"Which is a sub-category of the strategy war games genre?","start":3600,"success":{"button":null,"message":"Strategy war games are often divided into sub-categories that describe play methodologies such as real-time, 4X, and turn-based. "},"type":"Multiple"}],"reference":"history-of-game-development-5","text":null,"title":"Strategy Games"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"history-of-game-development","movie":".\/video\/history-genres-puzzle-micro-5.mp4","name":"Puzzle Games","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"PC"},{"order":0,"points":0,"sticky":false,"text":"console"},{"order":0,"points":100,"sticky":false,"text":"casual"},{"order":0,"points":0,"sticky":false,"text":"experienced "}],"failure":{"button":null,"message":"Puzzle games are wildly popular among casual gamers with smart devices. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn88-history-genres-puzzle-micro-5","number_of_choices":4,"question":"Puzzle games are typically most popular with _____ gamers.","start":3600,"success":{"button":null,"message":"Puzzle games are wildly popular among casual gamers with smart devices. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Tetris"},{"order":0,"points":100,"sticky":false,"text":"Tower Defense"},{"order":0,"points":0,"sticky":false,"text":"Klax"},{"order":0,"points":0,"sticky":false,"text":"Candy Crush"}],"failure":{"button":null,"message":"Puzzle games generally revolve around logic and problem solving."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn89-history-genres-puzzle-micro-5","number_of_choices":4,"question":"Which of the following is NOT considered a puzzle game?","start":3600,"success":{"button":null,"message":"Puzzle games generally revolve around logic and problem solving."},"type":"Multiple"}],"reference":"history-of-game-development-5","text":null,"title":"Puzzle Games"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"history-of-game-development","movie":".\/video\/history-genres-sports-micro-6.mp4","name":"Sports Games","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"The game must be licensed by a major sports league"},{"order":0,"points":0,"sticky":false,"text":"The game must have team management game play aspects"},{"order":0,"points":100,"sticky":false,"text":"The game must demonstrate the thrill of actually playing the sport"},{"order":0,"points":0,"sticky":false,"text":"The game must represent a team sport"}],"failure":{"button":null,"message":"Portraying the action of the sport is still the primary goal of a sports game.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn90-history-genres-sports-micro-6","number_of_choices":4,"question":"Which of the following is a requirement of being a sports game?","start":3600,"success":{"button":null,"message":"Portraying the action of the sport is still the primary goal of a sports game.  "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Golf"},{"order":0,"points":0,"sticky":false,"text":"Skiing"},{"order":0,"points":0,"sticky":false,"text":"Football"},{"order":21,"points":100,"sticky":false,"text":"All of the above"}],"failure":{"button":null,"message":"Sports games are as varied as the sports themselves. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn91-history-genres-sports-micro-6","number_of_choices":4,"question":"Which of the following are considered sub-categories of the sports genre?","start":3600,"success":{"button":null,"message":"Sports games are as varied as the sports themselves. "},"type":"Multiple"}],"reference":"history-of-game-development-5","text":null,"title":"Sports Games"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"history-of-game-development","movie":".\/video\/history-genres-simulations-micro-7.mp4","name":"Simulation Games","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"flying a jet"},{"order":0,"points":0,"sticky":false,"text":"driving a car"},{"order":0,"points":0,"sticky":false,"text":"building a theme park"},{"order":0,"points":100,"sticky":false,"text":"a real world"}],"failure":{"button":null,"message":"The simulation genre looks to replicate a broad variety of real life scenarios "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn92-history-genres-simulations-micro-7","number_of_choices":4,"question":"All simulation games attempt to recreate some aspect of _____.","start":3600,"success":{"button":null,"message":"The simulation genre looks to replicate a broad variety of real life scenarios "},"type":"Multiple"},{"choices":[{"order":0,"points":100,"sticky":false,"text":"resource management"},{"order":0,"points":0,"sticky":false,"text":"platform jumping"},{"order":0,"points":0,"sticky":false,"text":"troop allocation"},{"order":0,"points":0,"sticky":false,"text":"defeating an opponent"}],"failure":{"button":null,"message":"Simulations generally demonstrate non-competitive problem solving through resource management. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn93-history-genres-simulations-micro-7","number_of_choices":4,"question":"In general, simulations are focused on _____.","start":3600,"success":{"button":null,"message":"Simulations generally demonstrate non-competitive problem solving through resource management. "},"type":"Multiple"}],"reference":"history-of-game-development-5","text":null,"title":"Simulation Games"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"history-of-game-development","movie":".\/video\/history-genres-mmo-micro-8.mp4","name":"MMO Games","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"Maximum Mission Output"},{"order":0,"points":0,"sticky":false,"text":"Massive Multiplayer Output "},{"order":0,"points":100,"sticky":false,"text":"Massive Multiplayer Online"},{"order":0,"points":0,"sticky":false,"text":"Maximum Multiplayer Online"}],"failure":{"button":null,"message":"Massive Multiplayer Online means that, conceivably, a large amount of people can play a game simultaneously via the Internet. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn94-history-genres-mmo-micro-8","number_of_choices":4,"question":"MMO stands for _____?","start":3600,"success":{"button":null,"message":"Massive Multiplayer Online means that, conceivably, a large amount of people can play a game simultaneously via the Internet. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"strategy war games"},{"order":0,"points":0,"sticky":false,"text":"the Xbox One"},{"order":0,"points":100,"sticky":false,"text":"The Internet"},{"order":0,"points":0,"sticky":false,"text":"genres"}],"failure":{"button":null,"message":"The Internet makes it possible for multiple people to play in the same game from different locations and from different machines. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn95-history-genres-mmo-micro-8","number_of_choices":4,"question":"Massive Multiplayer Online games would not be possible without _____.","start":3600,"success":{"button":null,"message":"The Internet makes it possible for multiple people to play in the same game from different locations and from different machines. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"role-playing mechanics"},{"order":0,"points":0,"sticky":false,"text":"they are only playable on PCs"},{"order":0,"points":100,"sticky":false,"text":"many players affecting the game at the same time"},{"order":0,"points":0,"sticky":false,"text":"the use of avatars "}],"failure":{"button":null,"message":"The ability for many players to interact with each other, live in the game, is the core requirement for a MMO.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn96-history-genres-mmo-micro-8","number_of_choices":4,"question":"Although many MMOs have aspects of other genres, what really makes them their own genre is _____.","start":3600,"success":{"button":null,"message":"The ability for many players to interact with each other, live in the game, is the core requirement for a MMO.  "},"type":"Multiple"}],"reference":"history-of-game-development-5","text":null,"title":"MMO Games"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"history-of-game-development","movie":".\/video\/history-genres-social-micro-9.mp4","name":"Social Games","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"Valve's Steam platform"},{"order":0,"points":100,"sticky":false,"text":"social media sites on the Internet"},{"order":0,"points":0,"sticky":false,"text":"economic prosperity"},{"order":0,"points":0,"sticky":false,"text":"64-bit graphics"}],"failure":{"button":null,"message":"Sites like Facebook introduced social games to a new and very diverse audience. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn97-history-genres-social-micro-9","number_of_choices":4,"question":"Mostly due to the rise of ______, social video games have recently become extremely popular.","start":3600,"success":{"button":null,"message":"Sites like Facebook introduced social games to a new and very diverse audience. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"competitive; cooperative"},{"order":0,"points":0,"sticky":false,"text":"expensive; non-social games"},{"order":0,"points":0,"sticky":false,"text":"challenging; non-social games"},{"order":0,"points":100,"sticky":false,"text":"cooperative; competitive "}],"failure":{"button":null,"message":"Most social media games offer low-difficulty, cooperative play features. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn98-history-genres-social-micro-9","number_of_choices":4,"question":"Although not always the case, social games tend to be more _____ than _____.","start":3600,"success":{"button":null,"message":"Most social media games offer low-difficulty, cooperative play features. "},"type":"Multiple"}],"reference":"history-of-game-development-5","text":null,"title":"Social Games"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"history-of-game-development","movie":".\/video\/history-genres-crossovers-micro-10.mp4","name":"Crossover Games","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"games can have more than one genre"},{"order":0,"points":0,"sticky":false,"text":"consoles will not play multi-genre games"},{"order":0,"points":0,"sticky":false,"text":"games can only have one genre"},{"order":0,"points":0,"sticky":false,"text":"None of the above"}],"failure":{"button":null,"message":"Don't let the concept of genre get in the way of your vision for a game, they are merely categories that can be ignored or grouped. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn99-history-genres-crossovers-micro-10","number_of_choices":4,"question":"When developing a video game it is important to remember _____.","start":3600,"success":{"button":null,"message":"Don't let the concept of genre get in the way of your vision for a game, they are merely categories that can be ignored or grouped. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"required mechanics"},{"order":0,"points":100,"sticky":false,"text":"a target audience"},{"order":0,"points":0,"sticky":false,"text":"a color scheme"},{"order":0,"points":0,"sticky":false,"text":"a programming language "}],"failure":{"button":null,"message":"Genre's help marketing teams identify a target audience and a board set of expectations of that audience. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn100-history-genres-crossovers-micro-10","number_of_choices":4,"question":"Genre's help video game developers identify _____.","start":3600,"success":{"button":null,"message":"Genre's help marketing teams identify a target audience and a board set of expectations of that audience. "},"type":"Multiple"}],"reference":"history-of-game-development-5","text":null,"title":"Crossover Games"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"history-of-game-development","movie":".\/video\/history-icons-intro-micro-1.mp4","name":"Iconic Designers & Developers","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"imitate what has come before"},{"order":0,"points":0,"sticky":false,"text":"become characters in their own games"},{"order":0,"points":100,"sticky":false,"text":"pioneered the industry from its infancy"},{"order":0,"points":0,"sticky":false,"text":"developed mechanics for all the games we see today"}],"failure":{"button":null,"message":"They are iconic because they were the first to develop revolutionary concepts and game designs."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn101-history-icons-intro-micro-1","number_of_choices":4,"question":"Iconic designers and developers in the video game industry are those who _____.","start":3600,"success":{"button":null,"message":"They are iconic because they were the first to develop revolutionary concepts and game designs."},"type":"Multiple"}],"reference":"history-of-game-development-6","text":null,"title":"Iconic Designers & Developers"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"history-of-game-development","movie":".\/video\/history-icons-alexy-micro-2.mp4","name":"Alexy Pajitnov","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"Tetris"},{"order":0,"points":0,"sticky":false,"text":"Pokemon"},{"order":0,"points":0,"sticky":false,"text":"Pacman"},{"order":0,"points":0,"sticky":false,"text":"Tennis for Two"}],"failure":{"button":null,"message":"Tetris is one of the most popular games of all time, selling more than 170 million copies!"},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn102-history-icons-alexy-micro-2","number_of_choices":4,"question":"Alexy Pajitnov is most famous as a developer of _____.","start":3600,"success":{"button":null,"message":"Tetris is one of the most popular games of all time, selling more than 170 million copies!"},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"The United States"},{"order":0,"points":100,"sticky":false,"text":"The former Soviet Union (USSR)"},{"order":0,"points":0,"sticky":false,"text":"Japan"},{"order":0,"points":0,"sticky":false,"text":"Canada"}],"failure":{"button":null,"message":"Alexy Pajitnov was born in the former Soviet Union where the game was also developed. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn103-history-icons-alexy-micro-2","number_of_choices":4,"question":"Alexy Pajitnov was born in what country?","start":3600,"success":{"button":null,"message":"Alexy Pajitnov was born in the former Soviet Union where the game was also developed. "},"type":"Multiple"}],"reference":"history-of-game-development-6","text":null,"title":"Alexy Pajitnov"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"history-of-game-development","movie":".\/video\/history-icons-sakaguchi-micro-3.mp4","name":"Hironobu Sakaguchi","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"Tetris"},{"order":0,"points":100,"sticky":false,"text":"the Final Fantasy series"},{"order":0,"points":0,"sticky":false,"text":"Legend of Zelda"},{"order":0,"points":0,"sticky":false,"text":"Galaxy Game"}],"failure":{"button":null,"message":"Hironobu Sakaguchi also directed a Final Fantasy movie called Final Fantasy: The Spirits Within. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn104-history-icons-sakaguchi-micro-3","number_of_choices":4,"question":"Hironobu Sakaguchi is most famous as a developer of _____.","start":3600,"success":{"button":null,"message":"Hironobu Sakaguchi also directed a Final Fantasy movie called Final Fantasy: The Spirits Within. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"The United States"},{"order":0,"points":0,"sticky":false,"text":"The former Soviet Union (USSR)"},{"order":0,"points":100,"sticky":false,"text":"Japan"},{"order":0,"points":0,"sticky":false,"text":"Canada"}],"failure":{"button":null,"message":"Hironobu Sakaguchi was born in Japan in 1962. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn105-history-icons-sakaguchi-micro-3","number_of_choices":4,"question":"Hironobu Sakaguchi was born in what country?","start":3600,"success":{"button":null,"message":"Hironobu Sakaguchi was born in Japan in 1962. "},"type":"Multiple"}],"reference":"history-of-game-development-6","text":null,"title":"Hironobu Sakaguchi"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"history-of-game-development","movie":".\/video\/history-icons-carmack-micro-4.mp4","name":"John Carmack","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"Valve"},{"order":0,"points":0,"sticky":false,"text":"Nintendo"},{"order":0,"points":100,"sticky":false,"text":"Id"},{"order":0,"points":0,"sticky":false,"text":"Pokemon"}],"failure":{"button":null,"message":"John Carmack left Id to help develop the Oculus Rift. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn106-history-icons-carmack-micro-4","number_of_choices":4,"question":"John Carmack co-founded what software company?","start":3600,"success":{"button":null,"message":"John Carmack left Id to help develop the Oculus Rift. "},"type":"Multiple"},{"choices":[{"order":0,"points":100,"sticky":false,"text":"The United States"},{"order":0,"points":0,"sticky":false,"text":"The former Soviet Union (USSR)"},{"order":0,"points":0,"sticky":false,"text":"Japan"},{"order":0,"points":0,"sticky":false,"text":"Canada"}],"failure":{"button":null,"message":"John Carmack receive two American Emmy Awards for tech innovations in 2007. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn107-history-icons-carmack-micro-4","number_of_choices":4,"question":"John Carmack was born in what country?","start":3600,"success":{"button":null,"message":"John Carmack receive two American Emmy Awards for tech innovations in 2007. "},"type":"Multiple"}],"reference":"history-of-game-development-6","text":null,"title":"John Carmack"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"history-of-game-development","movie":".\/video\/history-icons-tajiri-micro-5.mp4","name":"Satoshi Tajiri","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"tech innovations in Hollywood"},{"order":0,"points":0,"sticky":false,"text":"Legend of Zelda"},{"order":0,"points":0,"sticky":false,"text":"Tetris"},{"order":0,"points":100,"sticky":false,"text":"Pokemon"}],"failure":{"button":null,"message":"His idea for Pokemon evidently arose from his love of insects. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn108-history-icons-tajiri-micro-5","number_of_choices":4,"question":"Satoshi Tajiri is most famous for developing _____.","start":3600,"success":{"button":null,"message":"His idea for Pokemon evidently arose from his love of insects. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"The United States"},{"order":0,"points":0,"sticky":false,"text":"The former Soviet Union (USSR)"},{"order":0,"points":100,"sticky":false,"text":"Japan"},{"order":0,"points":0,"sticky":false,"text":"Canada"}],"failure":{"button":null,"message":"Born in Japan, Satoshi Tajiri is credited to bringing massive financial success to the Nintendo Corporation."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn109-history-icons-tajiri-micro-5","number_of_choices":4,"question":"Satoshi Tajiri was born in what country?","start":3600,"success":{"button":null,"message":"Born in Japan, Satoshi Tajiri is credited to bringing massive financial success to the Nintendo Corporation."},"type":"Multiple"}],"reference":"history-of-game-development-6","text":null,"title":"Satoshi Tajiri"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"history-of-game-development","movie":".\/video\/history-icons-garriott-micro-6.mp4","name":"Ricahrd Garriott","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"Star Wars"},{"order":0,"points":100,"sticky":false,"text":"the Ultima Series  "},{"order":0,"points":0,"sticky":false,"text":"Mario Bros. "},{"order":0,"points":0,"sticky":false,"text":"Pokemon"}],"failure":{"button":null,"message":"Not only did Richard Garriot create the Ultima Series, he was a character in the games. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn110-history-icons-garriott-micro-6","number_of_choices":4,"question":"Richard Garriot is most famous for developing _____.","start":3600,"success":{"button":null,"message":"Not only did Richard Garriot create the Ultima Series, he was a character in the games. "},"type":"Multiple"},{"choices":[{"order":0,"points":100,"sticky":false,"text":"The United States"},{"order":0,"points":0,"sticky":false,"text":"The former Soviet Union (USSR)"},{"order":0,"points":0,"sticky":false,"text":"Japan"},{"order":0,"points":0,"sticky":false,"text":"Canada"}],"failure":{"button":null,"message":"Although born in the US, that didn't stop him from paying for a trip to the International Space Station with a Russian space flight. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn111-history-icons-garriott-micro-6","number_of_choices":4,"question":"Richard Garriot was born in what country?","start":3600,"success":{"button":null,"message":"Although born in the US, that didn't stop him from paying for a trip to the International Space Station with a Russian space flight. "},"type":"Multiple"}],"reference":"history-of-game-development-6","text":null,"title":"Richard Garriott"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"history-of-game-development","movie":".\/video\/history-icons-meier-micro-7.mp4","name":"Sid Meier","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"Pokemon"},{"order":0,"points":100,"sticky":false,"text":"games with Sid Meier in the title  "},{"order":0,"points":0,"sticky":false,"text":"Mario Bros. "},{"order":0,"points":0,"sticky":false,"text":"Tetris"}],"failure":{"button":null,"message":"You can always tell a Sid Meier game because his name will precede the title."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn112-history-icons-meier-micro-7","number_of_choices":4,"question":"Sid Meier is most famous for developing _____.","start":3600,"success":{"button":null,"message":"You can always tell a Sid Meier game because his name will precede the title."},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"The United States"},{"order":0,"points":0,"sticky":false,"text":"The former Soviet Union (USSR)"},{"order":0,"points":0,"sticky":false,"text":"Japan"},{"order":0,"points":100,"sticky":false,"text":"Canada"}],"failure":{"button":null,"message":"Sid Meier was born in Canada."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn113-history-icons-meier-micro-7","number_of_choices":4,"question":"Sid Meier was born in what country?","start":3600,"success":{"button":null,"message":"Sid Meier was born in Canada."},"type":"Multiple"}],"reference":"history-of-game-development-6","text":null,"title":"Sid Meier"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"history-of-game-development","movie":".\/video\/history-icons-newell-micro-8.mp4","name":"Gabe Newell","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"Microsoft"},{"order":0,"points":0,"sticky":false,"text":"Rockstar Games  "},{"order":0,"points":0,"sticky":false,"text":"Sony "},{"order":0,"points":100,"sticky":false,"text":"the Valve Corporation"}],"failure":{"button":null,"message":"Gabe Newell left Microsoft to start Valve."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn114-history-icons-newell-micro-8","number_of_choices":4,"question":"Gabe Newell is a co-founder of _____, and is currently its managing director.","start":3600,"success":{"button":null,"message":"Gabe Newell left Microsoft to start Valve."},"type":"Multiple"},{"choices":[{"order":0,"points":100,"sticky":false,"text":"The United States"},{"order":0,"points":0,"sticky":false,"text":"The former Soviet Union (USSR)"},{"order":0,"points":0,"sticky":false,"text":"Japan"},{"order":0,"points":0,"sticky":false,"text":"Canada"}],"failure":{"button":null,"message":"Gabe Newell was born in Washington DC, in 1962."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn115-history-icons-newell-micro-8","number_of_choices":4,"question":"Gabe Newell was born in what country?","start":3600,"success":{"button":null,"message":"Gabe Newell was born in Washington DC, in 1962."},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Pokemon"},{"order":0,"points":0,"sticky":false,"text":"Sid Meier's Pirates  "},{"order":0,"points":100,"sticky":false,"text":"Half-Life "},{"order":0,"points":0,"sticky":false,"text":"Mario Bros. "}],"failure":{"button":null,"message":"The Half-Life franchise has sold more than 20 million copies."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn116-history-icons-newell-micro-8","number_of_choices":4,"question":"_____ was the first game developed by Valve.","start":3600,"success":{"button":null,"message":"The Half-Life franchise has sold more than 20 million copies."},"type":"Multiple"}],"reference":"history-of-game-development-6","text":null,"title":"Gabe Newell"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"history-of-game-development","movie":".\/video\/history-icons-miyamoto-micro-9.mp4","name":"Shigeru Miyamoto","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"The United States"},{"order":0,"points":0,"sticky":false,"text":"Russia"},{"order":0,"points":100,"sticky":false,"text":"Japan"},{"order":0,"points":0,"sticky":false,"text":"Canada"}],"failure":{"button":null,"message":"Shigeru Miyamoto was born in Japan in 1952, and joined Nintendo in 1977."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn117-history-icons-miyamoto-micro-9","number_of_choices":4,"question":"Shigeru Miyamoto was born in what country?","start":3600,"success":{"button":null,"message":"Shigeru Miyamoto was born in Japan in 1952, and joined Nintendo in 1977."},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Donkey Kong"},{"order":0,"points":0,"sticky":false,"text":"Mario Bro. "},{"order":0,"points":0,"sticky":false,"text":"Legend of Zelda"},{"order":21,"points":100,"sticky":false,"text":"All of the above"}],"failure":{"button":null,"message":"Shigeru Miyamoto has been very good for Nintendo."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn118-history-icons-miyamoto-micro-9","number_of_choices":4,"question":"Shigeru Miyamoto is famous for developing _____.","start":3600,"success":{"button":null,"message":"Shigeru Miyamoto has been very good for Nintendo."},"type":"Multiple"}],"reference":"history-of-game-development-6","text":null,"title":"Shigeru Miyamoto"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"reference","mod":"history","movie":null,"name":"Reference","promptfile":null,"prompts":null,"reference":null,"text":"<a id=\"history-of-game-development-1\" class=\"dest\"><\/a><div class=\"accent\"><h1>Overview<\/h1><p>Once exiled to military applications and youth subcultures, video games are now, and forever more, part of the mainstream. Somewhere between <em>Pong <\/em>and <em>Angry Birds<\/em>, games have become a multi-billion dollar industry which only continues to grow and evolve. Today, games are being developed for education, career training, test simulations, and of course, good old fashion fun. In this module we will examine the history and growth of the video game industry from its roots in computing and the military to the heights of popularity through the invention and innovation of iconic developers.<\/p><div style=\"text-align: center;\"><ul class=\"anchorGroup\" style=\"text-align: left; display: inline-block;\"><li><a class=\"ankor\" href=\"#history-of-game-development-2\">History of Video Game Technology<\/a><\/li><li><a class=\"ankor\" href=\"#history-of-game-development-3\">Evolution of the Video Game Industry<\/a><\/li><li><a class=\"ankor\" href=\"#history-of-game-development-4\">Exploring Non-Digital Games<\/a><\/li><li><a class=\"ankor\" href=\"#history-of-game-development-5\">Exploring Video Game Genres<\/a><\/li><li><a class=\"ankor\" href=\"#history-of-game-development-6\">Iconic Video Game Designers and Developers<\/a><\/li><\/ul><\/div><\/div><a id=\"history-of-game-development-2\" class=\"dest\"><\/a>&nbsp;<div class=\"accent\"><h1>History of Video Game Technology<\/h1><p>Video game technology grew from advancements in computer technology over the course of a century of development. Perhaps not surprisingly, many of our modern day input devices were developed during times of war. This lesson will briefly discuss how advances in computers and gaming tech came about and turned into a multi-billion dollar industry.<\/p><h3>1930s<\/h3><p>Perhaps the most significant early invention for the future development of video games is the theoretical Turing Machine developed by Alan Turing in 1936. Alan did not build an actual machine but rather developed the concept of a machine that could perform mathematical calculations.<\/p><img class=\"aligncenter\" src=\".\/images\/Image_1930s.png\" alt=\"Image_1930s\" width=\"575\" height=\"377\" \/><h3>1940s<\/h3><p>Early analog computer technology found applications in scientific research and industrial use, but the benefits of computer technology was perhaps most useful to the military. In particular, analog technology was used during World War II to increase the accuracy of bombers and for the advanced fire control of artillery weapons.<\/p><p>World War II also saw the invention of some familiar looking controller devices. Radar plotting systems of this era utilized the first \"trackball\" and joystick devices to assist in tracking aircraft.<\/p><img class=\"aligncenter\" src=\".\/images\/Image_1940s.png\" alt=\"Image_1940s\" width=\"516\" height=\"404\" \/><h3>1950s<\/h3><p>In the 1950s the Cathode Ray Tube (CRT) was invented to display color images on a television screen, creating early monitor technology.<\/p><img class=\"aligncenter\" src=\".\/images\/Image_1950s.png\" alt=\"Image_1950s\" width=\"657\" height=\"332\" \/><h3>1960s<\/h3><p>The 1960s saw the introduction of the video display terminal (VDT) combined with electric typewriter using CRT technology. This breakthrough meant that users could now see what they were typing represented on a monitor. This seemingly minor advancement allowed for far greater complexity in computer programming and applications. In addition, this era introduced the first mouse.<\/p><img class=\"aligncenter\" src=\".\/images\/Image_1960s.png\" alt=\"Image_1960s\" width=\"419\" height=\"380\" \/><h3>1970s<\/h3><p>By the 1970s VDT technology became fast enough to keep up with typists and the QWERTY keyboard layout became an industry standard.  Later in the decade, the Xerox Alto computer utilized what would become the modern mouse.<\/p><p>The late 1970s brought the first generation of gaming consoles and the beginnings of what would become the multi-billion dollar Video Game Industry we know today.<\/p><p>Although not the first ever digital video game, Pong was the first video game widely played in homes. The technology included:<\/p><ul><li>        Discrete transistor-based digital game logic<\/li><li>        Black and white screen<\/li><li>        Single channel audio or no audio<\/li><\/ul><p>The Atari 2600 gaming console is released in 1978 and is a tremendous success. This system utilizes ROM cartridges allowing for greater variety of games to be played by a console as well as color graphics. From there each new generation of consoles introduces new advances in computers and gaming technology that increases at an amazing rate. (See Topic: Evolution of Video Games in this Module for more details)<\/p><img class=\"aligncenter\" src=\".\/images\/Image_1970s.png\" alt=\"Image_1970s\" width=\"759\" height=\"299\" \/><h3>1980s<\/h3><p>Microsoft takes what is considered a risk at the time and makes their new MS-DOS Microsoft Word work with a mouse. It is a success and the mouse becomes standard equipment for all future PCs.<\/p><p>Nintendo Entertainment System (NES) releases in America (1985) and revitalizes a floundering home gaming industry. Packed with this new system is an 8 bit microprocessor and the first D-Pad controller, Zapper light gun and the Robotic Operating Body (ROB).<\/p><img class=\"aligncenter\" src=\".\/images\/Image_1980s.png\" alt=\"Image_1980s\" width=\"650\" height=\"249\" \/><h3>1990s<\/h3><p>By the early 1990s microprocessors have doubled again to 16 bits. Hand-held gaming systems appear (Gameboy) and signal the popularity of \"gaming on the go\" that will hit mainstream heights in the near future. Consoles now boast more colors and advanced sound capabilities such as stereo and music synthesis. By the end of the 90's CD-ROMs and 3D games are introduced and utilized in console systems.<\/p><img class=\"aligncenter\" src=\".\/images\/Image_1990s.png\" alt=\"Image_1990s\" width=\"656\" height=\"313\" \/><h3>Early 2000s<\/h3><p>Modern consoles begin to turn to PC-like architecture for the next generation designs. Microsoft releases the Xbox which includes an internal hard drive and the ability to access online downloadable content. The Internet becomes a viable source for entertainment, including games<\/p><img class=\"aligncenter\" src=\".\/images\/Image_2000s.png\" alt=\"Image_2000s\" width=\"562\" height=\"299\" \/><h3>Today<\/h3><p>Modern gaming technology now includes fully realized online gaming applications through social media sites like Facebook. Blu-Ray, motion control and wireless connections are new standards. Fully integrated Internet media is a reality with content streaming and downloadable content. Smart devices such as cell phones and tablets have captivated mainstream audiences, turning the gaming industry to a multi-billion dollar juggernaut that has topped the movie industry in consumer dollars spent.<\/p><img class=\"aligncenter wp-image-3142 size-full\" src=\".\/images\/Image_Today.png\" alt=\"Image_Today\" width=\"656\" height=\"309\" \/><\/div><a id=\"history-of-game-development-3\" class=\"dest\"><\/a>&nbsp;<div class=\"accent\"><h1>Evolution of the Game Industry<\/h1><p>Video games have grown from following a white dot across a black screen to nearly photo-realistic simulations of life itself. Today the video game industry is a multi-billion dollar monster that regularly sees sales of major releases topping Hollywood blockbusters. This lesson will briefly look at the different generations of consoles and the companies that brought video games to the masses.<\/p><h3>First Generation Game Consoles<\/h3><p><em>Pong<\/em> is developed by Atari on the first home gaming system, Odyssey, and features a table tennis game utilizing 2D graphics and minimal sound (Single Channel Audio). Released to the public as a home system in 1974, the technology used discrete transistor-based digital game logic and black and white color. Believe it or not, <em>Pong<\/em> was amazing technology to behold in the early 70s and was an instant success, establishing video games as a viable money making industry. With success, however, came multiple competitors (first console wars); and by 1977, the industry was heading for a crash.<\/p><img class=\"aligncenter wp-image-3144 size-full\" src=\".\/images\/Image_FirstGen.png\" alt=\"Image_FirstGen\" width=\"381\" height=\"417\" \/><h3>Second Generation Game Consoles<\/h3><p>Enter the Atari 2600. Released to the public in 1977, this home system used microprocessor-based technology and encoded ROM cartridges that allowed the console to conceivably play an unlimited number of games.  It also introduced limited color and more sound options. Again, a video game system for the home was a huge success and the Atari 2600 (along with competitors Intellivision) became market leaders that revitalized the home gaming industry.<\/p><p>With the success of the Atari 2600 came changes in the industry. Perhaps most significant during this era, is the founding of Activision by disgruntled employees of Atari who felt they were not getting the credit they deserved for designing and programming the games that made the Atari 2600 such a public phenomenon.<\/p><p>As an unintended consequence, this increase in popularity for home video game systems also signaled the end of the short lived arcade stand-up video game industry model. By 1983, the arcade model of video games crashed, never to recover to the same heights again.<\/p><img class=\"aligncenter\" src=\".\/images\/Image_SecondGen.png\" alt=\"Image_SecondGen\" width=\"561\" height=\"236\" \/><h3>Third Generation Game Consoles<\/h3><p>The third generation of consoles was launched by a company you may have heard of called Nintendo. The Nintendo Entertainment System (NES) released in America in 1985 and was a massive hit with both Japanese and American audiences. With the Atari 2600 becoming old technology and new Atari systems failing in the market, the NES seized the public's attention and revitalized the home gaming industry. The system was designed to appeal to kids as a toy and included a D-Pad controller, Zapper light gun and the Robotic Operating Buddy (ROB) as standard with purchase of the system. Nintendo further solidified its place in gaming history by creating iconic game characters such as Mario Bros and Link from the Zelda series of games.<\/p><img class=\"aligncenter\" src=\".\/images\/Image_ThirdGen.png\" alt=\"Image_ThirdGen\" width=\"618\" height=\"351\" \/><h3>Fourth Generation Game Consoles<\/h3><p>The Fourth Generation of consoles is official with the release of the Sega Genesis system, the first gaming platform to feature 16 bit graphics, a full spectrum of colors and advanced sound with music synthesis and stereo. Sega's hold on the market is short lived, however, as Nintendo releases their new 16 system, the Super NES in 1990. In the end, Nintendo once again reigns supreme in sales.<\/p><img class=\"aligncenter\" src=\".\/images\/Image_FourthGen.png\" alt=\"Image_FourthGen\" width=\"617\" height=\"233\" \/><h3>Fifth Generation Game Consoles<\/h3><p>In 1994, Sony enters the gaming market with the release of the Sony Playstation. It is a huge success and becomes the market leader over the new Nintendo 64 and the Sega Saturn. Significant in this era of consoles is that it marks the beginning of 3D games and the integration of CD-ROM players and disks as the format of choice for games.<\/p><img class=\"aligncenter\" src=\".\/images\/Image_FifthGeneration.png\" alt=\"Image_FifthGeneration\" width=\"735\" height=\"423\" \/><h3>Sixth Generation Game Consoles<\/h3><p>In 2000, Sony releases what will become the most popular and successful gaming console in history – the Sony Playstation 2. At the same time, Nintendo releases its Nintendo Gamecube and Microsoft enters the market with its PC-like architecturally designed Xbox. Now begins what most consider the real console wars between the three remaining juggernauts of gaming. Also of note, this era of consoles began to integrate with rapidly advancing Internet technology and the concept of online games and downloadable content is sparked.<\/p><img class=\"aligncenter\" src=\".\/images\/Image_SixthGen.png\" alt=\"Image_SixthGen\" width=\"800\" height=\"329\" \/><h3>Seventh Generation Game Consoles<\/h3><p>Seventh Generation consoles spawn only five years after the sixth as technology progresses at lightning speed. All three major game system manufactures release newer, better systems: Microsoft Xbox 360 (2005), Sony Playstation 3 (2006); and the Nintendo Wii (2006). Sony and Microsoft release compatible systems to their predecessors, featuring better graphics and sound, access to online downloadable content, and wireless technology. Only the Nintendo Wii breaks the mold and features motion control party games as its major appeal. Although competition is perhaps the fiercest it has ever been, the massive popularity of video games at this point means enough market share for all three systems to be wildly successful.<\/p><p>It is in this generation of gaming that game developer studios rose as giants of the industry. Activision continues its independent game development achievements but is dwarfed by companies such as EA, Valve, Bungie and Blizzard. The time of the multi-billion dollar game industry has come and as video games compete with Hollywood blockbusters for consumer dollars, game properties themselves become adapted movie features and movies begin to be turned in to games.<\/p><img class=\"aligncenter\" src=\".\/images\/Image_SeventhGen.png\" alt=\"Image_SeventhGen\" width=\"699\" height=\"332\" \/><h3>Eighth Generation Game Consoles – CURRENT ERA<\/h3><p>Today the industry is in its Eighth Generation. Sony, Microsoft and Nintendo remain the market leaders as they release their newest and most powerful systems: Microsoft Xbox One; Sony Playstation 4; and the Nintendo WII U. These systems all feature full online media integration (content streaming, downloadable content), nearly photorealistic graphics and processors that compete with PCs. Even with this market share, the dominance of these companies is threatened by new trends in technology.<\/p><img class=\"aligncenter\" src=\".\/images\/Image_EighthGen.png\" alt=\"Image_EighthGen\" width=\"664\" height=\"355\" \/><h3>Non-Console Home Gaming<\/h3><p>Internet gaming is seen by many as the future. Streaming content allows people to play games from their PCs that overmatch even the newest consoles in terms of visuals and content flexibility. In addition, smart phone and tablet gaming has hit critical mass and has found a mainstream audience unimagined by the old school giants. Hosted gaming has also proven popular among untraditional video game fans through social media sites like Facebook.<\/p><img class=\"aligncenter\" src=\".\/images\/Image_NonConsole.png\" alt=\"Image_NonConsole\" width=\"563\" height=\"278\" \/><\/div><a id=\"history-of-game-development-4\" class=\"dest\"><\/a>&nbsp;<div class=\"accent\"><h1>Exploring Non-Digital Games (and their influence on video games)<\/h1><p>Games are as old as human history. They permeate every culture and reflect and define our social values. Today, as people find more free time and as technology expands, games are more popular and pervasive than ever. In this Topic, we will examine some of the games that influenced and helped shaped digital video games.<\/p><h3>Early Board Games<\/h3><p>The oldest known board game – <em>Senet<\/em> – was discovered in a Predynastic Egyptian tomb in 3500 BC. <em>Backgammon<\/em> is probably the oldest game still played today and can be traced back to Biblical times with variations found across ancient Europe and Asia. <em>Chess<\/em> dates back to around the 6<sup>th<\/sup> century AD and was passed from culture to culture through various assimilations of people via conquering nations. What these games have in common is a focus on strategy and critical thinking: elements that are perfect for expansion and exploration in video games.<\/p><img class=\"aligncenter\" src=\".\/images\/Image_EarlyBoardGames.png\" alt=\"Image_EarlyBoardGames\" width=\"618\" height=\"257\" \/><h3>The Family Board Game<\/h3><p>By the close of the 19<sup>th<\/sup> century, board games were not only growing in popularity, they became profitable for game developers. Parker Brothers, founded by George S. Parker in 1883, became a successful manufacture and distributor of card and board games.<\/p><p>During the Great Depression Parker Brothers released <em>Monopoly<\/em>. It was an instant hit and remains popular to this day. Parker Brothers would go on in the next several decades to produce many long lasting games such as <em>Clue, Risk<\/em> and <em>Sorry!<\/em><\/p><p>Although wildly popular, even today, these games lack complex game design. In fact, most games in this category are barely much more than games of chance and luck.<\/p><img class=\"aligncenter\" src=\".\/images\/Image_FamilyBoardGames.png\" alt=\"Image_FamilyBoardGames\" width=\"576\" height=\"301\" \/><h3>Strategy War Games<\/h3><p>Sometimes called bookshelf games, Strategy War games combine the complex strategy of chess-like games with elements of a classic board game. Typically, these games included a massive rulebook, a large map and hundreds, if not thousands, of tiny cardboard chits representing troops, artillery, or other military units. These games often focused on real-life battles and historical time periods such as World War II or the clashes of ancient armies.<\/p><p>In many ways, these games are the predecessors to computer Turn-Based Strategy games; and to some extent Strategy 4X games. Once the complexities of the rules were automated and simplified by programming, computer Strategy War Games became wildly popular. Unfortunately for some, this digital transition effectively killed the Bookshelf Strategy War game as a non-digital gaming option (there is always Ebay!).<\/p><img class=\"aligncenter\" src=\".\/images\/Image_StrategyWarGame.png\" alt=\"Image_StrategyWarGame\" width=\"520\" height=\"311\" \/><h3>Table-Top Role Playing Games<\/h3><p>Another non-digital genre of games that have heavily influenced video games is the Tabletop Role-Playing game (RPG). <em>Dungeons and Dragons<\/em>, created by Gary Gygax and Dave Arneson, is perhaps the best known and most iconic of all RPGs. Role-Playing games are quite different than any other traditional game, mostly in that \"winning\" becomes secondary to storytelling. Players create a character that is represented by a series of abilities, stats and powers. Traditionally, there is no board to look at: the game is played mostly in the mind using imagination and a hand full of polygonal dice. A Game Master (GM) guides the rest of the players through an adventure but it is not his job to defeat them. Instead, enjoyment of the game comes from the group of players cooperating to overcome challenges created by the GM with the intention that they succeed and grow stronger for the next more challenging adventure. Settings for a RPG include fantasy, science fiction, and even the real world.<\/p><p>As with Strategy War games, converting this style of game into a video game has many benefits. The game itself calculates success or failure instantly and without the need for dice. It also, for better or worse, eliminates some need for imagination by replacing a GM's description with fully realized art and settings. It also removes the need for a GM, since the game program itself becomes the guide and storyteller. Of course, this also greatly limits one of the best features of a tabletop RPG: unlimited choices.<\/p><p>In any event, <em>D&amp;D<\/em> was the grandfather of all RPGs, both digital and non-digital, and remains popular as a pen and paper game. Unfortunately, <em>Dungeons and Dragons<\/em> as a video game intellectual property has faltered and been overtaken by its imitators. Games such as <em>World of Warcraft<\/em> have captured the spirit and feel of <em>Dungeons and Dragons<\/em> and conquered their own space in the RPG video game market. Still, the overall effect of <em>Dungeons and Dragons<\/em> in video games is nothing short of tremendous.<\/p><img class=\"aligncenter\" src=\".\/images\/Image_TabletopRPGs.png\" alt=\"Image_TabletopRPGs\" width=\"400\" height=\"315\" \/><h3>Advanced Board Games<\/h3><p>Even as certain non-digital game genres become forever absorbed in to video games, the current options for board games are beyond outstanding. As the limited strategy and gameplay potential of family board games become more and more obvious, a whole new crop of intellectually challenging board games have come to market. In these games, thought has gone into their game design to make them more than experiences of random chance. <em>Settlers of Catan<\/em> is a popular game in this category.<\/p><img class=\"aligncenter\" src=\".\/images\/Image_AdvancedBoardGames.png\" alt=\"Image_AdvancedBoardGames\" width=\"269\" height=\"422\" \/><h3>Card Games<\/h3><p>Card games have always been popular, but for most their history they have been limited to variations on the standard 52-playing card deck. Video games have certainly embraced common card games, but today a card game can be so much more than <em>Go Fish<\/em>. Collectable Strategy Card games are a fairly new concept in gaming and have opened up amazing new strategies and styles of play. Most popular of the paper stock versions of these games is <em>Magic: The Gathering<\/em>, invented by Richard Garfield in 1993.<\/p><img class=\"aligncenter\" src=\".\/images\/Image_CardGames.png\" alt=\"Image_CardGames\" width=\"472\" height=\"329\" \/><\/div><a id=\"history-of-game-development-5\" class=\"dest\"><\/a>&nbsp;<div class=\"accent\"><h1>Video Game Genres<\/h1><h3>Arcade Games<\/h3><p>Arcade-style games are fast-paced, flashy, and usually repeat the same gameplay each time the game is restarted. These games require hand-to-eye coordination and fast muscle reactions (sometimes called Twitch). Players typically have to overcome waves of enemies and obstacles in ever-increasing difficulty. Arcade games were initially stand-up machines that were popularized in  arcades in the early 1980s. Today the term arcade game relates to their style of play rather than where they are played. Games that fall into the Arcade Game category include:<\/p><ul><li>Hack and Slash.<\/li><li>Fighting Games.<\/li><li>Pinball.<\/li><li>Fighter Pilot.<\/li><li>Racing.<\/li><li>Platform Jumper<\/li><\/ul><img class=\"aligncenter\" src=\".\/images\/Image_ArcadeGames1.png\" alt=\"Image_ArcadeGames\" width=\"766\" height=\"431\" \/><h3>Role-Playing Games<\/h3><p>Role-Playing games are story driven quests where the player takes the role of a character within the game that they will develop and explore a world with. RPG's come in an amazing variety, but usually involve exploration of a large game world or map, continuous player advancement through gaining experience points and unlocking new or better abilities, and a conclusive ending when the storyline is completed. Sub-genres of RPG's include:<\/p><ul><li>Fantasy RPG's<\/li><li>Sci-Fi RPG's<\/li><li>Historical RPG's<\/li><li>Western RPG's.<\/li><li>Eastern RPG's.<\/li><li>Action Adventure.<\/li><\/ul><img class=\"aligncenter\" src=\".\/images\/Image_RolePlayingGames.png\" alt=\"Image_RolePlayingGames\" width=\"564\" height=\"473\" \/><h3>Strategy Games<\/h3><p>Strategy games are mass combat games that require short-term and long-term troop and resource strategies in order to accomplish complex victory conditions over another opponent.  Victory conditions are typically achieved through a balanced allocation of effort in gathering and allocating resources, moving and commanding armies in battle, and researching new technologies. Strategy games can further be categorized as follows:<\/p><ul><li>Turn-based strategy.<\/li><li>Real-time strategy.<\/li><li>4X strategy.<\/li><li>Time-based strategy.<\/li><li>Tower defense.<\/li><\/ul><img class=\"aligncenter\" src=\".\/images\/Image_StrategyGames.png\" alt=\"Image_StrategyGames\" width=\"710\" height=\"527\" \/><h3>Puzzle Games<\/h3><p>Puzzle games focus on a problem, riddle, or brainteaser the player must solve using the provided interface and a designated set of conditions. Puzzle games can be played individually or often in competition with other players. Puzzles can be text based and\/or graphic based, and often blend elements of arcade games. Puzzle games can focus entirely on the puzzle, or be minor aspects of other games such as a Sphinx issuing a riddle in a RPG. Typical puzzle games include:<\/p><ul><li>Action puzzle.<\/li><li>Matching Tiles.<\/li><li>Logic.<\/li><li>Traditional puzzles.<\/li><li>Physics.<\/li><\/ul><img class=\"aligncenter\" src=\".\/images\/Image_PuzzleGames.png\" alt=\"Image_PuzzleGames\" width=\"600\" height=\"393\" \/><h3>Sports Games<\/h3><p>Sports games are simulators that deliver a life-like digital version of popular sports. These games are often licensed with professional leagues and represent some of the most popular games on the market. Modern sports games are near perfect models of sporting completions and leagues and offer amazing detail and complexity. Players often have the options of managing teams and players as well as controlling the action on the field. Includes generic (non-professional) sports games.<\/p><ul><li>League Sports Games (football, baseball, basketball, etc.)<\/li><li>Individual Sports Games (skiing, golf, boxing)<\/li><\/ul><img class=\"aligncenter\" src=\".\/images\/Image_SportsGames.png\" alt=\"Image_SportsGames\" width=\"691\" height=\"245\" \/><h3>Simulation Games<\/h3><p>Simulation games depict real world scenarios in which players either participate in as a controllable character or control the world itself as an omnipotent overlord. Often simulation games include tactical combat, organizing the planned growth of societies, and increasing game complexity as one progresses.<\/p><ul><li>Life-sim.<\/li><li>City-sim.<\/li><li>Industry-sim.<\/li><li>Survival-horror.<\/li><li>Tactical-shooter.<\/li><li>Adult games.<\/li><li>Religious games.<\/li><li>Educational games.<\/li><\/ul><img class=\"aligncenter\" src=\".\/images\/Image_SimulationGames.png\" alt=\"Image_SimulationGames\" width=\"699\" height=\"299\" \/><h3>Massively Multiplayer Online Games<\/h3><p>Massively Multiplayer Online (MMO) games situate hundreds or thousands of players into the same digital world and allow them to interact, cooperate and compete. MMO's are played entirely online and usually are connected to another genre such as Role Playing Games or Simulation Games.<\/p><ul><li>MMORPG's.<\/li><li>MMO-Strategy.<\/li><li>MMO-Simulation.<\/li><\/ul><img class=\"aligncenter\" src=\".\/images\/Image_MMOGames.png\" alt=\"Image_MMOGames\" width=\"716\" height=\"311\" \/><h3>Social Games<\/h3><p>Social Games are video games typically created for non-gamer mainstream audiences to simulate social interaction or enhance a social gathering. Social games are usually played with other people present in the same room and using a communal monitor as the springboard for various interactive gameplay.<\/p><ul><li>Party games.<\/li><li>Dance games.<\/li><\/ul><img class=\"aligncenter\" src=\".\/images\/Image_SocialGames.png\" alt=\"Image_SocialGames\" width=\"633\" height=\"342\" \/><\/div><a id=\"history-of-game-development-6\" class=\"dest\"><\/a>&nbsp;<div class=\"accent\"><h1>Iconic Game Designers and Developers<\/h1><h3>Alexey Pajitnov<\/h3><p>Alexey Pajitnov is the inventor and developer of what is perhaps the most popular video game of all time:<em> Tetris. Tetris<\/em> is a simple tile-matching game and the first game ever developed in the USSR and exported to the United States. Overall, <em>Tetris<\/em> has sold over 170 million copies and remains as popular as ever with mobile device game players.<\/p><img class=\"aligncenter\" src=\".\/images\/Image_AlexyPajitnov.png\" alt=\"Image_AlexyPajitnov\" width=\"590\" height=\"339\" \/><h3>Hironobu Sakaguchi<\/h3><p>Game designer, movie director and producer, Hironobu Sakaguchi is the creator of the <em>Final Fantasy<\/em> series of games; one of the most beloved RGP titles ever released. Sakaguchi also directed a very loose film adaption called <em>Final Fantasy: The Spirits Within<\/em>, which was a commercial failure. Overall, Hironobu Sakaguchi is a legend of the game industry with many popular titles under his guidance.<\/p><img class=\"aligncenter\" src=\".\/images\/Image_HironobuSakaguchi.png\" alt=\"Image_HironobuSakaguchi\" width=\"585\" height=\"360\" \/><h3>John Carmack<\/h3><p>Often topping lists of most influential people in the computer game industry, John Carmack, is credited with some of the biggest titles in the market as well as being an innovator in 3d graphics.<\/p><img class=\"aligncenter\" src=\".\/images\/Image_JohnCarmack.png\" alt=\"Image_JohnCarmack\" width=\"639\" height=\"303\" \/><h3>Satoshi Tajiri<\/h3><p>Satoshi Tajiri is the creator of<em> Pokémon<\/em>, one of the most successful hand-held gaming system titles of all time. Born in Japan in 1965, Satoshi was an avid video game player. He was also an enthusiastic collector of insects. It was the odd combination of these two passions that spawned the games <em>Pokémon Red<\/em> and <em>Pokémon Green<\/em>. When added with the other <em>Pokémon<\/em> titles, this intellectual property became a multi-billion dollar franchise and a huge success for Nintendo's Gameboy system. Tajiri is also credited with contributing on other iconic IPs such as the <em>Mario Bros<\/em> series of games and the <em>Legend of Zelda<\/em>.<\/p><img class=\"aligncenter\" src=\".\/images\/Image_SatoshiTajiri.png\" alt=\"Image_SatoshiTajiri\" width=\"545\" height=\"251\" \/><h3>Richard Garriott<\/h3><p>One of the more colorful figures in video game development is Richard Garriott, also known by his alter ego, Lord British, in the <em>Ultima<\/em> series of computer games. The <em>Ultima<\/em> games were a wildly popular series of early computer role-playing games that have evolved into a MMO. Garriott is also famous for being a science and space enthusiast and purchasing his way to a visit to the International Space Station in 2008.<\/p><img class=\"aligncenter\" src=\".\/images\/Image_RichardGarriott.png\" alt=\"Image_RichardGarriott\" width=\"693\" height=\"339\" \/><h3>Shigeru Miyamoto<\/h3><p>Often referred to as, “The father of modern gaming” Shigeru Miyamoto's amazing legacy is summed up in the game titles he created and developed including <em>Mario Bros., Donkey Kong, Star Fox<\/em> and the <em>Legend of Zelda<\/em> series to name just a few. Miyamoto's work and success with Nintendo has contributed to some of the most popular and iconic games and game characters in video games today.<\/p><img class=\"aligncenter\" src=\".\/images\/Image_ShigeruMiyamoto.png\" alt=\"Image_ShigeruMiyamoto\" width=\"716\" height=\"261\" \/><h3>Sid Meier<\/h3><p>Sid Meier is a prolific and successful video game programmer and designer most known for<em> Sid Meier's Civilization<\/em> series of games and <em>Sid Meier's Pirates<\/em>. His legacy reaches back into the early 80's and is considered one of the most influential and prolific game makers of all time.<\/p><img class=\"aligncenter\" src=\".\/images\/Image_SidMeier.png\" alt=\"Image_SidMeier\" width=\"677\" height=\"331\" \/><h3>Valve Corporation<\/h3><p>Valve is a vastly successful American video game developer best known for creating the <em>Team Fortress 2, Half-Life<\/em> and <em>Portal<\/em> games for PCs and consoles. Valve is also responsible for the hugely popular software distribution platform Steam and the creators of the Source engine.<\/p><p>Gabe Newell , born in Washington DC on November 3rd, 1962, is currently the Managing Director of Valve Corporation and one of its founders. Newell worked for Microsoft for 13 years after dropping out of Harvard and played a key role in the development of the first three versions of Windows. In 1996 he and Mike Harrington both left Microsoft to form Valve by developing the game Half-Life, which as a franchise has sold over 20 million units.<\/p><p>During the production of Half-Life Gabe also began work on Steam which was first released in 2003. Steam is platform that provides players with PC game installation and automatic updating across multiple computers and community features including online multiplayer, chat, and in game voice functionality.  Recent estimates have stated that over 75% of games bought online for PC are downloaded through the Steam platform.<\/p><img class=\"aligncenter\" src=\".\/images\/Image_Valve.png\" alt=\"Image_Valve\" width=\"679\" height=\"471\" \/><\/div><!--page:~~history-of-game-development-reference-text~~-->","title":"Reference Material"},{"bIsChecked":true,"exercise":".\/exercise\/DevProPongProHistory.stack","instructions":"<h1>Goals<\/h1><ol><li>Learn how to build your own custom sprites in Game Stack and how to assign custom sprites to template sprites.<\/li><li>Build a PongPro game based on your choice of a historical video game theme; for example:<ol><li>Pick a decade and build a game themed to that decade. IE make a 1980's themed PongPro game.<\/li><li>Pick a console or console generation and build a themed PongPro game. For example build a Sega only game or a PongPro game based on sprites only from games from the original NES.<\/li><li>Use your own creativity to build a PongPro game with a video game history theme.<\/li><\/ol><\/li><\/ol><h1>Steps<\/h1><ol><li>Click the <img src=\".\/images\/downloadbutton.png\" alt=\"layout.png\"\/> button at the top or bottom of this page to download the DevProPongProHistory.stack file.<\/li><li>Save the file to a location you can access on your computer.<\/li><li>Click to open the file in Game Stack.<\/li><li>Rebuild the original PongPro game from the template sprites:<p>Note that when you open the DevProPongProHistory.stack file the PongPro stage is selected but the Sprites area is empty. You will open a new area called Templates where you will find all of the PongPro sprites that you can then use to rebuild the full PongPro game and to then build your own custom Pongpro game.<\/p><img class=\"aligncenter\" src=\".\/images\/pongprotemplate.png\" alt=\"layout.png\"\/><ol><li>Select Edit - Toggle Template Sprites Tab to open access to the template sprites.<\/li><img class=\"aligncenter\" src=\".\/images\/selecttemplatetab.png\" alt=\"layout.png\"\/><li>Switch to the Templates tab and select the T_Ball template sprite. <\/li><img class=\"aligncenter\" src=\".\/images\/tballtemplate.png\" alt=\"layout.png\"\/><li>Right click the T_Ball template sprite and select 'new sprite'. This will add a copy of the green ball onto the stage with all of the programming needed for the PongPro game in the Sprites tab. <\/li><img class=\"aligncenter\" src=\".\/images\/tballtemplatenewsprite.png\" alt=\"layout.png\"\/><li>Click the <img src=\".\/images\/gamestackflag.png\" alt=\"gamestackflag.png\"\/> to start the game to test the ball. You will need to press the space bar to start the game (the in game text instructions to do this haven't been added yet!). <\/li><p>After pressing <img src=\".\/images\/gamestackflag.png\" alt=\"gamestackflag.png\"\/> and then the space bar you should hear the game music and the ball launch sound effect (without seeing the shrinking circle effect) and then see the green ball launch towards one of the goals. This will repeat until one of the sides gets 4pts, then you will hear the victory sound effect and need to hit the space bar to return to the main screen.<\/p><li>Repeat steps b and c to add all of the other sprites to complete building the original PongPro. You can press the  <img src=\".\/images\/gamestackflag.png\" alt=\"gamestackflag.png\"\/> at any time to test the game as you add sprites. You will need to move  or reposition a few of the sprites to perfectly match the original game.<\/li><li>You can choose to save your work at this point with a new file name. <\/li><li>Reopen a clean version of  DevProPongProHistory.stack file with nothing under the Sprites tab. <\/li><p>If you saved your previous work without changing the file name you can use the <img src=\".\/images\/downloadbutton.png\" alt=\"layout.png\"\/> button to download and open a new clean DevProPongProHistory.stack file.<\/p><\/ol><\/li><li>Add a custom ball and two custom paddles:<p>We will cover 3 ways to create a new sprite - Choose sprite from library, Upload sprite from file, and Paint new sprite. If your computer has an activecamera or web cam you can also add a New sprite from camera.<\/p> <p>For best results resizing the sprite that you select from the library, paint, or upload may be required. This is best done by selecting the sprite and then going to the Costumes tab where you have options to resize the sprite.<\/p> <ol><li>Select the <img src=\".\/images\/libraryicon.png\" alt=\"libraryicon.png\"\/>  to open the Game Stack image library. You can select any sprite from the library to use as a ball in your custom version of PongPro. Once you find the sprite you want to use select OK and notice the sprite is added to the area under the Sprites tab and is added on top of the stage.<\/li><img class=\"aligncenter\" src=\".\/images\/spritelibrary.png\" alt=\"SpriteLibrary.png\"\/><li>Select the sprite and then right click and select 'base on template sprite' and then select the T_Ball template sprite from the Choose Template Sprite pop up window and select OK.<\/li><img style=\"PADDING-RIGHT: 30px\" class=\"alignleft\" src=\".\/images\/baseontemplate.png\" alt=\"BaseonTemplate.png\"\/><img class=\"alignright\" src=\".\/images\/templatepopup.png\" alt=\"TemplatePopup.png\"\/><li>Select the <img src=\".\/images\/gamestackflag.png\" alt=\"gamestackflag.png\"\/> to test the sprite you choose as your ball just as you did earlier in this exercise when you copied the green ball sprite. <\/li><li>Select the <img src=\".\/images\/paintbrush.png\" alt=\"Paintbrush.png\"\/>  to create a new sprite and open the Costumes tab.<\/li><li>Select the <img src=\".\/images\/rectangleicon.png\" alt=\"rectangleicon.png\"\/> to draw a rectangle the size and shape that you want for your Left Paddle. <\/li><p>There are a lot of additional options on the Costumes tab to add color or other effects to your sprite that we will not cover in this exercise. But feel free to experiment to make as creative a paddle as you can!<\/p><img class=\"alignleft\" src=\".\/images\/paintrectangle.png\" alt=\"PaintRectangle.png\"\/><li>Select the sprite you just created with the <img src=\".\/images\/rectangleicon.png\" alt=\"rectangleicon.png\"\/>  and then right click and select 'base on template sprite' and then select the T_LeftPaddle template sprite from the Choose Template Sprite pop up window and select OK.<\/li><li>Assign the Left Paddle sprite name to the game by first selecting the Stage. Next locate (FOCUS AREA 1) and update the LeftPaddleName to be the same as the name of the rectangle sprite you just created. <\/li><p>HINTS: After selecting the stage you may need to switch to Scripts tab if another tab is selected to find <img src=\".\/images\/focusarea1.png\" alt=\"FocusArea1.png\"\/> . Also you could change the name of the rectangle sprite you just created (which is likely named Sprite1 or Sprite 2, etc) to be LeftPaddle to make it work fully in the PongPro game.<\/p><li>Select the <img src=\".\/images\/gamestackflag.png\" alt=\"gamestackflag.png\"\/> to test your new left paddle.<\/li> <p>Hint: You should be able to control the rectangle sprite with the W and S keys and the ball should bounce off of it if you did everything correctly. <\/p><li>Download an image file to be used as your Right Paddle. <\/li><li>Select the <img src=\".\/images\/foldericon.png\" alt=\"Foldericon.png\"\/>  and then navigate the Select file(s) to upload pop up window to the location of the file you saved to use for the Right Paddle, select the file and then select Open. <\/li><li>Select the uploaded sprite, right click and select 'base on template sprite' and then select the T_RightPaddle template sprite from the Choose Template Sprite pop up window and select OK.<\/li><li>Select the <img src=\".\/images\/gamestackflag.png\" alt=\"gamestackflag.png\"\/> to test the game. You should have a \"playable\" game with a ball and two paddles.<\/li><\/ol><\/li><li>Start with a clean DevProPongProHistory.stack file to create your own custom history themed PongPro game:<p>Below is a list of all the template sprites that make up PongPro with some specific hints here and there to help you while building a custom history themed PongPro game.<\/p><ol><li>Logo\/Game Title<\/li><img src=\".\/images\/pongprologosprite.png\" alt=\"pongprologosprite.png\"\/><p>You can use the drawing tools in Game Stack to make a new logo (for your new game name) or you can create a new logo in another program (like Adobe Photoshop) and import it as a new sprite.<\/p><li>Start game instructions<\/li><img src=\".\/images\/startpongprosprite.png\" alt=\"startpongprosprite.png\"\/><p>This sprite tells your players to press the space bar to start the game. You may use the Game Stack drawing tools to adjust the look and\/or color of the template sprite, or create a new sprite on your own that matches your historical theme.<\/p><li>Ball <\/li><img src=\".\/images\/pongproballsprite.png\" alt=\"pongproballsprite.png\"\/><li>Left and Right Paddles <\/li><img src=\".\/images\/pongpropaddlesprite.png\" alt=\"pongpropaddlesprite.png\"\/><p>Hint: Remember that you need to make sure the name of both the left and right paddle sprites match the assigned LeftPaddleName and RightPaddleName variables on the Stage.<\/p><li>Top and Bottom Boards <\/li><img src=\".\/images\/pongproboardssprite.png\" alt=\"pongproboardssprite.png\"\/><li>Left Score<\/li><img src=\".\/images\/pongproleftscoresprite.png\" alt=\"pongproleftscoresprite.png\"\/><p>Hint: There are no scripts in the game that position the score sprites. So where you manually place the score sprites is very important.<\/p> <li>Right Score <\/li><img src=\".\/images\/pongprorightscoresprite.png\" alt=\"pongprorightscoresprite.png\"\/><p>Hint: You must ensure that both the left and right score sprites have the costumes to increase the score to whatever you select the winning score to be.<\/p><li>Ball Spawn Animation <\/li><img src=\".\/images\/pongproballspawnsprite.png\" alt=\"pongproballspawnsprite.png\"\/><p>Hints: This animation works best with a circle that is 360 X 360 pixels when at 100% size. Where you manually place the circle is important to making the animation look correct.<\/p><li>Left Paddle Wins <\/li><img src=\".\/images\/pongproleftwinssprite.png\" alt=\"pongproleftwinssprite.png\"\/><p>Hint: It might make sense to change the team name from \"Left Paddle\" to a name that better matches the selected history theme.<\/p><li>Right Paddle Wins <\/li><img src=\".\/images\/pongprorightwinssprite.png\" alt=\"pongprorightwinssprite.png\"\/><li>Continue <\/li><img src=\".\/images\/pongprocontinuesprite.png\" alt=\"pongprocontinuesprite.png\"\/><\/ol><\/li><li>Consider the following questions<ol><li>How often did you test your game after adding new sprites? As you went through the exercise did you find yourself testing more or less often?<\/li><li>Did you come across a situation where you had to make a choice between a sprite that was best for the \"historical theme\" and a sprite that was better for \"game play\"? If so did you decide to go with the sprite that supported the historical theme or with the sprite that was better for the game? Do you think professional game developers face similar decisions?<\/li><li>Did you try using different sizes for your custom sprites for the ball or paddles? If so how did they effect game play?<\/li><\/ol><\/li><li>Change variable settings to finalize your custom PongPro game:<ol><li>Set the Ball Speed.<\/li><img class=\"alignleft\" src=\".\/images\/courseintroduction-stage.png\" alt=\"Stage.png\"\/><li>Set the Winning Score for each team.<\/li><li>Set the Paddle Speed.<\/li><\/ol><\/li><li>Submit your final work:<ol><li>Save a .stack file with your custom sprites and the settings for your custom history themed version of PongPro.<\/li><li>On a separate piece of paper write a summary explaining the historical theme you selected for your custom version of PongPro.<\/li><li>After your summary write about any \"bugs\" or issues you came across while building your custom game and explain what you did to overcome these issues.<\/li><li>Follow your teachers instructions to submit the .stack file and your written paragraphs to complete the exercise.<\/li><\/ol><\/li><\/ol><h1>Extra Credit<\/h1><ol><li>Change the stage to a background sprite that better matches your historical game theme.<\/li><li>Change the music and sound effects in the game.<\/li><li>Share your game with 5 people and have them provide feedback on your game.<\/li><li>Use a random number script to change the ball speed and\/or paddle speed variables.<\/li><\/ol><!--page:~~history-of-game-development-stack-exercise~~-->","link":"","mod":"history-of-game-development","movie":null,"name":"history-of-game-development-gamestack-exercise","promptfile":null,"prompts":null,"reference":null,"text":null,"title":"Game Stack Exercise"},{"bIsChecked":true,"exercise":"","instructions":"<h1>Goal<\/h1><p>In this Exercise we will create our own video game development timeline.<\/p><h1>Steps<\/h1><ol><li>Review the material in this module as well as doing additional research Online on the history of game development.<\/li><li>Conceive a narrative regarding some aspect of the history of game development.<\/li><li>Create a time-line that tracks ten (10) major turning points in the history of game development and tells the chosen narrative.<\/li><li>Make the time-line visually interesting using pictures from the Internet, charts and graphics, as well as text.<\/li><\/ol><h1>Hints and Challenges<\/h1><p>Among others, some possible time-line narratives could include the history of consoles, the history of hardware, the history of the industry, and the history of gaming. Remember, many time-lines will have points that connect to other timelines<\/p><!--page:~~history-of-game-development-exercise~~-->","link":"","mod":"history-of-game-development","movie":null,"name":"history-of-game-development-writing-exercise","promptfile":null,"prompts":null,"reference":null,"text":null,"title":"Writing Exercise"}]},{"bIsChecked":true,"name":"industry-terminology","title":"Industry Terminology","topics":[{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"industry-terminology","movie":".\/video\/Course1-Terminology-Overview.mp4","name":"Overview","promptfile":null,"prompts":null,"reference":"industry-terminology-1","text":null,"title":"Overview"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"industry-terminology","movie":".\/video\/Course1-Terminology-Acronyms.mp4","name":"Common Terms & Acronyms","promptfile":null,"prompts":null,"reference":"industry-terminology-2","text":null,"title":"Common Terms & Acronyms"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"industry-terminology","movie":".\/video\/Course1-Terminology-Part3.mp4","name":"Common Tools & Software","promptfile":null,"prompts":null,"reference":"industry-terminology-3","text":null,"title":"Common Tools & Software"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"reference","mod":"terminology","movie":null,"name":"Reference","promptfile":null,"prompts":null,"reference":null,"text":"<a id=\"industry-terminology-1\" class=\"dest\"><\/a><div class=\"accent\"><h1>Overview<\/h1><p>The world of video game development is large and complex with its own set of terms and technology particular to the needs of the industry. With so much rapid change, it is important for us to understand the current trends and terminology before we delve deeper into game design and development.<\/p><p>In this Module, we will first explore common terminology and Acronyms in video game development. While these will only be touched on briefly, many of the terms and concepts mentioned this Module will become much more defined as we progress through the Courses.<\/p><p>Next we will examine some common tools and software used to help in game development. While not all of these will be utilized within this curriculum, it is still important to know what they are and what they do. Overall, each of the tools and software discussed in this Module could be part of any given video game studio or project.<\/p><p>Much of the vocabulary discussed in this Module will be familiar to people who have a history of playing games and following video game trends and technology. Nevertheless, at the end of this Module, we will review and assess our knowledge with a vocabulary test.  In addition, and in support of this Module, there is a glossary included in the game development curriculum that expands on these terms and includes many more.<\/p><p>Topics in this Module will cover:<\/p><div style=\"text-align: center;\"><ul class=\"anchorGroup\" style=\"text-align: left; display: inline-block;\"><li><a class=\"ankor\" href=\"#industry-terminology-2\">Common Terminology and Acronyms in Video Game Development<\/a><\/li><li><a class=\"ankor\" href=\"#industry-terminology-3\">Common Tools and Software Used to Develop Video Games<\/a><\/li><\/ul><\/div><h1><\/h1><\/div><a id=\"industry-terminology-2\" class=\"dest\"><\/a>&nbsp;<div class=\"accent\"><h1>Common Terminology and Acronyms in Video Game Development<\/h1><p>Different studios or video game development companies often have their own development terms and phrases. Collected here are some of the most commonly used across the video game industry. Many of the terms discussed here are highly complex programming terms that will not fully make sense right now. Nevertheless, making these terms part of our lexicon now will be invaluable in getting up to speed with development concepts to come in later Modules.<\/p><h3>What is an Acronym?<\/h3><img class=\"aligncenter\" src=\".\/images\/image_acronyms.png\" alt=\"image_acronyms\" width=\"664\" height=\"498\" \/><p>We will see a lot of acronyms in this topic, so let's define what it means first and foremost. An acronym is when a word is formed from the first letters of words in a phrase to create a new “word” or term that now defines that phrase.<\/p><p>The following are some examples of common acronyms that students will probably recognize:<\/p><p>SCUBA is an acronym for \"Self-Contained Underwater Breathing Apparatus\".<\/p><img class=\"aligncenter\" src=\".\/images\/image_scuba.png\" alt=\"image_scuba\" width=\"521\" height=\"256\" \/><p>DIY is an acronym for \"Do It Yourself\".<\/p><p>ASAP is an acronym for \"As Soon As Possible\".<\/p><p>LASER is an acronym for \"Light Amplification by the Stimulated Emission of Radiation\"<\/p><img class=\"aligncenter\" src=\".\/images\/image_laser.png\" alt=\"image_laser\" width=\"519\" height=\"254\" \/><\/div>&nbsp;<div class=\"accent\"><h1>Common Video Game Industry Terms and Acronyms<\/h1><p><em>Integrated Development Environment (IDE)<\/em><\/p><p>Integrated Development Environment (IDE) is a software application that provides conveniences to programmers. IDE's are designed to help programmers maximize their productivity by offering tools such as source code editors, and features for modifying, debugging, and developing other software. Often, IDEs are specific to a programming language and offer features that are tied to aiding in that particular language.<\/p><p><em>Examples: Eclipse, Microsoft Visual Studios for use with C#<\/em><\/p>&nbsp;<p><em>Application Programming Interface (API)<\/em><\/p><p>Application Programming Interface  (API) allows programmers and Web developers to access tools to interact and design products or services connected to or powered by a particular piece of software. This is an intentional goal of the makers of the original software to allow other developers to utilize their software and do so more easily with an API.<\/p><p><em>Example: <a style=\"font-style: normal; color: #21759b !important;\" href=\"http:\/\/amazon.com\/\" rel=\"nofollow\">Amazon.com<\/a><span style=\"color: #3f4549;\"> offers an API to sellers so they can access Amazon product information and easily display it on their own website<\/span><\/em><\/p><p>&nbsp;<\/p><p><em>Software Development Kit (SDK)<\/em><\/p><p>Also called a “devkit”, a Software Development Kit (SDK) offers development tools that allow the creation of applications for particular software products. A SDK may include the implementation of an API through an IDE.<\/p><p><em>Example: Apple's iOS 8 SDK<\/em><\/p>&nbsp;<p><em>Repository<\/em><\/p><p>A repository is a location for storing and monitoring data, such as code or art. In addition to storing the files, a repository tracks users and their changes to create a history of the project's development. This is the core component of a source control management (SCM) system.<\/p>&nbsp;<p><em>Source Control Management (SCM)<\/em><\/p><p>Source Control Management (SCM) implements two primary functions: retrieving a specified set of changes from the repository or adding a specified set of changes to a repository. SCMs (also called Software Configuration Management) enable developers many options and securities such as parallel development, file integrity and protection, organizational tools, and quick development and revision tools.<\/p><p><em>Examples:  Apache Subversion (<span style=\"color: #3f4549;\">SVN), GitHub<\/span><\/em><\/p>&nbsp;<p><em>Game Design Document (GDD)<\/em><\/p><p>A Game Design Document (GDD) is the key manuscript\/blueprint of a video game. Its purpose is to describe in keen detail the entire design of the entire game with meticulous language and perfect structure. It is the video game industry's version of a movie script, storyboard and shooting schedule all-in-one. With a proper GDD, developers have a complete plan and layout of the game and how its development will be executed. Our understanding of a Game Design Document will be greatly expanded in the next Arc of this Course.<\/p>&nbsp;<p><em>Technical Design Document (TDD)<\/em><\/p><p>Where the Game Design Document is a documentation of a game's design and function, the Technical Design Document (TDD) refers to the actual programming and technical architecture of the game. It is a highly procedural document specifying the implementation of programming, hosting or other complex technical information not in the GDD.<\/p>&nbsp;<p><em>Game Engine<\/em><\/p><p>A Game Engine is a software framework specifically geared toward creating video games without building them from the ground up. Game engines tend to offer several complete systems or tools, which developers would normally have to code themselves. For example, a game engine may offer full 3D rendering, a GUI system, scripting, physics, AI, and so on. Some engines also ship with tools, such as level and particle editors, to further facilitate rapid development of a new game project.<\/p><p><em>Examples: Torque 2D, Torque 3D, Unreal, MonoGame, Unity<\/em><\/p>&nbsp;<p><em>Non-Player Character (NPC)<\/em><\/p><p>This is a term most often used in Role-Playing Games (RPGs). It refers to people, monsters, or other in-game characters that are not controlled by a Player. An NPC can be helpful (quest giver), hostile (enemy to fight), or just hang around looking pretty (décor). Their purpose is to offer allies, challenges and characters to build world and story with.<\/p><p><em>Entertainment Software Rating Board (ESRB)<\/em><\/p><p>A committee that reviews video game content and issues ratings categories to inform consumers of a game's age appropriateness (USA\/Canada\/Mexico). Similar systems include PEGI (Europe\/Israel\/Canada) and CERO (Japan). The Apple App Store and Google Play also have their own rating systems.<\/p><\/div><a id=\"industry-terminology-3\" class=\"dest\"><\/a>&nbsp;<div class=\"accent\"><h1>Common Tools and Software Used to Develop Video Games<\/h1>&nbsp;<p>As the game development industry has grown, so has they technology to build games. Today there are many tools and programs out there specifically designed to aid in game development. Though most of these will not be utilized in this curriculum, it is still good to know what they are and how they help developers make games cheaper, faster and better.<\/p>&nbsp;<p><em>Maya <\/em><\/p><p>Maya is 3D graphics software used to create 3D visual effects for video games, animation, and other entertainment media. Maya is mostly known for its robust animation tools.<\/p>&nbsp;<p><em>Autodesk 3ds Max <\/em><\/p><p>Like Maya, and now owned by the same parent company, Autodesk 3ds Max is another 3D computer graphics program. It is used in the industry mostly for modeling, texturing and rendering.<\/p>&nbsp;<p><em>Adobe Photoshop<\/em><\/p><p>This is a popular program used to create and manipulate visual images. Photoshop is widely used in video game development and across visual media.<\/p>&nbsp;<p><em>Adobe Creative Suite<\/em><\/p><p>A bundle of Adobe applications that include Photoshop, Acrobat, InDesign and other programs used in games, video editing, and Web development projects.<\/p>&nbsp;<p><em>MonoGame<\/em><\/p><p>MonoGame allows game developers to make their Windows App games run on other phone and tablet systems such as Mac OS, Android and others. Note that this curriculum uses MonoGame when it is necessary for students to do exercises involving code.<\/p>&nbsp;<p><em>Unity (Game Engine)<\/em><\/p><p>Widely used cross-platform game building engine with many features including a built-in Integrated Development Environment (IDE).<\/p>&nbsp;<p><em>Subversion (SVN)<\/em><\/p><p>Source Control (or Version Control) software that allows developers to use a common source repository and file tracking.<\/p>&nbsp;<p><em>Git<\/em><\/p><p>Git is Source Code Management (SCM) and revision control software that is designed to speed up the development process. Git is free software.<\/p>&nbsp;<p><em>Microsoft Visual Studio<\/em><\/p><p>An Integrated Development Environment (IDE) developed by Microsoft specifically to aid computer programs and video games progress for Windows systems.<\/p>&nbsp;<p><em>Zbrush<\/em><\/p><p>A widely used digital sculpting tool that aids in 2D\/3D models, painting, and textures. It is often used in video games, movies, and high-quality animations.<\/p>&nbsp;<p><em>Microsoft Word<\/em><\/p><p>This widely used text editor is an invaluable tool for writers, game designers, and producers.<\/p>&nbsp;<p><em>Microsoft Excel<\/em><\/p><p>Also part of the Microsoft Office suite is Microsoft's spreadsheet program, Excel. This program is used  to organize charts and data and to preform complex analyses of that data.<\/p>&nbsp;<p><em>Torque 3D (Game Engine)<\/em><\/p><p>Another popular video game engine for 3D games that is now free under the MIT License.<\/p>&nbsp;<p><em>Marmalade<\/em><\/p><p>Cross platform Software Development Kit (SDK) for C++ (a programming language).<\/p>&nbsp;<\/div><!--page:~~industry-terminology-reference-text~~-->","title":"Reference Material"},{"bIsChecked":true,"exercise":".\/exercise\/QuizShow.stack","instructions":"<h1>Goals<\/h1><ol><li>Learn key terminology and acronyms of the game industry.<\/li><\/ol><h1>Steps<\/h1><ol><li>Click the <img src=\".\/images\/downloadbutton.png\" alt=\"layout.png\"\/> button at the top or bottom of this page to download the QuizShow.stack file.<\/li><li>Save the file to a location you can access on your computer.<\/li><li>Click to open the file in Game Stack.<\/li><li>Run the game by clicking the green flag button <img src=\".\/images\/gamestackflag.png\" alt=\"gamestackflag.png\"\/><\/li><li>Follow the directions on screen, and answer each of the questions<\/li><\/ol><h1>Extra Credit<\/h1><ol><li>Using the guide below to edit \/ add questions to the quiz, create a quiz about the video game industry and share it with other people.<\/li><ol class=\"alpha\"><li>Navigate to the Data tab.<br\/><img src=\".\/images\/data_tab.png\" alt=\"data_tab.png\"\/><\/li><li>Find the “Questions” list and check the box next to it, so that it shows up in the GameStack window. <br\/><img src=\".\/images\/questions_checked.png\" alt=\"questions_checked.png\"\/><\/li><li>You will see a list of questions. You can add to the list, or modify what is already there. <br\/><img src=\".\/images\/questions_list.png\" alt=\"questions_list.png\"\/><\/li><li>For this example, change the first question to “What does a duck say?” <br\/><img src=\".\/images\/questions_list_modified.png\" alt=\"questions_list_modified.png\"\/><\/li><li>Now, in the same Data tab, there is a list called “Answers”. Check its box to reveal it. <br\/><img src=\".\/images\/answers_checked.png\" alt=\"answers_checked.png\"\/><\/li><li>These are correct answers only. Each line in the Answers list corresponds to the same slot in the Questions list. So for this example, we will change the 1st element in the list to “Quack”. <br\/><img src=\".\/images\/questions_answers_list.png\" alt=\"questions_answers_list.png\"\/><\/li><li>Now comes the confusing part: Setting up the multiple choice answers. They are located in a list called “MultipleChoices”. Just like the Answers correspond to the Questions list, the MultipleChoices list will correspond to the slots in the Answers and Questions lists. However, since there are 4 potential answers per question, they will not correspond in a 1 to 1 ratio. Instead, they will go in a 1 to 4 ratio: the 1st 4 multiple choice answers in the MultipleChoices list will be the choices for the 1st question in the Questions list. The 2nd 4 multiple choice answers (5-8) will be the answers for the 2nd question. The slots 9-12 will line up to the 3rd question in the Questions list, and so on. With all that considered, lets change the 1st 4 potential answers in the multiple choice list. In the MultipleChoices list, replace element 1 with “ruff”, element 2 with “meow”, element 3 with “quack” (the correct answer!), and element 4 with “chirp”.<br\/><img src=\".\/images\/questions_multiple_choices.png\" alt=\"questions_multiple_choices.png\"\/><\/li><li><b>Note that the answers in the MultipleChoices can not use punctuation marks (\"@#$';).<\/b><\/li><li> Click the green flag <img src=\".\/images\/gamestackflag.png\" alt=\"gamestackflag.png\"\/> and your new question will randomly be asked! <\/li><li> Change all of the questions to test the knowledge of your friends. <\/li><\/ol><\/ol><!--page:~~industry-terminology-exercise-stack~~-->","link":null,"mod":"industry-terminology","movie":null,"name":"industry-terminology-gamestack-exercise","promptfile":null,"prompts":null,"reference":null,"text":null,"title":"Game Stack Exercise"},{"bIsChecked":true,"exercise":"","instructions":"<h1>Goal<\/h1><p>To demonstrate knowledge of major terms, acronyms, or software used in video game development.<\/p><h1>Steps<\/h1><ol><li>Choose a video game development tool or software discussed in this module, or one researched from the Internet.<\/li><li>Write a 4 - 5 paragraph essay that explains in detail what the purpose of the tool or software is used for in video game development.<\/li><li>Include explanations and detailed descriptions of at least three video game development terms or acronyms used in describing what the tool or software does.<\/li><li>Discuss the pros and cons of the tool or software.<\/li><\/ol><h1>Hints and Challenges<\/h1><p>Possible subjects could include a game engine like Unity, an art tool such as Photoshop, or source control software such as Github. For a challenge, pick something you are not familiar with.<\/p><!--page:~~industry-terminology-exercise~~-->","link":null,"mod":"industry-terminology","movie":null,"name":"industry-terminology-writing-exercise","promptfile":null,"prompts":null,"reference":null,"text":null,"title":"Writing Exercise"}]},{"bIsChecked":true,"name":"game-theory","title":"Game Theory","topics":[{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"game-theory","movie":".\/video\/gametheory-overview-micro-1.mp4","name":"Overview","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"mechanics"},{"order":0,"points":0,"sticky":false,"text":"studios"},{"order":0,"points":0,"sticky":false,"text":"demographics"},{"order":0,"points":0,"sticky":false,"text":"genres"}],"failure":{"button":null,"message":"Game theory helps us understand why mechanics work or don't work in a video game. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn1-gametheory-overview-micro-1","number_of_choices":4,"question":"Video game _____ are elements of game theory.","start":3600,"success":{"button":null,"message":"Game theory helps us understand why mechanics work or don't work in a video game. "},"type":null}],"reference":"game-theory-1","text":null,"title":"Overview"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"game-theory","movie":".\/video\/gametheory-overview-micro-2.mp4","name":"Game Theory Studies","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"engineering "},{"order":0,"points":100,"sticky":false,"text":"economics"},{"order":0,"points":0,"sticky":false,"text":"chemistry "},{"order":0,"points":0,"sticky":false,"text":"calligraphy "}],"failure":{"button":null,"message":"Game Theory can apply to many areas of study such as economics, sociology, and mathematics. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn2-gametheory-overview-micro-2","number_of_choices":4,"question":"Game theory can be applied to many fields of study, such as _____.","start":3600,"success":{"button":null,"message":"Game Theory can apply to many areas of study such as economics, sociology, and mathematics. "},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"skill; talent"},{"order":0,"points":0,"sticky":false,"text":"age; experience"},{"order":0,"points":100,"sticky":false,"text":"choices; actions"},{"order":0,"points":0,"sticky":false,"text":"talent; efficacy "}],"failure":{"button":null,"message":"It is the outcome of people's interactive competitive or cooperative choices that game theory is most interested in.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn3-gametheory-overview-micro-2","number_of_choices":4,"question":"Game theory studies outcomes involving the _____ and _____ of competing parties.","start":3600,"success":{"button":null,"message":"It is the outcome of people's interactive competitive or cooperative choices that game theory is most interested in.  "},"type":null}],"reference":"game-theory-1","text":null,"title":"Game Theory Studies"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"game-theory","movie":".\/video\/gametheory-overview-micro-3.mp4","name":"Modern Game Theory","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"ancient warfare"},{"order":0,"points":0,"sticky":false,"text":"World War I"},{"order":0,"points":0,"sticky":false,"text":"the 1940's"},{"order":0,"points":0,"sticky":false,"text":"the invention of Pong"}],"failure":{"button":null,"message":"Sun Tzu's the Art of War demonstrates some of the first writings on what we call game theory today. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn4-gametheory-overview-micro-3","number_of_choices":4,"question":"Game Theory traces its origins to _____. ","start":3600,"success":{"button":null,"message":"Sun Tzu's the Art of War demonstrates some of the first writings on what we call game theory today. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"video games"},{"order":0,"points":0,"sticky":false,"text":"warfare"},{"order":0,"points":0,"sticky":false,"text":"economics"},{"order":0,"points":100,"sticky":false,"text":"math"}],"failure":{"button":null,"message":"Newman was a mathematician who made many significant contributions in the 1930's and 1940's."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn5-gametheory-overview-micro-4","number_of_choices":4,"question":"John Von Newman created the field of game theory in academics as a study of _____. ","start":3600,"success":{"button":null,"message":"Newman was a mathematician who made many significant contributions in the 1930's and 1940's."},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"zero sum"},{"order":0,"points":100,"sticky":false,"text":"min\/max"},{"order":0,"points":0,"sticky":false,"text":"relativity "},{"order":0,"points":0,"sticky":false,"text":"art of war"}],"failure":{"button":null,"message":"Newman's min\/max theorem is still used today in game theory, math, and philosophy."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn6-gametheory-overview-micro-4","number_of_choices":4,"question":"John Von Newman's most famous contribution to game theory, and by extension to game design, was his _____ theorem. ","start":3600,"success":{"button":null,"message":"Newman's min\/max theorem is still used today in game theory, math, and philosophy."},"type":"Multiple"}],"reference":"game-theory-1","text":null,"title":"Modern Game Theory"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"game-theory","movie":".\/video\/gametheory-overview-micro-4.mp4","name":"Game Theory Simplified","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"genres; mechanics"},{"order":0,"points":0,"sticky":false,"text":"math; battlefields"},{"order":0,"points":100,"sticky":false,"text":"math; statistics"},{"order":0,"points":0,"sticky":false,"text":"statistics; mechanics"}],"failure":{"button":null,"message":"Understanding how the math works helps us align our game design goals.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn7-gametheory-overview-micro-4","number_of_choices":4,"question":"Game theory can be a very complex and abstract concept dealing with _____ and _____.","start":3600,"success":{"button":null,"message":"Understanding how the math works helps us align our game design goals.  "},"type":null}],"reference":"game-theory-1","text":null,"title":"Game Theory Simplified"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"ssdm","mod":"game-theory","movie":".\/video\/gametheory-ssdm-intro-micro-1.mp4","name":"Strategic Decision Making","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"Game controller reaction"},{"order":0,"points":0,"sticky":false,"text":"Decision making"},{"order":0,"points":0,"sticky":false,"text":"Social interactions"},{"order":0,"points":0,"sticky":false,"text":"Competition among people"}],"failure":{"button":null,"message":"Game theory is interested in people interacting with other people, not how a machine may work. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn8-gametheory-ssdm-intro-micro-1","number_of_choices":4,"question":"_____ is NOT a consideration of game theory","start":3600,"success":{"button":null,"message":"Game theory is interested in people interacting with other people, not how a machine may work. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"animal"},{"order":0,"points":100,"sticky":false,"text":"human"},{"order":0,"points":0,"sticky":false,"text":"artificial intelligence"},{"order":0,"points":0,"sticky":false,"text":"computer"}],"failure":{"button":null,"message":"The interaction of people in states of competition or cooperation are what game theory studies and tries to predict. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn9-gametheory-ssdm-intro-micro-1","number_of_choices":4,"question":"Game theory looks to predict _____ behavior using mathematical models.","start":3600,"success":{"button":null,"message":"The interaction of people in states of competition or cooperation are what game theory studies and tries to predict. "},"type":"Multiple"}],"reference":"game-theory-2","text":null,"title":"Strategic Decision Making"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"ssdm","mod":"game-theory","movie":".\/video\/gametheory-ssdm-prisonersdilemma-micro-2.mp4","name":"Prisoner's Dilemma","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"game design"},{"order":0,"points":0,"sticky":false,"text":"game programming"},{"order":0,"points":0,"sticky":false,"text":"character behaviors"},{"order":0,"points":100,"sticky":false,"text":"game theory"}],"failure":{"button":null,"message":"The Prisoner's Dilemma is a very real thing for many caught in criminal plea bargining. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn10-gametheory-ssdm-prisonersdilemma-micro-2","number_of_choices":4,"question":"The Prisoner's Dilemma is a famous model demonstrating _____. ","start":3600,"success":{"button":null,"message":"The Prisoner's Dilemma is a very real thing for many caught in criminal plea bargining. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Both prisoners will cheat"},{"order":0,"points":100,"sticky":false,"text":"Neither prisoner has knowledge of the others' decision "},{"order":0,"points":0,"sticky":false,"text":"Nobody wants to go to jail"},{"order":0,"points":0,"sticky":false,"text":"The judge could change her mind"}],"failure":{"button":null,"message":"The dilemma comes from not knowing what the other prisoner will do until both have made a final decision.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn11-gametheory-ssdm-prisonersdilemma-micro-2","number_of_choices":4,"question":"The reason the Prisoner's Dilemma is such a dilemma is because _____.","start":3600,"success":{"button":null,"message":"The dilemma comes from not knowing what the other prisoner will do until both have made a final decision.  "},"type":"Multiple"},{"choices":[{"order":0,"points":100,"sticky":false,"text":"They both remain silent"},{"order":0,"points":0,"sticky":false,"text":"They both testify against the other"},{"order":0,"points":0,"sticky":false,"text":"Prisoner A testifies against Prisoner B"},{"order":0,"points":0,"sticky":false,"text":"Prisoner B testifies against Prisoner A"}],"failure":{"button":null,"message":"Although they are both unaware of what the other will do, if they could collude for the best result for both of them, they would both chose to remain silent.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn12-gametheory-ssdm-prisonersdilemma-micro-2","number_of_choices":4,"question":"In the Prisoner's Dilemma, what is the best outcome for both prisoners?","start":3600,"success":{"button":null,"message":"Although they are both unaware of what the other will do, if they could collude for the best result for both of them, they would both chose to remain silent.  "},"type":"Multiple"}],"reference":"game-theory-2","text":null,"title":"Prisoner's Dilemma"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"ssdm","mod":"game-theory","movie":".\/video\/gametheory-ssdm-zerosum-micro-3.mp4","name":"Zero Sum","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"sub-zero game"},{"order":0,"points":0,"sticky":false,"text":"zero-game theory"},{"order":0,"points":0,"sticky":false,"text":"zero-outcome solution"},{"order":0,"points":100,"sticky":false,"text":"zero-sum game"}],"failure":{"button":null,"message":"a zero-sum game is a competition where when one person wins, the other person also loses. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn13-gametheory-ssdm-zerosum-micro-3","number_of_choices":4,"question":"The Prisoner's Dilemma creates a scenario known in game theory as a _____ ","start":3600,"success":{"button":null,"message":"a zero-sum game is a competition where when one person wins, the other person also loses. "},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"winning"},{"order":0,"points":0,"sticky":false,"text":"losing"},{"order":0,"points":100,"sticky":false,"text":"risk"},{"order":0,"points":0,"sticky":false,"text":"jail time"}],"failure":{"button":null,"message":"Not knowing the decisions of the other party in a zero-sum game means any choice will involve risk.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn15-gametheory-ssdm-zerosum-micro-3","number_of_choices":4,"question":"All possible decisions in a zero-sum game involve _____. ","start":3600,"success":{"button":null,"message":"Not knowing the decisions of the other party in a zero-sum game means any choice will involve risk.  "},"type":null},{"choices":[{"order":0,"points":100,"sticky":false,"text":"choices; consequences"},{"order":0,"points":0,"sticky":false,"text":"visuals; sound"},{"order":0,"points":0,"sticky":false,"text":"genre; target audience"},{"order":0,"points":0,"sticky":false,"text":"players; non-player characters"}],"failure":{"button":null,"message":"Making choices that have consequences is a core element of most video games.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn16-gametheory-ssdm-zerosum-micro-3","number_of_choices":4,"question":"Zero-sum games demonstrate _____ and _____ just like a good video game.","start":3600,"success":{"button":null,"message":"Making choices that have consequences is a core element of most video games.  "},"type":null}],"reference":"game-theory-2","text":null,"title":"Zero Sum"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"ssdm","mod":"game-theory","movie":".\/video\/gametheory-ssdm-pdoutcome-micro-4.mp4","name":"Prisoner's Dilemma Outcome","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"Both prisoners will remain silent"},{"order":0,"points":100,"sticky":false,"text":"Both prisoners will testify against the other"},{"order":0,"points":0,"sticky":false,"text":"Prisoner A will testify against Prisoner B"},{"order":0,"points":0,"sticky":false,"text":"Prisoner B with testify against Prisoner A"}],"failure":{"button":null,"message":"Not knowing what the other prisoner will do, the most predictable outcome is both prisoners will take the best option for themselves, and testify against the other. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn17-gametheory-ssdm-pdoutcome-micro-4","number_of_choices":4,"question":"What is the most predictable outcome in the Prisoner's Dilemma? ","start":3600,"success":{"button":null,"message":"Not knowing what the other prisoner will do, the most predictable outcome is both prisoners will take the best option for themselves, and testify against the other. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"attitude"},{"order":0,"points":0,"sticky":false,"text":"animosity "},{"order":0,"points":100,"sticky":false,"text":"predictability "},{"order":0,"points":0,"sticky":false,"text":"fairness"}],"failure":{"button":null,"message":"By changing the outcomes or consequences of any decision, we alter the predictability of the prisoners' decisions. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn18-gametheory-ssdm-pdoutcome-micro-4","number_of_choices":4,"question":"By changing the parameters of the jail time served we can alter the _____ of the prisoners' decisions. ","start":3600,"success":{"button":null,"message":"By changing the outcomes or consequences of any decision, we alter the predictability of the prisoners' decisions. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"they give up trying"},{"order":0,"points":0,"sticky":false,"text":"of randomness"},{"order":0,"points":100,"sticky":false,"text":"they learn from past mistakes"},{"order":0,"points":0,"sticky":false,"text":"they get to know the judge"}],"failure":{"button":null,"message":"Knowledge of past mistakes allows for new considerations when faced with those choices again.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn19-gametheory-ssdm-pdoutcome-micro-4","number_of_choices":4,"question":"Repeating the Prisoner's Dilemma multiple times can also alter the predictability of the prisoners' choices because _____ ","start":3600,"success":{"button":null,"message":"Knowledge of past mistakes allows for new considerations when faced with those choices again.  "},"type":"Multiple"}],"reference":"game-theory-2","text":null,"title":"Prisoner's Dilemma Outcome"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"ssdm","mod":"game-theory","movie":".\/video\/gametheory-ssdm-mathmodels-micro-5.mp4","name":"Mathematical Models","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"combat mechanics"},{"order":0,"points":0,"sticky":false,"text":"zero-sum games"},{"order":0,"points":0,"sticky":false,"text":"genres"},{"order":0,"points":0,"sticky":false,"text":"marketing"}],"failure":{"button":null,"message":"Mathematical models are used for just about any interaction in a game that involves conflict resolution, such as in combat scenarios. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn20-gametheory-ssdm-mathmodels-micro-5","number_of_choices":4,"question":"Mathematical models are used in game design to create _____.","start":3600,"success":{"button":null,"message":"Mathematical models are used for just about any interaction in a game that involves conflict resolution, such as in combat scenarios. "},"type":null}],"reference":"game-theory-2","text":null,"title":"Mathematical Models"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"ssdm","mod":"game-theory","movie":".\/video\/gametheory-ssdm-sos-micro-6.mp4","name":"Science of Strategy","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"the limitation of only two people with competing interests"},{"order":0,"points":0,"sticky":false,"text":"the prisoners not having lawyers"},{"order":0,"points":0,"sticky":false,"text":"the prisoners not knowing all of their options"},{"order":0,"points":0,"sticky":false,"text":"each prisoner knowing what the other will do"}],"failure":{"button":null,"message":"When we add more individuals with competing interest, the predictability is severely lessened. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn21-gametheory-ssdm-sos-micro-6","number_of_choices":4,"question":"The predictability of the prisoners' choices made in the Prisoner's Dilemma is largely due to _____.","start":3600,"success":{"button":null,"message":"When we add more individuals with competing interest, the predictability is severely lessened. "},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"complexity"},{"order":0,"points":0,"sticky":false,"text":"motivations"},{"order":0,"points":0,"sticky":false,"text":"experience "},{"order":21,"points":100,"sticky":false,"text":"All of the above"}],"failure":{"button":null,"message":"Humans are complex and have unpredictable motivations and experience on an individual level.   "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn22-gametheory-ssdm-sos-micro-6","number_of_choices":4,"question":"The Prisoner's Dilemma is limited in its predictability because it does NOT consider individual _____ ","start":3600,"success":{"button":null,"message":"Humans are complex and have unpredictable motivations and experience on an individual level.   "},"type":null}],"reference":"game-theory-2","text":null,"title":"Science of Strategy"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"ssdm","mod":"game-theory","movie":".\/video\/gametheory-ssdm-nash-micro-7.mp4","name":"Nash Equilibrium","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"Equilibrium"},{"order":0,"points":0,"sticky":false,"text":"A Simple Mind"},{"order":0,"points":100,"sticky":false,"text":"A Beautiful Mind"},{"order":0,"points":0,"sticky":false,"text":"The Nash Equilibrium "}],"failure":{"button":null,"message":"A Beautiful Mind was released in 2002 and stared Russell Crowe as John Nash. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn23-gametheory-ssdm-nash-micro-7","number_of_choices":4,"question":"John Nash was the subject of a movie called _____.","start":3600,"success":{"button":null,"message":"A Beautiful Mind was released in 2002 and stared Russell Crowe as John Nash. "},"type":null},{"choices":[{"order":0,"points":100,"sticky":false,"text":"economics"},{"order":0,"points":0,"sticky":false,"text":"aeronautics "},{"order":0,"points":0,"sticky":false,"text":"physics "},{"order":0,"points":0,"sticky":false,"text":"medicine  "}],"failure":{"button":null,"message":"Nash was a mathematician who received the Nobel Prize for his work in the field of economics."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn24-gametheory-ssdm-nash-micro-7","number_of_choices":4,"question":"In 1994, John Nash won the Nobel Prize for his work in _____ using game theory.","start":3600,"success":{"button":null,"message":"Nash was a mathematician who received the Nobel Prize for his work in the field of economics."},"type":null},{"choices":[{"order":0,"points":100,"sticky":false,"text":"balance of strategy"},{"order":0,"points":0,"sticky":false,"text":"code of conduct"},{"order":0,"points":0,"sticky":false,"text":"friendship"},{"order":0,"points":0,"sticky":false,"text":"mistrust "}],"failure":{"button":null,"message":"In video games, equilibrium means each player has the same strategy options as another. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn25-gametheory-ssdm-nash-micro-7","number_of_choices":4,"question":"In video games, equilibrium means there is a _____ among all players.","start":3600,"success":{"button":null,"message":"In video games, equilibrium means each player has the same strategy options as another. "},"type":null}],"reference":"game-theory-2","text":null,"title":"Nash Equilibrium"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"ssdm","mod":"game-theory","movie":".\/video\/gametheory-ssdm-opstrategies-micro-8.mp4","name":"Optimum Strategies","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"game theory"},{"order":0,"points":0,"sticky":false,"text":"Mathematical "},{"order":0,"points":0,"sticky":false,"text":"Nash"},{"order":0,"points":100,"sticky":false,"text":"Optimum"}],"failure":{"button":null,"message":"Understanding that others have the same choices in a competition helps formulate optimum strategies. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn26-gametheory-ssdm-opstrategies -micro-8","number_of_choices":4,"question":"_____ strategies involve making choices that consider the action of others.","start":3600,"success":{"button":null,"message":"Understanding that others have the same choices in a competition helps formulate optimum strategies. "},"type":null}],"reference":"game-theory-2","text":null,"title":"Optimum Strategies"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"core-components","mod":"game-theory","movie":".\/video\/gametheory-core-intro-micro-1.mp4","name":"Core Components","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"Player"},{"order":0,"points":0,"sticky":false,"text":"Payoff"},{"order":0,"points":100,"sticky":false,"text":"Objective"},{"order":0,"points":0,"sticky":false,"text":"Information"}],"failure":{"button":null,"message":"The four core components of game theory in video games are players, payoff, actions, and Information."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn31-gametheory-core-intro-micro-1","number_of_choices":4,"question":"Which of the following is NOT a core component of game theory in video games?","start":3600,"success":{"button":null,"message":"The four core components of game theory in video games are players, payoff, actions, and Information."},"type":"Multiple"}],"reference":"game-theory-3","text":null,"title":"Core Components"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"core-components","mod":"game-theory","movie":".\/video\/gametheory-core-players-micro-2.mp4","name":"Players","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"goals; strategies"},{"order":0,"points":0,"sticky":false,"text":"hit points; experience points"},{"order":0,"points":0,"sticky":false,"text":"goals; rewards"},{"order":0,"points":0,"sticky":false,"text":"controller reaction; rewards"}],"failure":{"button":null,"message":"In general, good game design will ensure a balance of strategies and goals among all players."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn32-gametheory-core-players-micro-2","number_of_choices":4,"question":"Good game design will ensure each player has a balance of_____ and _____ available to them.","start":3600,"success":{"button":null,"message":"In general, good game design will ensure a balance of strategies and goals among all players."},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"power-ups are collected"},{"order":0,"points":100,"sticky":false,"text":"more people participate"},{"order":0,"points":0,"sticky":false,"text":"experience points are gained"},{"order":0,"points":0,"sticky":false,"text":"people begin to cheat"}],"failure":{"button":null,"message":"The number of players in a game has profound effects on how different strategies work. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn33-gametheory-core-players-micro-2","number_of_choices":4,"question":"Game theory demonstrates that strategies change as _____.","start":3600,"success":{"button":null,"message":"The number of players in a game has profound effects on how different strategies work. "},"type":"Multiple"}],"reference":"game-theory-3","text":null,"title":"Players"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"core-components","mod":"game-theory","movie":".\/video\/gametheory-core-payoff-micro-3.mp4","name":"Payoff","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"exhaustion "},{"order":0,"points":0,"sticky":false,"text":"bragging rights"},{"order":0,"points":100,"sticky":false,"text":"subjective"},{"order":0,"points":0,"sticky":false,"text":"bad grades in school"}],"failure":{"button":null,"message":"Everyone determines the payoff of any activity, including video games, subjectively. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn34-gametheory-core-payoff-micro-3","number_of_choices":4,"question":"Although we can assume players gain some enjoyment from playing a video game, the actual payoff is mostly _____.","start":3600,"success":{"button":null,"message":"Everyone determines the payoff of any activity, including video games, subjectively. "},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"boredom"},{"order":0,"points":0,"sticky":false,"text":"money"},{"order":0,"points":100,"sticky":false,"text":"payoff"},{"order":0,"points":0,"sticky":false,"text":"competition"}],"failure":{"button":null,"message":"The problem with payoff, is that is can be perceived differently for different players."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn35-gametheory-core-payoff-micro-3","number_of_choices":4,"question":"Even though video games can be frustrating or difficult, people continue to play them because of _____.","start":3600,"success":{"button":null,"message":"The problem with payoff, is that is can be perceived differently for different players."},"type":null}],"reference":"game-theory-3","text":null,"title":"Payoff"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"core-components","mod":"game-theory","movie":".\/video\/gametheory-core-actions-micro-4.mp4","name":"Actions","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"strategies"},{"order":0,"points":0,"sticky":false,"text":"payoff"},{"order":0,"points":100,"sticky":false,"text":"actions"},{"order":0,"points":0,"sticky":false,"text":"knowledge"}],"failure":{"button":null,"message":"Actions are defined by what options a player has and when those options can be acted upon."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn36-gametheory-core-actions-micro-4","number_of_choices":4,"question":"In a video game, what a player can do, and when they can do them, are defined as _____.","start":3600,"success":{"button":null,"message":"Actions are defined by what options a player has and when those options can be acted upon."},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"turn-based"},{"order":0,"points":0,"sticky":false,"text":"action-oriented "},{"order":0,"points":100,"sticky":false,"text":"simultaneous "},{"order":0,"points":0,"sticky":false,"text":"mixed strategy"}],"failure":{"button":null,"message":"Real-time means there are no turns for players and that all game play happens at the same time. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn37-gametheory-core-actions-micro-4","number_of_choices":4,"question":"Real-time strategy games are examples of _____ game play","start":3600,"success":{"button":null,"message":"Real-time means there are no turns for players and that all game play happens at the same time. "},"type":null}],"reference":"game-theory-3","text":null,"title":"Actions"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"core-components","mod":"game-theory","movie":".\/video\/gametheory-core-info-micro-5.mp4","name":"Information","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"Information"},{"order":0,"points":0,"sticky":false,"text":"action"},{"order":0,"points":0,"sticky":false,"text":"payoff"},{"order":0,"points":0,"sticky":false,"text":"optimal "}],"failure":{"button":null,"message":"A player's in-game information has a profound effect on game play. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn38-gametheory-core-info-micro-5","number_of_choices":4,"question":"The core component of what a player knows or does not know as they play through a game is called _____.","start":3600,"success":{"button":null,"message":"A player's in-game information has a profound effect on game play. "},"type":"Multiple"},{"choices":[{"order":0,"points":100,"sticky":false,"text":"perfect information on what the other player is doing"},{"order":0,"points":0,"sticky":false,"text":"imperfect information on what the other player is doing"},{"order":0,"points":0,"sticky":false,"text":"separate but balanced strategy options"},{"order":0,"points":0,"sticky":false,"text":"only one dominate strategy"}],"failure":{"button":null,"message":"In Chess, no action by a player is hidden from the other player. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn39-gametheory-core-info-micro-5","number_of_choices":4,"question":"Chess is an example where all players have _____.","start":3600,"success":{"button":null,"message":"In Chess, no action by a player is hidden from the other player. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"advantages"},{"order":0,"points":0,"sticky":false,"text":"disadvantages"},{"order":0,"points":0,"sticky":false,"text":"dominance "},{"order":0,"points":100,"sticky":false,"text":"information"}],"failure":{"button":null,"message":"By creating imperfect information between players, we change the entire structure of the game's play and outcomes.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn40-gametheory-core-info-micro-5","number_of_choices":4,"question":"Simultaneous gameplay is one way in which to limit _____ one player has on another players actions in a game.","start":3600,"success":{"button":null,"message":"By creating imperfect information between players, we change the entire structure of the game's play and outcomes.  "},"type":"Multiple"}],"reference":"game-theory-3","text":null,"title":"Information"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"core-components","mod":"game-theory","movie":".\/video\/gametheory-core-end-micro-6.mp4","name":"Core Components Summary","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"repetitiveness"},{"order":0,"points":0,"sticky":false,"text":"fun "},{"order":0,"points":0,"sticky":false,"text":"challenges "},{"order":0,"points":100,"sticky":false,"text":"predictability "}],"failure":{"button":null,"message":"The core components demonstrate how predictability and consistency is balanced in gameplay. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn41-gametheory-core-end-micro-6","number_of_choices":4,"question":"The four core components of game design help game designers create a stable structure in gameplay through _____.","start":3600,"success":{"button":null,"message":"The core components demonstrate how predictability and consistency is balanced in gameplay. "},"type":null},{"choices":[{"order":0,"points":100,"sticky":false,"text":"consistency"},{"order":0,"points":0,"sticky":false,"text":"frustration"},{"order":0,"points":0,"sticky":false,"text":"boredom"},{"order":0,"points":0,"sticky":false,"text":"tediousness "}],"failure":{"button":null,"message":"With structure and balance comes consistency in game play no matter how many times someone plays it. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn42-gametheory-core-end-micro-6","number_of_choices":4,"question":"Players expect a level of _____ as they replay a game more than once.","start":3600,"success":{"button":null,"message":"With structure and balance comes consistency in game play no matter how many times someone plays it. "},"type":null}],"reference":"game-theory-3","text":null,"title":"Core Components Summary"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"gtivg","mod":"game-theory","movie":".\/video\/gametheory-gtivg-intro-micro-1.mp4","name":"Game Theory in Video Games","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"have opposing goals in understanding behavior"},{"order":0,"points":100,"sticky":false,"text":"have aligned goals in understanding behavior"},{"order":0,"points":0,"sticky":false,"text":"both require a mastery of mathematics"},{"order":0,"points":0,"sticky":false,"text":"both require and understanding of economics"}],"failure":{"button":null,"message":"Game theorists and game designers, at their core, seek to understand how people behave under different conditions and challenges. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn43-gametheory-gtivg-intro-micro-1","number_of_choices":4,"question":"Game theory is valuable to game designers and sociologists because they____.","start":3600,"success":{"button":null,"message":"Game theorists and game designers, at their core, seek to understand how people behave under different conditions and challenges. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"dominate strategies"},{"order":0,"points":0,"sticky":false,"text":"optimum strategies"},{"order":0,"points":100,"sticky":false,"text":"variety"},{"order":0,"points":0,"sticky":false,"text":"frustration"}],"failure":{"button":null,"message":"Variety in videos games is, in many ways, how ideas and concepts in game theory are presented, altered, or combined. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn44-gametheory- gtivg-intro-micro-1","number_of_choices":4,"question":"Game theory demonstrates how human behavior changes as strategy options change. For video games, this creates _____ in gameplay.  ","start":3600,"success":{"button":null,"message":"Variety in videos games is, in many ways, how ideas and concepts in game theory are presented, altered, or combined. "},"type":"Multiple"}],"reference":"game-theory-4","text":null,"title":"Game Theory in Video Games"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"gtivg","mod":"game-theory","movie":".\/video\/gametheory-gtivg-sym-asym-micro-2.mp4","name":"Symmetric vs. Asymmetric","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"the exact same abilities and resources "},{"order":0,"points":0,"sticky":false,"text":"a balance of different abilities and resources "},{"order":0,"points":0,"sticky":false,"text":"a mix of similar and different abilities and resources "},{"order":0,"points":0,"sticky":false,"text":"an imbalance of abilities and resources "}],"failure":{"button":null,"message":"Symmetric design gives all players the same set of skills, abilities, and resources. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn45-gametheory-core-sym-asym-micro-2 ","number_of_choices":4,"question":"A game with symmetric design means that all players have ____. ","start":3600,"success":{"button":null,"message":"Symmetric design gives all players the same set of skills, abilities, and resources. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Team Fortress 2 "},{"order":0,"points":0,"sticky":false,"text":"League of Legends "},{"order":0,"points":100,"sticky":false,"text":"Halo "},{"order":0,"points":0,"sticky":false,"text":"Evolve "}],"failure":{"button":null,"message":"Halo is one of the most popular symmetrically designed games of all time."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn46-gametheory-core-sym-asym-micro-2 ","number_of_choices":4,"question":"_____ is an example of a game with symmetric design. ","start":3600,"success":{"button":null,"message":"Halo is one of the most popular symmetrically designed games of all time."},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"jumps: power-ups "},{"order":0,"points":0,"sticky":false,"text":"dominate strategies; optimum strategies "},{"order":0,"points":100,"sticky":false,"text":"benefits: tradeoffs "},{"order":0,"points":0,"sticky":false,"text":"level ups: ability increases"}],"failure":{"button":null,"message":"In asymmetric games, player's options are usually wider, with each character option being of series of benefits and tradeoffs in skills and abilities. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn47-gametheory-core-sym-asym-micro-2 ","number_of_choices":4,"question":"In asymmetric games, player's options are usually wider, with each character option being of series of _____ and _____ in skills and abilities.","start":3600,"success":{"button":null,"message":"In asymmetric games, player's options are usually wider, with each character option being of series of benefits and tradeoffs in skills and abilities. "},"type":"Multiple"},{"choices":[{"order":0,"points":100,"sticky":false,"text":"Team Fortress 2 "},{"order":0,"points":0,"sticky":false,"text":"Chess"},{"order":0,"points":0,"sticky":false,"text":"Halo "},{"order":21,"points":0,"sticky":false,"text":"None of the above"}],"failure":{"button":null,"message":"Team Fortress 2 is an exceptionally well-designed asymmetric game."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn48-gametheory-core-sym-asym-micro-2 ","number_of_choices":4,"question":"_____ is an example of a game with asymmetric design. ","start":3600,"success":{"button":null,"message":"Team Fortress 2 is an exceptionally well-designed asymmetric game."},"type":"Multiple"}],"reference":"game-theory-4","text":null,"title":"Symmetric vs. Asymmetric"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"gtivg","mod":"game-theory","movie":".\/video\/gametheory-gtivg-coop-compet-micro-3.mp4","name":"Cooperative vs. Competitive","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"simulation"},{"order":0,"points":100,"sticky":false,"text":"cooperative "},{"order":0,"points":0,"sticky":false,"text":"competitive"},{"order":0,"points":0,"sticky":false,"text":"symmetric"}],"failure":{"button":null,"message":"In cooperative games, players combine their effort to overcome a common goal. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn49-gametheory-gtivg-compet-micro-3","number_of_choices":4,"question":"A _____ game is one in which players work together for a common victory.","start":3600,"success":{"button":null,"message":"In cooperative games, players combine their effort to overcome a common goal. "},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"character creation"},{"order":0,"points":0,"sticky":false,"text":"the auction house"},{"order":0,"points":0,"sticky":false,"text":"its visual design"},{"order":0,"points":100,"sticky":false,"text":"boss raids"}],"failure":{"button":null,"message":"In cooperative games, players combine their effort to overcome a common goal. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn50-gametheory- gtivg-compet-micro-3","number_of_choices":4,"question":"World of Warcraft features cooperative play elements in _____.","start":3600,"success":{"button":null,"message":"In cooperative games, players combine their effort to overcome a common goal. "},"type":null},{"choices":[{"order":0,"points":100,"sticky":false,"text":"competitive "},{"order":0,"points":0,"sticky":false,"text":"asymmetric"},{"order":0,"points":0,"sticky":false,"text":"symmetric "},{"order":0,"points":0,"sticky":false,"text":"cooperative "}],"failure":{"button":null,"message":"Sports games are usually design with a focus on competitive play.   "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn51-gametheory- gtivg-compet-micro-3","number_of_choices":4,"question":"In _____ games, players typically play against each other until one or the other achieves a victory condition.  ","start":3600,"success":{"button":null,"message":"Sports games are usually design with a focus on competitive play.   "},"type":null},{"choices":[{"order":0,"points":100,"sticky":false,"text":"competitive "},{"order":0,"points":0,"sticky":false,"text":"asymmetric"},{"order":0,"points":0,"sticky":false,"text":"symmetric "},{"order":0,"points":0,"sticky":false,"text":"cooperative "}],"failure":{"button":null,"message":"It is the unpredictability of people's actions in competitive situations that game theory is most focused on.     "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn52-gametheory- gtivg-compet-micro-3","number_of_choices":4,"question":"In general, game theory is most relevant to _____ games, because it is in these games that balance of strategy and conflict are crucial.","start":3600,"success":{"button":null,"message":"It is the unpredictability of people's actions in competitive situations that game theory is most focused on.     "},"type":null}],"reference":"game-theory-4","text":null,"title":"Cooperative vs. Competitive"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"gtivg","mod":"game-theory","movie":".\/video\/gametheory-gtivg-zero-micro-4.mp4","name":"Zero Sum Games","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"level; experience points"},{"order":0,"points":0,"sticky":false,"text":"symmetry; asymmetry "},{"order":0,"points":0,"sticky":false,"text":"competiveness; cooperativeness "},{"order":0,"points":100,"sticky":false,"text":"gains; losses"}],"failure":{"button":null,"message":"Zero-sum games are based on the concept, \"We are opponents, when I win, you lose.\""},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn53-gametheory- gtivg-zerosum-micro-4","number_of_choices":4,"question":"Zero-sum games are ones in which one player's ____ are directly related to another player's ____.","start":3600,"success":{"button":null,"message":"Zero-sum games are based on the concept, \"We are opponents, when I win, you lose.\""},"type":null},{"choices":[{"order":0,"points":100,"sticky":false,"text":"chess"},{"order":0,"points":0,"sticky":false,"text":"poker "},{"order":0,"points":0,"sticky":false,"text":"the Prisoner's Dilemma "},{"order":0,"points":0,"sticky":false,"text":"Team Fortress 2"}],"failure":{"button":null,"message":"In chess, each player has perfect information on all of the options and actions of their opponent. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn54-gametheory- gtivg-zerosum-micro-4","number_of_choices":4,"question":"_____ is an example of a zero-sum game where players have \"perfect knowledge\" of the other player's options and actions. ","start":3600,"success":{"button":null,"message":"In chess, each player has perfect information on all of the options and actions of their opponent. "},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Symmetry "},{"order":0,"points":0,"sticky":false,"text":"Zero-sum"},{"order":0,"points":0,"sticky":false,"text":"Perfect knowledge "},{"order":0,"points":100,"sticky":false,"text":"Imperfect knowledge"}],"failure":{"button":null,"message":"Many strategy war games use what is known as a \"fog of war\" to hide information from competing players.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn55-gametheory- gtivg-zerosum-micro-4","number_of_choices":4,"question":"_____ means that players do not have exact insight to their opponents actions or options.  ","start":3600,"success":{"button":null,"message":"Many strategy war games use what is known as a \"fog of war\" to hide information from competing players.  "},"type":null}],"reference":"game-theory-4","text":null,"title":"Zero Sum Games"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"gtivg","mod":"game-theory","movie":".\/video\/gametheory-gtivg-nonzerosum-micro-5.mp4","name":"Non Zero Sum Games","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"competitive"},{"order":0,"points":0,"sticky":false,"text":"zero-sum"},{"order":0,"points":100,"sticky":false,"text":"non-zero-sum"},{"order":0,"points":0,"sticky":false,"text":"perfect knowledge"}],"failure":{"button":null,"message":"Non-zero-sum games attempt to depict real-life scenarios of human interaction as closely as possible. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn56-gametheory-gtivg-nonzerosum-micro-5","number_of_choices":4,"question":"Real-life simulation games such as SimCity are typically designed as _____ games. ","start":3600,"success":{"button":null,"message":"Non-zero-sum games attempt to depict real-life scenarios of human interaction as closely as possible. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Sports"},{"order":0,"points":100,"sticky":false,"text":"Pen and paper role-playing"},{"order":0,"points":0,"sticky":false,"text":"First-person shooters "},{"order":0,"points":0,"sticky":false,"text":"Pinball"}],"failure":{"button":null,"message":"Pen and paper role-playing games encourage players to find a balance of individual victories and group victories.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn57-gametheory-gtivg-zerosum-micro-4","number_of_choices":4,"question":"_____ games demonstrate strong non-zero-sum game design principles. ","start":3600,"success":{"button":null,"message":"Pen and paper role-playing games encourage players to find a balance of individual victories and group victories.  "},"type":"Multiple"}],"reference":"game-theory-4","text":null,"title":"Non Zero Sum Games"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"gtivg","mod":"game-theory","movie":".\/video\/gametheory-gtivg-simuturn-micro-6.mp4","name":"Simultaneous vs. Turn-Based","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"asymmetric"},{"order":0,"points":0,"sticky":false,"text":"turn-based"},{"order":0,"points":0,"sticky":false,"text":"zero-sum"},{"order":0,"points":100,"sticky":false,"text":"simultaneous"}],"failure":{"button":null,"message":"Fighting games, such as Mortal Kombat, are excellent examples of simultaneous gameplay. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn58-gametheory- gtivg-simuturn-micro-6","number_of_choices":4,"question":"In games with _____ gameplay, information is constant, requiring players to take their own actions while at the same time track the actions of their opponents. ","start":3600,"success":{"button":null,"message":"Fighting games, such as Mortal Kombat, are excellent examples of simultaneous gameplay. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Asymmetric"},{"order":0,"points":100,"sticky":false,"text":"Turn-based"},{"order":0,"points":0,"sticky":false,"text":"Zero-sum"},{"order":0,"points":0,"sticky":false,"text":"Simultaneous"}],"failure":{"button":null,"message":"Many well designed strategy war games, such as the Heroes of Might and Magic series, are turn-based."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn59-gametheory- gtivg-simuturn-micro-6","number_of_choices":4,"question":"_____ games only allow one player to take actions at a time.  ","start":3600,"success":{"button":null,"message":"Many well designed strategy war games, such as the Heroes of Might and Magic series, are turn-based."},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"asymmetric"},{"order":0,"points":0,"sticky":false,"text":"turn-based"},{"order":0,"points":0,"sticky":false,"text":"cooperative"},{"order":0,"points":100,"sticky":false,"text":"simultaneous"}],"failure":{"button":null,"message":"In Rock, Paper, Scissors there is no way to know what an opponent will choose because both players must choose at the same time. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn60-gametheory- gtivg-simuturn-micro-6","number_of_choices":4,"question":"Rock, Paper, Scissors is a very simple example of a _____ game.  ","start":3600,"success":{"button":null,"message":"In Rock, Paper, Scissors there is no way to know what an opponent will choose because both players must choose at the same time. "},"type":"Multiple"}],"reference":"game-theory-4","text":null,"title":"Simultaneous vs. Turn-Based"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"gtivg","mod":"game-theory","movie":".\/video\/gametheory-gtivg-perfectimperfect-micro-7.mp4","name":"Perfect vs Imperfect Information","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"superior "},{"order":0,"points":0,"sticky":false,"text":"imperfect"},{"order":0,"points":100,"sticky":false,"text":"perfect"},{"order":0,"points":0,"sticky":false,"text":"game theory"}],"failure":{"button":null,"message":"Chess is an example of a game with perfect knowledge as each player is witness to every action the other player takes. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn60-gametheory- gtivg-perfectimperfect-micro-7","number_of_choices":4,"question":"In games where players have _____ knowledge, all players witness all actions of the other player.","start":3600,"success":{"button":null,"message":"Chess is an example of a game with perfect knowledge as each player is witness to every action the other player takes. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"superior "},{"order":0,"points":100,"sticky":false,"text":"imperfect"},{"order":0,"points":0,"sticky":false,"text":"perfect"},{"order":0,"points":0,"sticky":false,"text":"game theory"}],"failure":{"button":null,"message":"Many turn based games hide players' actions in some way to achieve imperfect knowledge in gameplay. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn61-gametheory- gtivg-perfectimperfect-micro-7","number_of_choices":4,"question":"In games where players have _____ knowledge, no player is witness to the sum of all actions of the other player.","start":3600,"success":{"button":null,"message":"Many turn based games hide players' actions in some way to achieve imperfect knowledge in gameplay. "},"type":"Multiple"}],"reference":"game-theory-4","text":null,"title":"Perfect vs Imperfect Information"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"reference","mod":"documentation","movie":null,"name":"Reference","promptfile":null,"prompts":null,"reference":null,"text":"<a class=\"dest\" id=\"game-theory-1\"><\/a><div class=\"accent\"><h1>Overview<\/h1><p>Most fans of video games take some pride in their understanding of game mechanics. For the games they play, mechanics become second-nature. The purpose and function of each mechanic is easy for players to test and determine its value. From there, those who look deeper into what is making the mechanics work, start to understand and recognize the elements of game design at play. In that same regard, when we start to look very broadly at what makes up the principles of game design we start to see their origins in game theory.<\/p><p>Game theory touches on much more than just games and video games. It is used by economists, sociologists, mathematicians, and within many other fields of study. They are all studying how outcomes involving choice and action are affected by others with their own choices and actions. Given this broad position of study we can easily see how game theory can be used in endeavors such as business, social studies, science, and politics.<\/p><p>The idea of game theory could be traced back to The Art of War, by Sun Tzu, but John von Neumann is largely credited with formalizing game theory in modern times. Neumann was a mathematician who made a number of significant contributions in the field of mathematics in the 1930s and 1940s. He, in fact, created the field of game theory in academics as a study of math. His most famous contribution, in terms of today's video game design, was his minimax theorem, in which he showed certain choice patterns people would take if given the same information and the same set of choices. From his work, we get the very core basis of game design.<\/p><p>This module will attempt to give some understanding to what can become very complex and abstract concepts dealing with math and statistics. Not to worry, however, because we will explain these concepts as they align with our game design goals and demonstrate examples using familiar video games and other simplified scenarios.<\/p><p>In particular, we will cover these Topics in our discussion of game theory:<\/p><div style=\"text-align: center;\"><ul class=\"anchorGroup\" style=\"text-align: left; display: inline-block;\"><li><a class=\"ankor\" href=\"#game-theory-2\"> The Study of Strategic Decision Making<\/a><\/li><li><a class=\"ankor\" href=\"#game-theory-3\"> Core Components of Game Theory<\/a><\/li><li><a class=\"ankor\" href=\"#game-theory-4\"> Game Theory Examples in Video Games<\/a><\/li><\/ul><\/div><\/div><a class=\"dest\" id=\"game-theory-2\"><\/a>&nbsp;<div class=\"accent\"><h1>The Study of Strategic Decision Making <\/h1><p>Video games boast a wide variety of mechanics. Most gamers can easily tell if a first-person shooter has good controller reaction and if the button layout is appropriate or not. There is not much game theory happening in these functions. Skill in accuracy or button combos are not really in the realm of game theory. Game theory really comes into play when two (or more) people come into some kind of mutual competition for a goal. It is the interaction of people, decisions, and consequences that drives game theory and why it is so relevant to video game design.<\/p><p>We could call this the study of strategic decision making. We want to understand what the most likely outcomes are, and in particular, positive outcomes, when two or more entities are faced with the same or opposing challenges. In effect, we are trying to predict human behavior using mathematical models.<\/p><h3>The Prisoner's Dilemma<\/h3><p>As mentioned, this idea seems to be as old as warfare itself, becoming codified by Sun Tzu's Art of War and later quantified by von Neumann's mathematical models. The most famous model example of game theory is called The Prisoner's Dilemma. The scenario generally goes like this:<\/p><p>Two criminal partners have been caught robbing a bank. When they are arrested, they are immediately separated so that they cannot communicate with each other. They only know that both they and their partner are both in custody.<\/p><p>Each is offered the same plea bargain. Remain silent and go to trial or testify against the other and go free. If they both stay silent and go to trail, they will get 6 months of jail. However, if one is willing to be a witness against the other, that person will have their sentence reduced to no jail time, while the other person will get ten years of jail time. If both testify against the other, they both get five years in jail. Both of the accused are offered this deal at the same time, with no idea what the other person was offered.<\/p><p>This scenario creates what is known as a zero-sum game. With each “player” knowing the entire stakes of each choice they ask themselves, “what is the best course to maximize their own positive outcomes and minimize their own negative outcomes?” This is of course greatly complicated by the fact that another, thinking human is making the same decisions with the same thought process.<\/p><p>Consider in the prisoner's dilemma the two accused are, or were, partners. They worked together for their mutual benefit (forget for a moment that they were caught robbing a bank), but they don't have any real loyalty to one another. In addition, each knows they will not be able to influence the other's choice with threats or promises. So there is risk involved for any decision they may make. In fact, we have Conflict, Risk, Choices, and Consequences all hanging in the balance. And it is extremely well balanced.<\/p><p>So what do we expect game theory to tell us about this dilemma?<\/p><p>Since both of the accused are individual agents operating in their own self-interest, the more predicable choice is for each to betray the other. Of course, we can change the parameters of the dilemma to experiment with different outcome predictions. What if we changed the jail times for more slanted results? Would the outcome be as predictive if the jail time reduction for betrayal was a mere month? What if both of the accused have been in this situation before with each other and remember the negative consequences of a selfish choice? What if they keep playing the game ten times? Do they learn from their mistakes and make new choices at some point?<\/p><p>The Prisoner's Dilemma has many different facets and configurations that we, as game designers, can utilize to further understand game theory and how it is related to making balanced video games. It basically comes down to various mathematical configurations and models.<\/p><h3>Mathematical Models<\/h3><p>When we repeat these kind of experiments we start to create mathematical models of patterns of behavior. Mathematical models are very important in game theory and in video game design. We use them to create complex social and combat mechanics and AI interactions. We use them to create strategy scenarios in Real-Time Strategy games. And we use them to balance PvP strategy games of all sorts.<\/p><p>It really is a math equation with a human component. Mathematics is core to almost all game design as it relates to game theory. For the purposes of this course it is not necessary to display and explain all of the different ways to model game theory scenarios. It is, after all, not a math course. Rather we will seek to understand the overall concepts and allow those who want to, to further explore the detailed math models. What we will focus on is the concepts of strategy in game theory and how it relates to game design.<\/p><h3>The Science of Strategy<\/h3><p>Can people's thought processes and actions be reduced to a set of probability numbers like crafting the wing of an airplane? Do people function like foreseeable algorithms to the point of accurate predictability? In this case, we can only focus on two people where the “winner” only gains what the “loser” loses. It does not consider a host of other possible variations in human behavior, complexity, experience, or motivation. The truth is most things are much more complex than the Prisoner's Dilemma. What game theory really does is look how people choose solution strategies that have defined value over other solutions.<\/p><h3>The Nash Equilibrium <\/h3><p>In 1994, mathematician John Nash, who was the subject of the movie, A Beautiful Mind, won a Nobel Prize for his work on economics using game theory. Nash developed solution concepts as formal rules of how strategies will be adopted by people in states of competition. Specifically, the Nash Equilibrium states that each player is assumed to understand the optimal strategies of all other players, and that no one will gain by one competitor changing only their strategy. In other words, if all players have adopted a strategy that is the best strategy in relation to others strategies, we have an equilibrium. In a video game, this means a balance of strategy among all players, which is essential for good game design.<\/p><h3>Optimum Strategies <\/h3><p>The Prisoner's Dilemma does provide a simple basis to understand the concept of game theory as we add more complexity. It gives us baseline to identify optimum strategies. With the information to determine the best course of action optimum strategies are formed in the face of like competition. In kindergarten, we learned the Golden Rule: Do onto others as you would have others do onto you.  That is a statement that fits game theory as well: making choices that consider the actions of others is sound strategy.<\/p><h3>Dominant Strategies<\/h3><p>Looking again at the Prisoner's Dilemma, we see that the optimum strategy for the accused would be for both to refuse to testify. Game theory; however, suggest each person will instead choose a dominant strategy that is better for them. That is, the decision that has a strictly higher payoff for each prisoner's own self-interest separate from the other prisoner's self-interest. This, of course, is actually a poor strategy as it insures a less than optimum outcome for both prisoners.<\/p><p>The problem with dominant strategies in game design is that they present such a compelling choice; there is no reason to try any other strategy. They eliminate all other options as useless. If a game presents two strategies for victory, and one always dominates over the other, we might as well just remove the lesser strategy from the game. What we really want is mixed strategies, where no one strategy dominates all of the other options. This is not immediately intuitive and so we will practice iteration as a way of eliminating pure dominant strategies.<\/p><\/div><a class=\"dest\" id=\"game-theory-3\"><\/a>&nbsp;<div class=\"accent\"><h1>Core Components of Game Theory<\/h1><p>For purposes of game design, we can simplify the application of game theory to four components: Players, Actions, Payoff, and Information. These core components are then the basis for the full rule set of a game.<\/p><h3>Player<\/h3><p>First we must define the players. For this discussion, we will assume that players are competing against each other and not playing a cooperative game. As a player they will assume that they are playing by the same rules as everyone else playing the game. That is, they have the same goals and strategies available to them (or at least a balance of resources and goal objectives). Game theory shows us that strategies change as more players are allowed to participate. For example, a one-on-one strategy card game becomes a very different experience when a third player joins.<\/p><h3>Actions<\/h3><p>Actions define what the players can do and when they can do them. Games usually structure a decision point where players will make choices. A common decision point in video games is a turn. That is, players each take a turn to declare decisions and take actions. Decision points can also be free form or simultaneous, which again, sets up a whole new set of strategy paths and outcomes.<\/p><h3>Payoff<\/h3><p>Payoff is next. The payoff for playing a video game is subjective, but generally involves a sense of self accomplishment or entertainment. Remember, players are likely to experience some defeat and frustration so there must be some intrinsic value to the art of playing the game itself. As game designers we manipulate this concept of payoff constantly in an attempt to achieve flow and fun. In other applications of game theory, payoff can be a much more serious component, as say in the Prisoner's Dilemma scenario or in creating economic policy.<\/p><h3>Information<\/h3><p>Our last component is Information. What does each player know as they start and play through the game? What do they not know at each stage of the game? Remember in the Prisoner's Dilemma the information the accused had was crucial to how they approached the problem. They both knew all the choices available to the other, but they did not know the decision on those choices the other would make. Changing any information, however, has a huge effect on the game. If the prisoners have faced a similar plea deal and know the previous outcome for testifying was less than optimal, that knowledge might play an important role in their decision the next time the scenario is presented.<\/p><p>Together, these essential components and the variations they can form help designers balance their game. These components combine to create a stable platform for games that can be functional and predictable. Yes, as game designers we do want some predictability. We don't want the game to be an exercise in predictability to the point of pointlessness, but we do need a certain amount of it in the rules so the game has stable structure. Players expect a level of consistency as they replay games over and over.<\/p><\/div><a class=\"dest\" id=\"game-theory-4\"><\/a>&nbsp;<div class=\"accent\"><h1>Game Theory in Video Games <\/h1><p>As we have seen, game theory wasn't conceived for the purpose of making video games, but the concepts are a perfect match. From the simplest form of zero-sum games we can take and expand game theory to match the design strategies for most video games. Variety in games stems from how these concepts are presented, altered, or combined. We should be noticing a lot of crossover in these game theory concepts at this point. In this Topic, we will look at some specific game theory concepts and see how they are applied to some popular video games.<\/p><h3>Symmetric\/Asymmetric<\/h3><p>When we talk about symmetric vs asymmetric game design we are talking about different methods of achieving balance in game play. A symmetric design gives all players the exact same skills and resources. There is zero difference in the actions one player can take over another. Games in the Halo series fit a symmetric design: each player moves at the same speed; each player can take exactly the same amount of damage; and each player has the same access to the same set of skills and game options. In doing this, the designers have created perfect balance among players; at least in the sense of potential player vs player scenarios. Only skill at manipulating the controller separates one player's advantage at the game from another.<\/p><p>Asymmetric games also seek to ultimately balance player vs player but still offer some variety in playable characters. For most games like this, the skills and abilities of player characters are a series of benefits and tradeoffs. Let's look at Team Fortress 2 as an example of an asymmetric game design. In Team Fortress 2 each character class is slightly different. Some are faster with the tradeoff of having fewer hit points. Some have more powerful weapons with a tradeoff of being bigger targets. There are many combinations of benefits and penalties, but ultimately there is still balance. In essence, each benefit has a certain value that is countered by an equal penalty. This allows for many methods to victory while maintaining a fair and balanced experience.<\/p><h3>Cooperative\/Competitive<\/h3><p>With the rise of the Internet came MMO gaming and new ways to create games that are both cooperative and competitive on a grand scale. In general, cooperative games are games where people work together to find solutions to victory and competitive games are games where they work against each other to win.<\/p><p>In cooperative games, it is possible for all players to lose the game or for all players to win the game. While not a dedicated cooperative game, World of Warcraft has many cooperative elements. The best example is in the game's boss raids where perhaps dozens of players will gather with one goal in mind: defeat the boss or die trying. In this scenario, all the players must coordinate their attack together for an all or nothing fight to the finish. If the boss is defeated, everyone shares in the victory. If the boss is not defeated, everyone shares in the loss.<\/p><p>Most games, however, are designed to be competitive. Someone (or many players) will win and the rest will lose. There are countless examples of this premise such as any sports game or any game with player vs player elements. It is in these types of games game theory becomes so relevant and important in terms of creating strategies in a game that are balanced and yet are not exercises in pointlessness.<\/p><h3>Zero-sum\/Non Zero-sum<\/h3><p>Zero-sum games are ones in which one player's gains are directly related to another player's loss. Some zero-sum games provide what is called perfect information; that is, all players know all of the actions of the other players. While not strictly a video game, chess is a perfect example of a zero-sum game, where players have perfect knowledge of the other player's actions. Zero-sum games without perfect knowledge could include many Real-Time Strategy (RTS) games where one player's knowledge of the other player's actions may be limited by certain factors such as fog of war or lack of directly witnessing all of their actions. Extremely simple games such as Rock, Paper, Scissors are good examples of zero-sum games without perfect knowledge because the actions of all players are simultaneous and no one can accurately predict what an opponent will do. In addition, victory conditions are clear to all players with a single universal solution to achieving the goal of winning.<\/p><p>On the opposite side is Non Zero-sum games. In these games, there is no universal obviously accepted solution or destruction of resources. In many ways, non zero-sum game theory operates more like real life scenarios, so it makes sense that games that utilize non zero-sum game theory are mostly real-life simulation games like SimCity. Resource management does not necessarily permanently deplete resources and the games are generally non-competitive. Still, even simulation games do not completely stray from zero-sum concepts. Zoo Tycoon, for example has a money system that can eventually end the game because the player goes broke.<\/p><p>Pen and paper role playing games are the best examples of non zero-sum game theory. Players cooperate, they are not limited by a given set of solutions and the imaginary resources they can draw upon to solve problems are effectively, unlimited.<\/p><h3>Simultaneous\/Turn-based<\/h3><p>There are huge differences in game play when players take turns than when everyone takes simultaneous actions. In a game theory view, it is a difference of information available. In simultaneous play, information is constant, but a player must manage their own ability to take actions with their ability to track the actions of an opponent. In a turn-based game, players can stop and examine game information at a more relaxed pace.<\/p><p>Many RTS games use a turn-based system. Each player gets a turn to examine the known information in the game; army placements, available resources, etc. and then gets to react to these elements with little or no time constraints. Once the player takes all the actions they can or want, it is the next player's turn to do the same. Heroes of Might and Magic games are excellent examples of this.<\/p><p>Fighting games are good examples of simultaneous game theory in action. Each player chooses an attack or defensive move without any knowledge of what the opponent will do and all decisions are made at the same time. It is sort of like playing rock, paper, scissors, but with many more possible combinations. Knowledge of what the other play has done becomes irrelevant to what they will do next, and there is no way of knowing what they will do next. These are games of action and reaction with no time to ponder prior knowledge.<\/p><h3> Perfect Information\/Imperfect Information<\/h3><p>What a player knows is an important aspect of any video game structure. Having access to certain knowledge changes gameplay as that knowledge is added to or reduced. In game theory, this is divided into perfect knowledge and imperfect knowledge.<\/p><p>Games with perfect knowledge mean that all the players not only know the game structure and rules, they also have complete information on all events in the game that have previously occurred. For instance, in a game of chess, each player is witness to every move their opponent makes is a perfect knowledge game.<\/p><p>Heroes of Might and Magic is again a good example of a game of imperfect knowledge. Even though players take turns, the players do not see what their opponent is doing. They may see the results of their strategies (when their armies appear out of the fog of war) but they do not see the entire strategy or all of the actions the player is taking to claim victory.<\/p><p>From here we start to mix and match the above concepts, iterate on what works and what doesn't and soon come to some core strategies that have balance, purpose, and are fun to play.<\/p><\/div><!--page:~~game-theory-reference-text~~-->","title":"Reference Material"},{"bIsChecked":true,"exercise":".\/exercise\/DevProGameTheory_dodgeball.stack","instructions":"<h1>Goals<\/h1><ol><li>To learn, understand, and apply Game Theory concepts.<\/li><\/ol><h1>Steps<\/h1><ol><li>Click the <img src=\".\/images\/downloadbutton.png\" alt=\"layout.png\"\/> button at the top or bottom of this page to download the DevProGameTheory_dodgeball.stack file.<\/li><li>Save the file to a location you can access on your computer.<\/li><li>Click to open the file in Game Stack.<\/li><li>Run the game by clicking the green flag button <img src=\".\/images\/gamestackflag.png\" alt=\"gamestackflag.png\"\/><\/li><li><b> Symmetric vs. Asymmetric Characters <\/b><ol><li>For this section, we're going to modify some variables in GameStack to change from a symmetrical game to an asymmetrical game.<\/li><li>Navigate to the Design Tab.<br><\/br> <img src=\".\/images\/design_tab.png\" alt=\"design_tab.png\"\/><\/li><li>The two soldiers will be symmetrical by default. They will have 2 variables that affect how they play: Ball Speed and Ball Size, and both will be identical. <\/li><li>Let's mess things up! How about giving the top soldier a larger ball that moves slowly?<\/li><li>Change the variable <b>TopBallSize<\/b> to 90 <img src=\".\/images\/top_ball_size.png\" alt=\"top_ball_size.png\"\/> and <b>TopBallSpeed<\/b> to 3 <img src=\".\/images\/top_ball_speed.png\" alt=\"top_ball_speed.png\"\/><\/li><li>Now play a match with a friend<\/li><li>Observe and document the differences in play. Does the Top Soldier now have an advantage? Is the game balanced? More fun?<\/li><li>Now let's change the Bottom Soldiers stats. How about we do the opposite of the Top Soldier and make his ball smaller, but faster. <br\/>Change <b>BotBallSize<\/b> to 30 <img src=\".\/images\/bot_ball_size.png\" alt=\"bot_ball_size.png\"\/>and <b>BotBallSpeed<\/b> to 20 <img src=\".\/images\/bot_ball_speed.png\" alt=\"bot_ball_speed.png\"\/><\/li><li>Same questions. Does one of the soldiers have an advantage over the other?<\/li><li>Now attempt to adjust the stats to make the game balanced while remaining asymmetrical.<\/li><\/ol><\/li><li><b> Cooperative \/ Competitive <\/b><ol><li>What would it take to make this game cooperative? <\/li><li>How could you make the game both competitive and cooperative?<\/li><\/ol><\/li><li><b> Zero-Sum Game \/ Non Zero-Sum Game <\/b><ol><li>How could this game be made zero-sum? <\/li><\/ol><\/li><li><b> Simultaneous \/ Turn-based<\/b><ol><li>How would you rework the mechanics to work as a non-turn based experience? <\/li><li>What are some pros and cons of being a turn-based game?<\/li><\/ol><\/li><li><b> Perfect \/ Imperfect Information<\/b><ol><li>What information could you add to the game, to make mechanics more clear? <\/li><\/ol><\/li><\/ol><h1>Extra Credit<\/h1><ol><li>Select one of each of the discussed theories and remix the dodgeball game to be your own.<\/li><li>Which of the theories did you select?<\/li><li>How did each affect your remix?<\/li><\/ol><!--page:~~game-theory-gamestack-exercise~~-->","link":"","mod":"game-theory","movie":null,"name":"game-theory-gamestack-exercise","promptfile":null,"prompts":null,"reference":null,"text":null,"title":"Game Stack Exercise"},{"bIsChecked":true,"exercise":"","instructions":"<h1>Goal<\/h1><p>Understand and examine game theory at work in Dodgeball Game Stack game.<\/p><h1>Steps<\/h1><ol><li>Open the Game Theory Module Game Stack exercise and download the Dodgeball exercise.<\/li><li>Study the mechanics of Dodgeball as a two player game.<\/li><li>Write a brief paragraph on each of the below concepts:<ol><li>Conceive and describe a two player version of the game that is cooperative instead of competitive.<\/li><li>Describe a two player version of the game that is turn-based instead of simultaneous.<\/li><li>Describe a two player version of the game that is asymmetric instead of symmetric.<\/li><\/ol><\/li><li>Be prepared to discuss the decisions with the class<\/li><\/ol><h1>Hints and Challenges<\/h1><p>For a challenge, describe a Dodgeball game concept with three or more players or as a MMO (Massively Multiplayer Online) game.<\/p><!--page:~~game-theory-writing-exercise~~-->","link":"","mod":"game-theory","movie":null,"name":"game-theory-writing-exercise","promptfile":null,"prompts":null,"reference":null,"text":null,"title":"Writing Exercise"}]}],"title":"Intro to Game Development"},{"bIsChecked":true,"description":"Work with the basics of Game Design - documentation, character, story and level design.","image":"Logo_TemperedSteel.jpg","modules":[{"bIsChecked":true,"name":"game-documentation","title":"Game Documentation","topics":[{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"game-documentation","movie":".\/video\/gamedocumentation-overview-mirco-1.mp4","name":"Overview","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"Good Game Document\u0009   "},{"order":0,"points":0,"sticky":false,"text":"Good Design Document\u0009   "},{"order":0,"points":100,"sticky":false,"text":"Game Design Document"},{"order":0,"points":0,"sticky":false,"text":"Game Data Document"}],"failure":{"button":null,"message":"The game design document is to a game, like a script is to a movie. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn2-gamedocumentation-overview-mirco-1","number_of_choices":4,"question":"In the video game industry, the document that is the blueprint for the game's design is called the _____.","start":3600,"success":{"button":null,"message":"The game design document is to a game, like a script is to a movie. "},"type":null}],"reference":"game-documentation-1","text":null,"title":"Overview"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"game-documentation","movie":".\/video\/gamedocumentation-gdd-intro-micro-1.mp4","name":"Game Design Document","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"follow the same template\u0009   "},{"order":0,"points":100,"sticky":false,"text":"are unique in their organization and structure\u0009   "},{"order":0,"points":0,"sticky":false,"text":"are produced by EA Games"},{"order":0,"points":0,"sticky":false,"text":"are sixty pages long"}],"failure":{"button":null,"message":"Unlike the Hollywood movie script, game design documents do not have a standard template in the video game industry.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn3-gamedocumentation-intro-micro-1","number_of_choices":4,"question":"Almost all game design documents _____.","start":3600,"success":{"button":null,"message":"Unlike the Hollywood movie script, game design documents do not have a standard template in the video game industry.  "},"type":null}],"reference":"game-documentation-2","text":null,"title":"Game Design Document"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"game-documentation","movie":".\/video\/gamedocumentation-gdd-concept-micro-2.mp4","name":"Game Concept","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"an overview of the game   "},{"order":0,"points":0,"sticky":false,"text":"an exact list of mechanics\u0009   "},{"order":0,"points":0,"sticky":false,"text":"a cost analysis of programming"},{"order":0,"points":0,"sticky":false,"text":"technical design"}],"failure":{"button":null,"message":"The game concept should be brief and convey what the game will be in terms of basic gameplay."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn4-gamedocumenatation-gdd-concept-micro-2","number_of_choices":4,"question":"The purpose of the Game Concept section of a game design document is to convey _____.","start":3600,"success":{"button":null,"message":"The game concept should be brief and convey what the game will be in terms of basic gameplay."},"type":null}],"reference":"game-documentation-2","text":null,"title":"Game Concept"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"game-documentation","movie":".\/video\/gamedocumentation-gdd-audience-micro-3.mp4","name":"Target Audience","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"adults\u0009   "},{"order":0,"points":0,"sticky":false,"text":"dialects \u0009   "},{"order":0,"points":100,"sticky":false,"text":"demographics"},{"order":0,"points":0,"sticky":false,"text":"demonstrators "}],"failure":{"button":null,"message":"Demographics help classify target audiences by age groups. For example, teens: ages 12 through 17."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn5-gamedocumenatation-gdd-audience-micro-3","number_of_choices":4,"question":"A game's target audience can be divided into age groups also called _____.","start":3600,"success":{"button":null,"message":"Demographics help classify target audiences by age groups. For example, teens: ages 12 through 17."},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"costs\u0009   "},{"order":0,"points":100,"sticky":false,"text":"maturity level \u0009   "},{"order":0,"points":0,"sticky":false,"text":"development time"},{"order":0,"points":0,"sticky":false,"text":"visual splendor "}],"failure":{"button":null,"message":"Games are not required to receive an ESRB rating, however, many retailers will not offer a game for sale without one. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn6-gamedocumenatation-gdd-audience-micro-3","number_of_choices":4,"question":"Choosing an Entertainment Software Rating Board target rating early in the development process helps guide the _____ of the game's content. ","start":3600,"success":{"button":null,"message":"Games are not required to receive an ESRB rating, however, many retailers will not offer a game for sale without one. "},"type":"Multiple"}],"reference":"game-documentation-2","text":null,"title":"Target Audience"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"game-documentation","movie":".\/video\/gamedocumentation-gdd-platform-micro-4.mp4","name":"Platform","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"first-person shooter\u0009   "},{"order":0,"points":0,"sticky":false,"text":"demographic\u0009   "},{"order":0,"points":100,"sticky":false,"text":"mobile phone"},{"order":0,"points":0,"sticky":false,"text":"game engine"}],"failure":{"button":null,"message":"Smart devices are very popular platforms for game development in 2015. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn7-gamedocumenatation-gdd-platform-micro-4","number_of_choices":4,"question":"A _____ is an example of a platform games can be developed for.","start":3600,"success":{"button":null,"message":"Smart devices are very popular platforms for game development in 2015. "},"type":"Multiple"}],"reference":"game-documentation-2","text":null,"title":"Platform"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"game-documentation","movie":".\/video\/gamedocumentation-gdd-genre-micro-5.mp4","name":"Genre","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"True"},{"order":0,"points":100,"sticky":false,"text":"False"}],"failure":{"button":null,"message":"As a general rule, such creative restrictions are not required."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn8-gamedocumenatation-gdd-genre-micro-5","number_of_choices":2,"question":"Games are restricted to only one genre.","start":3600,"success":{"button":null,"message":"As a general rule, such creative restrictions are not required."},"type":null}],"reference":"game-documentation-2","text":null,"title":"Genre"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"game-documentation","movie":".\/video\/gamedocumentation-gdd-gameplay-micro-6.mp4","name":"Core Gameplay","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"mechanics  "},{"order":0,"points":0,"sticky":false,"text":"visual style\u0009   "},{"order":0,"points":0,"sticky":false,"text":"demographics"},{"order":0,"points":0,"sticky":false,"text":"target audience"}],"failure":{"button":null,"message":"Often the largest section of a GDD, core gameplay will present the mechanics of a game. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn9-gamedocumenatation-gdd-gameplay-micro-6","number_of_choices":4,"question":"The Core Gameplay section of a game design document is where ____ will be described and presented. ","start":3600,"success":{"button":null,"message":"Often the largest section of a GDD, core gameplay will present the mechanics of a game. "},"type":"Multiple"},{"choices":[{"order":0,"points":100,"sticky":false,"text":"How combat works "},{"order":0,"points":0,"sticky":false,"text":"Sound design "},{"order":0,"points":0,"sticky":false,"text":"Cost analysis"},{"order":0,"points":0,"sticky":false,"text":"Genre"}],"failure":{"button":null,"message":"Other mechanics, such as puzzles, would also be covered in the core gameplay section of a game design document.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn10-gamedocumenatation-gdd-gameplay-micro-6","number_of_choices":4,"question":"_____ is an example of a core gameplay component.","start":3600,"success":{"button":null,"message":"Other mechanics, such as puzzles, would also be covered in the core gameplay section of a game design document.  "},"type":"Multiple"}],"reference":"game-documentation-2","text":null,"title":"Core Gameplay"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"game-documentation","movie":".\/video\/gamedocumentation-gdd-visualstyle-micro-7.mp4","name":"Visual Style","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"concept\u0009   "},{"order":0,"points":100,"sticky":false,"text":"visual style\u0009   "},{"order":0,"points":0,"sticky":false,"text":"genre"},{"order":0,"points":0,"sticky":false,"text":"platform"}],"failure":{"button":null,"message":"Text can substitute actual art as a placeholder until artists can be hired. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn11-gamedocumenatation-gdd-visuals-micro-7","number_of_choices":4,"question":"A detailed description of what a game looks like would be covered in the _____ section of a game design document.","start":3600,"success":{"button":null,"message":"Text can substitute actual art as a placeholder until artists can be hired. "},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Natural terrain\u0009   "},{"order":0,"points":0,"sticky":false,"text":"Buildings   "},{"order":0,"points":0,"sticky":false,"text":"Characters"},{"order":0,"points":100,"sticky":false,"text":"Platform"}],"failure":{"button":null,"message":"It is always helpful to artists to have an art asset list, which is a text description of each art piece the game will require. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn12-gamedocumenatation-gdd-visuals-micro-7","number_of_choices":4,"question":"Which of the following would NOT be considered part of a game's visual style?","start":3600,"success":{"button":null,"message":"It is always helpful to artists to have an art asset list, which is a text description of each art piece the game will require. "},"type":null}],"reference":"game-documentation-2","text":null,"title":"Visual Style"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"game-documentation","movie":".\/video\/gamedocumentation-gdd-character-micro-8.mp4","name":"Characters","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"demographics\u0009   "},{"order":0,"points":100,"sticky":false,"text":"characters   "},{"order":0,"points":0,"sticky":false,"text":"platforms"},{"order":0,"points":0,"sticky":false,"text":"content ratings"}],"failure":{"button":null,"message":"Characters include all playable characters and non-playable characters in a game."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn13-gamedocumenatation-gdd-character-micro-8","number_of_choices":4,"question":"In terms of creating a game design document, even games that are not story focused can have interesting _____.","start":3600,"success":{"button":null,"message":"Characters include all playable characters and non-playable characters in a game."},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"sports\u0009   "},{"order":0,"points":100,"sticky":false,"text":"role-playing    "},{"order":0,"points":0,"sticky":false,"text":"arcade"},{"order":0,"points":0,"sticky":false,"text":"teens ages 12 to 17"}],"failure":{"button":null,"message":"Role-playing games, or RPGs, tend to require the most detailed character section in a game design document."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn14-gamedocumenatation-gdd-character-micro-8","number_of_choices":4,"question":"Games in the _____ genre tend to require more character detail in the game design document. ","start":3600,"success":{"button":null,"message":"Role-playing games, or RPGs, tend to require the most detailed character section in a game design document."},"type":null},{"choices":[{"order":0,"points":100,"sticky":false,"text":"plot\u0009   "},{"order":0,"points":0,"sticky":false,"text":"mechanics    "},{"order":0,"points":0,"sticky":false,"text":"demographics"},{"order":0,"points":0,"sticky":false,"text":"maturity warnings "}],"failure":{"button":null,"message":"Remember, even arcade games can have story, even if the story is not crucial to enjoying the game.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn15-gamedocumenatation-gdd-character-micro-8","number_of_choices":4,"question":"The story section of the game design document will detail the game's _____.","start":3600,"success":{"button":null,"message":"Remember, even arcade games can have story, even if the story is not crucial to enjoying the game.  "},"type":null}],"reference":"game-documentation-2","text":null,"title":"Characters"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"game-documentation","movie":".\/video\/gamedocumentation-gdd-sound-micro-9.mp4","name":"Sound","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"text"},{"order":0,"points":0,"sticky":false,"text":"torrent downloads   "},{"order":0,"points":0,"sticky":false,"text":"a small keyboard"},{"order":0,"points":0,"sticky":false,"text":"sheet music"}],"failure":{"button":null,"message":"Sound text is used to describe sounds and music without having to create them first. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn16-gamedocumenatation-gdd-sound-micro-8","number_of_choices":4,"question":"Even with only a basic concept of a game, the game design document can begin to list sound needs with ____.","start":3600,"success":{"button":null,"message":"Sound text is used to describe sounds and music without having to create them first. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"musical themes \u0009   "},{"order":0,"points":0,"sticky":false,"text":"ambient sounds\u0009   "},{"order":0,"points":0,"sticky":false,"text":"user interface sound effects"},{"order":21,"points":100,"sticky":false,"text":"all of the above"}],"failure":{"button":null,"message":"The more detail given to the sound section in a game design document, the more clarity composers and audio technicians will have when creating sound for the game.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn17-gamedocumenatation-gdd-sound-micro-9","number_of_choices":4,"question":"Examples of sounds a game design document might list could include: ","start":3600,"success":{"button":null,"message":"The more detail given to the sound section in a game design document, the more clarity composers and audio technicians will have when creating sound for the game.  "},"type":"Multiple"}],"reference":"game-documentation-2","text":null,"title":"Sound"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"game-documentation","movie":".\/video\/gamedocumentation-variations-intro-micro-1.mp4","name":"Variations on the GDD","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"Hollywood script\u0009   "},{"order":0,"points":0,"sticky":false,"text":"standard    "},{"order":0,"points":0,"sticky":false,"text":"owners manual "},{"order":0,"points":100,"sticky":false,"text":"unique"}],"failure":{"button":null,"message":"So far, there is no standard format for a good game design document. They are usually unique to the game they are describing. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn18-gamedocumenatation-gdd-character-micro-8","number_of_choices":4,"question":"Most game design documents follow a _____ format. ","start":3600,"success":{"button":null,"message":"So far, there is no standard format for a good game design document. They are usually unique to the game they are describing. "},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"irrelevant \u0009   "},{"order":0,"points":0,"sticky":false,"text":"color coded\u0009   "},{"order":0,"points":100,"sticky":false,"text":"customized"},{"order":21,"points":0,"sticky":false,"text":"none of the above"}],"failure":{"button":null,"message":"Different genres will require different emphasis in different sections of the game design document. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn19-gamedocumenatation-gdd-sound-micro-9","number_of_choices":4,"question":"A good game design document template is usually _____ to the type of game being developed. ","start":3600,"success":{"button":null,"message":"Different genres will require different emphasis in different sections of the game design document. "},"type":null}],"reference":"game-documentation-3","text":null,"title":"Variations on the GDD"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"game-documentation","movie":".\/video\/gamedocumentation-variations-different-micro-2.mp4","name":"Why be Different?","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"it can stifle creativity\u0009   "},{"order":0,"points":0,"sticky":false,"text":"it costs too much\u0009   "},{"order":0,"points":0,"sticky":false,"text":"they are switching to script formats"},{"order":0,"points":0,"sticky":false,"text":"established templates are outdated"}],"failure":{"button":null,"message":"Innovation and creativity can often be lost when simply filling in the blanks of a standard Game Design Document template. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn20-gamedocumenatation-variations-different-micro-2","number_of_choices":4,"question":"One reason studios avoid the \"one size fits all\" mentality when it comes to Game Design Document templates is because _____.","start":3600,"success":{"button":null,"message":"Innovation and creativity can often be lost when simply filling in the blanks of a standard Game Design Document template. "},"type":"Multiple"},{"choices":[{"order":0,"points":100,"sticky":false,"text":"mechanical \u0009   "},{"order":0,"points":0,"sticky":false,"text":"cost\u0009   "},{"order":0,"points":0,"sticky":false,"text":"personnel "},{"order":0,"points":0,"sticky":false,"text":"art"}],"failure":{"button":null,"message":"Genre and platform are also typically strong considerations when choosing a Game Design Document template. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn21-gamedocumenatation-variations-different-micro-2","number_of_choices":4,"question":"Often, choosing a template for a game design document is based on _____ considerations.","start":3600,"success":{"button":null,"message":"Genre and platform are also typically strong considerations when choosing a Game Design Document template. "},"type":"Multiple"}],"reference":"game-documentation-3","text":null,"title":"Why be Different?"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"game-documentation","movie":".\/video\/gamedocumentation-variations-platform-micro-3.mp4","name":"Platform Considerations","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"A joystick  "},{"order":0,"points":0,"sticky":false,"text":"A game in the arcade genre\u0009   "},{"order":0,"points":100,"sticky":false,"text":"Video game consoles\u0009"},{"order":0,"points":0,"sticky":false,"text":"A level in Mario Bros. "}],"failure":{"button":null,"message":"Consoles, PCs, smart devices, and held-held gaming devices are all considered platforms. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn22-gamedocumenatation-variations-platform-micro-3","number_of_choices":4,"question":"Which of the following is considered a video game platform?","start":3600,"success":{"button":null,"message":"Consoles, PCs, smart devices, and held-held gaming devices are all considered platforms. "},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"micro-transactions"},{"order":0,"points":100,"sticky":false,"text":"controller reactions  \u0009   "},{"order":0,"points":0,"sticky":false,"text":"character development\u0009"},{"order":0,"points":0,"sticky":false,"text":"puzzles "}],"failure":{"button":null,"message":"Because the controller is going to be so pivotal to the action game functioning, a template that details controller reactions would be a good choice.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn23-gamedocumenatation-variations-platform-micro-3","number_of_choices":4,"question":"A game featuring arcade-style fighting action might want a game design document template that features extensive details on _____.","start":3600,"success":{"button":null,"message":"Because the controller is going to be so pivotal to the action game functioning, a template that details controller reactions would be a good choice.  "},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"complex: simple"},{"order":0,"points":0,"sticky":false,"text":"simple: complex  \u0009   "},{"order":0,"points":100,"sticky":false,"text":"complex; complex"},{"order":0,"points":0,"sticky":false,"text":"simple; original "}],"failure":{"button":null,"message":"The more complex a game, the more likely it will be best served with an original template for its game design document.   "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn24-gamedocumenatation-variations-platform-micro-3","number_of_choices":4,"question":"Typically, a game with _____ design, will need a(n) _____ game design document template. ","start":3600,"success":{"button":null,"message":"The more complex a game, the more likely it will be best served with an original template for its game design document.   "},"type":null}],"reference":"game-documentation-3","text":null,"title":"Platform Considerations"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"game-documentation","movie":".\/video\/gamedocumentation-variations-genre-micro-4.mp4","name":"Genre Considerations","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"arcade  \u0009   "},{"order":0,"points":100,"sticky":false,"text":"role-playing    "},{"order":0,"points":0,"sticky":false,"text":"PC"},{"order":0,"points":0,"sticky":false,"text":"platform jumper "}],"failure":{"button":null,"message":"RPG's tend to require extensive design on characters and story. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn25-gamedocumenatation-variations-genre-micro-4","number_of_choices":4,"question":"One example of a genre consideration for a game design document template could be an extensive section on character development for a(n) _____ game.","start":3600,"success":{"button":null,"message":"RPG's tend to require extensive design on characters and story. "},"type":null}],"reference":"game-documentation-3","text":null,"title":"Genre Considerations"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"game-documentation","movie":".\/video\/gamedocumentation-variations-mechanics-micro-5.mp4","name":"Mechanical Considerations","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"simple  \u0009   "},{"order":0,"points":0,"sticky":false,"text":"complex    "},{"order":0,"points":0,"sticky":false,"text":"original"},{"order":0,"points":0,"sticky":false,"text":"illustrated "}],"failure":{"button":null,"message":"Remember not to over-write or under-write your game design document. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn26-gamedocumenatation-variations-genre-micro-4","number_of_choices":4,"question":"In general, simple games, such as a 2D platform jumper game, require a(n) _____ game design document template. ","start":3600,"success":{"button":null,"message":"Remember not to over-write or under-write your game design document. "},"type":null}],"reference":"game-documentation-3","text":null,"title":"Mechanical Considerations"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"game-documentation","movie":".\/video\/gamedocumentation-variations-end-micro-6.mp4","name":"Custom GDD","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"overly complex\u0009   "},{"order":0,"points":0,"sticky":false,"text":"overly simple\u0009   "},{"order":0,"points":100,"sticky":false,"text":"unique"},{"order":0,"points":0,"sticky":false,"text":"asymmetric "}],"failure":{"button":null,"message":"The exact format will be determined by need and thus become unique to the game it is documenting.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn27-gamedocumenatation-variations-end-micro-6","number_of_choices":4,"question":"No matter what template is chosen, once complete, every game design document becomes _____.","start":3600,"success":{"button":null,"message":"The exact format will be determined by need and thus become unique to the game it is documenting.  "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"mechanics\u0009   "},{"order":0,"points":0,"sticky":false,"text":"genre\u0009   "},{"order":0,"points":0,"sticky":false,"text":"platform"},{"order":21,"points":100,"sticky":false,"text":"All of the above"}],"failure":{"button":null,"message":"If seeking a pre-existing game design document, always consider your game's mechanics, genre, and platform first. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn28-gamedocumenatation-variations-end-micro-6","number_of_choices":4,"question":"In general, a good game design document template is chosen with strong consideration on the game's _____.","start":3600,"success":{"button":null,"message":"If seeking a pre-existing game design document, always consider your game's mechanics, genre, and platform first.  "},"type":"Multiple"}],"reference":"game-documentation-3","text":null,"title":"Custom GDD"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"game-documentation","movie":".\/video\/gamedocumentation-tdd-intro-micro-1.mp4","name":"Technical Design Document","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"art concepts\u0009   "},{"order":0,"points":0,"sticky":false,"text":"core gameplay elements\u0009   "},{"order":0,"points":0,"sticky":false,"text":"mechanics"},{"order":0,"points":100,"sticky":false,"text":"how the game will be made"}],"failure":{"button":null,"message":"While the GDD is a document detailing a game's look and play, the technical design document will show the developers how those goals will be achieved. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn29-gamedocumenatation-tdd-intro-micro-1","number_of_choices":4,"question":"The purpose of a technical design document is to detail _____.","start":3600,"success":{"button":null,"message":"While the GDD is a document detailing a game's look and play, the technical design document will show the developers how those goals will be achieved. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Musical themes\u0009   "},{"order":0,"points":0,"sticky":false,"text":"Story and plot   "},{"order":0,"points":100,"sticky":false,"text":"Programming language"},{"order":0,"points":0,"sticky":false,"text":"The game's genre"}],"failure":{"button":null,"message":"What programming language the game will be coded with is a subject for the technical design document. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn30-gamedocumenatation-tdd-intro-micro-1","number_of_choices":4,"question":"Which of the following is typically a subject of a technical design document?","start":3600,"success":{"button":null,"message":"What programming language the game will be coded with is a subject for the technical design document. "},"type":"Multiple"}],"reference":"game-documentation-4","text":null,"title":"Technical Design Document"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"game-documentation","movie":".\/video\/gamedocumentation-tdd-software-micro-2.mp4","name":"Software","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"software development kits\u0009   "},{"order":0,"points":0,"sticky":false,"text":"ideas stolen from other games\u0009   "},{"order":0,"points":0,"sticky":false,"text":"storyboards"},{"order":0,"points":0,"sticky":false,"text":"marketing campaigns"}],"failure":{"button":null,"message":"Any software development kits (SDKs) being utilized in the game's development would be described in the software section of a technical design document. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn31-gamedocumenatation-tdd-software-micro-2","number_of_choices":4,"question":"A technical design document's software section would include the use of any _____.","start":3600,"success":{"button":null,"message":"Any software development kits (SDKs) being utilized in the game's development would be described in the software section of a technical design document. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Photoshop\u0009   "},{"order":0,"points":0,"sticky":false,"text":"Microsoft Word\u0009   "},{"order":0,"points":0,"sticky":false,"text":"Adobe Suite "},{"order":21,"points":100,"sticky":false,"text":"All of the above"}],"failure":{"button":null,"message":"Most software that is useful for the development process will be presented in the software section of the technical design document. Game engines and sound software are distinctive enough to have their own sections. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn32-gamedocumenatation-tdd-software-micro-2","number_of_choices":4,"question":"Other useful software described in the software section of a technical design document could include _____.","start":3600,"success":{"button":null,"message":"Most software that is useful for the development process will be presented in the software section of the technical design document. Game engines and sound software are distinctive enough to have their own sections. "},"type":"Multiple"}],"reference":"game-documentation-4","text":null,"title":"Software"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"game-documentation","movie":".\/video\/gamedocumentation-tdd-hardware-micro-3.mp4","name":"Hardware","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"size\u0009   "},{"order":0,"points":0,"sticky":false,"text":"availability\u0009   "},{"order":0,"points":100,"sticky":false,"text":"cost"},{"order":0,"points":0,"sticky":false,"text":"genre"}],"failure":{"button":null,"message":"Not all games need state of the art hardware for successful development. Cost will be a major consideration in finding this balance. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn33-gamedocumenatation-tdd-hardware-micro-3","number_of_choices":4,"question":"In the hardware section of the technical design document, the _____ of the hardware needed to create a game is balanced with the minimum needs of the game being developed. ","start":3600,"success":{"button":null,"message":"Not all games need state of the art hardware for successful development. Cost will be a major consideration in finding this balance. "},"type":null}],"reference":"game-documentation-4","text":null,"title":"Hardware"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"game-documentation","movie":".\/video\/gamedocumentation-tdd-language-micro-4.mp4","name":"Programming Language","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"the price of development software\u0009   "},{"order":0,"points":100,"sticky":false,"text":"what works best for the game \u0009   "},{"order":0,"points":0,"sticky":false,"text":"what best-selling games use"},{"order":0,"points":0,"sticky":false,"text":"what you can hire the cheapest labor to code"}],"failure":{"button":null,"message":"Often, one programming language works better for particular goals over another. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn34-gamedocumenatation-tdd-language-4","number_of_choices":4,"question":"Choosing a programming language should be based on _____. ","start":3600,"success":{"button":null,"message":"Often, one programming language works better for particular goals over another. "},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Programming language: game design document\u0009   "},{"order":0,"points":100,"sticky":false,"text":"Programming language: technical design document  \u0009   "},{"order":0,"points":0,"sticky":false,"text":"Mechanics: game design document"},{"order":0,"points":0,"sticky":false,"text":"Mechanics: technical design document"}],"failure":{"button":null,"message":"This is perhaps the most important section of the technical design document for programmers. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn35-gamedocumenatation-tdd-language-4","number_of_choices":4,"question":"Actual code would be written and referred to in the _____ section of the ____.","start":3600,"success":{"button":null,"message":"This is perhaps the most important section of the technical design document for programmers. "},"type":null}],"reference":"game-documentation-4","text":null,"title":"Programming Language"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"game-documentation","movie":".\/video\/gamedocumentation-tdd-engine-micro-5.mp4","name":"Game Engine","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"software\u0009   "},{"order":0,"points":100,"sticky":false,"text":"required\u0009   "},{"order":0,"points":0,"sticky":false,"text":"cheap"},{"order":0,"points":0,"sticky":false,"text":"part of the technical design document"}],"failure":{"button":null,"message":"While it is not required to have a game engine for game development, most engines offer tools and shortcuts that make them very time and cost effective. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn36-gamedocumenatation-tdd-engine-micro-5","number_of_choices":4,"question":"Although usually helpful to game development, a game engine is NOT _____.","start":3600,"success":{"button":null,"message":"While it is not required to have a game engine for game development, most engines offer tools and shortcuts that make them very time and cost effective. "},"type":null}],"reference":"game-documentation-4","text":null,"title":"Game Engine"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"game-documentation","movie":".\/video\/gamedocumentation-tdd-datasharing-micro-6.mp4","name":"Data Sharing","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"True"},{"order":0,"points":100,"sticky":false,"text":"False"}],"failure":{"button":null,"message":"Many games do not require data sharing of any kind and so this section may not exist for all technical design documents. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn37-gamedocumenatation-tdd-datasharing-micro-6","number_of_choices":2,"question":"True or False: All games will require a data sharing section of the technical design document. ","start":3600,"success":{"button":null,"message":"Many games do not require data sharing of any kind and so this section may not exist for all technical design documents. "},"type":null}],"reference":"game-documentation-4","text":null,"title":"Data Sharing"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"game-documentation","movie":".\/video\/gamedocumentation-tdd-sound-micro-7.mp4","name":"Sound Software","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"programming language; music\u0009   "},{"order":0,"points":0,"sticky":false,"text":"programming language; sound software \u0009   "},{"order":0,"points":0,"sticky":false,"text":"sound software; music"},{"order":0,"points":100,"sticky":false,"text":"music; sound software"}],"failure":{"button":null,"message":"While the GDD may detail how a piece of music sounds, the TDD will detail what tools and software will be used to create that sound and how. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn38-gamedocumenatation-tdd-sound-micro-7","number_of_choices":4,"question":"Typically, information on _____ is found in the game design document, and details of a game's _____ is found in the technical design document.","start":3600,"success":{"button":null,"message":"While the GDD may detail how a piece of music sounds, the TDD will detail what tools and software will be used to create that sound and how. "},"type":"Multiple"}],"reference":"game-documentation-4","text":null,"title":"Sound Software"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"game-documentation","movie":".\/video\/gamedocumentation-tdd-end-micro-8.mp4","name":"Technical Design Document Summary","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"rules of play\u0009   "},{"order":0,"points":0,"sticky":false,"text":"core mechanics\u0009   "},{"order":0,"points":100,"sticky":false,"text":"code"},{"order":0,"points":0,"sticky":false,"text":"art asset lists"}],"failure":{"button":null,"message":"Besides code, the TDD could also include camera information, server details, and of course, lots of math. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn39-gamedocumenatation-tdd-end-micro-8","number_of_choices":4,"question":"A technical design document, as opposed to a game design document, would include _____:","start":3600,"success":{"button":null,"message":"Besides code, the TDD could also include camera information, server details, and of course, lots of math. "},"type":null}],"reference":"game-documentation-4","text":null,"title":"Technical Design Document Summary"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"reference","mod":"documentation","movie":null,"name":"Reference","promptfile":null,"prompts":null,"reference":null,"text":"<a id=\"game-documentation-1\" class=\"dest\"><\/a><div class=\"accent\"><h1>Overview<\/h1><p>Video game development is a complex process requiring meticulous planning and documentation. The Game Design Document (GDD) is used by developers as a blueprint of the the game and holds all of the content, structure and details needed to plan the game's development from concept to release. In most video game development models the writing of a GDD will be the first step in making a game a reality.<\/p><p>Developing a complete and detailed GDD benefits game development in many ways. A meticulously detailed GDD allows the entire team to focus on one vision of the project. It sets clear goals and helps create schedules and production plans. It locks down gameplay and helps eliminate \"feature creep\". A complete GDD also provides a foundation to develop solid cost, time, and personnel estimates.<\/p><p>The Game Design Document is such an important document and tool in game development, it will be the focal point of the rest of the Game Design Section (Arcs 2-4). As we go through each Topic in this Module, we will begin the process of filling out our own GDD.<\/p><p>This Module will present a structure for creating original game concepts through various templates of a GDD. With a template chosen, we will begin to fully flesh out a GDD and by the end of this Section, we will have an official document presenting a complete game concept and development plan.<\/p><p>Covered in the Module are the following Topics:<\/p><div style=\"text-align: center;\"><ul class=\"anchorGroup\" style=\"text-align: left; display: inline-block;\"><li><a class=\"ankor\" href=\"#game-documentation-2\">Core Elements of a Game Design Document<\/a><\/li><li><a class=\"ankor\" href=\"#game-documentation-3\">Variations on the GDD Structure<\/a><\/li><li><a class=\"ankor\" href=\"#game-documentation-4\">Elements of a Technical Design Document<\/a><\/li><\/ul><\/div><\/div><a id=\"game-documentation-2\" class=\"dest\"><\/a>&nbsp;<div class=\"accent\"><h1>Core Elements of a Game Design Document<\/h1><p>In Hollywood, a professional screenplay has a particular format that is considered \"industry standard\". The video game industry equivalent, the Game Design Document, is a much looser template that, so far, has no industry standard. That said, there are some core elements that, no matter how the document is structured, every GDD should have. The core GDD elements we will cover are as follows:<\/p><ul><li>Game Concept<\/li><li>Target Audience<\/li><li>Platform<\/li><li>Genre<\/li><li>Core Gameplay<\/li><li>Visual Style<\/li><li>Characters<\/li><li>Story<\/li><\/ul><p>Each of these sections can be placed into the GDD as the game designer sees fit. Some may find a Game Design Document template is much easier to implement as it will offer a structure for the order and organization of these topics. How this sections are written individually will be much more important than their exact order in the GDD.<\/p><h3>Game Concept<\/h3><p>Let's start filling in our GDD with the most crucial first question: What is the game? Before a game can be made, we have to decide what the game is (and is not). First and foremost, the game concept must connect to an audience. Right now, this audience is not legions of dedicated fans, but instead our own development team: we must write a concept that intrigues and captures the imagination of the team.<\/p><p>Typically this information will be placed in a very early section of a GDD, perhaps even on the first page. Our GDD template we selected for our exercises calls this section \"Game Concept\".<\/p><p>This section does not have to lay out much in the way of gameplay or mechanics. That will come later. For now, the idea is to create excitement over the general theme and concept of the game. Let's build an example game so that we can see a demonstration on how this information might fit into the GDD.<\/p><p>Example GDD: Game Concept for <em>Tempered Steel<\/em><\/p><img class=\"aligncenter\" src=\".\/images\/Logo_TemperedSteel.jpg\" alt=\"Logo_TemperedSteel\" width=\"591\" height=\"317\" \/><p><strong><em>Tempered Steel<\/em><\/strong><\/p><p><strong><em>It is the Age of Steel on the young world of Raan. Crusades against a rising dragon threat in the North has left the Human Empire of Rahaan without a king, and in his absence, a corrupt aristocracy has risen to power. As Lords and Ladies of the countryside are stripped of title and land, a Civil War erupts between noble knights seeking to hold the peace and greedy warlords out for conquest. Into this conflict, you are cast as nobility trying to rise to power in these violent times. As you build your castle and the loyalty of your people, tough decisions will have to be made: will you side with the warmongers bent on destruction and chaos, defend the traditions of Empire, or perhaps just profit from the war, selling mercenaries and resources to the highest bidder?<\/em><\/strong><\/p><p><strong><em>Set in the original fantasy world of Raan, players will find themselves immersed in a vast conflict full of conquest, diplomacy and wonder. As they build and expand their kingdoms, players can establish their legacy in the history of the world.<\/em><\/strong><\/p><p><strong><em>Tempered Steel<\/em><\/strong><strong><em> is an online, free-to-play title and is supported by our unique in-game microtransactions system. Players can purchase intricately balanced boosts and upgrades, to speed up or increase resources to help in all aspects of the game. As a free-to-play game, Tempered is carefully designed for all players: from beginners to gaming enthusiasts, warmongers to tradesmen, every player can enjoy all aspects of play without paying a single dime.<\/em><\/strong><\/p><h3>Target Audience<\/h3><img class=\"aligncenter\" src=\".\/images\/image_demographics.jpg\" alt=\"image_demographics\" width=\"670\" height=\"401\" \/><p>It cannot be stressed enough that if there is no audience for a game, it will not be successful no matter how new and innovative it is. Entire studios can fall when they fail to target a particular demographic that is thriving and able to consume the products being created for them. Market researcher should be utilized to identify an audience and create a desire for the product through marketing to that audience. Finally, in the Target Audience section of our GDD, we will also announce the ESRB rating the game is targeting.<\/p><p>Example GDD: Target Audience for <em>Tempered Steel<\/em><\/p><p><strong><em>Tempered Steel will target an audience of male and female gamers, ages 14-35. In particular, the game will market to gamers with interest and background in fantasy settings of magic and mystery; fantasy role-playing games (FRPGs) and real-time battle simulations. This game assumes basic equality of people where issues of race and gender are not part of the politics of the world. Tempered Steel contains no graphic depictions of violence, no blood and no suggestive themes. It will seek a general ESRB rating appropriate for TEEN audiences.<\/em><\/strong><\/p><h3>Platform<\/h3><p>There are many different platforms we can develop our game to be played on. Gaming platforms include: home gaming consoles (Xbox One, Playstation 4, etc.); the Personal Computer (PC) market; phone and tablet Apps; Web browser-based games; and more. We can also decide to develop the game for multiple platforms if that is technologically and financially viable for our release plans.<\/p><img class=\"aligncenter\" src=\".\/images\/image_platforms.png\" alt=\"image_platforms\" width=\"809\" height=\"306\" \/><p>There are a lot of considerations when choosing a platform. What is our target audience? What ESRB (or similar system if distributing outside North America) rating are we aiming for? What platform best utilizes the core gameplay? Still, this section is little more than a couple sentences.<\/p><p>Example GDD: Platform for <em>Tempered Steel<\/em><\/p><p><strong><em>Tempered Steel is an epic browser-based web game that will be available on PC, smartphones, and tablets. It will target an audience of males, ages 14-35 and will seek a general ESRB rating appropriate for TEEN audiences.<\/em><\/strong><\/p><h3>Genre<\/h3><p>Here we will decide on our genre (see Section One: Arc One: Module: History of the Video Game Industry for a full discussion on Genres). This is just a brief sentence in our GDD, but it is important to list as it will create a tone and methodology on our approach to that particular genre.<\/p><p>Example GDD: Genre for <em>Tempered Steel<\/em><\/p><p><strong><em>Tempered Steel is a Real-Time Strategy (RTS), fantasy war MMO that focuses on resource management, castle building, and massive troop combat. <\/em><\/strong><\/p><h3>Core Gameplay<\/h3><p>In this section of the GDD we will describe how the game is played and list all of the core mechanics. Different GDDs will present this information in different ways. One way is to write level abstractions. Level abstractions are snippets of full level designs. It could be a detailed description of the first minute of playing the game or a broad summery of actual gameplay elements. As we fill out these sections, more detail can be added as we go through the Section. For the purpose of the example GDD we are constructing, we stay broad with our description of gameplay. For a complete GDD, all gameplay elements will eventually have to be formulated and documented here. We can, however, begin to break our broad elements into smaller “aspects” such as combat, puzzles, exploration, etc.<\/p><p>Example GDD: Core Gameplay for <em>Tempered Steel<\/em><\/p><p><strong><em>Tempered Steel will feature these core gameplay elements:<\/em><\/strong><\/p><p><strong><em>City Customization<\/em><\/strong><em> – <strong>Build an Empire with over 25 buildings, equipped with upgraded levels and research. <\/strong><\/em><\/p><p><strong><em>Practice Ancient Strategies and Tactics<\/em><em> – Use medieval war tactics to outsmart and outwit your enemies by creating a unique blend of military units, choosing from over 15 unit types and 10 or more heroes that can quickly sway the tide of battle in your favor.<\/em><\/strong><\/p><p><strong><em>A Hero's Journey<\/em><em> &#8211; Venture into Dungeons and fight challenging bosses to find weapons and armor and gain experience so your heroes can successfully lead their soldiers into battle. <\/em><\/strong><\/p><p><strong><em>Explore the Marketplace <\/em><em>- Become a traveling merchant in a state of the art Marketplace with unprecedented, real money, trading features.<\/em><\/strong><\/p><p><strong><em>Form Alliances<\/em><em> – Explore the many varieties of alliances and coalitions where new friends and neighbors can join together in the battle over land and resources.<\/em><\/strong><\/p><h3>Visual style<\/h3><p>Here we will describe what the game will look like. If we are not yet sure what it will look like, we can begin to breakdown our concept's most obvious environments to get us started. For instance, what the world looks like is already contained in our chosen level environments. Some possible environment choices might be:<\/p><ul><li>A post-apocalyptic wasteland<\/li><li>A 2D neon maze filled with “breadcrumb” dots<\/li><li>The ruins of a lost magical civilization<\/li><li>An asteroid field in the middle of deep space<\/li><li>A deep, dark dungeon<\/li><\/ul><p>We can also consider environmental effects as a way of brainstorming our game's look. Consider these environmental effects or weather patterns as visual clues to the game:<\/p><ul><li>Constant storms cause unnatural red lightning to crash to the earth<\/li><li>Volcanoes erupt in the background<\/li><li>Torch light illuminates the dark cave<\/li><\/ul><p>Example GDD: Visual Style for<em> Tempered Steel<\/em><\/p><img class=\"aligncenter\" src=\".\/images\/image_TemperedSteel_visualstyle.png\" alt=\"image_TemperedSteel_visualstyle\" width=\"952\" height=\"544\" \/><p><strong><em>Tempered Steel exist in an original fantasy world called Raan. The game depicts a wide landscape of open fields, castles, and natural terrain from a top-down point of view. In particular, Tempered Steel will feature:<\/em><\/strong><\/p><ul><li><strong><em>Natural Terrain<\/em><\/strong><em> -<strong> Mountains, rivers, hills, plains, forests<\/strong><\/em><\/li><li><strong><em>Unnatural Terrain<\/em><em> – Ruins, dungeons, fields of fire<\/em><\/strong><\/li><li><strong><em>Human Constructions – <\/em><em>Castles, farms, quarries, mines, towers<\/em><\/strong><\/li><li><strong><em>Characters –<\/em><em> warriors, workers, heroes, lords<\/em><\/strong><\/li><li><strong><em>Items –<\/em><em> crowns, weapons, siege engines<\/em><\/strong><\/li><\/ul><h3>Characters<\/h3><p>Here we will delve into the characters in the game. Although it is not always intuitive, almost all games have characters. Even a game as simple as Pac-Man has amazingly detailed characters when we think about it. Each ghost has a distinctive personality and habit when in the maze. Even Pac-Man himself seems to have a personality (So reckless with those cherries!). In general, this section will have detailed descriptions of all the game's characters, including personality, quirks and physical descriptions. Later in this Section, we will take a detailed look at how to formulate exciting and original characters for video games, but for now, we can examine our example from <em>Tempered Steel<\/em>.<\/p><img class=\"aligncenter\" src=\".\/images\/image_characters.png\" alt=\"image_characters\" width=\"758\" height=\"303\" \/><p>Example GDD: Characters for <em>Tempered Steel<\/em><\/p><p><strong><em>Tempered Steel features family noble houses that players will choose and guide through the events of the game. They include:<\/em><\/strong><\/p><p><strong><em>House Gregor –<\/em><em> The only legitimate land holders outside of the main city of Point Glory, this family is set up with the best of material defenses. Beset on all sides, their numbers remain low, but their castle and blessing from the Lost King makes them formidable in this time of civil war. Their standard is the White and Silver Ice Dragon on the Black Field. <\/em><\/strong><\/p><p><strong><em>House Latomere –<\/em><em> One of the families jockeying for power in the lands outside Point Glory, these people are born fighters. They employ guerilla tactics whenever possible, and close quarters fighting always. Their standard is the green tiger on the yellow field.<\/em><\/strong><\/p><ul><li><strong><em>Flint Latomere<\/em><em>: Son of the patriarch, the Knight of Knives. He wears light armor and fights with two daggers rather than a broadsword. He is the first to desire land after the Gregors are given theirs, and immediately builds a keep uncomfortably close to the Gregors stronghold.<\/em><\/strong><\/li><\/ul><p><strong><em>House Ptollack<\/em><em> – Water faring people from the dock ward in Point Glory that were aiding in the construction of the great bridge (half finished by game time) but left when they saw their opportunity to hold land. They set up by the coast, and are good with trade and water warfare. Their standard is the Green Shark on the Blue Plane.<\/em><\/strong><\/p><ul><li><strong><em style=\"font-weight: bold;\">Sammy Ptollack:<\/em><em> The Knight of Coral. She leaves the dock ward with her own contingent by way of sea, and settles in Gregor lands along the coast, spotting it with small castles and keeps, almost like luxuriant medieval coastal condos. She regularly trades with Point Glory, and is thus best equipped, though she fares best on the water.<\/em><\/strong><\/li><\/ul><p><strong><em>House Gentler –<\/em><em> A powerful clan, but clunky. Their specialty is the large technologies of war, like siege engines and battering rams. It takes a long time for them to gear up for war, but they are almost unstoppable when they are ready to fight.<\/em><\/strong><\/p><h3>Story<\/h3><p>As mentioned in Characters, it can be quite surprising how much story even simple games have. There is a story in Pac-Man. There is a story in Angry Birds and there is certainly a story in Halo. Some games will obviously have more story than others. Here we will detail our plot, any scripted sequences, and any cinematics or cut-scenes that will be in the game. Again, when we reach the Story Topic in the Section, we will return to this section with greater detail and understanding of what to put here. For now, let's continue with our Tempered Steel example.<\/p><p><em>Example GDD: Story for Tempered Steel<\/em><\/p><p><strong><em>“The King is gone! Long live the Red Queen!”<\/em><\/strong><\/p><p><strong><em>For centuries the Great and Ageless King Rahaan II ruled Raan with an even hand and an open heart. With his marriage to his seventh wife, Asha-Mon, all that changed. Some say the young queen controlled the King's will. Some say she used magic and enchanted the King from the beginning. Whatever the circumstances, the Queen has sent the King and his forces to the North to battle the awakened dragons. As the game opens, the King has been gone for a decade, and as the newly titled Red Queen consolidates her power, loyalists to the missing king rise and start a rebellion. Tempered Steel takes place during a civil war as players take on the roles of powerful house leaders who must choose sides and prepare for war. From here, the story will be told by the players themselves as the fate of the land is solely determined by the actions of the players.<\/em><\/strong><\/p><h3>Sound<\/h3><p>Much like the visual elements, we should be able to instantly conceive some of the sounds of our game world. Some indicators we might put into our GDD upfront, depending on the game itself, might include:<\/p><ul><li>Silence; no birds sing, no wind blows<\/li><li>Storm sounds<\/li><li>Sounds of a living village<\/li><\/ul><p>Example GDD: Sound for <em>Tempered Steel<\/em><\/p><p><strong><em>Tempered Steel with feature a host of sound effects as well as different types of background music.<\/em><\/strong><\/p><p><strong><em>World Theme<\/em><em> – Background score played in main menu and during gameplay when not in combat mode<\/em><\/strong><\/p><p><strong><em>Combat Theme<\/em><em> – Used when armies clash on the field of battle or in the defense of castles<\/em><\/strong><\/p><p><strong><em>Crash of War Effects<\/em><em> – The cacophony of war as troops battle<\/em><\/strong><\/p><p><strong><em>Marketplace Theme <\/em><em>– background music for the marketplace area of the game<\/em><\/strong><\/p><p><strong><em>Messenger Ping<\/em><em> – Sound effect notifying player they have received a message from another player<\/em><\/strong><\/p><p><strong><em> <\/em><\/strong><\/p><\/div><a id=\"game-documentation-3\" class=\"dest\"><\/a>&nbsp;<div class=\"accent\"><h1>Variations on the GDD structure<\/h1><p>As mentioned at the beginning of this Module, <span style=\"color: #3f4549;\">there is not currently an industry standard for the structure of a <\/span>Game Design Document. Rather, most are written in a style or format that best describes the particular game assigned to it. In that regard, all GDDs are always custom to the project. Given that, it is still a good idea to look at and consider the merits of other GDD templates.<\/p>&nbsp;<h3>Why Be Different?<\/h3><p>The problem with every game using the same GDD structure is that it begins to create homogeny (or sameness) in game design.  While this can be a good thing in terms of evenness and consistency, it can stifle creativity.  In addition, because of the massive diversity in game designs and styles, it will often be the case that one particular layout of a GDD just fits a certain genre better than another. When choosing a GDD template it is best to consider the game we want to make and choose a template that best implements that style of design. In particular, we want to focus on platform, genre, and mechanical considerations when choosing a GDD template.<\/p><h3>Platform Considerations<\/h3><p>The platform we choose for the game could have an affect on the Game Design Document template we want to use. Remember, the platform is the system or format the game is played on. Each platform has it's own issues, benefits and complications that can be highlighted with a proper fitting GDD template. Perhaps the template has extensive sections for controller actions. Or perhaps, if we are making a game for mobile devices, it would be convenient to have sections on microtransactions or expanded content. The point is, choosing a template made for a simple game is not going to work well for a large complex game.<\/p><h3>Genre Considerations<\/h3><p>So how do genre considerations affect our GDD template? Well, certain templates will be better suited for laying out certain genre gameplay elements. For example, a MMO RPG might need a lot of sections on character options such as classes and skill trees. In this case, we would choose a GDD style that clearly presented sections on these elements instead of a very basic GDD template for a 2D platform jumper.<\/p><h3>Mechanical Considerations<\/h3><p>Much like the other considerations, gameplay has the same needs for a properly formatted GDD. Simple games with few play options don't need a GDD template built to organize a massive amount of mechanics, and in reverse, we don't want to chose a simple GDD template for a game with a lot of complexity.<\/p><p>Every Game Design Document is unique. It doesn't really matter what template we chose because the document's format will eventually be adjusted to fit the needs of the game and the development team. It will certainly be easier to choose a template that most closely fits the platform, genre and mechanics early on, but there will so much iteration and documentation that, in the end, all GDDs are custom.<\/p><\/div><a id=\"game-documentation-4\" class=\"dest\"><\/a>&nbsp;<div class=\"accent\"><h1>Elements of a Technical Design Document<\/h1><p>Although for the purpose of this Game Design Curriculum we will not fully examine the Technical Design Document, it is still important to understand its function. The Technical Design Document (TDD) is a companion to the GDD. Where the GDD documents the gameplay, plot and visuals of the game, the TDD expresses the actual technical components that will make the game work. These components broadly include:<\/p><img class=\"aligncenter\" src=\".\/images\/image_flowchart.png\" alt=\"image_flowchart\" width=\"1165\" height=\"547\" \/><h3>Software<\/h3><p>As discussed in the Industry terminology Module, there are many software options to help build and implement a game on a platform, or multiple platforms. These are the Integrated Development Environment (IDE) software and the Software Development Kits (SDKs) among many other that can be a great boon to the development process.<\/p><h3>Hardware<\/h3><p>Deciding on what hardware to develop a game on is another important decision for the TDD. There is usually a cost\/benefit assessment to be done with considering what quality of hardware will be needed for the project.<\/p><h3>Programming Language<\/h3><p>Choosing the most efficient and workable programming language for the project is perhaps the most important decision any development team will make.<\/p><h3>Engine<\/h3><p>This is separate from software because although every project will utilize some software, not every game will require or want to use a game engine. Later in this curriculum, we will more closely examine game engines and how they can help a project.<\/p><h3>Data Sharing<\/h3><p>This is another technical element that may not cross the mind of the typical game designer as he\/she contemplates world domination as a game maker. Data sharing requires high-tech systems that are fully described in the TDD.<\/p><h3>Sound Software<\/h3><p>Different than what the game will sound like, this section in the TDD describes the instruments or software that will be utilized to actually create the sound effects and music.<\/p><\/div><!--page:~~game-documentation-reference-text~~-->","title":"Reference Material"},{"bIsChecked":true,"exercise":".\/exercise\/DevProFreebird.stack","instructions":"<h1>Goals<\/h1><ol><li>Learn how to build the point-and-click adventure game Freebird by starting with the template version of the game.<\/li><li>Learn about how Game Stack layers its sprites, lock sprites in place, and allow sprites to pass through their mouse clicks to the sprites underneath.<\/li><\/ol><h1>Steps<\/h1><ol><li>Click the <img src=\".\/images\/downloadbutton.png\" alt=\"layout.png\"\/> button at the top or bottom of this page to download the DevProFreebird.stack file.<\/li><li>Save the file to a location you can access on your computer.<\/li><li>Click to open the file in Game Stack.<\/li><li>Open the Templates tab:<p>Note that when you open the DevProFreebird.stack file the Freebird stage is selected, and the Sprites area is empty. You will open a new area called Templates where you will find all of the Freebird sprites that you can then use to rebuild the full Freebird game.<\/p><img class=\"aligncenter\" src=\".\/images\/gamedocumentation-freebird.png\" alt=\"layout.png\"\/><ol class=\"alpha\"><li>Select Edit - Toggle Template Sprites Tab to open access to the template sprites.<\/li><img class=\"aligncenter\" src=\".\/images\/gamedocumentation-templatemenu.png\" alt=\"layout.png\"\/><li>Switch to the Templates tab to see all of the available template sprites. <\/li><img class=\"aligncenter\" src=\".\/images\/gamedocumentation-templatestab.png\" alt=\"layout.png\"\/><\/ol><\/li><li>Create the back-most sprite, the curtain:<p>Game Stack's sprites have a drawing order that determines when one sprite is in front of another sprite.  This drawing order is known as layers, with each sprite on its own layer. While most of sprites in the Freebird game take care of their own layer management, some of them do not. By building each of our sprites in back-to-front order, and then locking them in place, we won't need to concern ourselves with how layers work. For this step we start with the sprite that needs to be at the backmost layer, which is the curtain the cat is hiding behind.<\/p><ol class=\"alpha\"><li>In the Templates tab, scroll down to the bottom and click on the T_Curtain template sprite.<\/li><img class=\"aligncenter\" src=\".\/images\/gamedocumentation-curtainsprite.png\" alt=\"layout.png\"\/><li>Right click the T_Curtain template sprite and select 'new sprite'. This will add a copy of the curtain onto the stage with all of the programming needed for the Freebird game in the Sprites tab.<\/li><img class=\"aligncenter\" src=\".\/images\/gamedocumentation-curtainspritemenu.png\" alt=\"layout.png\"\/><li>When any sprite is created from a template sprite, its location could be anywhere on the Stage. To see where the curtain has been placed, click on the Curtain sprite under the Sprites tab a few times. This will highlight the sprite with a blue outline.<\/li><img class=\"aligncenter\" src=\".\/images\/gamedocumentation-curtainspritewronglocation.png\" alt=\"layout.png\"\/><li>Drag the new Curtain sprite so that it is the correct location over the background. It needs to perfectly match up so that the Curtain sprite is not noticable.<\/li><img class=\"aligncenter\" src=\".\/images\/gamedocumentation-curtainspritelocation.png\" alt=\"layout.png\"\/><li>We want to lock the Curtain sprite in place so that we don't accidentally drag it to a new location. Click on the 'i' button on the Curtain sprite to open the sprite's properties.<\/li><img class=\"aligncenter\" src=\".\/images\/gamedocumentation-curtainspriteinfobutton.png\" alt=\"layout.png\"\/><li>Click on the 'locked in editor' checkbox to lock the Curtain sprite in place.<\/li><img class=\"aligncenter\" src=\".\/images\/gamedocumentation-curtainspritelocked.png\" alt=\"layout.png\"\/><li>Click on the sprite properties back arrow to return to the sprite list.<\/li><img class=\"aligncenter\" src=\".\/images\/gamedocumentation-curtainspriteback.png\" alt=\"layout.png\"\/><\/ol><\/li><li>Add the birdcage door:<ol class=\"alpha\"><li>In the Templates tab, scroll down to the bottom and click on the T_Door template sprite.<\/li><img class=\"aligncenter\" src=\".\/images\/gamedocumentation-doorsprite.png\" alt=\"layout.png\"\/><li>Following the same procedure as with the Curtain above, create a new sprite from the T_Door template, move the new Door sprite into the correct location on the birdcage, and lock the Door sprite in the editor.<\/li><img class=\"aligncenter\" src=\".\/images\/gamedocumentation-doorspritelocation.png\" alt=\"layout.png\"\/><\/ol><\/li><li>Add the light switch:<p>The light switch is a sprite the player may interact with. Clicking on it turns the birdcage's light on and off.<\/p><ol class=\"alpha\"><li>In the Templates tab, scroll down to the bottom and click on the T_LightSwitch template sprite.<\/li><img class=\"aligncenter\" src=\".\/images\/gamedocumentation-lightswitchsprite.png\" alt=\"layout.png\"\/><li>Following the same procedure as with the Curtain above, create a new sprite from the T_LightSwitch template, move the new LightSwitch sprite into the correct location on the birdcage, and lock the LightSwitch sprite in the editor.<\/li><img class=\"aligncenter\" src=\".\/images\/gamedocumentation-lightswitchspritelocation.png\" alt=\"layout.png\"\/><\/ol><\/li><li>Add the secret note:<p>The secret note is an item the player may click on, and place in their inventory.<\/p><ol class=\"alpha\"><li>In the Templates tab, scroll down to the bottom and click on the T_SecretNote template sprite.<\/li><img class=\"aligncenter\" src=\".\/images\/gamedocumentation-secretnotesprite.png\" alt=\"layout.png\"\/><li>Create a new sprite from the T_SecretNote template, move the new SecretNote sprite into the correct location on the birdcage, and lock the SecretNote sprite in the editor.<\/li><img class=\"aligncenter\" src=\".\/images\/gamedocumentation-secretnotespritelocation.png\" alt=\"layout.png\"\/><\/ol><\/li><li>Add the wall painting:<p>The wall painting is special in that it is used to cover the secret note. In the game, the player can click on the wall painting to have it slide out of the way to reveal the secret note.<\/p><ol class=\"alpha\"><li>In the Templates tab, scroll down to the bottom and click on the T_Wall Painting template sprite.<\/li><img class=\"aligncenter\" src=\".\/images\/gamedocumentation-paintingsprite.png\" alt=\"layout.png\"\/><li>Create a new sprite from the T_Wall Painting template, move the new Wall Painting sprite into the correct location on the birdcage (over the Secret Note), and lock the Wall Painting sprite in the editor.<\/li><img class=\"aligncenter\" src=\".\/images\/gamedocumentation-paintingspritelocation.png\" alt=\"layout.png\"\/><\/ol><\/li><li>Add the water bottle:<p>The water bottle is an item the player may click on, and place the obtained water in their inventory.<\/p><ol class=\"alpha\"><li>In the Templates tab, scroll down to the bottom and click on the T_Water Bottle template sprite.<\/li><img class=\"aligncenter\" src=\".\/images\/gamedocumentation-bottlesprite.png\" alt=\"layout.png\"\/><li>Create a new sprite from the T_Water Bottle template, move the new Water Bottle sprite into the correct location on the birdcage, and lock the Water Bottle sprite in the editor.<\/li><img class=\"aligncenter\" src=\".\/images\/gamedocumentation-bottlespritelocation.png\" alt=\"layout.png\"\/><\/ol><\/li><li>Add the seed bowl:<p>The seed bowl is an item the player may click on, and place the obtained seeds in their inventory.<\/p><ol class=\"alpha\"><li>In the Templates tab, click on the T_Seed Bowl template sprite.<\/li><img class=\"aligncenter\" src=\".\/images\/gamedocumentation-bowlsprite.png\" alt=\"layout.png\"\/><li>Following the same procedure as with the Curtain above, create a new sprite from the T_Seed Bowl template, move the new Seed Bowl sprite into the correct location on the birdcage, and lock the Seed Bowl sprite in the editor.<\/li><img class=\"aligncenter\" src=\".\/images\/gamedocumentation-bowlspritelocation.png\" alt=\"layout.png\"\/><\/ol><\/li><li>Add the hanging chain:<p>The hanging chain is an item the player may click on, and place in their inventory.<\/p><ol class=\"alpha\"><li>In the Templates tab, click on the T_Hanging Bird Toy Chain template sprite.<\/li><img class=\"aligncenter\" src=\".\/images\/gamedocumentation-chainsprite.png\" alt=\"layout.png\"\/><li>Create a new sprite from the T_Hanging Bird Toy Chain template, move the new Hanging Bird Toy Chain sprite into the correct location on the birdcage, and lock the Hanging Bird Toy Chain sprite in the editor.<\/li><img class=\"aligncenter\" src=\".\/images\/gamedocumentation-chainspritelocation.png\" alt=\"layout.png\"\/><\/ol><\/li><li>Add the bell:<p>The bell an item the player may click on to cause an action in the game (open the curtains).<\/p><ol class=\"alpha\"><li>In the Templates tab, click on the T_Bell template sprite.<\/li><img class=\"aligncenter\" src=\".\/images\/gamedocumentation-bellsprite.png\" alt=\"layout.png\"\/><li>Create a new sprite from the T_Bell template, move the new Bell sprite into the correct location on the birdcage, and lock the Bell sprite in the editor.<\/li><img class=\"aligncenter\" src=\".\/images\/gamedocumentation-bellspritelocation.png\" alt=\"layout.png\"\/><\/ol><\/li><li>Add the ball:<p>The ball is an item the player may click on, and place in their inventory.<\/p><ol class=\"alpha\"><li>In the Templates tab, click on the T_Bird Toy Ball template sprite.<\/li><img class=\"aligncenter\" src=\".\/images\/gamedocumentation-ballsprite.png\" alt=\"layout.png\"\/><li>Create a new sprite from the T_Bird Toy Ball template, move the new Bird Toy Ball sprite into the correct location on the birdcage, and lock the Bird Toy Ball sprite in the editor.<\/li><img class=\"aligncenter\" src=\".\/images\/gamedocumentation-ballspritelocation.png\" alt=\"layout.png\"\/><\/ol><\/li><li>Add the hot pepper:<p>The hot pepper is an item the player may click on, and place in their inventory.<\/p><ol class=\"alpha\"><li>In the Templates tab, click on the T_Hot Pepper template sprite.<\/li><img class=\"aligncenter\" src=\".\/images\/gamedocumentation-peppersprite.png\" alt=\"layout.png\"\/><li>Create a new sprite from the T_Hot Pepper template, move the new Hot Pepper sprite into the correct location on the birdcage, and lock the Hot Pepper sprite in the editor.<\/li><img class=\"aligncenter\" src=\".\/images\/gamedocumentation-pepperspritelocation.png\" alt=\"layout.png\"\/><\/ol><\/li><li>Add the cellmate:<p>The cellmate is a special object in the game. Clicking on him prompts his dialog, and he accepts items from the player's inventory.<\/p><ol class=\"alpha\"><li>In the Templates tab, click on the T_CellMate template sprite.<\/li><img class=\"aligncenter\" src=\".\/images\/gamedocumentation-cellmatesprite.png\" alt=\"layout.png\"\/><li>Create a new sprite from the T_CellMate template, move the new CellMate sprite into the correct location on the birdcage, and lock the CellMate sprite in the editor.<\/li><img class=\"aligncenter\" src=\".\/images\/gamedocumentation-cellmatespritelocation.png\" alt=\"layout.png\"\/><\/ol><\/li><li>Add the bird swing:<p>The bird swing is a special object in the game that accepts specific items from the player's inventory. As the swing is modified by these items, the previous sprite is hidden and the appropriate one is made visible. Below we will add all four bird swing sprites to the game.<\/p><ol class=\"alpha\"><li>In the Templates tab, click on the T_Swing template sprite.<\/li><img class=\"aligncenter\" src=\".\/images\/gamedocumentation-swingsprite.png\" alt=\"layout.png\"\/><li>Create a new sprite from the T_Swing template, move the new Swing sprite into the correct location on the birdcage, and lock the Swing sprite in the editor.<\/li><img class=\"aligncenter\" src=\".\/images\/gamedocumentation-swingspritelocation.png\" alt=\"layout.png\"\/><li>In the Templates tab, click on the T_SwingBall template sprite.<\/li><img class=\"aligncenter\" src=\".\/images\/gamedocumentation-swingballsprite.png\" alt=\"layout.png\"\/><li>Create a new sprite from the T_SwingBall template, move the new SwingBall sprite over top of the Swing sprite, and lock the SwingBall sprite in the editor.<\/li><img class=\"aligncenter\" src=\".\/images\/gamedocumentation-swingballspritelocation.png\" alt=\"layout.png\"\/><li>Go to the SwingBall sprite's properties and hide the sprite by clicking on the 'show' checkbox. We only want this sprite to be shown when the player adds the ball to the swing.<\/li><img class=\"aligncenter\" src=\".\/images\/gamedocumentation-swingballspritehide.png\" alt=\"layout.png\"\/><li>Repeat steps c, d and e this time using the sprite T_SwingChain instead of T_SwingBall.<\/li><li>Repeat steps c, d and e this time using the sprite T_SwingComplete instead of T_SwingBall.<\/li><\/ol><\/li><li>Add the cellmate's speech:<p>When the cellmate is clicked on he may provide the player with some direction and hints through the use of a speech bubble. The cellmate's speech bubble is a separate sprite with multiple costumes that are chosen according to the text that should be presented to the player.<\/p><ol class=\"alpha\"><li>In the Templates tab, scroll to the top and click on the T_Cell Mate Chat template sprite.<\/li><img class=\"aligncenter\" src=\".\/images\/gamedocumentation-speechsprite.png\" alt=\"layout.png\"\/><li>Create a new sprite from the T_Cell Mate Chat template, move the new Cell Mate Chat sprite into the correct location so that it looks like the cellmate is talking, and lock the Cell Mate Chat sprite in the editor.<\/li><img class=\"aligncenter\" src=\".\/images\/gamedocumentation-speechspritelocation.png\" alt=\"layout.png\"\/><li>Finish by hiding the Cell Mate Chat sprite by unchecking its 'show' property.<\/li><\/ol><\/li><li>Build the inventory bar:<p>The inventory bar is where the player may place any items they have picked up, such as the hot pepper. The inventory bar is made up of a single, background sprite, and five inventory slot sprites.<\/p><ol class=\"alpha\"><li>In the Templates tab, click on the T_Inventory template sprite.<\/li><img class=\"aligncenter\" src=\".\/images\/gamedocumentation-inventorysprite.png\" alt=\"layout.png\"\/><li>Create a new sprite from the T_Inventory template, move the new Inventory sprite into the correct location, and lock the Inventory sprite in the editor.<\/li><img class=\"aligncenter\" src=\".\/images\/gamedocumentation-inventoryspritelocation.png\" alt=\"layout.png\"\/><li>In the Templates tab, click on the T_Inventory 1 Sprite template sprite.<\/li><img class=\"aligncenter\" src=\".\/images\/gamedocumentation-inventoryslot1sprite.png\" alt=\"layout.png\"\/><li>Create a new sprite from the T_Inventory 1 Sprite template. As this sprite represents an inventory slot, it starts off as empty. This makes it appear to be hidden in the editor, so we'll need to force it to display something we can see and manipulate.<\/li><li>Click on the Costumes tab for the Inventory 1 Sprite where we see the None costume is selected. Click on the Ball costume to force this sprite to show us something we can place.<\/li><img class=\"aligncenter\" src=\".\/images\/gamedocumentation-inventoryslot1spritecostumes.png\" alt=\"layout.png\"\/><li>Back in the editor we now have a small ball sprite we can drag around. Place this on the left most slot within the inventory bar. As with other sprites, lock the Inventory 1 Sprite sprite in the editor.<\/li><img class=\"aligncenter\" src=\".\/images\/gamedocumentation-inventoryslot1spritelocation.png\" alt=\"layout.png\"\/><li>We don't want the Inventory 1 Sprite sprite to respond to mouse clicks as the Inventory sprite's code blocks will handle all mouse manipulation of the player's inventory. To pass through mouse clicks to the sprite below (in this case, the Inventory sprite), go to the sprite's properties and click on the 'pass through mouse clicks' checkbox.<\/li><img class=\"aligncenter\" src=\".\/images\/gamedocumentation-inventoryslot1spritepassthrough.png\" alt=\"layout.png\"\/><li>Repeat these same steps for the T_Inventory 2 Sprite through T_Inventory 5 Sprite template sprites to fill out the inventory bar.<\/li><\/ol><\/li><li>Add the holding sprite:<p>The holding sprite tracks the mouse and shows the player the item they are currently holding, if any.<\/p><ol class=\"alpha\"><li>In the Templates tab, click on the T_Holding Sprite template sprite.<\/li><img class=\"aligncenter\" src=\".\/images\/gamedocumentation-holdingsprite.png\" alt=\"layout.png\"\/><li>Create a new sprite from the T_Holding Sprite template. It doesn't matter where the Holding Sprite sprite is placed as its code blocks will have it track the mouse.<\/li><li>As with the inventory slots above, we don't want the Holding Sprite sprite to respond to mouse clicks. In the Holding Sprite sprite's properties, click on the 'pass through mouse clicks' checkbox.<\/li><\/ol><\/li><li>Add the main menu and other screens:<p>The main menu, win, and lost screens are different costumes of the same sprite. This allows the game to hide these screens when they are not needed.  The main menu also makes use of a separate Play button that is another sprite.<\/p><ol class=\"alpha\"><li>In the Templates tab, click on the T_Screens template sprite.<\/li><img class=\"aligncenter\" src=\".\/images\/gamedocumentation-screenssprite.png\" alt=\"layout.png\"\/><li>Create a new sprite from the T_Screens template, move the new Screens sprite so that it covers the entire background, and lock the Screens sprite in the editor.<\/li><li>In the Templates tab, click on the T_Start Button template sprite.<\/li><img class=\"aligncenter\" src=\".\/images\/gamedocumentation-playsprite.png\" alt=\"layout.png\"\/><li>Create a new sprite from the T_Start Button template, move the new Start Button sprite so that it is near the bottom, and lock the Start Button sprite in the editor.<\/li><img class=\"aligncenter\" src=\".\/images\/gamedocumentation-screensspritelocation.png\" alt=\"layout.png\"\/><li>Hide both the Screens and Start Button sprites by going to their properties and unchecking the 'show' checkbox. This allows us to place the last few sprites, and when the game starts it will automatically show these two sprites.<\/li><\/ol><\/li><li>Add the introduction, and end game text:<p>There are three sprites left to add to the game: introduction text, game won text, and game lost text. Each of these sprites is automatically shown at the appropriate time in the game.<\/p><ol class=\"alpha\"><li>In the Templates tab, click on the T_Game Introduction template sprite.<\/li><img class=\"aligncenter\" src=\".\/images\/gamedocumentation-introsprite.png\" alt=\"layout.png\"\/><li>Create a new sprite from the T_Game Introduction template, move the new Game Introduction sprite so that it is in the center of the screen, and lock the Game Introduction sprite in the editor. Hide this sprite when you are done by unchecking the sprite's 'show' property checkbox.<\/li><li>In the Templates tab, click on the T_Game Won Text template sprite.<\/li><img class=\"aligncenter\" src=\".\/images\/gamedocumentation-wontextsprite.png\" alt=\"layout.png\"\/><li>Create a new sprite from the T_Game Won Text template, move the new Game Won Text sprite so that it is at the bottom of the screen, and lock the Game Won Text sprite in the editor. Hide this sprite when you are done by unchecking the sprite's 'show' property checkbox.<\/li><li>In the Templates tab, click on the T_Game Lost Text template sprite.<\/li><img class=\"aligncenter\" src=\".\/images\/gamedocumentation-losttextsprite.png\" alt=\"layout.png\"\/><li>Create a new sprite from the T_Game Lost Text template, move the new Game Lost Text sprite so that it is at the top of the screen, and lock the Game Lost Text sprite in the editor. Hide this sprite when you are done by unchecking the sprite's 'show' property checkbox.<\/li><\/ol><\/li><li>Play the Freebird game<ol class=\"alpha\"><li>Click the <img src=\".\/images\/gamestackflag.png\" alt=\"gamestackflag.png\"\/> to start the game. You may choose to use the <img src=\".\/images\/gamestackfullscreen.png\" alt=\"gamestackfullscreen.png\"\/> button to play the game in full screen mode.<\/li><li>Click on the main menu screen to begin the game and read through the introduction. Click on the various items around the birdcage and try placing them in your inventory. Can you figure out how to escape without the cat finding out?<\/li><\/ol><\/li><li>Consider the following questions<ol class=\"alpha\"><li>How long does it take someone that doesn't know the inner workings of the game to finish it?<\/li><li>What do you think about having items and activities in the game that are not directly connected with finishing the game?<\/li><\/ol><\/li><li>Submit your final work:<ol class=\"alpha\"><li>Save a .stack file of your version of the game.<\/li><li>On a separate piece of paper, write a summary of any issues you had while building the game and explain what you did to overcome these issues.<\/li><li>After your summary, write about any issues a player had while playing the game and some possible solutions to overcome these issues.<\/li><li>Follow your teachers instructions to submit the .stack file and your written paragraphs to complete the exercise.<\/li><\/ol><\/li><\/ol><h1>Extra Credit<\/h1><ol><li>Change the Start Button's graphic by going to its Costumes tab. You could draw your own graphic so it says something different, such as \"Escape!\"<\/li><li>Change the Wall Painting sprite by going to its Costumes tab. You could replace it with a picture of your friends, or paint a new picture using the Game Stack drawing tools.<\/li><li>Change the music and sound effects for the game. Everything may be found on the Stage.<\/li><li>Plan how two more possible escape routes could work. What additional items would be required?<\/li><li>Come up with a different theme for the game.<\/li><\/ol><!--page:~~game-documentation-gamestack-exercise~~-->","link":"","mod":"game-documentation","movie":null,"name":"game-documentation-gamestack-exercise","promptfile":null,"prompts":null,"reference":null,"text":null,"title":"Game Stack Exercise"},{"bIsChecked":true,"exercise":"","instructions":"<h1>Goal<\/h1><p> Understand the value of documentation by creating a Game Design Document for the Game Stack game, Freebird.<\/p><h1>Steps<\/h1><ol><li>Open the finished Game Stack exercise in this module.(DevProFreebird.stack).<ol><li> Choose an original Title for the game.<\/li><li> Write 2–3 paragraphs describing the Game Concept.<\/li><li> Write 1-2 sentences describing the game's Target Audience.<\/li><li> Write one sentence describing the game's Genre.<\/li><\/ol><\/li><li> Once the sections are complete, compare them with the examples in this module. Be sure every point is covered.<\/li><\/ol><h1>Hints and Challenges<\/h1><p>A well-crafted GDD can be a beautiful thing and something to hold on to forever. For an extra challenge make the document aesthetically pleasing with good page design, organization, and illustrations.  You may even want to have it printed and professionally bound. If you choose to continue developing the GDD document, you can integrate some future exercises for a complete GDD.<\/p><!--page:~~game-documentation-writing-exercise~~-->","link":"","mod":"game-documentation","movie":null,"name":"game-documentation-writing-exercise","promptfile":null,"prompts":null,"reference":null,"text":null,"title":"Writing Exercise"}]},{"bIsChecked":true,"name":"character","title":"Developing Characters in Video Games","topics":[{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"character","movie":".\/video\/developingcharacter-overview-1-micro-1.mp4","name":"Overview","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"NPCs"},{"order":0,"points":100,"sticky":false,"text":"characters "},{"order":0,"points":0,"sticky":false,"text":"captive audiences"},{"order":0,"points":0,"sticky":false,"text":"programmers "}],"failure":{"button":null,"message":"Video games, in a sense, allow the audience to interact with the movie."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn1-developingcharacter-overview-1-micro-1","number_of_choices":4,"question":"In movies, we are outside observers watching characters, while in video games, we are _____. ","start":3600,"success":{"button":null,"message":"Video games, in a sense, allow the audience to interact with the movie."},"type":null}],"reference":"character-1","text":null,"title":"Overview"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"character","movie":".\/video\/developingcharacter-overview-2-micro-2.mp4","name":"Character Types","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"archetypes "},{"order":0,"points":100,"sticky":false,"text":"stereotypes   "},{"order":0,"points":0,"sticky":false,"text":"3 dimensional personalities"},{"order":0,"points":0,"sticky":false,"text":"plumbers "}],"failure":{"button":null,"message":"Stereotypes should be avoided when developing characters for any medium. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn2-developingcharacter-overview-2-micro-2","number_of_choices":4,"question":"The worst characterizations in video games are all too often _____.","start":3600,"success":{"button":null,"message":"Stereotypes should be avoided when developing characters for any medium. "},"type":null}],"reference":"character-1","text":null,"title":"Character Types"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"character","movie":".\/video\/developingcharacter-overview-3-micro-3.mp4","name":"Using NPC","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"enemy"},{"order":0,"points":0,"sticky":false,"text":"stereotype   "},{"order":0,"points":0,"sticky":false,"text":"non-personality character"},{"order":0,"points":100,"sticky":false,"text":"non-player character"}],"failure":{"button":null,"message":"Non-player characters can be informants, obstacles, or just background flavor. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn3-developingcharacter-overview-3-micro-3","number_of_choices":4,"question":"Every character in a game that is NOT controlled by a player is considered a(n) _____.","start":3600,"success":{"button":null,"message":"Non-player characters can be informants, obstacles, or just background flavor. "},"type":null}],"reference":"character-1","text":null,"title":"Using NPC"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"character","movie":".\/video\/developingcharacter-overview-4-micro-4.mp4","name":"Character Arc","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"experience points"},{"order":0,"points":100,"sticky":false,"text":"growth and change "},{"order":0,"points":0,"sticky":false,"text":"level maximum"},{"order":0,"points":0,"sticky":false,"text":"power "}],"failure":{"button":null,"message":"Characters demonstrate growth and change through their character arc. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn4-developingcharacter-overview-4-micro-4","number_of_choices":4,"question":"A character arc is the overall ______ a character experiences during the course of a story. ","start":3600,"success":{"button":null,"message":"Characters demonstrate growth and change through their character arc. "},"type":null}],"reference":"character-1","text":null,"title":"Character Arc"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"character","movie":".\/video\/developingcharacter-overview-5-micro-5.mp4","name":"Using Dialog","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"extra hit points"},{"order":0,"points":0,"sticky":false,"text":"character classes   "},{"order":0,"points":0,"sticky":false,"text":"in-game economies"},{"order":0,"points":100,"sticky":false,"text":"dialog "}],"failure":{"button":null,"message":"Just like in movies, characters inform the audience through dialog."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn5-developingcharacter-overview-5-micro-5","number_of_choices":4,"question":"A good way to demonstrate a character's personality and depth is through _____.","start":3600,"success":{"button":null,"message":"Just like in movies, characters inform the audience through dialog."},"type":null}],"reference":"character-1","text":null,"title":"Using Dialog"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"character","movie":".\/video\/developingcharacter-overview-6-micro-6.mp4","name":"Summary","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"True"},{"order":0,"points":0,"sticky":false,"text":"False"}],"failure":{"button":null,"message":"Characters should inspire players just as much as a good mechanic."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn6-developingcharacter-overview-6-micro-6","number_of_choices":2,"question":"True or False: Good character design can be as effective as good mechanics in holding an audience's attention. ","start":3600,"success":{"button":null,"message":"Characters should inspire players just as much as a good mechanic."},"type":null}],"reference":"character-1","text":null,"title":"Summary"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"character","movie":".\/video\/developingcharacters-types-intro-micro-1.mp4","name":"Developing Character Types","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"archetypes "},{"order":0,"points":0,"sticky":false,"text":"stereotypes  "},{"order":0,"points":100,"sticky":false,"text":"3 dimensional personalities"},{"order":0,"points":0,"sticky":false,"text":"Zelda "}],"failure":{"button":null,"message":"There are sometimes reasons to create an archetype or even a stereotype, however, in general, characters should be original and 3 dimensional in their personalities. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn7-developingcharacter-types-intro-micro-1","number_of_choices":4,"question":"Video game writers should generally strive to create characters that are _____.","start":3600,"success":{"button":null,"message":"There are sometimes reasons to create an archetype or even a stereotype, however, in general, characters should be original and 3 dimensional in their personalities. "},"type":null}],"reference":"character-2","text":null,"title":"Developing Character Types"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"character","movie":".\/video\/developingcharacters-types-archetype-micro-2.mp4","name":"Archetypes","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"stereotypes"},{"order":0,"points":0,"sticky":false,"text":"museums   "},{"order":0,"points":100,"sticky":false,"text":"mythology"},{"order":0,"points":0,"sticky":false,"text":"Joseph  Campbell "}],"failure":{"button":null,"message":"Many characters from the film, Star Wars, for example, are drawn from broad archetypes from hero myths. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn8-developingcharacter-types-archetypes-micro-2","number_of_choices":4,"question":"Whether in movies, books, or video games, many archetypes are drawn from _____.","start":3600,"success":{"button":null,"message":"Many characters from the film, Star Wars, for example, are drawn from broad archetypes from hero myths. "},"type":null},{"choices":[{"order":0,"points":100,"sticky":false,"text":"stereotypes"},{"order":0,"points":0,"sticky":false,"text":"3 dimensional  "},{"order":0,"points":0,"sticky":false,"text":"non-player characters  "},{"order":0,"points":0,"sticky":false,"text":"Master Chief   "}],"failure":{"button":null,"message":"Stereotypes usually occur when writers put little or no effort into being original.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn9-developingcharacter-types-archetypes-micro-2","number_of_choices":4,"question":"When archetypes become overused or are under-developed, they are at risk of becoming _____.","start":3600,"success":{"button":null,"message":"Stereotypes usually occur when writers put little or no effort into being original.  "},"type":null}],"reference":"character-2","text":null,"title":"Archetypes"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"character","movie":".\/video\/developingcharacters-types-stereotype-micro-3.mp4","name":"Stereotypes","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"mixed with personality quirks"},{"order":0,"points":0,"sticky":false,"text":"unpredictable   "},{"order":0,"points":100,"sticky":false,"text":"unoriginal"},{"order":0,"points":0,"sticky":false,"text":"altered in interesting ways  "}],"failure":{"button":null,"message":"Almost any effort at originality is better than settling for stereotypes. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn10-developingcharacter-types-stereotypes-micro-3","number_of_choices":4,"question":"Archetypes can become stereotypes when the broad characteristics of the character are_____.","start":3600,"success":{"button":null,"message":"Almost any effort at originality is better than settling for stereotypes. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"boring"},{"order":0,"points":0,"sticky":false,"text":"predictable   "},{"order":0,"points":0,"sticky":false,"text":"offensive"},{"order":21,"points":100,"sticky":false,"text":"All of the above  "}],"failure":{"button":null,"message":"At worst, a poorly developed stereotype can actually upset an audience with offensive or banal behavior. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn11-developingcharacter-types-stereotypes-micro-3","number_of_choices":4,"question":"The problem with stereotype characters in video games is that they are too often _____.","start":3600,"success":{"button":null,"message":"At worst, a poorly developed stereotype can actually upset an audience with offensive or banal behavior. "},"type":"Multiple"}],"reference":"character-2","text":null,"title":"Stereotypes"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"character","movie":".\/video\/developingcharacters-types-3dimensional-micro-4.mp4","name":"Building 3D Characters","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"script format"},{"order":0,"points":0,"sticky":false,"text":"exposition   "},{"order":0,"points":100,"sticky":false,"text":"clichés"},{"order":0,"points":0,"sticky":false,"text":"mythology "}],"failure":{"button":null,"message":"A cliché is something that is overused and demonstrates a lack of original thought."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn12-developingcharacter-types-3dimensional-micro-4","number_of_choices":4,"question":"An archetype can become more 3 dimensional by the writer being aware of _____. ","start":3600,"success":{"button":null,"message":"A cliché is something that is overused and demonstrates a lack of original thought."},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"silence"},{"order":0,"points":100,"sticky":false,"text":"originality  "},{"order":0,"points":0,"sticky":false,"text":"composition"},{"order":0,"points":0,"sticky":false,"text":"mythology "}],"failure":{"button":null,"message":"Well written, fully original characters rarely suffer from clichés. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn13-developingcharacter-types-3dimensional-micro-4","number_of_choices":4,"question":"The best tool a writer has to avoid clichés is _____.  ","start":3600,"success":{"button":null,"message":"Well written, fully original characters rarely suffer from clichés. "},"type":null}],"reference":"character-2","text":null,"title":"Building 3D Characters"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"character","movie":".\/video\/developingcharacters-types-3dimensionalex1-micro-5.mp4","name":"Stoic Hero","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"humorless  "},{"order":0,"points":0,"sticky":false,"text":"positive attitude   "},{"order":0,"points":0,"sticky":false,"text":"a cheerful outlook"},{"order":0,"points":0,"sticky":false,"text":"emotional "}],"failure":{"button":null,"message":"Of these choices, 'humorless' stands out as a common trait of grim, stoic heroes in video games. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn14-developingcharacter-types-3dimensionalex1-micro-5","number_of_choices":4,"question":"Which of the following could be considered a common cliché of the stoic hero stereotype?","start":3600,"success":{"button":null,"message":"Of these choices, 'humorless' stands out as a common trait of grim, stoic heroes in video games. "},"type":null}],"reference":"character-2","text":null,"title":"Stoic Hero"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"character","movie":".\/video\/developingcharacters-types-3dimensionalex2-micro-6.mp4","name":"Damsel in Distress","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"Helpless"},{"order":0,"points":0,"sticky":false,"text":"Quick witted  "},{"order":0,"points":0,"sticky":false,"text":"Self sufficient "},{"order":0,"points":0,"sticky":false,"text":"Capable  "}],"failure":{"button":null,"message":"Of these choices, 'helpless' stands out as a common trait of a damsel in distress waiting to be saved by the hero. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn15-developingcharacter-types-3dimensionalex2-micro-6","number_of_choices":4,"question":"Which of the following could be considered a common cliché of the Damsel in Distress stereotype. ","start":3600,"success":{"button":null,"message":"Of these choices, 'helpless' stands out as a common trait of a damsel in distress waiting to be saved by the hero. "},"type":"Multiple"}],"reference":"character-2","text":null,"title":"Damsel in Distress"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"character","movie":".\/video\/developingcharacters-types-3dimensionalex2part2-micro-7.mp4","name":"3D Damsel in Distress","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"Increased self-confidence "},{"order":0,"points":0,"sticky":false,"text":"Increased beauty "},{"order":0,"points":0,"sticky":false,"text":"Increased incompetence "},{"order":21,"points":0,"sticky":false,"text":"All of the above "}],"failure":{"button":null,"message":"Of the these choices, increasing the character's self-confidence is the best way to make the character less of a stereotype."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn16-developingcharacter-types-3dimensionalex2part2-micro-7","number_of_choices":4,"question":"Which of the following character traits could help a damsel in distress stereotype become more 3 dimensional?","start":3600,"success":{"button":null,"message":"Of the these choices, increasing the character's self-confidence is the best way to make the character less of a stereotype."},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Increased helplessness"},{"order":0,"points":0,"sticky":false,"text":"Increased beauty "},{"order":0,"points":0,"sticky":false,"text":"Increased incompetence "},{"order":21,"points":100,"sticky":false,"text":"All of the above "}],"failure":{"button":null,"message":"Of these choices, none of them will help eliminate stereotypes in a damsel in distress character.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn16-developingcharacter-types-3dimensionalex2part2-micro-7","number_of_choices":4,"question":"Which of the following character traits would make a damsel in distress stereotype become less 3 dimensional?","start":3600,"success":{"button":null,"message":"Of these choices, none of them will help eliminate stereotypes in a damsel in distress character.  "},"type":"Multiple"}],"reference":"character-2","text":null,"title":"3D Damsel in Distress"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"character","movie":".\/video\/developingcharacters-types-end-micro-8.mp4","name":"Character Types Summary","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"Archetype"},{"order":0,"points":100,"sticky":false,"text":"Stereotype  "},{"order":0,"points":0,"sticky":false,"text":"3 dimensional"},{"order":21,"points":0,"sticky":false,"text":"None of the above "}],"failure":{"button":null,"message":"For any video game, stereotypes should be avoided. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn17-developingcharacter-types-end-micro-8","number_of_choices":4,"question":"Of the following, which character type is the worst any video game can offer?","start":3600,"success":{"button":null,"message":"For any video game, stereotypes should be avoided. "},"type":"Multiple"}],"reference":"character-2","text":null,"title":"Character Types Summary"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"character","movie":".\/video\/developingcharacter-npcs-intro-micro-1.mp4","name":"Non-Player Characters","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"every character not controlled by a player "},{"order":0,"points":0,"sticky":false,"text":"people just watching the game  "},{"order":0,"points":0,"sticky":false,"text":"all people controlling a character in a game "},{"order":0,"points":0,"sticky":false,"text":"humans with artificial intelligence"}],"failure":{"button":null,"message":"Players control their own actions, while non-player characters are programmed to act or respond (though not necessarily human). "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn18-developingcharacter-npcs-intro-micro-1","number_of_choices":4,"question":"In all video games, non-player characters are _____","start":3600,"success":{"button":null,"message":"Players control their own actions, while non-player characters are programmed to act or respond (though not necessarily human). "},"type":null}],"reference":"character-3","text":null,"title":"Non-Player Characters"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"character","movie":".\/video\/developingcharacter-npcs-purpose-micro-2.mp4","name":"NPC Purpose","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"help tell a story"},{"order":0,"points":0,"sticky":false,"text":"interact with players as enemies and allies   "},{"order":0,"points":0,"sticky":false,"text":"give the game setting depth "},{"order":21,"points":100,"sticky":false,"text":"All of the above  "}],"failure":{"button":null,"message":"NPCs aren't just to use as combat encounters, they offer information, advance plot, and give a general 'lived-in' sense to the world. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn19-developingcharacter-npcs-purpose-micro-2","number_of_choices":4,"question":"The purpose of an NPC is to _____.","start":3600,"success":{"button":null,"message":"NPCs aren't just to use as combat encounters, they offer information, advance plot, and give a general 'lived-in' sense to the world. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"True"},{"order":0,"points":100,"sticky":false,"text":"False"}],"failure":{"button":null,"message":"Almost all games have NPCs, not just role-playing games. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn20-developingcharacter-npcs-purpose-micro-2","number_of_choices":2,"question":"True or False: Only role-playing games have NPCs.","start":3600,"success":{"button":null,"message":"Almost all games have NPCs, not just role-playing games. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"A level boss"},{"order":0,"points":0,"sticky":false,"text":"An in-game merchant"},{"order":0,"points":0,"sticky":false,"text":"two people talking in the background"},{"order":21,"points":100,"sticky":false,"text":"All of the above"}],"failure":{"button":null,"message":"NPC's do not have to be human, but they are generally not inanimate objects.   "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn21-developingcharacter-npcs-purpose-micro-2","number_of_choices":4,"question":"Who of the following could be a typical NPC in a video game?","start":3600,"success":{"button":null,"message":"NPC's do not have to be human, but they are generally not inanimate objects.   "},"type":"Multiple"}],"reference":"character-3","text":null,"title":"NPC Purpose"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"character","movie":".\/video\/developingcharacter-npcs-creating-micro-3.mp4","name":"Creating NPC","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"less attention to detail than"},{"order":0,"points":100,"sticky":false,"text":"the same attention to detail as"},{"order":0,"points":0,"sticky":false,"text":"more attention to detail than"},{"order":0,"points":0,"sticky":false,"text":"less experience points than"}],"failure":{"button":null,"message":"Think of a hero in an action movie: they are only as interesting as the villain they face.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn22-developingcharacter-npcs-creating-micro-3","number_of_choices":4,"question":"When creating NPCs for a video game, they should receive _____ player characters. ","start":3600,"success":{"button":null,"message":"Think of a hero in an action movie: they are only as interesting as the villain they face.  "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Obstacles"},{"order":0,"points":0,"sticky":false,"text":"Informants   "},{"order":0,"points":0,"sticky":false,"text":"Background"},{"order":21,"points":100,"sticky":false,"text":"All of the above "}],"failure":{"button":null,"message":"NPCs are often used for all three: obstacles, informants, and as background flavor. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn23-developingcharacter-npcs-creating-micro-3","number_of_choices":4,"question":"Which of the following are NPCs in a video game used as?","start":3600,"success":{"button":null,"message":"NPCs are often used for all three: obstacles, informants, and as background flavor. "},"type":"Multiple"}],"reference":"character-3","text":null,"title":"Creating NPC"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"character","movie":".\/video\/developingcharacter-npcs-asinformants-micro-4.mp4","name":"Informant NPC","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"be defeated by player characters for experience points"},{"order":0,"points":100,"sticky":false,"text":"give the player vital information about the game "},{"order":0,"points":0,"sticky":false,"text":"look pretty in the background"},{"order":0,"points":0,"sticky":false,"text":"introduce cut scenes "}],"failure":{"button":null,"message":"As the title implies, informant NPCs give players information they need to continue the game.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn24-developingcharacter-npcs-asinformants-micro-4","number_of_choices":4,"question":"The purpose of an NPC as an informant is to _____.","start":3600,"success":{"button":null,"message":"As the title implies, informant NPCs give players information they need to continue the game.  "},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Combat"},{"order":0,"points":0,"sticky":false,"text":"Retrieval quests "},{"order":0,"points":100,"sticky":false,"text":"Dialog trees"},{"order":0,"points":0,"sticky":false,"text":"Auction houses "}],"failure":{"button":null,"message":"A dialog tree is a way for game designers to simulate a conversation between a NPC and a player.   "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn25-developingcharacter-npcs-asinformants-micro-4","number_of_choices":4,"question":"Which of the following is a common way informant NPCs pass on information to players?","start":3600,"success":{"button":null,"message":"A dialog tree is a way for game designers to simulate a conversation between a NPC and a player.   "},"type":null}],"reference":"character-3","text":null,"title":"Informant NPC"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"character","movie":".\/video\/developingcharacter-npcs-asobstacles-micro-5.mp4","name":"Obstacle NPC","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"Combat"},{"order":0,"points":0,"sticky":false,"text":"Dialog tree  "},{"order":0,"points":0,"sticky":false,"text":"Cut scene"},{"order":0,"points":0,"sticky":false,"text":"Micro-transactions "}],"failure":{"button":null,"message":"In most action-oriented video games, combat is the most common use for an NPC."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn26-developingcharacter-npcs-asobstacles-micro-5","number_of_choices":4,"question":"Which of the following is a common interaction with a player by an NPC used as an obstacle?","start":3600,"success":{"button":null,"message":"In most action-oriented video games, combat is the most common use for an NPC."},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"An angry goblin attacks!"},{"order":0,"points":0,"sticky":false,"text":"A hostile computer AI that must be hacked.   "},{"order":0,"points":0,"sticky":false,"text":"A blue ghost chases you around a maze."},{"order":21,"points":100,"sticky":false,"text":"All of the above"}],"failure":{"button":null,"message":"Look closely at almost any video game, even classic arcade games, and you will likely see NPCs used as player obstacles. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn27-developingcharacter-npcs-asobstacles-micro-5","number_of_choices":4,"question":"Which of the following is an example of an NPC created to be an obstacle for a player?","start":3600,"success":{"button":null,"message":"Look closely at almost any video game, even classic arcade games, and you will likely see NPCs used as player obstacles. "},"type":"Multiple"}],"reference":"character-3","text":null,"title":"Obstacle NPC"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"character","movie":".\/video\/developingcharacter-npcs-asbackground-micro-6.mp4","name":"Background NPC","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"Filling out a crowded market"},{"order":0,"points":0,"sticky":false,"text":"Introducing cut scenes  "},{"order":0,"points":0,"sticky":false,"text":"Combatants for players"},{"order":21,"points":0,"sticky":false,"text":"None of the above "}],"failure":{"button":null,"message":"Background NPCs are mostly used as decoration and to make game worlds feel occupied. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn28-developingcharacter-npcs-asbackground-micro-6","number_of_choices":4,"question":"Which of the following would be a common use for NPCs used as background?","start":3600,"success":{"button":null,"message":"Background NPCs are mostly used as decoration and to make game worlds feel occupied. "},"type":"Multiple"}],"reference":"character-3","text":null,"title":"Background NPC"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"character","movie":".\/video\/developingcharacter-npcs-all-micro-7.mp4","name":"Combination NPC","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"True"},{"order":0,"points":100,"sticky":false,"text":"False"}],"failure":{"button":null,"message":"NPCs can be one or more of these categories at the same time, and smart game designers could find many other uses for NPCs. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn29-developingcharacter-npcs-all-micro-7","number_of_choices":2,"question":"True or False: All NPCs must fall under one, and only one, of these categories: obstacle, informant, or background NPC.","start":3600,"success":{"button":null,"message":"NPCs can be one or more of these categories at the same time, and smart game designers could find many other uses for NPCs. "},"type":null}],"reference":"character-3","text":null,"title":"Combination NPC"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"character","movie":".\/video\/developingcharacter-npcs-itemnpc-micro-8.mp4","name":"Item NPC","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"rich backstories"},{"order":0,"points":0,"sticky":false,"text":"detailed descriptions  "},{"order":0,"points":0,"sticky":false,"text":"personality"},{"order":21,"points":100,"sticky":false,"text":"All of the above "}],"failure":{"button":null,"message":"Consider an ornate magical sword that was forged by an alien race and imbued with intelligence and a personality."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn30-developingcharacter-npcs-itemnpc-micro-8","number_of_choices":4,"question":"Just like NPCs, in game items can have _____.","start":3600,"success":{"button":null,"message":"Consider an ornate magical sword that was forged by an alien race and imbued with intelligence and a personality."},"type":"Multiple"}],"reference":"character-3","text":null,"title":"Item NPC"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"character","movie":".\/video\/developingcharacter-npcs-itemexample-micro-9.mp4","name":"Item NPC Example","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"destroy "},{"order":0,"points":100,"sticky":false,"text":"logically fit  "},{"order":0,"points":0,"sticky":false,"text":"add composition"},{"order":0,"points":0,"sticky":false,"text":"juxtapose  "}],"failure":{"button":null,"message":"Strictly medieval fantasy worlds should be extra careful introducing items from a sci-fi setting. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn31-developingcharacter-npcs-itemexample-micro-9","number_of_choices":4,"question":"Just like living NPCs, items should be described to _____ the game world they exist in.","start":3600,"success":{"button":null,"message":"Strictly medieval fantasy worlds should be extra careful introducing items from a sci-fi setting. "},"type":null}],"reference":"character-3","text":null,"title":"Item NPC Example"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"character","movie":".\/video\/developingcharacters-arcs-intro-micro-1.mp4","name":"Developing Character Arc","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"the same"},{"order":0,"points":100,"sticky":false,"text":"changed"},{"order":0,"points":0,"sticky":false,"text":"higher level"},{"order":0,"points":0,"sticky":false,"text":"invulnerable  "}],"failure":{"button":null,"message":"For many open world role-playing games, the player decides if and what their character arcs are, while games like Halo tell the story of a set character arc of the hero. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn32-developingcharacter-arcs-intro-micro-1","number_of_choices":4,"question":"In general, a character that goes through a character arc is fundamentally _____, either physically, emotionally, or spiritually by the end of the story or game. ","start":3600,"success":{"button":null,"message":"For many open world role-playing games, the player decides if and what their character arcs are, while games like Halo tell the story of a set character arc of the hero. "},"type":null}],"reference":"character-4","text":null,"title":"Developing Character Arc"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"character","movie":".\/video\/developingcharacters-arcs-whoneedsone-micro-2.mp4","name":"Who Needs an Arc?","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"True"},{"order":0,"points":100,"sticky":false,"text":"False"}],"failure":{"button":null,"message":"Character arcs are more common in games that tell complex stories; however, character arcs are not required in any game. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcor33-developingcharacter-arcs-whoneedsone-micro-2","number_of_choices":2,"question":"True or False: All player characters in a video game must have a character arc.","start":3600,"success":{"button":null,"message":"Character arcs are more common in games that tell complex stories; however, character arcs are not required in any game. "},"type":null}],"reference":"character-4","text":null,"title":"Who Needs an Arc?"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"character","movie":".\/video\/developingcharacters-arcs-whoneedsone2-micro-3.mp4","name":"FPS Character Arc","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"Donkey Kong in the game Donkey Kong"},{"order":0,"points":0,"sticky":false,"text":"Link in the game the Legend of Zelda"},{"order":0,"points":0,"sticky":false,"text":"The asteroids pilot in the game Asteroids "},{"order":0,"points":100,"sticky":false,"text":"Master Chief in Halo   "}],"failure":{"button":null,"message":"Master Chief does a character arc in the first Halo game, although it is unconnected to game play.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn34-developingcharacter-arcs-whoneedsone2-micro-3","number_of_choices":4,"question":"Which of the following famous video game characters had character arcs?","start":3600,"success":{"button":null,"message":"Master Chief does a character arc in the first Halo game, although it is unconnected to game play.  "},"type":null}],"reference":"character-4","text":null,"title":"FPS Character Arc"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"character","movie":".\/video\/developingcharacters-arcs-asmech-micro-4.mp4","name":"Character Arc as Game Mechanics","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"Puzzle games"},{"order":0,"points":100,"sticky":false,"text":"Role-playing games  "},{"order":0,"points":0,"sticky":false,"text":"Simulation games"},{"order":21,"points":0,"sticky":false,"text":"None of the above "}],"failure":{"button":null,"message":"Often a single player role-playing game is designed as one giant character arc for the player. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn35-developingcharacter-arcs-asmech-micro-4","number_of_choices":4,"question":"_____ is a genre typically more concerned with character arcs than first-person shooters or sports games. ","start":3600,"success":{"button":null,"message":"Often a single player role-playing game is designed as one giant character arc for the player. "},"type":"Multiple"}],"reference":"character-4","text":null,"title":"Character Arc as Game Mechanics"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"character","movie":".\/video\/developingcharacter-dialog-intro-micro-1.mp4","name":"Character Dialog","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"how they look; what they eat; what they say"},{"order":0,"points":0,"sticky":false,"text":"how they look; where they stand; what they do   "},{"order":0,"points":100,"sticky":false,"text":"how they look; what they do; what they say"},{"order":0,"points":0,"sticky":false,"text":"what they do; what they say; how they say it"}],"failure":{"button":null,"message":"Dialog is to writers what images are to an artist: the canvass to create characters. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn36-developingcharacter-dialog-intro-micro-1","number_of_choices":4,"question":"The three most common ways character personality is expressed in a video game are _____, _____, and _____.","start":3600,"success":{"button":null,"message":"Dialog is to writers what images are to an artist: the canvass to create characters. "},"type":null}],"reference":"character-5","text":null,"title":"Character Dialog"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"character","movie":".\/video\/developingcharacter-dialog-gooddialog-micro-2.mp4","name":"Good Dialog","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"Cleverness "},{"order":0,"points":0,"sticky":false,"text":"Clichés   "},{"order":0,"points":0,"sticky":false,"text":"Plagiarism "},{"order":0,"points":0,"sticky":false,"text":"Curses "}],"failure":{"button":null,"message":"Good dialog is clever, sharp and informative without being obvious. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn37-developingcharacter-dialog-gooddialog-micro-2","number_of_choices":4,"question":"Which of the following are aspects of good dialog?","start":3600,"success":{"button":null,"message":"Good dialog is clever, sharp and informative without being obvious. "},"type":"Multiple"}],"reference":"character-5","text":null,"title":"Good Dialog"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"character","movie":".\/video\/developingcharacter-dialog-purpose-micro-3.mp4","name":"Purpose of Dialog","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"Comic relief"},{"order":0,"points":0,"sticky":false,"text":"Story development   "},{"order":0,"points":0,"sticky":false,"text":"World development"},{"order":0,"points":100,"sticky":false,"text":"Controller reaction "}],"failure":{"button":null,"message":"Good dialog helps tell a story through subtle clues and plot advancements. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn38-developingcharacter-dialog-purpose-micro-3","number_of_choices":4,"question":"Which of the following is NOT a common purpose of good dialog?","start":3600,"success":{"button":null,"message":"Good dialog helps tell a story through subtle clues and plot advancements. "},"type":null}],"reference":"character-5","text":null,"title":"Purpose of Dialog"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"character","movie":".\/video\/developingcharacter-dialog-development-micro-4.mp4","name":"Character Development","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"boring"},{"order":0,"points":0,"sticky":false,"text":"stereotypes   "},{"order":0,"points":0,"sticky":false,"text":"clichéd  "},{"order":21,"points":100,"sticky":false,"text":"All of the above "}],"failure":{"button":null,"message":"Good dialog help eliminate bad clichés and boring stereotypes; however, bad dialog can have the opposite effect."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn39-developingcharacter-dialog-developmentmicro-4","number_of_choices":4,"question":"Good dialog can greatly help prevent characters from being _____.","start":3600,"success":{"button":null,"message":"Good dialog help eliminate bad clichés and boring stereotypes; however, bad dialog can have the opposite effect."},"type":"Multiple"},{"choices":[{"order":0,"points":100,"sticky":false,"text":"world development "},{"order":0,"points":0,"sticky":false,"text":"stereotypes   "},{"order":0,"points":0,"sticky":false,"text":"experience points"},{"order":0,"points":0,"sticky":false,"text":"power-ups "}],"failure":{"button":null,"message":"Good dialog can help character, story, and world development in a video game. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn40-developingcharacter-dialog-developmentmicro-4","number_of_choices":4,"question":"Characters can add detail and enhance _____ through good dialog. ","start":3600,"success":{"button":null,"message":"Good dialog can help character, story, and world development in a video game. "},"type":"Multiple"}],"reference":"character-5","text":null,"title":"Character Development"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"character","movie":".\/video\/developingcharacter-dialog-comicrelief-micro-5.mp4","name":"Comic Relief","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"temporary break"},{"order":0,"points":0,"sticky":false,"text":"inappropriate joke    "},{"order":0,"points":0,"sticky":false,"text":"offensive comment"},{"order":21,"points":0,"sticky":false,"text":"None of the above "}],"failure":{"button":null,"message":"Comic relief offers a temporary break in the action but should be used sparingly unless a game is designed to be funny. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn41-developingcharacter-dialog-comicrelief-micro-5","number_of_choices":4,"question":"Comic relief is used to give players a(n) _____ in between the drama and intensity of gameplay.","start":3600,"success":{"button":null,"message":"Comic relief offers a temporary break in the action but should be used sparingly unless a game is designed to be funny. "},"type":"Multiple"}],"reference":"character-5","text":null,"title":"Comic Relief"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"character","movie":".\/video\/developingcharacter-dialog-exposition-micro-6.mp4","name":"Burying the Exposition","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"an instruction manual  "},{"order":0,"points":100,"sticky":false,"text":"exposition  "},{"order":0,"points":0,"sticky":false,"text":"story-working"},{"order":0,"points":0,"sticky":false,"text":"explosion"}],"failure":{"button":null,"message":"Doling out plot points to a player is the goal of exposition; however, if done poorly can distract a player from the story or gameplay.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn42-developingcharacter-dialog-exposition-micro-6","number_of_choices":4,"question":"Giving players plot information as they play the game is called _____.","start":3600,"success":{"button":null,"message":"Doling out plot points to a player is the goal of exposition; however, if done poorly can distract a player from the story or gameplay.  "},"type":null},{"choices":[{"order":0,"points":100,"sticky":false,"text":"subtle; clever"},{"order":0,"points":0,"sticky":false,"text":"obvious; obnoxious  "},{"order":0,"points":0,"sticky":false,"text":"wink; smile"},{"order":0,"points":0,"sticky":false,"text":"loud; colorful"}],"failure":{"button":null,"message":"Writers should strive to \"bury the exposition\" which means hiding key information in what seems to be natural conversations.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn43-developingcharacter-dialog-exposition-micro-6","number_of_choices":4,"question":"Exposition works best when plot information is delivered in a _____ and _____ manner.","start":3600,"success":{"button":null,"message":"Writers should strive to \"bury the exposition\" which means hiding key information in what seems to be natural conversations.  "},"type":null}],"reference":"character-5","text":null,"title":"Burying the Exposition"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"character","movie":".\/video\/developingcharacter-dialog-invideogames-micro-7.mp4","name":"Video Game Dialog","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"the more the better"},{"order":0,"points":0,"sticky":false,"text":"bury the exposition  "},{"order":0,"points":0,"sticky":false,"text":"stereotypes"},{"order":0,"points":100,"sticky":false,"text":"less is more"}],"failure":{"button":null,"message":"Remember that video game players are interested in an interactive experience, if they just wanted to listen to long conversations, they would watch a movie. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn44-developingcharacter-dialog-invideogames-micro-7","number_of_choices":4,"question":"The concept of ____ is a core difference between video game dialog and movie dialog.","start":3600,"success":{"button":null,"message":"Remember that video game players are interested in an interactive experience, if they just wanted to listen to long conversations, they would watch a movie. "},"type":null}],"reference":"character-5","text":null,"title":"Video Game Dialog"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"reference","mod":"","movie":null,"name":"Reference","promptfile":null,"prompts":null,"reference":null,"text":"<a id=\"character-1\" class=\"dest\"><\/a><div class=\"accent\"><h1>Overview<\/h1><p>Games mean more to us when we can relate to the conflicts and story. It is the use of characters that allow us to become immersed in a story by placing ourselves in their shoes. For movies, we watch the character as an outside observer, however, in video games, we are the character and interact with the world as a participant. In this module, we will briefly explore all aspects of creating characters for video games including building personalities and motivations, interaction with Non-Player Characters, dialog and how character and story interact. In the following sub-modules, we will take a detailed look at each of these broad topics.<\/p><p><strong>Creating Characters<\/strong><\/p><p>There are all sorts of ways of breaking down characters. However you do it, what is generally the result is the trinity of Archetype Vs. Stereotype Vs. 3-Dimensional Being. Far too often in games an archetype devolves into a stereotype and 3-Dimensional characters are left for the sequel. That is not to say the archetype and the stereotype have no place in games, however, the general overuse of such character types needs to stop taking the place of a more well-rounded and compelling antagonist or protagonist.  The trick in doing so is being original with your characters.<\/p><p><strong>What is an NPC?<\/strong><\/p><p>Unique to games is the concept of an NPC or a Non-Player Character. In film, all characters are basically NPCs. That is to say, the audience as no control over their actions. In a game, a player typically takes the role of a major protagonist within the story and has control over their actions. Every other character in the game that is not under the direct control of a living player is a Non-Player Character. As a writer, each of these characters should serve a purpose to the plot or environment of the game.<\/p><p><strong>What is a Character Arc?<\/strong><\/p><p>Characters (and for that matter, NPCs) need to evolve with the story. The changes in a character that are afflicted by the story is call the Character Arch. Consider for a second your favorite characters in games and film. Are they the same person at the beginning of the story as at the end? Characters that begin perfect are boring. Even stoic characters such as Master Chief from Halo have character arches.<\/p><p><strong>Using Dialog in Games<\/strong><\/p><p>Dialog is a writer's best tool. It allows for character and story to be revealed to the player in a way that feels natural. It allows for plot points to be explained and it gives characters personality and life. However, using dialog in a game is much different than a movie or a television show. Video game dialog has its own rules and tricks that every game writer should be aware of.<\/p><p><strong>Character Driven Plots<\/strong><\/p><p>The plot of any game should be driven by the actions of the player character(s). Good writing and game structure will work to create the player as the Universal Driver of plot, character motivation and story. That is, every action the player takes creates reactions and new choices for the player.<\/p><div style=\"text-align: center;\"><ul class=\"anchorGroup\" style=\"text-align: left; display: inline-block;\"><li><a class=\"ankor\" href=\"#character-2\">Character Types in Games<\/a><\/li><li><a class=\"ankor\" href=\"#character-3\">Using Non-Player Characters<\/a><\/li><li><a class=\"ankor\" href=\"#character-4\">The Character Arc<\/a><\/li><li><a class=\"ankor\" href=\"#character-5\">Character Dialog<\/a><\/li><\/ul><\/div><\/div><a class=\"dest\" id=\"character-2\"><\/a>&nbsp;<div class=\"accent\"><h1>Character Types in Games<\/h1><p>Games offer an amazing variety of characters. From the cute to the monstrous, games present an unprecedented freedom in character creation than any medium before it. Unfortunately, many characters still lack dimension and many fall to stereotypes. In this sub-module we will examine the different types of characters found in various genres of games and discuss how they breakdown as archetypes, stereotypes or actual 3-dimensional characters.<\/p><h3>What is an Archetype?<\/h3><p>Archetypes are broad categories of character types. Often their characteristics are drawn from mythology or the more modern concept of “The journey of the Hero” as illustrated by the likes of Joseph Campbell and others. In film, perhaps no other movie better exemplifies the journey of the hero than Star Wars. Here, each character is an archetype that fits into the hero's journey. See if you can identify from Star Wars: The Hero; The Sword Master; the trickster; and others.<\/p><p>Video games have created their own character archetypes. Here are some examples:<\/p><img class=\"aligncenter\" src=\".\/images\/image_stoichero.png\" alt=\"image_stoichero\" width=\"1027\" height=\"515\" \/><p><strong>The Stoic Warrior Archetype:<\/strong> With grim determination, the stoic warrior faces impossible odds with a quip and a full metal jacket. Cold and emotionless on the surface, he is actually deeply invested in good winning out over evil. Example: Master Chief in <em>Halo<\/em>.<\/p><p><strong>The Damsel in Distress Archetype<\/strong>: Representing the best the world has to offer, the Precious will be the target of evil and the driving motivation for the Hero. Example: Zelda from <em>Legend of Zelda.<\/em><\/p><h3>What is a Stereotype?<\/h3><p>It can be hard to separate an archetype from a stereotype. In fact, archetypes become stereotypes when the broad personality trait of the archetype becomes the entirety of their character. That is to say, the writer stopped developing the character beyond filling in the expected traits. This creates flat characters that are predictable, unoriginal and boring.<\/p><p>Stereotypes fail because of clichés. Clichés are the building blocks for stereotypes and they happen when lazy writers fail to attempt fully developed 3-Dimensional characters. Here are some examples of how Archetypes become Stereotypes:<\/p><p><strong>The Stoic Hero Stereotype: <\/strong>With a heartless exterior, he kills without care and without depth of conscious. The one-liner is his true calling card, not the deeds he accomplishes. What at first seems cool, quickly becomes crass. Example: Marcus Fenix from <em>Gears of War<\/em>.<\/p><p><strong>The Damsel in Distress Stereotype<\/strong>: She is the key to a bright future but no one knows why. It might just be because the artist made her so beautiful. In any regard, her purpose is to be a victim for the hero to save and nothing more. Example: Princess Peach from <em>Mario Bros.<\/em><\/p><h3><strong>Building 3-Dimensional Characters<\/strong><\/h3><p>Writers should be wary of shortcuts in character creation. Simply checking off archetype character traits is a fast way to making a stereotype. What the goal really is: is to make an original, compelling character no one has quite seen before. That doesn't mean archetype traits need to be thrown out. It simply means that something new needs to be added. Something that either plays off expected clichés in a unique way or creates some contradictions of the archetype itself. In general, for every character, think of one thing that contradicts or redefines the stereotype and make that a feature trait of the character.<\/p><img class=\"aligncenter\" src=\".\/images\/image_3dimensionalhero.png\" alt=\"image_3dimensionalhero\" width=\"696\" height=\"522\" \/><p><strong>The 3-Dimensional Stoic Hero:<\/strong> Viewed by most as a hero of the people, he does what must be done to save humanity. Taking on himself to commit the violence necessary to save the world, he makes the sacrifices needed so that others can hold to their innocence.  However, he must constantly face the real truth of his actions: that he is slipping into the very madness he defends against. Fortunately for our hero, the voices in his head aren't entirely humorless.<\/p><p><strong>The 3-Dimensional Damsel in Distress: <\/strong>She carries the burden of the kingdom on her narrow shoulders. Growing up in the royal family, she has seen firsthand the moral and intellectual laziness of her kin. Casting away childish dreams of handsome princes and fancy ballroom galas she has dedicated herself to being a just ruler. However, her rejection of cultural superstitions as ostracized from the common people, even as her focus on reason and logic pulls them out of the dark ages of the past.<\/p><p>As we see in these examples, we now have a few new character elements to play with when expanding these characters' arcs. Each retains the core personality of the archetype, removes a cliche that would create a stereotype and adds a new trait to play with to begin to build a 3-dimensional character. Of course, this is just the bare minimum treatment for a character. It does however begin to lead to something new and original.<\/p><\/div><a class=\"dest\" id=\"character-3\"><\/a>&nbsp;<div class=\"accent\"><h1>Using Non-Player Characters (NPCs)<\/h1><p>In many video games, players take on the role of a character that then interacts with other characters in the world. Every single character (whether human, monster or something else) not under the control of a player is a Non-Player Character, otherwise known as a NPC.<\/p><img class=\"aligncenter\" src=\".\/images\/image_characters1.png\" alt=\"image_characters\" width=\"758\" height=\"303\" \/><h3>Purpose of NPCs<\/h3><p>NPCs are tools used to tell the player the story, to interact with the player as enemies and allies and to give a game world depth and a feeling of being alive and full of things happening. NPCs are most closely associated with Role-Playing Games, but in fact, NPCs are in almost any game where other beings inhabit the same screen as the player character's avatar. Through dialog interaction NPCs can reveal plot points, give quests and rewards, and even serve as red herrings and foils to solving the game. In all, they are some of the best tools game writers can use to advance their story and game through its various levels and stages. NPCs can also add flavor and tone to a game. Their inclusion does not have to reveal core plot points or give directions to quests. They can also be used to help paint a better picture of the setting and world. Most NPCs in a game, however, are obstacles to be overcome. Whether they are cute little kitties or malicious super-intelligent mushrooms, if they are not under the control of a player, they are all NPCs.<\/p><h3>Creating NPCs<\/h3><p>Non-Player Characters deserve the same care and depth in their creation as any player character does. The rules are the same and good results benefits the entire game. One thing to remember is that in a video game, the interaction of NPCs with the hero and the game itself is just as important as their role in the story. For example, movies will often cut from the hero's quest to show the audience what the villain is up to. While video game cutscenes can do this too, there are other ways, better ways, to build a villain in games.<\/p><h3>Using NPCs<\/h3><p>Most NPCs will interact with a player in one or more of these ways:<\/p><ol><li><strong>As Informants:<\/strong> Here the NPC merely speaks to the player or speaks of the world, either directly or in a cutscene. NPCs can also be scripted to have conversations with players. The most common version of this is in the decision tree dialog format. Here the game focuses on a conversation with a NPC, giving the player dialog options that, in turn, offer the player information or choices. <em>Fallout 3<\/em> and <em>Skyrim<\/em> are great examples of dialog tree games, while any <em>Halo<\/em> game will have its share of story driven cutscenes.<\/li><\/ol><ol start=\"2\"><li><strong>As Obstacles:<\/strong> In this example the NPCs purpose is not to inform, but to intercept. These are the hordes of enemies the hero must defeat in his quest to save the world. They can be anything from fodder to bosses to the Big Bad, but they are all NPCs.<\/li><\/ol><ol start=\"3\"><li><strong>As Background:<\/strong> The purpose of this type of NPC is just to make the world seem bigger and more fully realized. It is often not necessary or even possible to completely interact with these NPCs. Their purpose is to make the market seem less empty or to add color and complexity to a city scene. The player will typically know to ignore them, but they add to the illusion of a real, functioning location teeming with life and activity.<\/li><\/ol><ol start=\"4\"><li><strong>All In One:<\/strong> Of course, NPCs can be any mix of these elements. Consider the dark stranger sitting quietly in the back of the tavern. His presence alone creates a sense of unease and intrigue. Then imagine the player approaches and starts a conversation through a dialog tree. This could lead to a quest, or perhaps a full on bar fight.<\/li><\/ol><h3><strong>Creating Items as Characters<\/strong><\/h3><p>Often it will be required to describe or write about inanimate objects or items found within a game. There is no good reason why items cannot have the same rich backgrounds and stories that characters do.<\/p><p>Below is a description for a futuristic hi tech device that allows the user to see enemies through walls and other obstacles. The goal is to create something fantastic that nevertheless seems plausible and acceptable within the context of the game.<\/p><p><strong>Item Example: Dimensional Shift Goggles<\/strong><\/p><img class=\"aligncenter\" src=\".\/images\/Goggles.png\" alt=\"Goggles\" width=\"739\" height=\"457\" \/><p>These heavy eye goggles are made of large copper dials surrounding thick amber lenses with a nylon head strap. Various spin dials, levers, lenses and adjustment gauges cover the alien looking device. Its technology is based partly on M Theory, which became fact after a particle accelerator accident tore a rip in space\/time creating \"The First Incursion.\" As best could be understood, core universal vibration anomalies caused Earth's dimension to \"touch\" another and alien monstrosities poured forth. Government scientists quickly began reverse engineering alien weapons captured from the invaders but found them completely bizarre and impossible to make function. That is until they integrated ancient mysticism in the form of Babylonian glyphs carved into the lenses. Now they work, but scientists still don't know why. In theory, they operate by changing the wearer's eye and brain vibrations to sync with an alien dimension. This includes seeing into the ethereal, a ghost-like plane of translucence. The end effect of this is the ability to see through solid objects, however the process of using the goggles is extremely painful and may cause lasting damage if worn too long.<\/p><\/div><a class=\"dest\" id=\"character-4\"><\/a>&nbsp;<div class=\"accent\"><h1>The Character Arc<\/h1><h3>What is a Character Arc?<\/h3><img class=\"aligncenter\" src=\".\/images\/image_characterarc1.png\" alt=\"image_characterarc1\" width=\"354\" height=\"529\" \/><p>A character arc represents the core physical and emotional changes a character goes through in the course of pursuing their quest. Looking at it in another way, they are fundamentally different personalities at the end of the quest than they were when it began.<\/p><h3>Who needs a Character Arc?<\/h3><img class=\"aligncenter\" src=\".\/images\/image_characterarc2.png\" alt=\"image_characterarc2\" width=\"793\" height=\"466\" \/><p>Does Mario have a character arc in <em>Mario Bros<\/em>? Does his quest change him in fundamental ways as he moves closer to victory? How about Link in the Zelda games? The simple answer is “not really.” Mario is single-mindedly obsessed with one thing and nothing tossed at him will deter him from moving ever forward to completing his quest. For these games, gameplay would be slowed and circumvented with an emphasis on character development. The fun is in the game mechanics, and little thought has been given to character development beyond their initial creation as cute screen characters. And it works fine for this type of game.<\/p><p>Many games are not concerned with character arcs. In most first-person shooter games, the player interacts with the world always in the same mindset: kill anything that moves. In these games, developing finger skills takes precedence over character development. It doesn't matter how you got into the arena of death, it only matters that you start shooting things. Some shooters, such as Halo, tag on a storyline that you can follow or not while honing your skills killing aliens. The story, and any character arcs (however cool they may be), are merely extras, to be taken or discarded as the player sees fit.<\/p><h3>Character Arc as Game Mechanics<\/h3><p>Role-Playing Games take their story, and in turn, their characters much deeper into the play experience. For most RPGs the entirety of the game is one gigantic character arc for the player. Often this is accompanied by statistics that demonstrate the long-term growth of the character thought out the game. Levels, Ability Stats and Growth of Strength and Power are examples of this.<\/p><h3>Story Arcs<\/h3><p>Story is often a large part of RPGs and so allows for other kinds of character arcs than just a rise in power and stats. Often this returns to the Hero's Journey in some way and involves epic trials and tribulations for the hero that can alter his outlook of his quest many times before achieving victory and resolution.<\/p><p><em>Fallout 3<\/em> demonstrates the story arc perfectly. By the end of the game, the player has made choices that guided his character on a path of a hero or an anti-hero and these choices have ripple effects on how NPCs interact with the character.<\/p><\/div><a class=\"dest\" id=\"character-5\"><\/a>&nbsp;<div class=\"accent\"><h1>Character Dialog<\/h1><p>There are three ways to express character in a video game: how they look: what they do; and what they say. Expressing character through visuals is the job of the game artist. Their clothing, posture, and physical appearance are all indications of character. Demonstrating what they do often results in determining their motivations (they want to kill you) in obvious ways. However, for story development and insight into personality, dialog is the tool of the trade.<\/p><h3>What Makes Good Dialog?<\/h3><p>Good dialog seamlessly blends character and story together as one while bad dialog can rip a player from immersion in the world quicker than mom calling you for dinner. Good dialog is sharp, clever and thoroughly convinces the audience the characters and conversation are real and not just there to tell them something. Most of all, good dialog advances the story and character arcs while burying the exposition (see below).<\/p><h3>Purpose of Dialog<\/h3><p>When it comes down to it, each piece of dialog should have a purpose. This purpose can include:<\/p>    <ol>        <li><strong>Character development:<\/strong> Characters speak to convey to the audience some core truth or flaw of the character. It sets up where the character is so that we can later tell where he has been.<\/li>    <\/ol>    <ol start=\"2\">        <li><strong>Story Development:<\/strong> There are core plot points that need to be explained to the audience or initiated through dialog.<\/li>    <\/ol>    <ol start=\"3\">        <li><strong>World Development:<\/strong> Although it does not advance character or story, it fills in the blanks of the world for greater immersion.<\/li>    <\/ol>    <ol start=\"4\">        <li><strong>Comic Relief:<\/strong> The tone of the world needs a temporary reprieve to allow the audience to breathe and relax for a moment before intensity levels rise again.<\/li>    <\/ol><h3>Burying the Exposition<\/h3><img class=\"aligncenter\" src=\".\/images\/image_buryingtheexposition.png\" alt=\"image_buryingtheexposition\" width=\"826\" height=\"424\" \/><p>The most crucial, and often overlooked, aspect of relating information to the audience through dialog is burying the exposition. Exposition is all the details your audience needs to know to understand character motivation and how the plot is advancing. All too often, this information is simply blurting out the moment the player needs to know it. It may be a functional way of telling a story but it not a very clever or immersive way to do it. In fact, it can rip your audience right out of the story you are telling. It starts when characters start speaking of things they already know as if they are saying them for the very first time just for the sake of the audience hearing it. The crucial points are laid out on the surface of the conversation as if the characters are having the conversation exclusively for the benefit of the audience.<\/p><p>A better way is to “bury” the information within what appears to be a natural conversation between characters. This can take some practice but what you want to achieve is informing the audience of what you want to know without them realizing that was the intent all along. Instead, what they experienced was a captivating scene of authentic character dialog that held them emotionally while at the same time, informed them of how the scene advances the story.<\/p>&nbsp;<p><strong>Dialog in Video Games<\/strong><\/p><p>There are some crucial differences when writing dialog for games as opposed to writing a movie or television script. In film, the audience exclusively interacts with the story through dialog and visuals. In games, dialog often sets up gameplay through instructions or quests that lead to interactions with the game. What this means is the player has chosen to play a game in part, at least, because they want the gameplay aspects more than they want to just sit and watch.<\/p><p>For video game dialog, less is more. The longer a player must listen to a dialog or read text, the longer they are being kept from doing what they actually want to do: playing the game. Long tracts of dialog are boring if mandatory. The trick is often learning how to express more in the briefest amount of time and words possible. Only when characters are completely fleshed out as 3-Dimensional characters is this possible and workable.<\/p><\/div><a class=\"dest\" id=\"character-6\"><\/a>&nbsp;<div class=\"accent\"><h1>Character Creation Sample<\/h1><p><strong>Character Examples<\/strong><\/p><p>Here are three character examples draw from simple, three-word design requirements. Think of them as characters at the start of a sci-fi horror game. The idea is to create enough background and character quirks to play off within the game.<\/p><p><strong>Character 1 - earnest, focused, full of fire <\/strong><\/p><img class=\"aligncenter\" src=\".\/images\/KeiraNicolson.png\" alt=\"KeiraNicolson\" width=\"309\" height=\"494\" \/><p>KEIRA NICOLSON (age 22); Keira is a young, attractive, college athlete and captain of her Lacrosse team. Focusing on her career and personal goals rather than dating, Keira keeps her hair short and is fond of wearing oversized sweatshirts with a Lacrosse logo. Keira chooses to still live at home with her mom and younger sister.<\/p><p><strong>Character 2 - no-nonsense, tough ex-military, heart of gold <\/strong><\/p><img class=\"aligncenter\" src=\".\/images\/FrankObenchain.png\" alt=\"FrankObenchain\" width=\"309\" height=\"494\" \/><p>FRANK OBENCHAIN (age 54); Frank is large man, who still remains fit for his age. His hair is grey, and even though receding, Frank still manages a slight flat-top haircut. Frank was a special ops marine for almost twenty years until his alcoholism and a tragic accident killed his daughter. Today, Frank is ten years sober, has no family and works as a school janitor. He often wears tight t-shirts that show off his semper fi tattoo. The name \"Lulu\" is tattooed above with a broken heart.<\/p><p><strong>Character 3 - wary, sarcastic, smart<\/strong><\/p><img class=\"aligncenter\" src=\".\/images\/RollandJax.png\" alt=\"RollandJax\" width=\"309\" height=\"494\" \/><p>ROLLAND JAX (age 31): Rolland is con artist who uses his good looks and charm to grift clueless youth with money. His favorite prowling grounds are colleges where he can take easy advantage of students and their rich parents. Unfortunately Rolland is not getting any younger and his ability to blend into campus life and charm his way out of trouble is starting to fail him. Rolland is fond of vintage dinner jackets.<\/p><\/div><!--page:~~character-reference-text~~-->","title":"Reference Material"},{"bIsChecked":true,"exercise":".\/exercise\/DevProFreebirdCharacter.stack","instructions":"<h1>Goals<\/h1><ol><li>Learn how to customize sprite costumes in Game Stack.<\/li><li>Build a version of the Freebird game that contains your own character art.<\/li><\/ol><h1>Steps<\/h1><ol><li>Click the <img src=\".\/images\/downloadbutton.png\" alt=\"layout.png\"\/> button at the top or bottom of this page to download the DevProFreebirdCharacter.stack file.<\/li><li>Save the file to a location you can access on your computer.<\/li><li>Click to open the file in Game Stack.<\/li><img class=\"aligncenter\" src=\".\/images\/gamecharacter-gameloaded.png\" alt=\"layout.png\"\/><li>Modify CellMate sprite's costumes:<p>The cell mate is a character that is in the birdcage with you. He accepts items from the player's inventory, and provides advice along the way. We will modify the cell mate's two costumes: normal and after given the hot pepper.<\/p><ol class=\"alpha\"><li>Click on the CellMate sprite and select the Costumes tab. The first costume will be selected, which is what the player normally sees.<\/li><img class=\"aligncenter\" src=\".\/images\/gamecharacter-cellmatecostumes.png\" alt=\"layout.png\"\/><li>To completely clear out the costume, click on the Clear button. To add art from the media library, click on the Add button. To load in your own art click on the Import button.<\/li><img class=\"aligncenter\" src=\".\/images\/gamecharacter-topbuttons.png\" alt=\"layout.png\"\/><li>To draw your own art directly in Game Stack, use the tool buttons on the left, and the brush size and color swatches at the bottom.<\/li><img class=\"aligncenter\" src=\".\/images\/gamecharacter-drawingbuttons.png\" alt=\"layout.png\"\/><li>Click on the second costume for the cell mate. This costume is shown when the cell mate is given a hot pepper. Load in new art and\/or draw your own art using the tools outlined above.<\/li><img class=\"aligncenter\" src=\".\/images\/gamecharacter-cellmatehot.png\" alt=\"layout.png\"\/><\/ol><\/li>    <li>Play the Freebird game and see how your art fits in:<ol class=\"alpha\"><li>Click the <img src=\".\/images\/gamestackflag.png\" alt=\"gamestackflag.png\"\/> to start the game. You may choose to use the <img src=\".\/images\/gamestackfullscreen.png\" alt=\"gamestackfullscreen.png\"\/> button to play the game in full screen mode.<\/li><li>Click on the main menu screen to begin the game and read through the introduction. Click on the cell mate to see what he does and how your art fits in. Try giving the cell mate some items, especially the hot pepper.<\/li><li>When you are done, stop the game and go back to editing it.<\/li><\/ol><\/li><li>Modify the cat's art:<p>Another character that shows up when certain birdcage items are used is the cat. The cat is visible in two different sprites and is a little more difficult to change compared to the cell mate.<\/p><ol class=\"alpha\"><li>Click on the Curtain sprite and click on its 3rd costume under the Costumes tab. This is displayed when the curtain is open and the light switch is off. Use the same drawing tools to modify the cat.<\/li><img class=\"aligncenter\" src=\".\/images\/gamecharacter-curtaincat1.png\" alt=\"layout.png\"\/><li>Click on the Curtain's 4th costume.  This is displayed when the curtain is open and the light switch is on. Use the same drawing tools to modify the cat.<\/li><img class=\"aligncenter\" src=\".\/images\/gamecharacter-curtaincat2.png\" alt=\"layout.png\"\/><li>Click on the Screens sprite, which has three costumes. These are displayed at the main menu, game won, and game lost stages. Go to each of these costumes and draw or load in your own art to replace the cat.<\/li><img class=\"aligncenter\" src=\".\/images\/gamecharacter-screenscat.png\" alt=\"layout.png\"\/><\/ol><\/li>    <li>Play the Freebird game and see how your art fits in:<ol class=\"alpha\"><li>Click the <img src=\".\/images\/gamestackflag.png\" alt=\"gamestackflag.png\"\/> to start the game. You may choose to use the <img src=\".\/images\/gamestackfullscreen.png\" alt=\"gamestackfullscreen.png\"\/> button to play the game in full screen mode.<\/li><li>See how your main menu changes to the cat look while the game is running.<\/li><li>During the game, click on the curtain to have it open and see your changes to the cat art. Click the curtain again to close it.<\/li><li>Play the game through so that you win, and see how your art changes work out.<\/li><li>Play the game through so that you lose, and see how your art changes work out.<\/li><li>When you are done, stop the game and go back to editing it.<\/li><\/ol><\/li><li>Consider the following questions<ol class=\"alpha\"><li>Having seen your art in the game, what other changes could you make to the characters?<\/li><li>How does changing the character art change the feel of the game?<\/li><\/ol><\/li><li>Submit your final work:<ol class=\"alpha\"><li>Save a .stack file of your version of the game.<\/li><li>On a separate piece of paper, write a summary of any issues you had while changing the character art and explain what you did to overcome these issues.<\/li><li>After your summary, do one of the following:<ol><li>Write about how a third character could be added to the game. What is this character's purpose? Would this new character help or hinder the player? What items would this new character accept, and what actions would they take?<\/li><li>Write a background story for the cell mate. Some possible questions you could answer are: How did he end up in the cage? What was his life like before being in the cage? How does he know how to escape and yet is still in the cage? Why is he unable to get his own food?<\/li><\/ol><\/li><li>Follow your teachers instructions to submit the .stack file and your written paragraphs to complete the exercise.<\/li><\/ol><\/li>    <\/ol><h1>Extra Credit<\/h1><ol><li>Go beyond just changing the cat in the Screen sprite by completely changing everything in that sprite's three costumes.<\/li><li>Change how the two dispensers in the game look: the water bottle, and the seed bowl.<\/li><li>Give the cell mate some animation by adding additional costumes and flip between them when the 'Game Start' event has been received. Don't forget to flip between a different set of costumes when the cell mate's 'HotMode' variable has a value of 1. This is triggered when the cell mate has been given a hot pepper.<\/li><\/ol><!--page:~~character-gamestack-exercise~~-->","link":"","mod":"character","movie":null,"name":"character-gamestack-exercise","promptfile":null,"prompts":null,"reference":null,"text":null,"title":"Game Stack Exercise"},{"bIsChecked":true,"exercise":"","instructions":"<h1>Goal<\/h1><p>In this exercise, we will choose two characters from a list of ten illustrations of undeveloped characters. From there we will build their personalities and write dialog for a conversation between the two of them.<\/p><h1>Steps<\/h1><ol><li>Choose any two character models supplied by this exercise.<\/li><li>Give both characters a name.<\/li><li>Write a one to two page dialog between these two characters. The dialog may be on any (appropriate) topic and should demonstrate:<ol><li>The personality of both characters.<\/li><li>The motivations of both characters.<\/li><li>A conflict between the characters.<\/li><li>Sharp, goal-focused dialog that successfully buries the exposition while it intrigues and entertains.<\/li><img class=\"aligncenter\" src=\".\/images\/Character-Exercise-1.png\" alt=\"Image_1940s\" width=\"516\" height=\"404\" \/><img class=\"aligncenter\" src=\".\/images\/Character-Exercise-2.png\" alt=\"Image_1940s\" width=\"516\" height=\"404\" \/><img class=\"aligncenter\" src=\".\/images\/Character-Exercise-3.png\" alt=\"Image_1940s\" width=\"516\" height=\"404\" \/><img class=\"aligncenter\" src=\".\/images\/Character-Exercise-4.png\" alt=\"Image_1940s\" width=\"516\" height=\"404\" \/><img class=\"aligncenter\" src=\".\/images\/Character-Exercise-5.png\" alt=\"Image_1940s\" width=\"516\" height=\"404\" \/><img class=\"aligncenter\" src=\".\/images\/Character-Exercise-6.png\" alt=\"Image_1940s\" width=\"516\" height=\"404\" \/><img class=\"aligncenter\" src=\".\/images\/Character-Exercise-7.png\" alt=\"Image_1940s\" width=\"516\" height=\"404\" \/><\/ol><\/li><\/ol><h1>Hints and Challenges<\/h1><p>For a real challenge try inserting some humor into your dialog. Humor is a great way to entertain while you inform your audience. Don't focus on telling jokes; instead, make the humor come naturally from the characters' personalities and quirks. And remember a little humor goes a long way.<\/p><!--page:~~character-writing-exercise~~-->","link":"","mod":"character","movie":null,"name":"character-writing-exercise","promptfile":null,"prompts":null,"reference":null,"text":null,"title":"Writing Exercise"}]},{"bIsChecked":true,"name":"developing-story-in-video-games","title":"Developing Story in Video Games","topics":[{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"developing-story-in-video-games","movie":".\/video\/developingstory-overview-all-micro-1.mp4","name":"Overview","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"Pac Man"},{"order":0,"points":0,"sticky":false,"text":"Donkey Kong"},{"order":21,"points":100,"sticky":false,"text":"All of the above"},{"order":21,"points":0,"sticky":false,"text":"None of the above"}],"failure":{"button":null,"message":"Although simple stories, Pac Man and Donkey Kong do tell stories."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn1-developingstory-overview-all-micro-1","number_of_choices":4,"question":"Which of the following video games tell stories?","start":3600,"success":{"button":null,"message":"Although simple stories, Pac Man and Donkey Kong do tell stories."},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Pac Man"},{"order":0,"points":0,"sticky":false,"text":"32-bit graphics"},{"order":0,"points":100,"sticky":false,"text":"artificial intelligence  "},{"order":0,"points":0,"sticky":false,"text":"CD-ROM"}],"failure":{"button":null,"message":"Technology such as A.I. has allowed players to interact with games in ways that were impossible just decades ago. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn2-developingstory-overview-all-micro-1","number_of_choices":4,"question":"Stories in video games have become comparable in movies largely due to advances in technology such as _____.  ","start":3600,"success":{"button":null,"message":"Technology such as A.I. has allowed players to interact with games in ways that were impossible just decades ago. "},"type":"Multiple"}],"reference":"developing-story-in-video-games-1","text":null,"title":"Overview"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"developing-story-in-video-games","movie":".\/video\/developingstory-techniques-intro-micro-1.mp4","name":"Storytelling Techniques","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"mechanics"},{"order":0,"points":0,"sticky":false,"text":"visuals"},{"order":0,"points":0,"sticky":false,"text":"storytelling "},{"order":21,"points":100,"sticky":false,"text":"All of the above "}],"failure":{"button":null,"message":"Video games now can top blockbuster movie sales and are heavily reviewed with an eye toward quality."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn3-developingstory-techniques-intro-micro-1","number_of_choices":4,"question":"Today's video game critics and customers demand quality _____ to make games more immersive, meaningful, and fun.","start":3600,"success":{"button":null,"message":"Video games now can top blockbuster movie sales and are heavily reviewed with an eye toward quality."},"type":"Multiple"}],"reference":"developing-story-in-video-games-2","text":null,"title":"Storytelling Techniques"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"developing-story-in-video-games","movie":".\/video\/developingstory-techniques-textandnarration-micro-2.mp4","name":"Text and Narration","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"Virtual currency "},{"order":0,"points":100,"sticky":false,"text":"Narration "},{"order":0,"points":0,"sticky":false,"text":"Gimmicks"},{"order":0,"points":0,"sticky":false,"text":"Platform "}],"failure":{"button":null,"message":"Narration is the oldest form of storytelling."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn4-developingstory-techniques-textandnarration-micro-2","number_of_choices":4,"question":"Which of the following is a method of conveying story in a video game?","start":3600,"success":{"button":null,"message":"Narration is the oldest form of storytelling."},"type":"Multiple"},{"choices":[{"order":0,"points":100,"sticky":false,"text":"keep it short "},{"order":0,"points":0,"sticky":false,"text":"write no less than 100 words"},{"order":0,"points":0,"sticky":false,"text":"show the text over gameplay"},{"order":0,"points":0,"sticky":false,"text":"make it blue"}],"failure":{"button":null,"message":"Good storytelling in video games is often a matter of saying more with less."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn5-developingstory-techniques-textandnarration-micro-2","number_of_choices":4,"question":"When using text on screen in an action-arcade video game, it is usually best to ____.","start":3600,"success":{"button":null,"message":"Good storytelling in video games is often a matter of saying more with less."},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"comic relief  "},{"order":0,"points":0,"sticky":false,"text":"text on screen "},{"order":0,"points":100,"sticky":false,"text":"spoken word "},{"order":0,"points":0,"sticky":false,"text":"visuals"}],"failure":{"button":null,"message":"Reading a book aloud to an audience turns text into narration. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn6-developingstory-techniques-textandnarration-micro-2","number_of_choices":4,"question":"Narration is another way of saying story is conveyed to an audience through _____. ","start":3600,"success":{"button":null,"message":"Reading a book aloud to an audience turns text into narration. "},"type":"Multiple"}],"reference":"developing-story-in-video-games-2","text":null,"title":"Text and Narration"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"developing-story-in-video-games","movie":".\/video\/developingstory-techniques-cutscenes-micro-3.mp4","name":"Cut Scenes","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"text blockbuster "},{"order":0,"points":0,"sticky":false,"text":"monolog"},{"order":0,"points":100,"sticky":false,"text":"cut scene "},{"order":0,"points":0,"sticky":false,"text":"simulation"}],"failure":{"button":null,"message":"With advanced technology, some cut scenes in video games rival Hollywood special effects. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn7-developingstory-techniques-cutscenes-micro-3","number_of_choices":4,"question":"A _____ in a video game is a short, animated, mini-movie that helps set up or advance the plot. ","start":3600,"success":{"button":null,"message":"With advanced technology, some cut scenes in video games rival Hollywood special effects. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"over used "},{"order":0,"points":0,"sticky":false,"text":"costly"},{"order":0,"points":0,"sticky":false,"text":"time consuming  "},{"order":21,"points":100,"sticky":false,"text":"All of the above "}],"failure":{"button":null,"message":"Time, money, and affecting game flow are all reasons to use cut scenes sparingly. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn8-developingstory-techniques-cutscenes-micro-3","number_of_choices":4,"question":"Cut scenes in video games must be carefully considered during development because they can be _____. ","start":3600,"success":{"button":null,"message":"Time, money, and affecting game flow are all reasons to use cut scenes sparingly. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Assume Patrick Stewart will narrate   "},{"order":0,"points":100,"sticky":false,"text":"Write it like a great scene from a movie"},{"order":0,"points":0,"sticky":false,"text":"Always include comic relief   "},{"order":21,"points":0,"sticky":false,"text":"All of the above "}],"failure":{"button":null,"message":"There is software availlable that automatically formats to film and television script structure. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn9-developingstory-techniques-cutscenes-micro-3","number_of_choices":4,"question":"Which of the following is a good rule of thumb when writing a video game cut scene? ","start":3600,"success":{"button":null,"message":"There is software available that automatically formats to film and television script structure. "},"type":"Multiple"}],"reference":"developing-story-in-video-games-2","text":null,"title":"Cut Scenes"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"developing-story-in-video-games","movie":".\/video\/developingstory-techniques-dialog-micro-4.mp4","name":"Characters and Dialog","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"Text and characters"},{"order":0,"points":0,"sticky":false,"text":"Text and narration"},{"order":0,"points":100,"sticky":false,"text":"Characters and dialog"},{"order":0,"points":0,"sticky":false,"text":"Text and dialog"}],"failure":{"button":null,"message":"Actors speaking and acting on screen is the usual way story is told in modern movies, although at first film had no sound and used text to help explain the action on screen. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn10-developingstory-techniques-dialog-micro-4","number_of_choices":4,"question":"Most modern movies tell their stories through ______.","start":3600,"success":{"button":null,"message":"Actors speaking and acting on screen is the usual way story is told in modern movies, although at first film had no sound and used text to help explain the action on screen. "},"type":"Multiple"},{"choices":[{"order":0,"points":100,"sticky":false,"text":"Dialog one-off"},{"order":0,"points":0,"sticky":false,"text":"Cut scene "},{"order":0,"points":0,"sticky":false,"text":"Dialog tree"},{"order":0,"points":0,"sticky":false,"text":"Collectable"}],"failure":{"button":null,"message":"Such dialogs are brief and unobtrusive to the player but add flavor to a setting.   "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn11-developingstory-techniques-dialog-micro-4","number_of_choices":4,"question":"A background NPC in a city calls out for his cat. This could be called a _____.","start":3600,"success":{"button":null,"message":"Such dialogs are brief and unobtrusive to the player but add flavor to a setting.   "},"type":"Multiple"}],"reference":"developing-story-in-video-games-2","text":null,"title":"Characters and Dialog"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"developing-story-in-video-games","movie":".\/video\/developingstory-techniques-visuals-micro-5.mp4","name":"Visuals and Narrative","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"Visuals"},{"order":0,"points":0,"sticky":false,"text":"Plot"},{"order":0,"points":0,"sticky":false,"text":"Character"},{"order":0,"points":0,"sticky":false,"text":"Drama"}],"failure":{"button":null,"message":"As video game graphics become photo-realistic, the potential for visual storytelling becomes limitless.   "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn12-developingstory-techniques-visual-micro-5","number_of_choices":4,"question":"_____ are one major aspect of video game story telling that books typically lack. ","start":3600,"success":{"button":null,"message":"As video game graphics become photo-realistic, the potential for visual storytelling becomes limitless.   "},"type":null},{"choices":[{"order":0,"points":100,"sticky":false,"text":"tone"},{"order":0,"points":0,"sticky":false,"text":"color"},{"order":0,"points":0,"sticky":false,"text":"character"},{"order":0,"points":0,"sticky":false,"text":"platform "}],"failure":{"button":null,"message":"Tone is the overall mood created from visuals, audio, and story.    "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn13-developingstory-techniques-visual-micro-5","number_of_choices":4,"question":"Although plot twists can be a good thing, stories should be aware of too many changes in _____.","start":3600,"success":{"button":null,"message":"Tone is the overall mood created from visuals, audio, and story.    "},"type":null}],"reference":"developing-story-in-video-games-2","text":null,"title":"Visuals and Narrative"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"developing-story-in-video-games","movie":".\/video\/developingstory-narratives-intro-micro-1.mp4","name":"Game Narratives","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"decisions "},{"order":0,"points":0,"sticky":false,"text":"cash investment"},{"order":0,"points":0,"sticky":false,"text":"an output device"},{"order":0,"points":0,"sticky":false,"text":"an Internet connection"}],"failure":{"button":null,"message":"This freedom for the player requires meticulous attention to detail in storytelling. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn14-developingstory-narratives-intro-micro-1","number_of_choices":4,"question":"Because games are interactive and require _____ from the player, they can potentially tell different narrative each time the game is played.  ","start":3600,"success":{"button":null,"message":"This freedom for the player requires meticulous attention to detail in storytelling. "},"type":null},{"choices":[{"order":0,"points":100,"sticky":false,"text":"linear"},{"order":0,"points":0,"sticky":false,"text":"line"},{"order":0,"points":0,"sticky":false,"text":"non-linear"},{"order":0,"points":0,"sticky":false,"text":"a novel"}],"failure":{"button":null,"message":"Not all games attempt to create different narratives on repeat play, and many still often use linear narratives that never alter.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn15-developingstory-narratives-intro-micro-1","number_of_choices":4,"question":"A story that is told from start to finish is called _____.  ","start":3600,"success":{"button":null,"message":"Not all games attempt to create different narratives on repeat play, and many still often use linear narratives that never alter.  "},"type":null}],"reference":"developing-story-in-video-games-3","text":null,"title":"Game Narratives"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"developing-story-in-video-games","movie":".\/video\/developingstory-narratives-linearnarratives-micro-2.mp4","name":"Linear Narratives","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"linear design"},{"order":0,"points":0,"sticky":false,"text":"dialog trees"},{"order":0,"points":0,"sticky":false,"text":"branching narratives"},{"order":21,"points":0,"sticky":false,"text":"None of the above"}],"failure":{"button":null,"message":"It is fine for a game to have story not influence gameplay if that is the best design for that particular game. \u0009"},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn16-developingstory-narratives-linearnarratives-micro-2","number_of_choices":4,"question":"Games with stories that are not intended to affect gameplay, but merely add depth, typically have _____.","start":3600,"success":{"button":null,"message":"It is fine for a game to have story not influence gameplay if that is the best design for that particular game. \u0009"},"type":"Multiple"},{"choices":[{"order":0,"points":100,"sticky":false,"text":"Halo"},{"order":0,"points":0,"sticky":false,"text":"Pac Man"},{"order":0,"points":0,"sticky":false,"text":"Donkey Kong"},{"order":21,"points":0,"sticky":false,"text":"All of the above"}],"failure":{"button":null,"message":"Halo has a fairly deep narrative but if you ignore it, you can play the game just fine. \u0009"},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn17-developingstory-narratives-linearnarratives-micro-2","number_of_choices":4,"question":"_____ is a game that includes a story that is entirely optional to gameplay.","start":3600,"success":{"button":null,"message":"Halo has a fairly deep narrative but if you ignore it, you can play the game just fine. \u0009"},"type":"Multiple"}],"reference":"developing-story-in-video-games-3","text":null,"title":"Linear Narratives"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"developing-story-in-video-games","movie":".\/video\/developingstory-narratives-linearexample-micro-3.mp4","name":"Linear Narratives Example","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"alter the story"},{"order":0,"points":0,"sticky":false,"text":"complete the story "},{"order":0,"points":0,"sticky":false,"text":"advance the story"},{"order":21,"points":0,"sticky":false,"text":"None of the above "}],"failure":{"button":null,"message":"The story will unfold as the player completes levels, but it will never change. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn18-developingstory-narratives-linearexample-micro-3","number_of_choices":4,"question":"In games like Halo, nothing the player does in the game can _____.","start":3600,"success":{"button":null,"message":"The story will unfold as the player completes levels, but it will never change. "},"type":"Multiple"},{"choices":[{"order":0,"points":100,"sticky":false,"text":"role-playing games"},{"order":0,"points":0,"sticky":false,"text":"arcade games "},{"order":0,"points":0,"sticky":false,"text":"puzzle games"},{"order":0,"points":0,"sticky":false,"text":"sports games "}],"failure":{"button":null,"message":"Role-playing games are often story and character based. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn19-developingstory-narratives-linearexample-micro-3","number_of_choices":4,"question":"The genre where story interaction is usually best exemplified is _____.","start":3600,"success":{"button":null,"message":"Role-playing games are often story and character based."},"type":"Multiple"}],"reference":"developing-story-in-video-games-3","text":null,"title":"Linear Narratives Example"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"developing-story-in-video-games","movie":".\/video\/developingstory-narratives-linearexample2-micro-4.mp4","name":"Game Play Narratives","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"action games"},{"order":0,"points":0,"sticky":false,"text":"role-playing games"},{"order":0,"points":0,"sticky":false,"text":"mystery games"},{"order":21,"points":0,"sticky":false,"text":"All of the above"}],"failure":{"button":null,"message":"Action games can be enhanced by a good linear story."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn20-developingstory-narratives-linearexample2-micro-4","number_of_choices":4,"question":"Linear narratives that do not allow player decisions that will affect the story are best suited to _____.","start":3600,"success":{"button":null,"message":"Action games can be enhanced by a good linear story."},"type":null},{"choices":[{"order":0,"points":100,"sticky":false,"text":"Pong"},{"order":0,"points":0,"sticky":false,"text":"Halo"},{"order":0,"points":0,"sticky":false,"text":"Elder Scrolls V: Skyrum"},{"order":0,"points":0,"sticky":false,"text":"Lord of the RIngs Online"}],"failure":{"button":null,"message":"Pong makes no attempt whatsoever at story. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn21-developingstory-narratives-linearexample2-micro-4","number_of_choices":4,"question":"Which of the following games have no story?","start":3600,"success":{"button":null,"message":"Pong makes no attempt whatsoever at story. "},"type":null}],"reference":"developing-story-in-video-games-3","text":null,"title":"Game Play Narratives"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"developing-story-in-video-games","movie":".\/video\/developingstory-narratives-branchingnarratives-micro-5.mp4","name":"Branching Narratives","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"A fork in the road"},{"order":0,"points":0,"sticky":false,"text":"A yellow brick road"},{"order":0,"points":0,"sticky":false,"text":"A path of breadcrumbs "},{"order":0,"points":0,"sticky":false,"text":"A brick wall"}],"failure":{"button":null,"message":"The fork in the road means a decision must be made, while the others offer only one course of action. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn22-developingstory-narratives-branchingnarratives-micro-5","number_of_choices":4,"question":"Which of the following is the best metaphor for a branching narrative?","start":3600,"success":{"button":null,"message":"The fork in the road means a decision must be made, while the others offer only one course of action. "},"type":null},{"choices":[{"order":0,"points":100,"sticky":false,"text":"make decisions that affect story"},{"order":0,"points":0,"sticky":false,"text":"never make decisions that affect story"},{"order":0,"points":0,"sticky":false,"text":"only see the story play out in cut scenes"},{"order":0,"points":0,"sticky":false,"text":"the story will be text based"}],"failure":{"button":null,"message":"Branching stories in games require more time and effort from programmers because players are given choices that affect story. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn23-developingstory-narratives-branchingnarratives-micro-5","number_of_choices":4,"question":"A game with branching narratives typically means the player will _____.","start":3600,"success":{"button":null,"message":"Branching stories in games require more time and effort from programmers because players are given choices that affect story. "},"type":null}],"reference":"developing-story-in-video-games-3","text":null,"title":"Branching Narratives"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"developing-story-in-video-games","movie":".\/video\/developingstory-narratives-branchingnarratives2-micro-6.mp4","name":"Branching Narratives Cont'd","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"Team Fortress 2"},{"order":0,"points":0,"sticky":false,"text":"Pac Man"},{"order":0,"points":0,"sticky":false,"text":"Halo"},{"order":21,"points":100,"sticky":false,"text":"None of the above"}],"failure":{"button":null,"message":"None of these games allow for a decision to be made by the player that can change the narrative. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn24-developingstory-narratives-branchingnarratives2-micro-6","number_of_choices":4,"question":"Which of the following games have branching narratives?","start":3600,"success":{"button":null,"message":"None of these games allow for a decision to be made by the player that can change the narrative. "},"type":"Multiple"},{"choices":[{"order":0,"points":100,"sticky":false,"text":"gameplay balance "},{"order":0,"points":0,"sticky":false,"text":"visual composition"},{"order":0,"points":0,"sticky":false,"text":"strong dialog"},{"order":0,"points":0,"sticky":false,"text":"interesting characters"}],"failure":{"button":null,"message":"Balancing pace can be huge issue for games with branching narratives. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn25-developingstory-narratives-branchingnarratives2-micro-6","number_of_choices":4,"question":"One of the most difficult aspects of designing a game with branching narratives is creating _____","start":3600,"success":{"button":null,"message":"Balancing pace can be huge issue for games with branching narratives. "},"type":"Multiple"}],"reference":"developing-story-in-video-games-3","text":null,"title":"Branching Narratives Cont'd"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"developing-story-in-video-games","movie":".\/video\/developingstory-narratives-impliednarratives-micro-7.mp4","name":"Implied Narratives","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"Simulations"},{"order":0,"points":0,"sticky":false,"text":"Sports"},{"order":0,"points":0,"sticky":false,"text":"Puzzle"},{"order":21,"points":0,"sticky":false,"text":"None of the above"}],"failure":{"button":null,"message":"Simulations typically are sandbox games with no direct narrative. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn26-developingstory-narratives-impliednarratives-micro-7","number_of_choices":4,"question":"The genre most likely to have games with implied narratives is _____.","start":3600,"success":{"button":null,"message":"Simulations typically are sandbox games with no direct narrative. "},"type":null},{"choices":[{"order":0,"points":100,"sticky":false,"text":"The Sims"},{"order":0,"points":0,"sticky":false,"text":"Pong"},{"order":0,"points":0,"sticky":false,"text":"Tomb Raider"},{"order":0,"points":0,"sticky":false,"text":"Donkey Kong"}],"failure":{"button":null,"message":"Although The Sims is technically the correct answer, any game can have implied narratives with enough imagination from the player.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn27-developingstory-narratives-impliednarratives-micro-7","number_of_choices":4,"question":"Which of the following games presents a world of activities where players interact and create their own stories within the game?","start":3600,"success":{"button":null,"message":"Although The Sims is technically the correct answer, any game can have implied narratives with enough imagination from the player.  "},"type":null}],"reference":"developing-story-in-video-games-3","text":null,"title":"Implied Narratives"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"developing-story-in-video-games","movie":".\/video\/developingstory-intent-intro-micro-1.mp4","name":"Story Intent vs Gameplay","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"intended"},{"order":0,"points":0,"sticky":false,"text":"indented "},{"order":0,"points":0,"sticky":false,"text":"action"},{"order":0,"points":0,"sticky":false,"text":"plot-point"}],"failure":{"button":null,"message":"The intended storyline is the story the game's designer wants to tell. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn28-developingstory-intent-intro-micro-1","number_of_choices":4,"question":"The story that is supported by the game's design, visuals, and narrative could be called the _____ storyline.","start":3600,"success":{"button":null,"message":"The intended storyline is the story the game's designer wants to tell. "},"type":null},{"choices":[{"order":0,"points":100,"sticky":false,"text":"player actions"},{"order":0,"points":0,"sticky":false,"text":"cut scenes"},{"order":0,"points":0,"sticky":false,"text":"a strong narrative "},{"order":0,"points":0,"sticky":false,"text":"dialog trees"}],"failure":{"button":null,"message":"Players will imagine themselves as they wish, not always as designer's wish.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn29-developingstory-intent-intro-micro-1","number_of_choices":4,"question":"In many games with open world exploration, the intended story can be circumvented by _____.","start":3600,"success":{"button":null,"message":"Players will imagine themselves as they wish, not always as designer's wish.  "},"type":null}],"reference":"developing-story-in-video-games-4","text":null,"title":"Story Intent vs Gameplay"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"developing-story-in-video-games","movie":".\/video\/developingstory-intent-intentvgameplay-micro-2.mp4","name":"Intended Story","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"Narrations from NPC's"},{"order":0,"points":0,"sticky":false,"text":"Cut scenes"},{"order":0,"points":0,"sticky":false,"text":"Text that describes the world"},{"order":0,"points":100,"sticky":false,"text":"A player avoiding completing a level"}],"failure":{"button":null,"message":"Players can be unpredictable and even more so if they become bored with the story. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn30-developingstory-intent-intentvgameplay-micro-2","number_of_choices":4,"question":"Which of the following is not an element of a game designer's intended story?","start":3600,"success":{"button":null,"message":"Players can be unpredictable and even more so if they become bored with the story. "},"type":"Multiple"}],"reference":"developing-story-in-video-games-4","text":null,"title":"Intended Story"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"developing-story-in-video-games","movie":".\/video\/developingstory-intent-gameplay-micro-3.mp4","name":"Gameplay Story","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"Completing a level"},{"order":0,"points":0,"sticky":false,"text":"Talking to a NPC"},{"order":0,"points":100,"sticky":false,"text":"Refusing to talk to a NPC"},{"order":0,"points":0,"sticky":false,"text":"Purchasing a sword in a market"}],"failure":{"button":null,"message":"Players can also simply miss the important NPCs, clues, or paths that throw story and pacing off.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn31-developingstory-intent-gameplay-micro-3","number_of_choices":4,"question":"Which of the following is an example of a player's action interfering with a game's intended story?","start":3600,"success":{"button":null,"message":"Players can also simply miss the important NPCs, clues, or paths that throw story and pacing off.  "},"type":"Multiple"}],"reference":"developing-story-in-video-games-4","text":null,"title":"Gameplay Story"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"developing-story-in-video-games","movie":".\/video\/developingstory-intent-gameplayexample-micro-4.mp4","name":"Gameplay Example","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"game design"},{"order":0,"points":0,"sticky":false,"text":"dialog"},{"order":0,"points":0,"sticky":false,"text":"virtual currency "},{"order":0,"points":0,"sticky":false,"text":"cut scenes"}],"failure":{"button":null,"message":"This complexity illustrates why a Game Design Document is so vital."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn32-developingstory-intent-gameplayexample-micro-4","number_of_choices":4,"question":"With good _____ players have multiple opportunities to reconnect with the intended story even if they miss or ignore previous opportunities.  ","start":3600,"success":{"button":null,"message":"This complexity illustrates why a Game Design Document is so vital."},"type":"Multiple"}],"reference":"developing-story-in-video-games-4","text":null,"title":"Gameplay Example"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"developing-story-in-video-games","movie":".\/video\/developingstory-intent-end-micro-5.mp4","name":"Story Intent vs Gameplay Summary","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"character; story"},{"order":0,"points":0,"sticky":false,"text":"text; narration"},{"order":0,"points":0,"sticky":false,"text":"linear; non-linear design"},{"order":21,"points":0,"sticky":false,"text":"None of the above"}],"failure":{"button":null,"message":"Character and story are the foundations of creating rich plots for video games. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn33-developingstory-intent-end-micro-5","number_of_choices":4,"question":"Through _____ and _____, video games can compete with the best of movies and literature.","start":3600,"success":{"button":null,"message":"Character and story are the foundations of creating rich plots for video games. "},"type":null}],"reference":"developing-story-in-video-games-4","text":null,"title":"Story Intent vs Gameplay Summary"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"reference","mod":"","movie":null,"name":"Reference","promptfile":null,"prompts":null,"reference":null,"text":"<a id=\"developing-story-in-video-games-1\" class=\"dest\"><\/a><div class=\"accent\"><h1>Overview<\/h1><p>Storytelling in video games has come a long way. Technological limitations in the early years of video games used to be a huge factor in restricting story. Even then, however, characters and story were implied. Think of the story being told in games like <em>Pac-Man<\/em> and <em>Donkey Kong.<\/em> They are simple, to be sure, but there are unique characters and stories being told in both games.<\/p><img class=\"aligncenter\" src=\".\/images\/image_whatsyourstory.png\" alt=\"image_whatsyourstory\" width=\"713\" height=\"373\" \/><p>As technology has advanced (in particular Artificial Intelligence or A.I.), so has the medium's ability to tell bigger, more complex stories. In fact, we are now at the point where stories in video games can be more layered and complex than even films and books. This is because the video game medium of storytelling is interactive in a way a book or movie can never be. Stories in video games can also be told in a non-linear format, which opens up new ways to develop and reveal plot and conflict.<\/p><p>Today storytelling in video games continues to expand with technology and becomes ever more competitive with traditional storytelling mediums. Video game critics now review story as much as mechanics which sets ever higher expectations for story and character in future games. The standards for story in video games are now set at a very high bar; however the techniques for creating a good story largely remain the same, with a few new considerations and options.<\/p><p>This Module is a companion to the Character's Module. Together they help highlight some fundamental considerations in developing character and story in video games. This Module will often refer to Character Development and it is recommended that the Character Development Module be studied first. This Module will specifically examine:<\/p><div style=\"text-align: center;\"><ul class=\"anchorGroup\" style=\"text-align: left; display: inline-block;\"><li><a class=\"ankor\" href=\"#developing-story-in-video-games-2\">Storytelling Techniques in Video Games<\/a><\/li><li><a class=\"ankor\" href=\"#developing-story-in-video-games-3\">Categories of Game Narratives<\/a><\/li><li><a class=\"ankor\" href=\"#developing-story-in-video-games-4\">Story Intent vs. Player Actions<\/a><\/li><li><a class=\"ankor\" href=\"#developing-story-in-video-games-5\">Sample Cutscene<\/a><\/li><\/ul><\/div><\/div><a class=\"dest\" id=\"developing-story-in-video-games-2\"><\/a>&nbsp;<div class=\"accent\"><h1>Storytelling Techniques in Video Games<\/h1><p>Creating story in a video game is a slightly different process than writing a novel or a movie script. For one, the story must be interactive or else the game is little more than a movie on a computer monitor. To accomplish the feat of storytelling, the video game author has many storytelling techniques in their toolkit to use to deliver the plot points throughout the game. Let's examine some of techniques and tools.<\/p><h3>Text and Narration<\/h3><img class=\"aligncenter\" src=\".\/images\/image_textandnarration.png\" alt=\"image_textandnarration\" width=\"908\" height=\"453\" \/><p>Use of text and narration are the most obvious and time tested storytelling techniques. They are the building blocks of most traditional storytelling mediums such as books and movies. Video games tell their stories in this method, as well, only with some major differences. In a book or a movie, the audience expects the story to just come out and be told in one medium of delivery: either by reading it or by watching it. Video games add other options but do not ignore the use of text and narration.<\/p><p>Many games will simply tell their backstory through text, just like a book. It used to be common for a game's instruction manual to tell a backstory in plain text (often due to the lack of opportunity to tell it anywhere else). Other games have taken the <em>Star Wars<\/em> method of scrolling text at the beginning of the game to get the backstory into the players' minds. Anyway it is done; text still relies on someone reading it. In games it is best to be brief when using text. Remember, the player has chosen to play a game, not read a book, so long periods of reading text in a user interface is not going to cut it.<\/p><p>Narration is a way of delivering story through spoken word. Instead of reading text, the story is orally presented (like a voice over in a movie). This cuts down on the player having to read small text on a computer monitor and allows for some tone of voice from the narrator to accentuate the mood and theme of the story. Once again, however, the audience has chosen to play a game, not see a movie. Narration is fine to start things off, but a constant voice explaining plot is going to get annoying.<\/p><p>Text and narration are best used sparingly or integrated into other techniques. They still require basic writing rules and methods in their structure and delivery, but they work just as well in video games as books and film, when used correctly.<\/p><h3>Cutscenes<\/h3><img class=\"aligncenter\" src=\".\/images\/image_cutscene.png\" alt=\"image_cutscene\" width=\"835\" height=\"407\" \/><p>Cutscenes are fully animated mini-movies that appear to the player, typically, at key points of the game's story or at major points of the player character's development. Cutscenes allow the player to play and focus on the game and still pause once in a while to be filled in on story points. When done correctly, cutscenes are a terrific way of telling story in a game. There are issues with cutscenes, however, that should be considered. First and foremost, they can be time consuming and costly to create. This is the difference between text and visuals and audio: a book is cheaper to produce than a television show. Adding cutscenes is going to be an added expense in time and money to make.<\/p><p>Cutscenes can also be overused. When a player is focused on their character development by raising their skills and power levels through playing the game, being forced to stop and watch a cutscene can become frustrating. Cutscenes work best if they are well placed at major story arcs and used only when they best advance the story and not distract the player. This requires the writer to be very shrewd in making cutscenes that excite and advance the story; yet still not feel like a pause in the game to clumsily toss out plot points. The rules for writing great cutscenes are the same as writing a great scene in a movie: it starts with tight structure, razor-sharp dialog, and burying the exposition.<\/p><h3>Characters and Dialog<\/h3><p>Telling a story through characters and dialog is a great method to use in video games. Not only does it immerse the audience without breaking the so-called fourth wall (the barrier between the game and player's worlds), it offers many opportunities for the player to interact with the game (an absolute necessity for the game medium the story is told in). The real trick is in finding the right places in a game to put the dialog. Luckily, there are a number of options.<\/p><p><strong>Dialog trees<\/strong> are often utilized in role-playing games or games with role-playing features. They present to the player an in-game conversation between a player character and a non-player character (NPC) from which the player can choose responses. This allows the authors an opportunity to subtly give plot information, develop characters, and create player immersion by making the world seem alive and real. At their worse, however, dialog trees can be tedious exercises of game stretching and poorly executed dialog. They can also be tricky things to deal with in that they offer choices to the player, which should, in theory, change the story for the player when chosen. This creates the need to implement the game in such a way that multiple storylines are possible and equally desirable.<\/p><p><strong>Dialog “one-offs” <\/strong>is another, simpler, way to improve character and story elements within a game. This is where the player hears either triggered or un-triggered burst of dialog from a character on screen (sometimes even off screen). For example, the character the player is controlling might just start talking to themselves or others at random or keyed locations. There is no choice to be made for the player, the dialog just happens. What this allows is a tiny bit of character development and story exposition to be given in a non-intrusive manner that does not stop the game or require the player to make choices that can change the story. The game <em>Left4Dead<\/em> utilized this method to near perfection. Each player character had dozens of random and keyed lines of dialog that the characters would speak outside of the player's control or actions. This created personalities for the characters that would otherwise be nearly non-existent. This, in turn, gave the game humor, character distinction (even though they all had the same abilities) and a good dose of filling out a story that adds to the overall game experience.<\/p><h3>Visuals as Narrative Context<\/h3><img class=\"aligncenter\" src=\".\/images\/image_VisualNarrativeContext.png\" alt=\"image_VisualNarrativeContext\" width=\"786\" height=\"524\" \/><p>Because video games are now such a visual medium of storytelling, we can use that to our advantage in laying out a story to the audience. This is because the old cliché is true: a picture tells a thousand words. Let's examine how that is so and how we can utilize visuals in storytelling.<\/p><p>Consider a location in a game. What story does it tell without saying a word? First, think of who lives there. A brightly colored town with doe-eyed, winged pixies as its inhabitants tells an immediate story to the player and implies certain expectations. In this example, the story the visuals imply might cause a player to suspect this is a world of magic and fantasy creatures. Now, what if the color in the center of town was dull gray and muted? What if some of the pixies looked sad and dirty while other were bright and happy? The player now starts to smell a mystery in the works. What has caused this split in the town? Why are some pixies sad and others happy? Because a story is being established, the player might now start thinking into the future. What might happen if I start investigating the town? Will the bright pixies start to become mean if I help the sad pixies?<\/p><p>This is all set up without a word of dialog. From here, a game designer might start to use dialog trees or dialog one-offs to further tell the tale of this town's troubles and immerse the player in exploring it. It is important to remember, no matter what methods or techniques a game designer chooses, consistent tone and mood are crucial to creating dramatic themes. There should be a limit in how many tonal changes a game is willing to go through. If pixies are illustrated as cute, lovable, fantasy creatures, then perhaps caution is called for if the next step is to give them laser beam eyes that turn people into robots.<\/p><\/div><a class=\"dest\" id=\"developing-story-in-video-games-3\"><\/a>&nbsp;<div class=\"accent\"><h1>Categories of Game Narratives<\/h1><p>Video games are unique as a storytelling medium in that they do not have to tell just one story. That is to say, a book or a movie never changes from one viewing to the next. We as the audience may change and find new insight or criticism in the story, but the story itself plays out exactly the same every time. This is not necessarily true or even desirable in a video game. Because of the depth and variety a game can offer over another medium, games have many other narrative options. These include games that have more than one narrative, games that change the story based on player actions or decisions and games that allow players to make up their own stories.<\/p><h3>Linear Paths<\/h3><img class=\"aligncenter\" src=\".\/images\/image_linearworld.png\" alt=\"image_linearworld\" width=\"545\" height=\"478\" \/><p>A linear narrative means that the story will be told from start to finish, and it will never vary in its delivery of plot points. Typically games with linear narratives will also have linear game design. For these types of games the story is meant to accentuate the gameplay not be a part of it. The story helps fill in the details to push some level of immersion but the goals of the player are not affected by knowing the story. Whether they follow the story or not, they will still play the game in the same way. They may enjoy the game less (or more if the story is bad) but it doesn't matter in terms of completing the game. This does not mean the story must be trivial or small. Linear narratives can create amazing stories within games, they just don't affect gameplay. <em>Halo<\/em>, for example, has a fairly detailed and engaging story, but it is entirely optional for the player to follow along. Not following the story does not stop the player from moving through the game just fine.<\/p><h3>Branching Narratives<\/h3><img class=\"aligncenter\" src=\".\/images\/image_branchingnarrative.png\" alt=\"image_branchingnarrative\" width=\"797\" height=\"530\" \/><p>Games that utilize branching narratives offer a little more to players in terms of story variation. Branching narratives means that players are offered some choices that will change some aspects of the story. This is done through creating multiple separate paths for the character to take that moves them from one story to another. It is a digital fork in the road where one direction is a completely different story than the other. Sometimes when a “road” is chosen, it is irreversible. The other path becomes blocked off permanently unless the player starts over and chooses the other path when they reach that point in the game again. This cut-off is often done for story reasons. To allow both paths would create story contradictions. For example, the player may be offered the chance to save a town from a wizard or join the wizard in turning everyone into frogs. Once the player chooses one, the other one is no longer an option. There is still some obvious game engineering going on in the player's head as they witness these branching narratives. They can imagine where each choice leads and make some conscious decision on how to play the game. However, this implies that they care. If the choices and decisions seem forced, clichéd, or uninteresting, then they have failed as a feature of the game. They must also be balanced. If one path leads to an immediate game over situation and the other leads to hours of fun and engagement, then there is a serious problem with the branching narratives in that game. Once again, storytelling in games needs to be more than great plot and structure; it needs to work within the game itself. Finally, branching narratives are going to take much more time and planning in the game design stage of pre-production than a linear narrative, because there is so much complexity in design and material to be utilized.<\/p><h3>Implied Narratives<\/h3><p>Some games do not have a structured narrative, but instead offer an implied narrative. This means that the game simply presents a world to explore without any story elements beyond interacting with the world. What makes this kind of game work, typically, is that it is built to be a massive multiplayer online game (MMO). When lots of people share a world with an implied narrative, the players themselves create the stories in the game.<\/p><img class=\"aligncenter\" src=\".\/images\/image_sims.png\" alt=\"image_sims\" width=\"335\" height=\"473\" \/><p>Consider simulation games like <em>SIMS<\/em>. These worlds offer players things to do, but no real storylines to follow. However, there are few to no restrictions in how a player chooses to explore the world. And their experience in the world will be completely unique for them. This is because they will interact with perhaps hundreds of other players that fill in their own “character dialog” with unpredictable statements in real-time. Of course, no amount of dialog planning can achieve this level of diversity and variation. So, on a plus side, players form their own motivations for playing in the world, mostly based off their ability to play completely free-form. This free-form style of play then generates its own storylines depending on what players decide they want to do. On the negative side, this type of game requires lots of diverse players to generate story content. From a game design point of view, to achieve this type of narrative, the game must present a lot of activities for player to do, and these activities must in some way define who they are in the game. From there, player interaction and imagination take over.<\/p><\/div><a class=\"dest\" id=\"developing-story-in-video-games-4\"><\/a>&nbsp;<div class=\"accent\"><h1>Story Intent vs. Player Actions<\/h1><img class=\"aligncenter\" src=\".\/images\/image_characterarc2.png\" alt=\"image_characterarc2\" width=\"793\" height=\"466\" \/><p>So now that we have chosen our style of narrative, what could go wrong? Here we return to our discussions on flow and pacing. The problem we now face is a conflict of the game designer's intended story and the misperception of that story due to player actions. It happens like this:<\/p><p>Imagine a game that has all the whistles and bells of a great looking open world setting. The game designer threw in cutscenes, dialog trees, and even ambient sounds and experiences. And, of course, there is a rich story that unfolds in a sequence that maximizes pacing and flow. The intention of the game is for the player to become a hero from humble roots and to face the Dark Power that sweeps over the land. We can think of this story as the Intended Story of the game. There is, however, another story that the designers can't avoid, the Gameplay Story.<\/p><h3>Intended Story vs. Gameplay Story<\/h3><img class=\"aligncenter\" src=\".\/images\/image_cutscene.png\" alt=\"image_cutscene\" width=\"835\" height=\"407\" \/><p>The idea is that all games tell two stories. The Intended Story is the sum of cutscenes, dialog, dialog trees, visual clues and all of the story elements the authors put into the game to tell the story they created for the game. The Gameplay Story is the story that actually plays out for the player as they play the game. It is the story that surfaces through how the player chooses to play the game.<\/p><p>For example, the designers may have a quest that brings the player to a village in need of the player's help. In this village are NPCs who will talk to the PC and direct him or her to the problem the designers have programmed for the PC to fix. Perhaps there is even a cutscene to introduce the village and give the player a sense of what heroic deed needs to be done. If the player approaches this area of the world as intended, they will enter the village aware that a problem exists. Their time in this village is paced out nicely by having the PC talk to villagers and find clues to the “monster”. We achieve flow as each sequence of actions the player does takes them closer to their goal, trains them in meaningful skills, and motivates them to continue forward.<\/p><p>Now, imagine if the player doesn't approach the village as intended. First, they skip the cutscene. Perhaps they are tired of breaks in the action. Perhaps the game has too many cutscenes that are dull. For whatever they choose to ignore it, they have now started to alter the in-game experience the authors intended. Next, let's pretend the player decides not to talk to anyone but instead wants to cast his ‘fear spell' on random villagers. As the player walks around the village scaring people with his or her magic ability, they discover the dark cave the NPCs would have directed them to. They enter it and defeat the monster.<\/p><p>As we can see, this scenario plays out much differently than the author's intentions. The player skipped many of the elements that were designed to create a coherent story. They have messed up pacing by not following the procedures the designers wanted them to. They have also caused a ripple effect throughout the rest of the game by not playing the game as they were supposed to. Perhaps talking to a certain villager was required to gain an item after the monster is defeated and now that item is unobtainable.<\/p><p>The point is, because of a game's interactive nature, the story the author designs in the game, may not be the story the player actually sees if they make choices the game designers could not, or did not predict. The game assumes a certain course of action from the player and even went out of its way with dialog and visuals to push the player in that direction. However, by choosing to allow player options and a non-linear story path, there is great potential for the Gameplay story to overwhelm the Intended Story. This may be great fun for the player for a while, but ultimately it shortens or eliminates content, pacing, and flow as the player quickly becomes bored in the world.<\/p><p>As a game designer, it is important to keep these kinds of unintended consequences in mind. Each game must find its own balance in terms of linear vs. non-linear paths, plot devices, and a player's freedom to create their own, personalized stories and experiences.<\/p><h3>Embedded Narratives<\/h3><p>A game designer can avoid most of the issues of a player's play-style conflicting with the Intended Story by eliminating options that alter the story. When this is done it is called an Embedded Story. There is nothing the player can do to alter the story, no actions they can take to not make the game progress as designed except failure in moving down a set linear path. In this case, the player might have only one unavoidable path leading to that village which triggers a cutscene the player must watch. In addition, the NPCs could approach the PC and automatically tell them the information the designers want them to have. Finally, with information in hand, the only path from there leads directly to the cave and the encounter that fuels the story from here.<\/p><p>This method solves the issue of the Gameplay Story overwhelming the Intended Story; however, it has its own problems. First and foremost, if a designer is going to force a player to absorb every single plot point and then demand they play the game in a perfect linear path, then the gameplay and story had better be spectacular. In other words, if the player only has one option to find “flow” then that option has to deliver. Another issue is game designed like this can start to feel more like a movie than a game. There is a risk that mechanics aren't deep or meaningful, but instead are just pointless exercises to keep the story going.<\/p><\/div><a class=\"dest\" id=\"developing-story-in-video-games-5\"><\/a>&nbsp;<div class=\"accent\"><h1>Sample Cutscene<\/h1><img class=\"aligncenter\" src=\".\/images\/image_characters2.png\" alt=\"image_characters\" width=\"957\" height=\"519\" \/><p>We have looked at creating characters, discussed narratives, and examined how these elements can blend in unexpected ways to create and control pacing and flow. Now we will focus a bit on creating good stories. As mentioned, the cutscene is an effective way to advance story in a game; but only if it has intriguing characters and a tight, compelling plot. Looking back at the Characters Module, we see we want to deliver information to the player in a way that feels natural. The goal is to “bury the exposition” in sharp dialog that entertains as it informs. Below is a sample script that could be a cutscene introducing a game or a new level.  The goals we will set for ourselves in this example are as follows:<\/p><p>We will write a short cutscene, in script format, using the three characters we created in the Character's Module. Through dialog and setting we need to impart the following information to the player:<\/p><ol><li>The setting is in the woods, near an old water pump station.<\/li><li>Our three characters are preparing for a dangerous mission, where they must rescue a group of people trapped by monsters.<\/li><li>Each character has a unique personality and voice and each has a motivation.<\/li><li>One of the characters has a family member among those to be rescued.<\/li><li>The group is desperate and the odds are against them.<\/li><li>To lead to the designed gameplay after the cutscene, we need to set up that one of the characters will need to pick a lock while the others defend against the monsters.<\/li><li>The monsters are scary and dangerous to even be close to.<\/li><\/ol><p>Okay, let's see what we can do to impart all of this while burying the exposition in great dialog and character interaction. Note that this is written in a non-standard film script format.<\/p><p>FADE IN<\/p><p>Close on a man's rugged face<\/p><p>He holds a pained expression and rubs his forehead with his thumb and finger as a sudden and extreme headache hits him.<\/p><p>PULL BACK TO REVEAL FRANK ON A...<\/p><p>EXT. RUINED FOREST TRAIL – DAY<\/p><p>The sky is an unnatural hue of swirling yellows and greys.<\/p><p>All is silent and still.<\/p><p>No birds sing.<\/p><p>No wind blows.<\/p><p>Around him, what were once giant redwoods, are now branchless husks coated with a wet membrane-like material.  Everywhere, sheets of putrid wet membranes lay draped over ferns and rocks.  Two other people, ROLLAND and KEIRA are on the road with Frank. Rolland stands next to Frank as Keira slightly ahead of them, continues walking.<\/p><p><strong>FRANK; <\/strong>Keira, stop. We're close.<\/p><p>She stops. Rolland rubs his head in pain.<\/p><p><strong>ROLLAND: <\/strong>Of course we're close. My brain has turned into a runaway train crashing into my forehead.<\/p><p>Frank scowls at Rolland as Keira crouches and pulls a map from her backpack. Frank waits quietly beside her, studying her as she studies the map. Rolland gets anxious and begins rambling.  Frank and Keira ignore him.<\/p><p><strong>ROLLAND <\/strong>(CONT'D): Did you know bears really stink? I mean, I've heard bears really stink. They say you can't really just accidentally trip over a bear in the woods because their smell is so horrible. And surprisingly, polar bears are supposed to be the worst.<\/p><p>Frank and Keira continue to ignore him.<\/p><p><strong>ROLLAND<\/strong> (CONT'D); Anyway, it was surprising to me. I was just mentioning it because I thought it was appropriate; because if it were a bear we were after, we'd probably be smelling it right now...<\/p><p><strong>KEIRA: <\/strong>The pump station should be just up ahead.<\/p><p>Keira marches forward, her face stern against the pain.<\/p><p><strong>ROLLAND: <\/strong>...Instead of bleeding our brains out of our ears.<\/p><p>Frank gives Rolland a hard stare.  Rolland goes for broke.<\/p><p><strong>ROLLAND<\/strong> (CONT'D): Did you ever have to fight a bear in the marines, Frank?<\/p><p><strong>FRANK: <\/strong>Don't you ever shut up?<\/p><p><strong>ROLLAND: <\/strong>I was just trying to ease the tension a bit.<\/p><p><strong>FRANK: <\/strong>I like my tension how it is.<\/p><p>Rolland and Frank come around the bend in the road to see Keira perched on a rock. She wears an odd looking set of eye goggles made of thick copper.  It is covered in various dials and levers.<\/p><p><strong>FRANK<\/strong> (CONT'D): Get down from there, they'll see you!<\/p><p><strong>KEIRA: <\/strong>They're blind.<\/p><p><strong>FRANK: <\/strong>You know what I mean, they'll sense you or whatever.<\/p><p><strong>KEIRA: <\/strong>Then the rock won't matter.<\/p><p>Keira starts working the dials on the goggles, her face straining with pain as she does.<\/p><p>ANGLE THROUGH KEIRA'S GOGGLES<\/p><p>As lenses flip, Keira's vision penetrates through the thick canopy of dead trees as they become suddenly ghostly and then disappear. As the trees clear, she sees an old pump station.  It is a rusted metal shack with a metal door and a concrete foundation. Yellow and red ichor covers the door.  What appears to be a massive claw mark runs down the top, ending at a bent door handle. A human arm lies on the ground nearby.<\/p><p><strong>KEIRA <\/strong>(CONT'D): I can see the pump house.  The lock on the door looks like it's been damaged.<\/p><p><strong>ROLLAND: <\/strong>That could be a problem.<\/p><p>BACK TO SCENE<\/p><p><strong>FRANK: <\/strong>Good to know.  Now come down and take those things off.<\/p><p><strong>KEIRA: <\/strong>Not yet - I'm going to look inside the pump house.<\/p><p>ANGLE THROUGH KEIRA'S GOGGLES<\/p><p>As dials turn and lenses flip, the pump house starts to fade into a translucent haze, becoming incorporeal.  Our vision now penetrates the walls to reveal three human figures huddled together in the darkness.  A fourth figure leans motionless against a far wall, his left arm missing.  A broken pumping machine fills the rest of the space with two large pipes running from the ground to the back wall.<\/p><p>BACK TO SCENE<\/p><p><strong>KEIRA: <\/strong>I see them!  My sister is there!<\/p><p>Keira's eyes start to tear and her faces grows red with strain.<\/p><p><strong>FRANK: <\/strong>Now get down!<\/p><p><strong>ROLLAND: <\/strong>Wait a second, since you got the peepers on, how about taking a peek around for those things.<\/p><p>Frank looks like he wants to strangle Rolland for saying it but knows it must be done.<\/p><p>ANGLE THROUGH KEIRA'S GOGGLES<\/p><p>Keira pans around the outside of the pump house, again flipping dials and lenses.  As the material world returns to view, three large CREATURES focus into frame near the pump station.  Their skin is grey and gaunt but hard and smooth, with barbed plates jutting from their spines.  Their chests are oversized for the rest of their bodies and their rib-cages show through in vile detail.  Their arms are long and thin but end in three razor sharp claws that drip a vile yellow substance.  On their shoulders sit skeletal-like heads that resemble some sort of dark sea angler fish nightmare, complete with a protruding pineal gland in the forehead.<\/p><p>A dial on the goggles turns and we CLOSE IN on one of them; seeing greater detail of the awful thing.  Its vile appendage slowly turns directly at camera.<\/p><p>BACK TO SCENE<\/p><p>Keira muffles her scream as she jumps behind the rock.  We see her heavy breathing as sweat beads on her forehead and blood flows from her left nostril.  Frank quickly removes the goggles.<\/p><p><strong>FRANK: <\/strong>You should have stopped!<\/p><p>Frank removes a rag from his pocket and starts to wipe Keira's face.  She pushes him off and stands.<\/p><p><strong>KEIRA: <\/strong>I'm okay. We don't have much time!<\/p><p><strong>ROLLAND: <\/strong>Hold on, how many did you see? I'm all for a rescue mission but not a suicidal one.<\/p><p>Keira's considers hard, then...<\/p><p><strong>KEIRA: <\/strong>There's only one.<\/p><p>Rolland looks skeptical.<\/p><p><strong>ROLLAND: <\/strong>Well that's a first.<\/p><p>Frank stares intently at Keira. Her eyes desperately plead back at him. He makes his choice.<\/p><p><strong>FRANK: <\/strong>You heard her. Just the one. Besides, all you have to do is get the door open...we'll do the rest.<\/p><p>Off Rolland, wary.<\/p><\/div><!--page:~~developing-story-in-video-games-reference-text~~-->","title":"Reference Material"},{"bIsChecked":true,"exercise":".\/exercise\/DevProFreebirdStory.stack","instructions":"<h1>Goals<\/h1><ol><li>Learn how to customize sprite text in Game Stack.<\/li><li>Build a version of the Freebird game that contains your own story text.<\/li><\/ol>        <h1>Steps<\/h1><ol><li>Click the <img src=\".\/images\/downloadbutton.png\" alt=\"layout.png\"\/> button at the top or bottom of this page to download the DevProFreebirdStory.stack file.<\/li><li>Save the file to a location you can access on your computer.<\/li><li>Click to open the file in Game Stack.<\/li><img class=\"aligncenter\" src=\".\/images\/gamestory-gameloaded.png\" alt=\"layout.png\"\/><li>Modify the game's introduction text:<p>When the player clicks on the main menu they are taken to an introduction of the game. This introduction is a sprite that contains mainly text.<\/p><ol class=\"alpha\"><li>Click on the Game Introduction sprite and select its Costumes tab.<\/li><img class=\"aligncenter\" src=\".\/images\/gamestory-introductionsprite.png\" alt=\"layout.png\"\/><li>This sprite's only costume is in Vector Mode, which allows us to easily modify all elements of the costume, including the text that is on it. Double click on the existing text, or use the Text tool to enter text. Type in an introduction to the Freebrid game that sets up your own story.<\/li><img class=\"aligncenter\" src=\".\/images\/gamestory-introductiontext.png\" alt=\"layout.png\"\/><\/ol><\/li><li>Modify the game won text:<ol class=\"alpha\"><li>Click on the Game Won Text sprite and select its Costumes tab.<\/li><li>Double click on the existing text, or use the Text tool to enter in some text. Type in a message to the player that indicates the player has won the game.<\/li><img class=\"aligncenter\" src=\".\/images\/gamestory-gamewontext.png\" alt=\"layout.png\"\/><\/ol><\/li><li>Modify the game lost text:<ol class=\"alpha\"><li>Click on the Game Lost Text sprite and select its Costumes tab.<\/li><li>Double click on the existing text, or use the Text tool to enter in some text. Type in a message to the player that indicates the player has lost the game.<\/li><img class=\"aligncenter\" src=\".\/images\/gamestory-gamelosttext.png\" alt=\"layout.png\"\/><\/ol><\/li><li>Modify the cell mate's text:<p>The cell mate is a character in the game that accepts items from the player's inventory, and provides the player with directions and hints. He has a number of speech bubbles that are displayed depending on the game's current state and the player's last actions. All of this text may be modified to fit our new story.<\/p><ol class=\"alpha\"><li>Click on the Cell Mate Chat sprite and select its Costumes tab.<\/li><li>Choose the first costume, which is shown when the player clicks on the cell mate. Double click on the existing text, or use the Text tool to enter in some text. Type in a message to the player that indicates the cell mate would like to have something to eat.<\/li><img class=\"aligncenter\" src=\".\/images\/gamestory-chat1.png\" alt=\"layout.png\"\/><li>Click on the second costume, which is shown when the player gives the cell mate the hot pepper. Double click on the existing text, or use the Text tool to enter in some text. Type in a message to the player that indicates the cell mate doesn't like what he has been given.<\/li><img class=\"aligncenter\" src=\".\/images\/gamestory-chat2.png\" alt=\"layout.png\"\/><li>Click on the third costume, which is shown when the player gives the cell mate some water after having eaten the hot pepper. Double click on the existing text, or use the Text tool to enter in some text. Type in a message to the player that indicates the cell mate is glad that situation is over.<\/li><img class=\"aligncenter\" src=\".\/images\/gamestory-chat3.png\" alt=\"layout.png\"\/><li>Click on the 4th costume, which is shown when the cell mate has been given the hot pepper and either the player clicks on him, or tries to give him something other than water. Double click on the existing text, or use the Text tool to enter in some text. Type in a message to the player that indicates the cell mate would like some water now.<\/li><img class=\"aligncenter\" src=\".\/images\/gamestory-chat4.png\" alt=\"layout.png\"\/><li>The 5th, 6th, and 7th costumes are displayed, in order, after the cell mate has been given some seeds (and is not in hot pepper mode). Modify the text in these three chat bubbles to thank the player for the food and to indicate that the cell mate will now pass along a hint.<\/li><img class=\"aligncenter\" src=\".\/images\/gamestory-chat5.png\" alt=\"layout.png\"\/><li>Costumes 8 through 11 are the random hints that the cell mate provides when given food. Modify the text in each of these four chat bubbles to give the player some hints on finishing the game.<\/li><img class=\"aligncenter\" src=\".\/images\/gamestory-hint1.png\" alt=\"layout.png\"\/><\/ol><\/li>    <li>Play the Freebird game and see how your new story flows:<ol class=\"alpha\"><li>Click the <img src=\".\/images\/gamestackflag.png\" alt=\"gamestackflag.png\"\/> to start the game. You may choose to use the <img src=\".\/images\/gamestackfullscreen.png\" alt=\"gamestackfullscreen.png\"\/> button to play the game in full screen mode.<\/li><li>Play through the game to the end to see how your own changes affect the feel of the game. Be sure to try both the won and lost paths.<\/li><li>When you are done, stop the game and go back to editing it.<\/li><\/ol><\/li><li>Consider the following questions<ol class=\"alpha\"><li>How does changing only the game's text modify the feel and flow of the game?<\/li><li>How does the text you've chosen change the difficulty of the game?<\/li><li>What other areas of the game would benefit from additional text?<\/li><li>What if all text were to be replaced with images? Would it be possible to play the game with a change like this?<\/li><\/ol><\/li><li>Submit your final work:<ol class=\"alpha\"><li>Save a .stack file of your version of the game.<\/li><li>On a separate piece of paper, write a summary of any issues you had while changing the game's text and explain what you did to overcome these issues.<\/li><li>After your summary, write a cut scene between the cell mate and the player for when the player first wakes up in the cage.<\/li><li>Follow your teachers instructions to submit the .stack file and your written paragraphs to complete the exercise.<\/li><\/ol><\/li>    <\/ol><h1>Extra Credit<\/h1><ol><li>Use the Game Stack vector drawing tools to change the size of the cell mate's chat bubbles. Make them larger so the cell mate has more room to chat.<\/li><li>Combine your changes here with those from the Developing Characters in Video Games module.<\/li><li>Replace all of the game's text with images to get your story idea across.<\/li><li>Have the light switch use the 'say' or 'think' code block to say or think something when the 'Light On' event is received. Do the same for when the 'Light Off' event is received.  Have the water bottle and seed bowl also respond to these events and say or think something.<\/li><li>Have the water bottle or seed bowl use the 'say' or 'think' code blocks to say or think something every time they are clicked on. Use the 'when this sprite clicked' event to trigger the 'say' or 'think' block. You could expand on this and randomly select what each object says or thinks each time they are clicked.<\/li><\/ol>        <!--page:~~developing-story-in-video-games-gamestack-exercise~~-->","link":null,"mod":"developing-story-in-video-games","movie":null,"name":"developing-story-in-video-games-gamestack-exercise","promptfile":null,"prompts":null,"reference":null,"text":null,"title":"Game Stack Exercise"},{"bIsChecked":true,"exercise":"","instructions":"<h1>Goal<\/h1><p>Develop creative writing skills by writing an original backstory for a game.<\/p><h1>Steps<\/h1><ol><li> Download and examine the Freebird exercise in the Developing Story in Video Games Module. Note that it requires a creative writing task that could correspond with this exercise.<\/li><li> Write an original short backstory (100 words maximum) for Freebird. Keep in mind:<ol><li> The story should relate to the visuals and gameplay.<\/li><li> The story should entice the reader to play the game, but is not a set of instructions.<\/li><li> It is a silly game so have fun and be creative.<\/li><\/ol><\/li><li>For a challenge, choose one or more additional Game Stack games for other modules and write a backstory for them, as well.<\/li><\/ol><h1>Hints and Challenges<\/h1><p>A good story works in concert with the visuals and sound effects of the game. Setting the right tone is crucial so make sure your story matches the nature of the game's graphics and audio.<\/p><!--page:~~developing-story-in-video-games-writing-exercise~~-->","link":null,"mod":"developing-story-in-video-games","movie":null,"name":"developing-story-in-video-games-writing-exercise","promptfile":null,"prompts":null,"reference":null,"text":null,"title":"Writing Exercise"}]},{"bIsChecked":true,"name":"level-design-and-environments","title":"Level Design and Environments","topics":[{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"level-design-and-environments","movie":".\/video\/leveldesign-overview-all-micro-1.mp4","name":"Overview","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"Linear"},{"order":0,"points":0,"sticky":false,"text":"Platform\u0009   "},{"order":0,"points":100,"sticky":false,"text":"Level"},{"order":0,"points":0,"sticky":false,"text":"Symmetric "}],"failure":{"button":null,"message":"Level design is often associated with environment design in a video game."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn1-leveldesign-overview-all-micro-1","number_of_choices":4,"question":"_____ design is a technical process that lays out the themes, mechanics, and concepts of a section of a game.","start":3600,"success":{"button":null,"message":"Level design is often associated with environment design in a video game."},"type":null}],"reference":"level-design-and-environments-1","text":null,"title":"Overview"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"level-design-and-environments","movie":".\/video\/leveldesign-goals-intro-micro-1.mp4","name":"Level Design Goals","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"game design"},{"order":0,"points":0,"sticky":false,"text":"animation  "},{"order":0,"points":0,"sticky":false,"text":"management"},{"order":0,"points":0,"sticky":false,"text":"pre-production"}],"failure":{"button":null,"message":"Many senior game designers were once level designers. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn2-leveldesign-goals-intro-micro-1","number_of_choices":4,"question":"Level design is a branch of _____.","start":3600,"success":{"button":null,"message":"Many senior game designers were once level designers. "},"type":null}],"reference":"level-design-and-environments-2","text":null,"title":"Level Design Goals"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"level-design-and-environments","movie":".\/video\/leveldesign-goals-flow-micro-2.mp4","name":"What is Flow?","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"John Nash"},{"order":0,"points":100,"sticky":false,"text":"Mihaly Csikszentmihalyi \u0009   "},{"order":0,"points":0,"sticky":false,"text":"Alexy Pajitnov"},{"order":0,"points":0,"sticky":false,"text":"Eugene Goostman"}],"failure":{"button":null,"message":"Flow is loosely defined, but most people know it when they experience it in a good video game. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn3-leveldesign-goals-flow-micro-2","number_of_choices":4,"question":"Flow is an abstract notion of fun first presented by _____.","start":3600,"success":{"button":null,"message":"Flow is loosely defined, but most people know it when they experience it in a good video game. "},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"pacing; cut scenes"},{"order":0,"points":0,"sticky":false,"text":"obstacles; experience points \u0009   "},{"order":0,"points":100,"sticky":false,"text":"pacing; balance "},{"order":0,"points":0,"sticky":false,"text":"balance; power ups"}],"failure":{"button":null,"message":"Through pacing and balance, level designers guide players through a level in a manner that is fun and \"flows\". "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn4-leveldesign-goals-flow-micro-2","number_of_choices":4,"question":"In level design, flow can be achieved through _____ and _____.","start":3600,"success":{"button":null,"message":"Through pacing and balance, level designers guide players through a level in a manner that is fun and \"flows\". "},"type":null}],"reference":"level-design-and-environments-2","text":null,"title":"What is Flow?"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"level-design-and-environments","movie":".\/video\/leveldesign-goals-flowconstraints-micro-3.mp4","name":"Constraints","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"Giving players a destination within the level."},{"order":0,"points":0,"sticky":false,"text":"Giving players an obvious path to arrive at the destination.\u0009   "},{"order":0,"points":0,"sticky":false,"text":"Giving players a task upon arriving at a destination."},{"order":21,"points":100,"sticky":false,"text":"All of the above."}],"failure":{"button":null,"message":"These three goals help achieve that nebulous state of flow for players. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn5-leveldesign-goals-flowconstraints-micro-3","number_of_choices":4,"question":"Which of the following is a goal of good level design?","start":3600,"success":{"button":null,"message":"These three goals help achieve that nebulous state of flow for players. "},"type":"Multiple"},{"choices":[{"order":0,"points":100,"sticky":false,"text":"physical barriers "},{"order":0,"points":0,"sticky":false,"text":"collectables\u0009   "},{"order":0,"points":0,"sticky":false,"text":"combat encounters"},{"order":0,"points":0,"sticky":false,"text":"power ups"}],"failure":{"button":null,"message":"Physical barriers count as obstacles in level design and limit where a player can go in ways that feel natural to the environment.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn6-leveldesign-goals-flowconstraints-micro-3","number_of_choices":4,"question":"Level designers can limit a player's ability to take wrong paths in levels by placing _____ in the environment.","start":3600,"success":{"button":null,"message":"Physical barriers count as obstacles in level design and limit where a player can go in ways that feel natural to the environment.  "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"conflicts "},{"order":0,"points":100,"sticky":false,"text":"logically "},{"order":0,"points":0,"sticky":false,"text":"asymmetrically "},{"order":0,"points":0,"sticky":false,"text":"symmetrically "}],"failure":{"button":null,"message":"A mesa wall in a canyon makes logical sense while an impenetrable row of bamboo does not. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn7-leveldesign-goals-flowconstraints-micro-3","number_of_choices":4,"question":"The key to well-placed physical barriers in level design is to make them match _____ to the environment.","start":3600,"success":{"button":null,"message":"A mesa wall in a canyon makes logical sense while an impenetrable row of bamboo does not. "},"type":"Multiple"}],"reference":"level-design-and-environments-2","text":null,"title":"Constraints"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"level-design-and-environments","movie":".\/video\/leveldesign-goals-linearpath-micro-4.mp4","name":"Linear Paths","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"symmetric "},{"order":0,"points":100,"sticky":false,"text":"linear\u0009   "},{"order":0,"points":0,"sticky":false,"text":"open world"},{"order":0,"points":0,"sticky":false,"text":"zero-sum"}],"failure":{"button":null,"message":"Linear level design is easier than open world design, but limits a player's options of exploring a level. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn8-leveldesign-goals-linearpath-micro-4","number_of_choices":4,"question":"A video game environment that offers a player only one direction or path is designed with a(n) _____ level design.","start":3600,"success":{"button":null,"message":"Linear level design is easier than open world design, but limits a player's options of exploring a level. "},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"NPCs"},{"order":0,"points":0,"sticky":false,"text":"combat   "},{"order":0,"points":100,"sticky":false,"text":"obstacles"},{"order":0,"points":0,"sticky":false,"text":"puzzles"}],"failure":{"button":null,"message":"Obstacles help level designers control pace and create natural choices for players while they explore through a game's linear paths. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn9-leveldesign-goals-linearpath-micro-4","number_of_choices":4,"question":"Levels with a linear design need _____ to control pace and eliminate boredom. ","start":3600,"success":{"button":null,"message":"Obstacles help level designers control pace and create natural choices for players while they explore through a game's linear paths. "},"type":null}],"reference":"level-design-and-environments-2","text":null,"title":"Linear Paths"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"level-design-and-environments","movie":".\/video\/leveldesign-goals-obstacles-micro-5.mp4","name":"Obstacles","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"challenges"},{"order":0,"points":0,"sticky":false,"text":"experience points "},{"order":0,"points":0,"sticky":false,"text":"dominate strategies "},{"order":0,"points":0,"sticky":false,"text":"breadcrumbs"}],"failure":{"button":null,"message":"Obstacles allow players to use and develop in-game skills. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn10-leveldesign-goals-obstacles-micro-5","number_of_choices":4,"question":"Obstacles are _____ that players must overcome to progress in a game.  ","start":3600,"success":{"button":null,"message":"Obstacles allow players to use and develop in-game skills. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"A group of hostile goblins."},{"order":0,"points":0,"sticky":false,"text":"A dangerous cliff of falling rocks."},{"order":0,"points":0,"sticky":false,"text":"A gap in a bridge that must be crossed. "},{"order":21,"points":100,"sticky":false,"text":"All of the above. "}],"failure":{"button":null,"message":"An obstacle can be just about any challenge a player must conquer before moving forward in the game. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn11-leveldesign-goals-obstacles-micro-5","number_of_choices":4,"question":"Which of the following would be considered an obstacle in a video game?","start":3600,"success":{"button":null,"message":"An obstacle can be just about any challenge a player must conquer before moving forward in the game. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"life points"},{"order":0,"points":0,"sticky":false,"text":"extra time"},{"order":0,"points":0,"sticky":false,"text":"optimum strategies  "},{"order":0,"points":100,"sticky":false,"text":"made choices  "}],"failure":{"button":null,"message":"Good level design should discourage bad choices and encourage good choices while still leaving the player in control of their actions. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn12-leveldesign-goals-obstacles-micro-5","number_of_choices":4,"question":"Good level design will encourage players to take certain paths while still making players feel like they have _____.","start":3600,"success":{"button":null,"message":"Good level design should discourage bad choices and encourage good choices while still leaving the player in control of their actions. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"micro-transactions"},{"order":0,"points":0,"sticky":false,"text":"power-ups"},{"order":0,"points":100,"sticky":false,"text":"new skill mastery   "},{"order":0,"points":0,"sticky":false,"text":"downloadable content  "}],"failure":{"button":null,"message":"Making a path difficult for a player until they obtain a certain level of skill mastery is one way level designers discourage players from trying to progress too fast through a game's environment. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn13-leveldesign-goals-obstacles-micro-5","number_of_choices":4,"question":"One way good level designers discourage players from making bad choices in choosing paths through an environment is to require _____ in order to proceed.","start":3600,"success":{"button":null,"message":"Making a path difficult for a player until they obtain a certain level of skill mastery is one way level designers discourage players from trying to progress too fast through a game's environment. "},"type":"Multiple"}],"reference":"level-design-and-environments-2","text":null,"title":"Obstacles"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"level-design-and-environments","movie":".\/video\/leveldesign-environment-intro-micro-1.mp4","name":"Environment Building","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"protection"},{"order":0,"points":0,"sticky":false,"text":"control"},{"order":0,"points":100,"sticky":false,"text":"clues"},{"order":0,"points":0,"sticky":false,"text":"breadcrumbs"}],"failure":{"button":null,"message":"Just touching a ring in Sega's Sonic the Hedgehog visually teaches players all they need to know about the value of collecting them. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn14-leveldesign-environment-intro-micro-1","number_of_choices":4,"question":"One, often overlooked design tool is giving a player simple, visual environmental _____. ","start":3600,"success":{"button":null,"message":"Just touching a ring in Sega's Sonic the Hedgehog visually teaches players all they need to know about the value of collecting them. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"consequences"},{"order":0,"points":0,"sticky":false,"text":"they are playing a genre game   "},{"order":0,"points":100,"sticky":false,"text":"in charge of their actions"},{"order":0,"points":0,"sticky":false,"text":"frustrated"}],"failure":{"button":null,"message":"Good visual clues in level design gives a player of feeling of discovery and a sense of being in control of their own choices and actions. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn15-leveldesign-environment-intro-micro-1","number_of_choices":4,"question":"By allowing players to figure out how to navigate a level with visual clues, players feel _____. ","start":3600,"success":{"button":null,"message":"Good visual clues in level design gives a player of feeling of discovery and a sense of being in control of their own choices and actions. "},"type":"Multiple"}],"reference":"level-design-and-environments-3","text":null,"title":"Environment Building"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"level-design-and-environments","movie":".\/video\/leveldesign-environment-clues-micro-2.mp4","name":"Environmental Clues","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"a deep sea adventure"},{"order":0,"points":0,"sticky":false,"text":"an epic space opera\u0009   "},{"order":0,"points":0,"sticky":false,"text":"micro-transaction options to buy hats"},{"order":0,"points":100,"sticky":false,"text":"the need to develop climbing skills"}],"failure":{"button":null,"message":"Having a character dressed as a climber in a game that will require climbing is a good way to indicate what skills players will want to develop. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn16-leveldesign-environment-clues-micro-2","number_of_choices":4,"question":"As an example of a visual clue in a video game, a player might see their character dressed in climbing gear, indicating _____.","start":3600,"success":{"button":null,"message":"Having a character dressed as a climber in a game that will require climbing is a good way to indicate what skills players will want to develop. "},"type":null},{"choices":[{"order":0,"points":100,"sticky":false,"text":"A wide gap on a mountain path"},{"order":0,"points":0,"sticky":false,"text":"A goblin\u0009   "},{"order":0,"points":0,"sticky":false,"text":"An impassable river"},{"order":0,"points":0,"sticky":false,"text":"A mysterious alien ship"}],"failure":{"button":null,"message":"Players figuring out clues without direct exposition allows them to feel positive about their understanding of the game and promotes \"flow\".  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn17-leveldesign-environment-clues-micro-2","number_of_choices":4,"question":"_____ is an example of an environmental clue that tells a player they might want to experiment with their controller to master jumping.","start":3600,"success":{"button":null,"message":"Players figuring out clues without direct exposition allows them to feel positive about their understanding of the game and promotes \"flow\".  "},"type":null},{"choices":[{"order":0,"points":100,"sticky":false,"text":"logically"},{"order":0,"points":0,"sticky":false,"text":"symmetrically    "},{"order":0,"points":0,"sticky":false,"text":"asymmetrically"},{"order":0,"points":0,"sticky":false,"text":"proportionally "}],"failure":{"button":null,"message":"Avoid conflicting visuals such as a whale in a dessert unless there is a good, creative reason that fits the logic of the world. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn18-leveldesign-environment-clues-micro-2","number_of_choices":4,"question":"Visual clues must fit _____ into the environment to give meaningful information to a player and be effective.  ","start":3600,"success":{"button":null,"message":"Avoid conflicting visuals such as a whale in a dessert unless there is a good, creative reason that fits the logic of the world. "},"type":null}],"reference":"level-design-and-environments-3","text":null,"title":"Environmental Clues"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"level-design-and-environments","movie":".\/video\/leveldesign-environment-tricks-micro-3.mp4","name":"Environmental Design Tricks","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"32-bit graphics"},{"order":0,"points":0,"sticky":false,"text":"game theory\u0009   "},{"order":0,"points":0,"sticky":false,"text":"a controller"},{"order":0,"points":100,"sticky":false,"text":"aesthetics "}],"failure":{"button":null,"message":"Good games will match aesthetics to game play and vice versa. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn19-leveldesign-environment-tricks-micro-3","number_of_choices":4,"question":"Seeding suggestive environmental clues through _____ is a subtle way to create immersion in a game.","start":3600,"success":{"button":null,"message":"Good games will match aesthetics to game play and vice versa. "},"type":"Multiple"}],"reference":"level-design-and-environments-3","text":null,"title":"Environmental Design Tricks"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"level-design-and-environments","movie":".\/video\/leveldesign-environment-breadcrumbs-micro-4.mp4","name":"Breadcrumbs","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"yellow brick roads"},{"order":0,"points":100,"sticky":false,"text":"breadcrumbs\u0009   "},{"order":0,"points":0,"sticky":false,"text":"trail blazers"},{"order":0,"points":0,"sticky":false,"text":"power-ups"}],"failure":{"button":null,"message":"The term breadcrumbs is derived from the fairy tale Hansel and Gretel.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn20-leveldesign-environment-breadcrumbs-micro-4","number_of_choices":4,"question":"Marked paths in environments meant to guide players through a level are generically called _____.","start":3600,"success":{"button":null,"message":"The term breadcrumbs is derived from the fairy tale Hansel and Gretel.  "},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Footprints"},{"order":0,"points":0,"sticky":false,"text":"breadcrumbs\u0009   "},{"order":0,"points":0,"sticky":false,"text":"A worn path"},{"order":21,"points":100,"sticky":false,"text":"All of the above"}],"failure":{"button":null,"message":"Guiding paths through a level do not have to be literal breadcrumbs, footprints, worn trails, and more can serve as breadcrumbs.   "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn21-leveldesign-environment-breadcrumbs-micro-4","number_of_choices":4,"question":"Which of the following is considered a type of breadcrumb in level design?  ","start":3600,"success":{"button":null,"message":"Guiding paths through a level do not have to be literal breadcrumbs, footprints, worn trails, and more can serve as breadcrumbs.   "},"type":null},{"choices":[{"order":0,"points":100,"sticky":false,"text":"lost"},{"order":0,"points":0,"sticky":false,"text":"too powerful\u0009   "},{"order":0,"points":0,"sticky":false,"text":"bored"},{"order":0,"points":0,"sticky":false,"text":"level designers"}],"failure":{"button":null,"message":"Often a breadcrumb path is optional for a player, who is able to turn it on or off as needed.    "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn22-leveldesign-environment-breadcrumbs-micro-4","number_of_choices":4,"question":"Ultimately, the purpose of breadcrumbs is to prevent players from becoming _____.","start":3600,"success":{"button":null,"message":"Often a breadcrumb path is optional for a player, who is able to turn it on or off as needed.    "},"type":null}],"reference":"level-design-and-environments-3","text":null,"title":"Breadcrumbs"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"level-design-and-environments","movie":".\/video\/leveldesign-environment-collectables-micro-5.mp4","name":"Collectables","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"Breadcrumbs"},{"order":0,"points":0,"sticky":false,"text":"Experience Points\u0009   "},{"order":0,"points":100,"sticky":false,"text":"Collectables"},{"order":0,"points":0,"sticky":false,"text":"Obstacles"}],"failure":{"button":null,"message":"Collectables are common in arcade action games."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn23-leveldesign-environment-collectables-micro-5","number_of_choices":4,"question":"In general, _____ are items in a game players must acquire that give clues or abilities for moving forward in the game.  ","start":3600,"success":{"button":null,"message":"Collectables are common in arcade action games."},"type":"Multiple"},{"choices":[{"order":0,"points":100,"sticky":false,"text":"breadcrumbs"},{"order":0,"points":0,"sticky":false,"text":"experience points\u0009   "},{"order":0,"points":0,"sticky":false,"text":"jumping"},{"order":0,"points":0,"sticky":false,"text":"obstacles"}],"failure":{"button":null,"message":"Collectables are very useful in breaking up a large open world into smaller linear environments. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn24-leveldesign-environment-collectables-micro-5","number_of_choices":4,"question":"Like _____, collectables are a means to aid players from getting overwhelmed or lost in a game's environment. ","start":3600,"success":{"button":null,"message":"Collectables are very useful in breaking up a large open world into smaller linear environments. "},"type":"Multiple"}],"reference":"level-design-and-environments-3","text":null,"title":"Collectables"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"level-design-and-environments","movie":".\/video\/leveldesign-environment-powerup-micro-6.mp4","name":"Power-Ups","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"a higher score"},{"order":0,"points":100,"sticky":false,"text":"a boost in power\u0009   "},{"order":0,"points":0,"sticky":false,"text":"micro-transaction options"},{"order":0,"points":0,"sticky":false,"text":"dominate strategies"}],"failure":{"button":null,"message":"Think of a power-ups as an option to go through a wall, rather than around it with breadcrumbs. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn25-leveldesign-environment-powerup-micro-6","number_of_choices":4,"question":"Unlike breadcrumbs, instead of giving a player clues to where to go, power-ups give a player _____.","start":3600,"success":{"button":null,"message":"Think of a power-ups as an option to go through a wall, rather than around it with breadcrumbs. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"goblins"},{"order":0,"points":100,"sticky":false,"text":"challenges\u0009   "},{"order":0,"points":0,"sticky":false,"text":"collectables"},{"order":0,"points":0,"sticky":false,"text":"mountains"}],"failure":{"button":null,"message":"Power-ups allow for some variety in challenges, even in early stages of a game. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn26-leveldesign-environment-collectables-micro-5","number_of_choices":4,"question":"Power-ups allow players to take on larger _____, even if it is sometimes only temporary.   ","start":3600,"success":{"button":null,"message":"Power-ups allow for some variety in challenges, even in early stages of a game. "},"type":"Multiple"}],"reference":"level-design-and-environments-3","text":null,"title":"Power-Ups"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"level-design-and-environments","movie":".\/video\/leveldesign-openworld-intro-micro-1.mp4","name":"Open World vs Linear","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"True"},{"order":0,"points":100,"sticky":false,"text":"False"}],"failure":{"button":null,"message":"Both linear and open world level design philosophies have positive benefits and negative consequences."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn27-leveldesign-openworld-intro-micro-1","number_of_choices":2,"question":"True or False: In video games, a linear design is always better than open world design. ","start":3600,"success":{"button":null,"message":"Both linear and open world level design philosophies have positive benefits and negative consequences."},"type":null}],"reference":"level-design-and-environments-4","text":null,"title":"Open World vs. Linear"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"level-design-and-environments","movie":".\/video\/leveldesign-openworld-openenvironment-micro-2.mp4","name":"Open World Environments","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"explore"},{"order":0,"points":0,"sticky":false,"text":"power-up\u0009   "},{"order":0,"points":0,"sticky":false,"text":"bake bread"},{"order":0,"points":0,"sticky":false,"text":"become bored"}],"failure":{"button":null,"message":"In an open world level design, players will often have to look for challenges rather than unavoidably running into them. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn28-leveldesign-openworld-openenvironment-micro-2","number_of_choices":4,"question":"Most open world level design encourages players to slow down the pace and _____.","start":3600,"success":{"button":null,"message":"In an open world level design, players will often have to look for challenges rather than unavoidably running into them. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"goblins"},{"order":0,"points":0,"sticky":false,"text":"experience points\u0009   "},{"order":0,"points":100,"sticky":false,"text":"balance"},{"order":0,"points":0,"sticky":false,"text":"visual clues"}],"failure":{"button":null,"message":"Players can explore in unpredictable ways in open world games, often making challenges hard to balance with a player's skill levels.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn29-leveldesign-environment-collectables-micro-5","number_of_choices":4,"question":"One of the biggest concerns in designing open world environments is _____ in challenges.  ","start":3600,"success":{"button":null,"message":"Players can explore in unpredictable ways in open world games, often making challenges hard to balance with a player's skill levels.  "},"type":"Multiple"},{"choices":[{"order":0,"points":100,"sticky":false,"text":"linear"},{"order":0,"points":0,"sticky":false,"text":"science fiction\u0009   "},{"order":0,"points":0,"sticky":false,"text":"mountain climbing"},{"order":0,"points":0,"sticky":false,"text":"environmental "}],"failure":{"button":null,"message":"In open world games, player actions are less predictable, and require more tools and tricks to convey story. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn30-leveldesign-environment-collectables-micro-5","number_of_choices":4,"question":"Games with open world exploration will generally have a harder time telling a _____ story.   ","start":3600,"success":{"button":null,"message":"In open world games, player actions are less predictable, and require more tools and tricks to convey story. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"abilities; skill level"},{"order":0,"points":100,"sticky":false,"text":"actions; storyline \u0009   "},{"order":0,"points":0,"sticky":false,"text":"avatars; audio"},{"order":0,"points":0,"sticky":false,"text":"actions; demographic"}],"failure":{"button":null,"message":"If players are intended to be heroes in the story, any options to take non-heroic actions can unintentionally detour from that intention. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn31-leveldesign-environment-collectables-micro-5","number_of_choices":4,"question":"In many open world games, a player's _____ are often in conflict with the game designer's intended _____.   ","start":3600,"success":{"button":null,"message":"If players are intended to be heroes in the story, any options to take non-heroic actions can unintentionally detour from that intention. "},"type":"Multiple"}],"reference":"level-design-and-environments-4","text":null,"title":"Open World Environments"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"level-design-and-environments","movie":".\/video\/leveldesign-openworld-openendings-micro-3.mp4","name":"Open World Endings","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"undiscovered"},{"order":0,"points":0,"sticky":false,"text":"underplayed \u0009   "},{"order":0,"points":0,"sticky":false,"text":"unexplored"},{"order":21,"points":100,"sticky":false,"text":"All of the above "}],"failure":{"button":null,"message":"Players are especially frustrated when they do not know that a certain quest will end the game and cut off further exploration of the world. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn32-leveldesign-openworld-openendings-micro-3","number_of_choices":4,"question":"Open world games that end when the main quest is completed can leave large portions of the world ____.","start":3600,"success":{"button":null,"message":"Players are especially frustrated when they do not know that a certain quest will end the game and cut off further exploration of the world. "},"type":"Multiple"},{"choices":[{"order":0,"points":100,"sticky":false,"text":"story quests "},{"order":0,"points":0,"sticky":false,"text":"cut scenes "},{"order":0,"points":0,"sticky":false,"text":"music"},{"order":0,"points":0,"sticky":false,"text":"NPCs "}],"failure":{"button":null,"message":"In Elder Scrolls V: Sykrim, the game continues even after all story quests are resolved. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn33-leveldesign-openworld-openendings-micro-3","number_of_choices":4,"question":"Often games eliminate game ending _____ so that players can continue exploring the world even after the story is completed. ","start":3600,"success":{"button":null,"message":"In Elder Scrolls V: Sykrim, the game continues even after all story quests are resolved. "},"type":"Multiple"}],"reference":"level-design-and-environments-4","text":null,"title":"Open World Endings"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"level-design-and-environments","movie":".\/video\/leveldesign-openworld-linear-micro-4.mp4","name":"Linear Environments","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"zero-sum"},{"order":0,"points":0,"sticky":false,"text":"open world\u0009   "},{"order":0,"points":0,"sticky":false,"text":"Nintendo"},{"order":0,"points":100,"sticky":false,"text":"linear"}],"failure":{"button":null,"message":"Linear games fit with traditional linear storytelling better than open world games. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn34-leveldesign-openworld-linear-micro-4","number_of_choices":4,"question":"In general, a _____ designed game will be easier to pace and tell a story. ","start":3600,"success":{"button":null,"message":"Linear games fit with traditional linear storytelling better than open world games. "},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"breadcrumbs"},{"order":0,"points":100,"sticky":false,"text":"choices \u0009   "},{"order":0,"points":0,"sticky":false,"text":"power-ups"},{"order":0,"points":0,"sticky":false,"text":"collectables "}],"failure":{"button":null,"message":"For most linear games, a player's choices in exploration are much more limited than with open world games. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn34-leveldesign-openworld-linear-micro-4","number_of_choices":4,"question":"In general, the biggest problem with linear games is that they offer fewer _____ than a typical open world game. ","start":3600,"success":{"button":null,"message":"For most linear games, a player's choices in exploration are much more limited than with open world games. "},"type":null}],"reference":"level-design-and-environments-4","text":null,"title":"Linear Environments"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"reference","mod":"","movie":null,"name":"Reference","promptfile":null,"prompts":null,"reference":null,"text":"<a id=\"level-design-and-environments-1\" class=\"dest\"><\/a><div class=\"accent\"><h1>Overview<\/h1><p>Level Design (associated with Environment Design) is a technical and creative process that lays out the themes, mechanics, and concepts of a section of a game. Now that we have discussed the broad theories of game design, let's see how some of those theories are applied to level design. This Module will also discuss useful level design goals and examine how theory and practical design come together. In particular, this Module will cover the following Topics:<\/p><div style=\"text-align: center;\"><ul class=\"anchorGroup\" style=\"text-align: left; display: inline-block;\"><li><a class=\"ankor\" href=\"#level-design-and-environments-2\">Achieving Level Design Goals<\/a><\/li><li><a class=\"ankor\" href=\"#level-design-and-environments-3\">Environment Building Tools<\/a><\/li><li><a class=\"ankor\" href=\"#level-design-and-environments-4\">Open World vs. Linear Environments<\/a><\/li><\/ul><\/div><\/div><a class=\"dest\" id=\"level-design-and-environments-2\"><\/a>&nbsp;<div class=\"accent\"><h1>Achieving Level Design Goals<\/h1><p>What is good level design? Players know it when they see it, but is it all just guesswork? We have previously discussed many design concepts and goals on a very broad basis. Now we will begin to apply those basics to actual level design. Let's begin by reviewing some of our level design goals.<\/p><img class=\"aligncenter\" src=\".\/images\/image_Flow1.png\" alt=\"image_Flow1\" width=\"768\" height=\"512\" \/><h3>Achieving Flow, Pacing, and Balance in Level Design<\/h3><p>First and foremost, a game should be fun to play. In terms of level design, we want the game to be fun to navigate. Game worlds should be intriguing, guide players through the level, and ultimately achieve flow. Remember, flow is that nebulous state of being happy and engaged with a game.  We achieve flow through pacing and balance in level design. In turn, we achieve pacing and balance in level design by constructing the environment to guide the player through the level in the way the designer wants them to. We could call this, flow control.<\/p><h3>Constraints as Flow Control<\/h3><p>For a game to have flow, players need a goal or destination, an intriguing and somewhat obvious path to get there, and some indication of what to do when they arrive. A proper and well-planned game environment is the best way for designers to achieve these goals.<\/p><p>The most obvious tool in our flow control bag of tricks is the physical limitations we can apply to the environment. For example, let's say we want a player to take his or her character from Point A to Point B. We are immediately faced with some questions. How do they know they are supposed to go to Point B in the first place? Also, what if they go in the wrong direction, say to some player imagined Point C? The easy answer is: don't let them. That is to say, we create obvious or highly suggested paths to initiate the player's movement in the right direction.<\/p><p>Here we see an environment with some physical constraints on where a player can go. In this example, we have built a mountainside for players to explore, however, we want to limit their initial choices for where they can go. So as part of the level design and as a way to create immersion in our world, we will design these constraints to match logically with our world. In this case, we have a rockslide that restricts the player from exploring certain parts of the map.<\/p><h3>Linear Paths<\/h3><img class=\"aligncenter\" src=\".\/images\/image_Flow2.gif\" alt=\"image_Flow2\" width=\"768\" height=\"512\" \/><p>The most common physical limitation in environment design is a linear path. A linear path only gives one option for the player's direction. Returning to our dilemma of encouraging our player to go from Point A to Point B, we can use linear paths to direct the player by removing all other direction options. The player will quickly realize he or she only has one option which fulfills our need for instantly informing the player of what to do (go to Point A, it is the only choice).  Of course, the problem with this solution is it just removes player options. It does not, in itself, create flow, in the sense it could be very boring just navigating one direction. It also does not yet require any skills to be learned or provide any motivation to play the game. We also cannot control pacing unless we plan for a very short game. What we need are obstacles.<\/p><h3>Obstacles<\/h3><img class=\"aligncenter\" src=\".\/images\/image_obstacles.png\" alt=\"image_obstacles\" width=\"523\" height=\"345\" \/><p>Obstacles are just what they sound like: they are challenges the player must overcome to progress in the game. Obstacles allow game designers to open up the linear path restrictions some to provide opportunities for fun and to use and learn in-game skills. They also allow us to begin to control the pace of the game. For example, we could now create multiple paths but still heavily entice the player to go the direction we want them to initially. The player at Point A could see an option to go to Point C, but be discouraged to do so with difficult obstacles. An obstacle can be anything we want it to be, as long as it fits the context of the environment. Let's say our Point A is at a starting point on the mountainside. We want the player to go first to Point B, but we want to hide this intention from the player to give them a bigger sense of the world and their perceived options working within that world. So we make going from Point A to Point B the easiest and most rewarding at this stage of the game. The obstacles in going from A to B will be designed according to our theories on creating skill loops. Let's pretend that the player will have to jump to avoid falling rocks to get to Point B. Now we can start to control pacing with how many rocks we want to throw at the player in a given space. We can carefully control skill improvement and we can also insert some needed fun into the game. Finally, we will reward the player for making the choice to go to Point B.<\/p><p>At the same time we encourage certain player behavior (go this way), we can also discourage the player from choosing any other behavior.  We can do this by making obstacles that strongly hint to the player to try a different behavior. For example, we could create a rock slide that is extremely difficult to navigate without advanced skill mastery of our jumping mechanic. We can increase the likelihood of the player going the route the designer intended by increasing the difficulty level of going any other route. The trick is making sure the players can actually pick up on the environmental clues enough to understand that they need to acquire the basic jump skills first, before taking on the rockslide.<\/p><\/div><a class=\"dest\" id=\"level-design-and-environments-3\"><\/a>&nbsp;<div class=\"accent\"><h1>Environment Building Tools<\/h1><p>We can also control balance, pacing, and create fun through environmental building tools and tricks. One often overlooked design tool is giving the player environmental clues. Visual design of a level is going to be very valuable in seeding our environmental clues. What the player sees in the world will inform them of possible decision consequences for their actions. They will look at the world, the environment and tell themselves, “It is okay to act in this manner”. This is important because we want the player to feel in charge of their actions. We want them to see what to do without being told what to do. So how does this work, exactly?<\/p><h3>Environmental Clues<\/h3><p>With good visual planning, we can seed concepts to the player without saying a word. Continuing with our mountain climbing game example, we might have a level design where the player must climb a simple rock wall. First, they might see their character dressed in climbing gear, perhaps with ropes and hooks. They might start at the base of the mountain with some initial hanging ropes to get started. This tells the player that physical actions will probably be required. Next, the player might see unstable rocks around their avatar. This tells them that they should look out for rocks and that dodging these rocks might very well be a challenge they will have to face. This, in turn, makes the player start playing with their control of their character to see what they can do. Behold! The character can jump to the side when a button is pushed. In doing so, we have seeded a goal: get good at jumping away from falling rocks.<\/p><img class=\"aligncenter\" src=\".\/images\/image_environmentalclues.png\" alt=\"image_environmentalclues\" width=\"715\" height=\"366\" \/><p>Now we have achieved something: the player is rewarded for figuring out how the environment will be challenging as well as beginning to understand how to overcome those challenges. The fact that they discovered this on their own is rewarding and fun.<\/p><p>The game's visual clues need to maintain logic and consistency to be effective. If your game is set in a dark fantasy world of vampires and vampire hunters, seeing bones in the environment might indicate to the player this is a deadly world and they will be required to defend themselves, leading them to find ways to do so. Starting a character on a small island surrounded by water is also going to seed its own set of player assumptions that can be capitalized upon for level and environment design.<\/p><h3>Other Environment Design Tricks<\/h3><p>Seeding suggestive environmental clues through aesthetics is by far the most subtle way to create player flow. Video games have used many other techniques that are more overt. The purpose is always the same, though, to achieve player flow.  Their success at doing so, tends to vary greatly from game to game.<\/p><p><strong>Breadcrumbs<\/strong><\/p><p>A term taken from the popular fairy tale, <em>Hansel and Gretel<\/em>, breadcrumbs in video games are simply marked paths for players to navigate. They don't have to be literal breadcrumbs; they can be footprints, string, magical aura trails, or just about anything that is generally fixed and unalterable by the player. Sometimes breadcrumbs are optional. A game might offer a button or in-game spell to turn breadcrumbs on or off. In any regard, breadcrumbs are used to keep players from getting lost or taking wrong paths.<\/p><p><strong>Power-Ups and Collectables<\/strong><\/p><p>Like breadcrumbs, power-ups and collectables are tools to lead players through the game in a controlled manner that, optimally, will create fun and flow. Collectables are things players must find in the game to give them clues for going forward. At its most basic level, a collectable gives the player a short term goal that, once achieved, open a new short term goal. These goals then stack to create a bigger, more epic, quest. For example, say we are making a mystery game. We want to encourage players to explore the world and find clues, but it is a little too big of a world to just let them find their own way. We might use collectables this way: The player must find a series of clues in the form of lost books in the world. Each book is contained in a smaller part of the overall world, cutting down on the player being lost or frustrated. As one book is found, it gives clues (or perhaps just opens new areas to explore) on the location of the next book.<\/p><p>Power-ups work in a similar fashion, but instead of giving the player information or unlocking clues, they make the player's character in the game more powerful. In doing so, the player can now take on bigger challenges. In our canyon example from earlier, we could use this concept very neatly. Once the player reaches Point B, they could receive a power-up that makes them jump faster or higher. Now they have the ability to take on the much harder path to Point C. The player feels they are steadily improving (in character power or player skill) and doing so at a pace that keeps the game fun. It is has potential for being meaningful and keeps the gameplay themes.<\/p><\/div><a class=\"dest\" id=\"level-design-and-environments-4\"><\/a>&nbsp;<div class=\"accent\"><h1>Open World vs. Linear Environments<\/h1><p>There is nothing right or wrong with games that choose an open world format over a linear environment, they are simply design choices, each with their own advantages and disadvantages. In this Topic we are going to take a closer look at the pros and cons of open world and linear environments in games.<\/p><h3>Open World Environments<\/h3><img class=\"aligncenter\" src=\".\/images\/image_openworld.png\" alt=\"image_openworld\" width=\"529\" height=\"477\" \/><p>Open world environments offer players a sense of control and realism. Without a forced linear path, the game creates a desire to slow down and explore. That can lead to problems however. First, the world will need lots of content choices for the player. If they decide to bypass a part of the game to explore something else, then that something else needs to be accessible and balanced to the player going there in terms of player skill mastery requirements or character power.<\/p><p>Another issue with open world games is in integrating story elements. Non-linear storytelling is more difficult to make work in open world games. If the authors do not know where a player will go and in what order quests will be taken, it becomes tricky to seed plot points that require linear events to activate. That problem can be handled with meticulous planning and allowing for some flexibility in the story. Here is the real trick with story in open world games: the story the authors want to tell about the characters is not always reflected in the actions of the player. For example, imagine an open world game that wants to tell the story of a man seeking redemption from his past in a modern urban landscape. We can conceive how the main quest and mini-quests can support this thematic goal fairly easily. However, in allowing the player to ignore these quests and simply explore and play in the world on their own, they may not pick up on the redemption themes. In fact, they may go the opposite route and just see what causing havoc all over the city is like. Now the author's story themes and plot are in contradiction to the “hero's” actions.<\/p><h3>Open World Endings<\/h3><p>There is also the issue of an ending to the game in an open world design. Executing an exciting climax to an open ended world design can wind up feeling unfulfilling if the player has not followed the plot and feels the ending is abrupt. If an ending cuts off their ability to continue playing in the world, players will be unhappy they cannot continue on. If completing the main quest ends the game, even if the player has unfinished side quests, players will be unhappy.<\/p><p>These issues bring into consideration the idea of not having a closed ending that is based on plot completion. This allows us to not have to close off playing the game just because we have run out of author generated plot. It also allows the player to determine their own sense of when the game is over and play the game with their own private narrative. On the negative side, without a closed ending, the player's interest may drift to the point that they just stop playing the game because they become bored. Without an exciting conclusion to cap the experience, players have little reason to play any sequels or expansions to the title.<\/p><h3>Linear Environments<\/h3><img class=\"aligncenter\" src=\".\/images\/image_linearworld.png\" alt=\"image_linearworld\" width=\"545\" height=\"478\" \/><p>Linear designed games have the same issues as open world games, only in reverse. On the positive side, linear design allows the authors to control the narrative and create a more dramatic and directed experience. With a linear design it is easier to lay out clear goals for the player. In addition, players are less likely to miss plot points and player skill mastery can be planned on at set stages of the game. In fact, overall, designers can focus the player on a more limited scope and as such make that limited view much richer and detailed than they can for an open world model.<\/p><p>In turn, this decreases the feeling a player has that they are in control and that their choices matter. The biggest complaint about linear games is that they don't really offer any choice. In fact, in many linear games, choice is an illusion. Although good design will hide this fact, linear games are much more of a hand-holding experience. Players are told directly to <em>go here<\/em> and <em>do this<\/em>. For many, this feels like a pointless exercise, in particular if the story is weak.<\/p><p>Many games now work to create some blend of open world and linear design. They find new and clever ways to integrate story and mechanics that offer player-choice, tight storytelling, and character development. In coming Modules we will take a closer look at storytelling and use of characters in video games.<\/p><\/div><!--page:~~level-design-and-environments-reference-text~~-->","title":"Reference Material"},{"bIsChecked":true,"exercise":".\/exercise\/ProspectorTwins_Exercise_LevelDesign.stack","instructions":"\u0009\u0009<section class=\"goals\">\u0009\u0009\u0009<h1>Goals<\/h1>\u0009\u0009\u0009<ul>\u0009\u0009\u0009\u0009<li>Use hints to recreate the Prospector Twins level as we designed it.<\/li>\u0009\u0009\u0009\u0009<li>Create your own level from scratch using templates.<\/li>\u0009\u0009\u0009<\/ul>\u0009\u0009\u0009\u0009\u0009<\/section>\u0009\u0009<aside class=\"reference\">\u0009\u0009\u0009<figure>\u0009\u0009\u0009\u0009<img src=\".\/images\/levelDesign_screen-02.png\" alt=\"screenshot\" \/>\u0009\u0009\u0009\u0009<figcaption>Sprite Reference<\/figcaption>\u0009\u0009\u0009<\/figure>\u0009\u0009\u0009\u0009\u0009\u0009<h2>Environment<\/h2>\u0009\u0009\u0009\u0009<h3>stage<\/h3>\u0009\u0009\u0009\u0009<ul>\u0009\u0009\u0009\u0009\u0009<li>contains backdrops which show underneath the game sprites<\/li>\u0009\u0009\u0009\u0009\u0009<li>all of the global variables can be configured in its Scripts tab<\/li>\u0009\u0009\u0009\u0009<\/ul>\u0009\u0009\u0009\u0009<h3>platform<\/h3>\u0009\u0009\u0009\u0009<ul>\u0009\u0009\u0009\u0009\u0009<li>can be placed anywhere on the screen<\/li>\u0009\u0009\u0009\u0009\u0009<li>can be configured to only appear after a certain level is reached<\/li>\u0009\u0009\u0009\u0009\u0009<li>the light and dark colors of the platform are used to let the player's sensor and boulders know when and where they hit the \"ground\" and should only be changed if you are comfortable editing sprite template logic<\/li>\u0009\u0009\u0009\u0009<\/ul>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<h3>goal<\/h3>\u0009\u0009\u0009\u0009<ul>\u0009\u0009\u0009\u0009\u0009<li>can be placed anywhere<\/li>\u0009\u0009\u0009\u0009\u0009<li>when the player sprite touches this sprite, the level is complete<\/li>\u0009\u0009\u0009\u0009\u0009<li>awards a configurable number of points (multiplied by current level)<\/li>\u0009\u0009\u0009\u0009<\/ul>\u0009\u0009\u0009\u0009\u0009\u0009<h2>Interface<\/h2>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<h3>menu<\/h3>\u0009\u0009\u0009\u0009<ul>\u0009\u0009\u0009\u0009\u0009<li>automatically positions itself in the center of the screen<\/li>\u0009\u0009\u0009\u0009\u0009<li>shows the game title and instructions to the player when the game first starts<\/li>\u0009\u0009\u0009\u0009\u0009<li>congratulates the player when they finish a level<\/li>\u0009\u0009\u0009\u0009\u0009<li>taunts the player when they lose and the game is over<\/li>\u0009\u0009\u0009\u0009<\/ul>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<h3>lives<\/h3>\u0009\u0009\u0009\u0009<ul>\u0009\u0009\u0009\u0009\u0009<li>automatically positions itself in the lower left of the screen<\/li>\u0009\u0009\u0009\u0009\u0009<li>indicates the number of lives the player has left throughout the game<\/li>\u0009\u0009\u0009\u0009<\/ul>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<h3>level<\/h3>\u0009\u0009\u0009\u0009<ul>\u0009\u0009\u0009\u0009\u0009<li>automatically positions itself in the lower center of the screen<\/li>\u0009\u0009\u0009\u0009\u0009<li>indicates the current level<\/li>\u0009\u0009\u0009\u0009<\/ul>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<h3>score<\/h3>\u0009\u0009\u0009\u0009<ul>\u0009\u0009\u0009\u0009\u0009<li>automatically positions itself in the lower right of the screen<\/li>\u0009\u0009\u0009\u0009\u0009<li>indicates the player's current score<\/li>\u0009\u0009\u0009\u0009<\/ul>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<h2>Player<\/h2>\u0009\u0009\u0009\u0009<h3>player<\/h3>\u0009\u0009\u0009\u0009<ul>\u0009\u0009\u0009\u0009\u0009<li>represents the player on the screen<\/li>\u0009\u0009\u0009\u0009\u0009<li>automatically goes to the configurable starting position when each level starts<\/li>\u0009\u0009\u0009\u0009\u0009<li>movement is configured by several global variables<\/li>\u0009\u0009\u0009\u0009\u0009<li>requires costumes for the following states: idle, walking, running, jumping, hurt, victory<\/li>\u0009\u0009\u0009\u0009\u0009<li>if the number of costumes is changed, there are variables assigned to this sprite which tell the game how many of each type of costume exist so the animations play correctly<\/li>\u0009\u0009\u0009\u0009\u0009<li>controlled by the arrow keys left, right, and up to jump<\/li>\u0009\u0009\u0009\u0009<\/ul>\u0009\u0009\u0009\u0009<h3>sensor<\/h3>\u0009\u0009\u0009\u0009<ul>\u0009\u0009\u0009\u0009\u0009<li>hides itself when the game starts<\/li>\u0009\u0009\u0009\u0009\u0009<li>constantly follows the player sprite to \"sense\" collisions with other objects<\/li>\u0009\u0009\u0009\u0009<\/ul>\u0009\u0009\u0009\u0009\u0009\u0009<h2>Enemies<\/h2>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<h3>spawner<\/h3>\u0009\u0009\u0009\u0009<ul>\u0009\u0009\u0009\u0009\u0009<li>hides itself when the game starts<\/li>\u0009\u0009\u0009\u0009\u0009<li>spawns copies of the boulder sprite to disrupt the player<\/li>\u0009\u0009\u0009\u0009\u0009<li>configurable by variables<\/li>\u0009\u0009\u0009\u0009<\/ul>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<h3>boulder<\/h3>\u0009\u0009\u0009\u0009<ul>\u0009\u0009\u0009\u0009\u0009<li>automatically hidden when the game starts<\/li>\u0009\u0009\u0009\u0009\u0009<li>the spawner makes a copy of this sprite and activates it every time it decides a new boulder should be spawned<\/li>\u0009\u0009\u0009\u0009\u0009<li>behavior can be configured with several global variables<\/li>\u0009\u0009\u0009\u0009\u0009<li>anytime a player comes into contact with a boulder, a number of lives equal to the boulder's strength are lost and it is destroyed<\/li>\u0009\u0009\u0009\u0009\u0009<li>if a boulder hits an obstacle, the obstacle is destroyed<\/li>\u0009\u0009\u0009\u0009<\/ul>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<h3>obstacle<\/h3>\u0009\u0009\u0009\u0009<ul>\u0009\u0009\u0009\u0009\u0009<li>can be placed anywhere on the screen<\/li>\u0009\u0009\u0009\u0009\u0009<li>can be configured to only appear after a certain level is reached<\/li>\u0009\u0009\u0009\u0009\u0009<li>when the player touches any obstacle, a number of lives equal to the obstacle's strength are lost and it is destroyed<\/li>\u0009\u0009\u0009\u0009<\/ul>\u0009\u0009\u0009\u0009\u0009\u0009<h2>Collectibles<\/h2>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<h3>gold<\/h3>\u0009\u0009\u0009\u0009<ul>\u0009\u0009\u0009\u0009\u0009<li>can be placed anywhere<\/li>\u0009\u0009\u0009\u0009\u0009<li>can be configured to only appear after a certain level is reached<\/li>\u0009\u0009\u0009\u0009\u0009<li>anytime the player comes into contact with the gold, a number of points equal to the gold's strength are awarded and then it disappears from the level<\/li>\u0009\u0009\u0009\u0009<\/ul>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<h3>powerup<\/h3>\u0009\u0009\u0009\u0009<ul>\u0009\u0009\u0009\u0009\u0009<li>can be placed anywhere<\/li>\u0009\u0009\u0009\u0009\u0009<li>can be configured to only appear after a certain level is reached<\/li>\u0009\u0009\u0009\u0009\u0009<li>anytime the player comes into contact with the powerup, a number of lives equal to the powerup's strength are awarded and then disappears from the level<\/li>\u0009\u0009\u0009\u0009\u0009<li>reveals itself when the player has lost at least one life<\/li>\u0009\u0009\u0009\u0009\u0009<li>only appears once on each level<\/li>\u0009\u0009\u0009\u0009<\/ul>\u0009\u0009<\/aside>\u0009\u0009<section class=\"steps\">\u0009\u0009\u0009<h1>Steps<\/h1>\u0009\u0009\u0009<h2>Load the exercise into GameStack.<\/h2>\u0009\u0009\u0009<figure>\u0009\u0009\u0009\u0009<img src=\".\/images\/levelDesign_screen-01.png\" alt=\"screenshot\" \/>\u0009\u0009\u0009\u0009<figcaption>This is what the exercise should look like once you have it open.<\/figcaption>\u0009\u0009\u0009<\/figure>\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009<li>Click the download button to download the LevelDesign.stack file.<\/li>\u0009\u0009\u0009\u0009<li>Save the file to a location that you can access on your computer.<\/li>\u0009\u0009\u0009\u0009<li>Click to open the file in Game Stack.<\/li>\u0009\u0009\u0009\u0009<li>You should see something that looks like the screenshot above and be ready to start.<\/li>\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009<h2>Play the poorly designed level.<\/h2>\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009<li>Click the <img src=\".\/images\/gamestackflag.png\" alt=\"green flag button\" \/><\/li>\u0009\u0009\u0009\u0009<li>Read the instructions, and press the spacebar to start when ready.<\/li>\u0009\u0009\u0009\u0009<li>Try to get the prospector to the minecart, avoiding the exploding barrel.<\/li>\u0009\u0009\u0009\u0009<li>Observe that this game is not very fun to play.<\/li>\u0009\u0009\u0009\u0009<li>Press the <img src=\".\/images\/icon_stop.png\" alt=\"red stop button\" \/>.<\/li>\u0009\u0009\u0009\u0009<li>Choose \"Revert\" from the File menu to reset the game to its original settings.<\/li>\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009<h2>Place platforms, trampolines, obstacles, collectables, and a powerup onto the stage in the suggested positions to make the levels more interesting.<\/h2>\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009<li>Reveal the suggested positions for game objects.<br \/>\u0009\u0009\u0009\u0009\u0009<figure>\u0009\u0009\u0009\u0009\u0009\u0009<img src=\".\/images\/levelDesign_screen-03.png\" alt=\"screenshot\" \/>\u0009\u0009\u0009\u0009\u0009\u0009<figcaption>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Click the stage object (to the left of the sprite list)<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Click the Backdrops tab<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Change the active backdrop to the second one called \"sky_hinted\"<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Observe that the game's background now has some helpful outlines to help you place objects in the suggested positions<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009\u0009\u0009\u0009<\/figcaption>\u0009\u0009\u0009\u0009\u0009<\/figure>\u0009\u0009\u0009\u0009<\/li>\u0009\u0009\u0009\u0009<li>Hide the player for the time being.<br \/>\u0009\u0009\u0009\u0009\u0009<figure>\u0009\u0009\u0009\u0009\u0009\u0009<img src=\".\/images\/levelDesign_screen-04.png\" alt=\"screenshot\" \/>\u0009\u0009\u0009\u0009\u0009\u0009<figcaption>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Right-click the player sprite and select \"Info\"<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Uncheck the \"show\" box<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009\u0009\u0009\u0009<\/figcaption>\u0009\u0009\u0009\u0009\u0009<\/figure>\u0009\u0009\u0009\u0009<\/li>\u0009\u0009\u0009\u0009<li>Use your mouse to drag the health powerup to the suggested position.<br \/>\u0009\u0009\u0009\u0009\u0009<figure>\u0009\u0009\u0009\u0009\u0009\u0009<img src=\".\/images\/levelDesign_screen-05.png\" alt=\"screenshot\" \/>\u0009\u0009\u0009\u0009\u0009\u0009<figcaption>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Hint: the heart in the lower left corner is not the powerup, that is the indicator that shows you how many lives are left. You should leave that one there.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009\u0009\u0009\u0009<\/figcaption>\u0009\u0009\u0009\u0009\u0009<\/figure>\u0009\u0009\u0009\u0009<\/li>\u0009\u0009\u0009\u0009<li>Drag the minecart into the suggested position.<br \/>\u0009\u0009\u0009\u0009\u0009<figure>\u0009\u0009\u0009\u0009\u0009\u0009<img src=\".\/images\/levelDesign_screen-06.png\" alt=\"screenshot\" \/>\u0009\u0009\u0009\u0009\u0009<\/figure>\u0009\u0009\u0009\u0009<\/li>\u0009\u0009\u0009\u0009<li>Create and position gold nuggets<br \/>\u0009\u0009\u0009\u0009\u0009<figure>\u0009\u0009\u0009\u0009\u0009\u0009<img src=\".\/images\/levelDesign_screen-07.png\" alt=\"screenshot\" \/>\u0009\u0009\u0009\u0009\u0009\u0009<figcaption>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Drag the gold nugget to the first suggested position on the left.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Right-click the gold nugget sprite and select \"Duplicate\" to create a second nugget<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Drag the new gold nugget called \"gold2\" to the suggested position on the right<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009\u0009\u0009\u0009<\/figcaption>\u0009\u0009\u0009\u0009\u0009<\/figure>\u0009\u0009\u0009\u0009<\/li>\u0009\u0009\u0009\u0009<li>Create and position platforms<br \/>\u0009\u0009\u0009\u0009\u0009<figure>\u0009\u0009\u0009\u0009\u0009\u0009<img src=\".\/images\/levelDesign_screen-08.png\" alt=\"screenshot\" \/>\u0009\u0009\u0009\u0009\u0009\u0009<figcaption>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Click the green platform sprite<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Click the costumes tab<br \/>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Observe how there are three different sized platform costumes to choose from: small, medium, and large<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Change the active costume to the first one called \"small\"<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Drag the platform into the uppermost center position with the minecart<br \/>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>this will cause the platform to appear on top of the minecart, but don't worry the platforms will be moved underneath when the game starts<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<\/li><!--\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Click the Scripts tab on the platform sprite, and observe that it has a variable called \"level\" set to 1… This defines what level the platform will first appear on. That is fine for this platform, but a few of the other platforms we will want to change this value to hide them until later levels. (screenshot)<\/li> -->\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Duplicate and position the rest of the platforms<br \/>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Right click a platform and select \"Duplicate\" to create a copy<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Click the costumes tab and select the desired costume size<\/li><!--\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Click the scripts tab and enter a value for the \"level\" variable, which tells the game which level the platform will first appear on. (the middle left, and middle right platforms should both appear on level 3)<\/li> -->\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Drag the platform into one of the suggested positions<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Repeat these steps until you have 8 different platforms, one in each suggested position<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009\u0009\u0009\u0009<\/figcaption>\u0009\u0009\u0009\u0009\u0009<\/figure>\u0009\u0009\u0009\u0009<\/li>\u0009\u0009\u0009\u0009<li>Create and position obstacles<br \/>\u0009\u0009\u0009\u0009\u0009<figure>\u0009\u0009\u0009\u0009\u0009\u0009<img src=\".\/images\/levelDesign_screen-09.png\" alt=\"screenshot\" \/>\u0009\u0009\u0009\u0009\u0009\u0009<figcaption>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Drag the existing obstacle into one of the suggested positions, noting the number labeled on the suggestion<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Click the Scripts tab and enter the number on the suggestion as the value for the variable named \"level\"<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Duplicate and position the rest of the obstacles<br \/>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Right click an obstacle and select \"Duplicate\" to create a copy<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Click the scripts tab and enter a value for the \"level\" variable, which matches the number on the position you will be placing this obstacle<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Drag the obstacle into one of the suggested positions<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Repeat these steps until you have 8 different obstacles, one in each suggested position set to appear at the suggested levels<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009\u0009\u0009\u0009<\/figcaption>\u0009\u0009\u0009\u0009\u0009<\/figure>\u0009\u0009\u0009\u0009<\/li>\u0009\u0009\u0009\u0009<li>Show the player sprite again<br \/>\u0009\u0009\u0009\u0009\u0009<figure>\u0009\u0009\u0009\u0009\u0009\u0009<img src=\".\/images\/levelDesign_screen-10.png\" alt=\"screenshot\" \/>\u0009\u0009\u0009\u0009\u0009\u0009<figcaption>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Right-click the player sprite<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Check the \"show\" box<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009\u0009\u0009\u0009<\/figcaption>\u0009\u0009\u0009\u0009\u0009<\/figure>\u0009\u0009\u0009\u0009<\/li>\u0009\u0009\u0009\u0009<li>Determine a good starting position for the player<br \/>\u0009\u0009\u0009\u0009\u0009<figure>\u0009\u0009\u0009\u0009\u0009\u0009<img src=\".\/images\/levelDesign_screen-11.png\" alt=\"screenshot\" \/>\u0009\u0009\u0009\u0009\u0009\u0009<figcaption>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Drag the player sprite to the lower left of the screen, between the two platforms<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Write down or remember the x and y coordinates<br \/>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>If you do not see the x and y coordinates as in the screenshot, right-click the player sprite and select \"Info\" to see them<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009\u0009\u0009\u0009<\/figcaption>\u0009\u0009\u0009\u0009\u0009<\/figure>\u0009\u0009\u0009\u0009<\/li>\u0009\u0009\u0009\u0009<li>Define the starting position<br \/>\u0009\u0009\u0009\u0009\u0009<figure>\u0009\u0009\u0009\u0009\u0009\u0009<img src=\".\/images\/levelDesign_screen-12.png\" alt=\"screenshot\" \/>\u0009\u0009\u0009\u0009\u0009\u0009<figcaption>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Click the stage icon<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Click the Scripts tab<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Locate the variables named \"start_x\" and \"start_y\" and set them to the coordinates you wrote down (or remembered)<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009\u0009\u0009\u0009<\/figcaption>\u0009\u0009\u0009\u0009\u0009<\/figure>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<\/li>\u0009\u0009\u0009\u0009<li>Hide the suggested positions on the sky background<br \/>\u0009\u0009\u0009\u0009\u0009<figure>\u0009\u0009\u0009\u0009\u0009\u0009<img src=\".\/images\/levelDesign_screen-13.png\" alt=\"screenshot\" \/>\u0009\u0009\u0009\u0009\u0009\u0009<figcaption>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Click the stage object<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Click the Backdrops tab<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Change the active backdrop to the first one called \"sky\"<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009\u0009\u0009\u0009<\/figcaption>\u0009\u0009\u0009\u0009\u0009<\/figure>\u0009\u0009\u0009\u0009<\/li>\u0009\u0009\u0009\u0009<li>Save your project under a new filename<br \/>\u0009\u0009\u0009\u0009\u0009<figure>\u0009\u0009\u0009\u0009\u0009\u0009<img src=\".\/images\/levelDesign_screen-14.png\" alt=\"screenshot\" \/>\u0009\u0009\u0009\u0009\u0009\u0009<figcaption>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>On the top menu, choose Save As<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Choose a good location to save your game, and give it a name you will remember<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Click the <img src=\".\/images\/gamestackflag.png\" alt=\"green flag button\" \/> and try it out!<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Observe that the game is definitely more interesting, although still not necessarily fun to play.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009\u0009\u0009\u0009<\/figcaption>\u0009\u0009\u0009\u0009\u0009<\/figure>\u0009\u0009\u0009\u0009<\/li>\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009<h2>Activate spawning enemies to add challenge.<\/h2>\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009<li>Hide the menu screen, if it is visible (optional)<br \/>\u0009\u0009\u0009\u0009\u0009<figure>\u0009\u0009\u0009\u0009\u0009\u0009<img src=\".\/images\/levelDesign_screen-15.png\" alt=\"screenshot\" \/>\u0009\u0009\u0009\u0009\u0009\u0009<figcaption>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Right-click the game's menu overlay (only if you cannot see the game sprites in the editor)<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Click \"Info\"<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Uncheck the \"Show\" option to hide the menu screen<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009\u0009\u0009\u0009<\/figcaption>\u0009\u0009\u0009\u0009\u0009<\/figure>\u0009\u0009\u0009\u0009<\/li>\u0009\u0009\u0009\u0009<li>Enable the boulder spawner<br \/>\u0009\u0009\u0009\u0009\u0009<figure>\u0009\u0009\u0009\u0009\u0009\u0009<img src=\".\/images\/levelDesign_screen-16.png\" alt=\"screenshot\" \/>\u0009\u0009\u0009\u0009\u0009\u0009<figcaption>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Click the spawner sprite<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Click the Scripts tab<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Change the value of the variable named \"disabled\" from 1 to 0<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009\u0009\u0009\u0009<\/figcaption>\u0009\u0009\u0009\u0009\u0009<\/figure>\u0009\u0009\u0009\u0009<\/li>\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009\u0009\u0009\u0009<h2>Play the finished game and have fun!<\/h2>\u0009\u0009\u0009\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009<li>Click the <img src=\".\/images\/gamestackflag.png\" alt=\"green flag button\" \/><\/li>\u0009\u0009\u0009\u0009<li>Take a deep breath, press the spacebar, and see how long you can survive<\/li>\u0009\u0009\u0009\u0009<li>Observe how the game is more interesting to play now that there are different challenges to surpass and it is more possible to lose<\/li>\u0009\u0009\u0009<\/ol>\u0009\u0009<\/section><!--page:~~level-design-and-environments-gamestack-exercise~~-->","link":null,"mod":"level-design-and-environments","movie":null,"name":"level-design-and-environments-gamestack-exercise","promptfile":null,"prompts":null,"reference":null,"text":null,"title":"Game Stack Exercise"},{"bIsChecked":true,"exercise":"","instructions":"<h1>Goal<\/h1><p>To use our creative minds to imagine and conceive new environmental design tricks for the Game Stack Game, Prospector Twins.<\/p><h1>Steps<\/h1><ol><li>Study the gameplay of Prospector Twins. <\/li><li>Conceive and write a short paragraph describing an original mechanic that could be added to the game. For example, double jumps.<\/li><li>Include a detailed description of how the mechanic works in the game.<\/li><li>Validate your mechanic and describe how it is fun and balanced within the existing game. <\/li><\/ol><h1>Hints and Challenges<\/h1><p>This is meant to be a creative exercise so be imaginative in your mechanic. Be sure to focus on how the mechanic makes the game more fun, challenging, and immersive.<\/p><!--page:~~level-design-and-environments-writing-exercise~~-->","link":null,"mod":"level-design-and-environments","movie":null,"name":"level-design-and-environments-writing-exercise","promptfile":null,"prompts":null,"reference":null,"text":null,"title":"Writing Exercise"}]}],"title":"Game Design Basics"},{"bIsChecked":true,"description":"Implement core Game Design principles including structure, mechanics and common design theories.","image":"image_actions.png","modules":[{"bIsChecked":true,"name":"game-structure","title":"Game Structure","topics":[{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"game-structure","movie":".\/video\/gamestructure-overview-all-micro-1.mp4","name":"Overview","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"A player\u0009   "},{"order":0,"points":0,"sticky":false,"text":"An input device\u0009   "},{"order":0,"points":100,"sticky":false,"text":"Experience points"},{"order":0,"points":0,"sticky":false,"text":"A challenge "}],"failure":{"button":null,"message":"Experience points are not a requirement for every game's structure. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn1-gamestructure-overview-all-micro-1","number_of_choices":4,"question":"Which of the follow is NOT a common element of all video games?","start":3600,"success":{"button":null,"message":"Experience points are not a requirement for every game's structure. "},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"a Hollywood script\u0009   "},{"order":0,"points":100,"sticky":false,"text":"game design\u0009   "},{"order":0,"points":0,"sticky":false,"text":"structure"},{"order":0,"points":0,"sticky":false,"text":"coding "}],"failure":{"button":null,"message":"Without documented game design, programmers must guess at the architecture of the game.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn2-gamestructure-overview-all-micro-1","number_of_choices":4,"question":"In video game development, programming needs the architecture of _____ to be fluid and functional. ","start":3600,"success":{"button":null,"message":"Without documented game design, programmers must guess at the architecture of the game.  "},"type":null},{"choices":[{"order":0,"points":100,"sticky":false,"text":"motivations to play\u0009   "},{"order":0,"points":0,"sticky":false,"text":"a target audience\u0009   "},{"order":0,"points":0,"sticky":false,"text":"a combat structure"},{"order":0,"points":0,"sticky":false,"text":"puzzles"}],"failure":{"button":null,"message":"All games will use objectives, conflicts, and outcomes to create player motivations to play the game.   "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn3-gamestructure-overview-all-micro-1","number_of_choices":4,"question":"Through objectives, conflicts, and outcomes, game designers can create _____.  ","start":3600,"success":{"button":null,"message":"All games will use objectives, conflicts, and outcomes to create player motivations to play the game.   "},"type":null}],"reference":"game-structure-1","text":null,"title":"Overview"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"game-structure","movie":".\/video\/gamestructure-rules-intro-micro-1.mp4","name":"Creating Rules of a Game","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"game design document\u0009   "},{"order":0,"points":0,"sticky":false,"text":"ESRB rating\u0009   "},{"order":0,"points":0,"sticky":false,"text":"designated genre"},{"order":0,"points":0,"sticky":false,"text":"full-time engineer"}],"failure":{"button":null,"message":"Typically, a game design document is the first step in creating a structure for a game's design. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn4-gamestructure-rules-micro-1","number_of_choices":4,"question":"A _____ is a good way to insure proper video game structure during development.","start":3600,"success":{"button":null,"message":"Typically, a game design document is the first step in creating a structure for a game's design. "},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"technical design document\u0009   "},{"order":0,"points":0,"sticky":false,"text":"game performance checklist\u0009   "},{"order":0,"points":100,"sticky":false,"text":"good game checklist "},{"order":0,"points":0,"sticky":false,"text":"objectives document"}],"failure":{"button":null,"message":"A good game checklist will help insure basic video game necessities such as a tight concept and fun mechanics.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn5-gamestructure-rules-micro-1","number_of_choices":4,"question":"The _____ is a broad scope view of the most fundamental elements needed to make a fun and functional video game.  ","start":3600,"success":{"button":null,"message":"A good game checklist will help insure basic video game necessities such as a tight concept and fun mechanics.  "},"type":null}],"reference":"game-structure-2","text":null,"title":"Creating Rules of a Game"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"game-structure","movie":".\/video\/gamestructure-rules-concept-micro-2.mp4","name":"Tight Concept","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"game design document\u0009   "},{"order":0,"points":0,"sticky":false,"text":"technical game document\u0009   "},{"order":0,"points":0,"sticky":false,"text":"good game checklist"},{"order":0,"points":100,"sticky":false,"text":"tight concept"}],"failure":{"button":null,"message":"A game's concept will likely be the first thing an audience learns about a game so it needs to be concise and compelling. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn6-gamestructure-concept-micro-2","number_of_choices":4,"question":"A _____ helps inform the audience how a game is structured and how the game might operate in play.","start":3600,"success":{"button":null,"message":"A game's concept will likely be the first thing an audience learns about a game so it needs to be concise and compelling. "},"type":null},{"choices":[{"order":0,"points":100,"sticky":false,"text":"be easy to comprehend \u0009   "},{"order":0,"points":0,"sticky":false,"text":"be complex\u0009   "},{"order":0,"points":0,"sticky":false,"text":"feature a single genre"},{"order":0,"points":0,"sticky":false,"text":"easy to master"}],"failure":{"button":null,"message":"Even if the mechanics of a game are vastly complex, a tight concept is easy for a player to understand. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn7-gamestructure-concept-micro-2","number_of_choices":4,"question":"As well as being fun, a tight concept must _____.","start":3600,"success":{"button":null,"message":"Even if the mechanics of a game are vastly complex, a tight concept is easy for a player to understand. "},"type":null}],"reference":"game-structure-2","text":null,"title":"Tight Concept"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"game-structure","movie":".\/video\/gamestructure-rules-fun-micro-3.mp4","name":"Fun Mechanics","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"objective opinion\u0009   "},{"order":0,"points":100,"sticky":false,"text":"subjective opinion   "},{"order":0,"points":0,"sticky":false,"text":"joystick control"},{"order":0,"points":0,"sticky":false,"text":"platform jumping"}],"failure":{"button":null,"message":"Beyond having objectively good structure, all games are subject to the personal preferences of each individual player. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn8-gamestructure-rules-fun-micro-3","number_of_choices":4,"question":"A \"fun\" mechanic is a combination of good structure and _____.","start":3600,"success":{"button":null,"message":"Beyond having objectively good structure, all games are subject to the personal preferences of each individual player. "},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"learned "},{"order":0,"points":0,"sticky":false,"text":"identified   "},{"order":0,"points":0,"sticky":false,"text":"improved upon through play"},{"order":21,"points":100,"sticky":false,"text":"All of the above"}],"failure":{"button":null,"message":"A good mechanic must be easy to identify, learned, and improved upon through repetition via play.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn9-gamestructure-rules-fun-micro-3","number_of_choices":4,"question":"A good mechanic is one that is easily _____.","start":3600,"success":{"button":null,"message":"A good mechanic must be easy to identify, learned, and improved upon through repetition via play.  "},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"effort; high scores"},{"order":0,"points":0,"sticky":false,"text":"outcomes; conflicts  "},{"order":0,"points":100,"sticky":false,"text":"labor: rewards"},{"order":0,"points":0,"sticky":false,"text":"reaction time; coordination"}],"failure":{"button":null,"message":"All games must balance a player's efforts to master a game and the rewards received for that effort.   "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn10-gamestructure-rules-fun-micro-3","number_of_choices":4,"question":"A good mechanic is created by balancing a player's _____ and _____.","start":3600,"success":{"button":null,"message":"All games must balance a player's efforts to master a game and the rewards received for that effort.   "},"type":null}],"reference":"game-structure-2","text":null,"title":"Fun Mechanics"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"game-structure","movie":".\/video\/gamestructure-rules-controls-micro-4.mp4","name":"Reactive Controls","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"restrictive controls\u0009   "},{"order":0,"points":0,"sticky":false,"text":"reactive mechanics\u0009   "},{"order":0,"points":100,"sticky":false,"text":"reactive controls"},{"order":0,"points":0,"sticky":false,"text":"repetitive fun"}],"failure":{"button":null,"message":"In other word, when Mario is told to jump by hitting a button on a controller, he jumps! "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn11-gamestructure-rules-controls-micro-4","number_of_choices":4,"question":"A game is considered to have _____ when a player has immediate response from a controller when needed. ","start":3600,"success":{"button":null,"message":"In other word, when Mario is told to jump by hitting a button on a controller, he jumps! "},"type":null},{"choices":[{"order":0,"points":100,"sticky":false,"text":"unplayable\u0009   "},{"order":0,"points":0,"sticky":false,"text":"fun\u0009   "},{"order":0,"points":0,"sticky":false,"text":"too easy"},{"order":0,"points":0,"sticky":false,"text":"rewarding"}],"failure":{"button":null,"message":"Nothing is more frustrating to players than non-reactive controllers."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn12-gamestructure-rules-controls-micro-4","number_of_choices":4,"question":"If a controller does not react when a player tells it to, the game will quickly become _____. ","start":3600,"success":{"button":null,"message":"Nothing is more frustrating to players than non-reactive controllers."},"type":null}],"reference":"game-structure-2","text":null,"title":"Reactive Controls"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"game-structure","movie":".\/video\/gamestructure-rules-rewards-micro-5.mp4","name":"Motivators and Rewards","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"genre\u0009   "},{"order":0,"points":0,"sticky":false,"text":"gimmicks\u0009   "},{"order":0,"points":100,"sticky":false,"text":"rewards"},{"order":0,"points":0,"sticky":false,"text":"cut scenes"}],"failure":{"button":null,"message":"A reward can be anything that creates satisfaction in a player's achievements while playing a game. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn13-gamestructure-rules-rewards-micro-5","number_of_choices":4,"question":"Through motivators and _____, game designers create incentives for people to play a game. ","start":3600,"success":{"button":null,"message":"A reward can be anything that creates satisfaction in a player's achievements while playing a game. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"easy mechanics\u0009   "},{"order":0,"points":100,"sticky":false,"text":"fun   "},{"order":0,"points":0,"sticky":false,"text":"jumping mechanics"},{"order":0,"points":0,"sticky":false,"text":"a tight concept"}],"failure":{"button":null,"message":"Fun is the ultimate reward for playing a game; it is also the hardest to achieve.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn14-gamestructure-rules-rewards-micro-5","number_of_choices":4,"question":"The best incentive a game can offer a player is _____.","start":3600,"success":{"button":null,"message":"Fun is the ultimate reward for playing a game; it is also the hardest to achieve.  "},"type":"Multiple"},{"choices":[{"order":0,"points":100,"sticky":false,"text":"improving \u0009   "},{"order":0,"points":0,"sticky":false,"text":"bypassing"},{"order":0,"points":0,"sticky":false,"text":"circumventing "},{"order":0,"points":0,"sticky":false,"text":"a tight concept"}],"failure":{"button":null,"message":"Clarity in mechanics helps create \"flow\"."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn15-gamestructure-rules-rewards-micro-5","number_of_choices":4,"question":"A well-structured mechanic demonstrates to the player a clear method of _____ the skills to execute the mechanic. ","start":3600,"success":{"button":null,"message":"Clarity in mechanics helps create \"flow\"."},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"mechanics\u0009   "},{"order":0,"points":0,"sticky":false,"text":"structure"},{"order":0,"points":100,"sticky":false,"text":"positive feedback"},{"order":0,"points":0,"sticky":false,"text":"a tight concept"}],"failure":{"button":null,"message":"Players know they are progressing in a game when they receive some form of positive feedback. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn16-gamestructure-rules-rewards-micro-5","number_of_choices":4,"question":"Experience points, completion of a level, and obtaining \"power-ups\" are all examples of _____.","start":3600,"success":{"button":null,"message":"Players know they are progressing in a game when they receive some form of positive feedback. "},"type":"Multiple"}],"reference":"game-structure-2","text":null,"title":"Motivators and Rewards"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"game-structure","movie":".\/video\/gamestructure-rules-interface-micro-6.mp4","name":"Smooth Interface","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"easy to navigate\u0009   "},{"order":0,"points":0,"sticky":false,"text":"has lots of buttons\u0009   "},{"order":0,"points":0,"sticky":false,"text":"includes chat options"},{"order":0,"points":0,"sticky":false,"text":"colorfully illustrated"}],"failure":{"button":null,"message":"Smooth interface allows players to easily navigate the game. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn17-gamestructure-interface-micro-6","number_of_choices":4,"question":"A smooth user interface is aesthetically pleasing and _____. ","start":3600,"success":{"button":null,"message":"Smooth interface allows players to easily navigate the game. "},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"objectives   "},{"order":0,"points":0,"sticky":false,"text":"conflict \u0009   "},{"order":0,"points":0,"sticky":false,"text":"competition"},{"order":0,"points":100,"sticky":false,"text":"fun"}],"failure":{"button":null,"message":"While not the only component in a game to create fun, without good interaction flow, a game will be frustrating.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn18-gamestructure-interface-micro-6","number_of_choices":4,"question":"Good interaction flow in a user interface helps reduce frustration and creates ____ for the player.","start":3600,"success":{"button":null,"message":"While not the only component in a game to create fun, without good interaction flow, a game will be frustrating.  "},"type":null}],"reference":"game-structure-2","text":null,"title":"Smooth Interface"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"game-structure","movie":".\/video\/gamestructure-rules-original-micro-7.mp4","name":"Original Style","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"True"},{"order":0,"points":100,"sticky":false,"text":"False"}],"failure":{"button":null,"message":"Games can achieve originality without creating new mechanics by focusing on sound, visuals, characters, story, and more.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn19-gamestructure-rules-original-micro-7","number_of_choices":2,"question":"True or False: In order for a game to achieve any form of originality, it must create new mechanics.","start":3600,"success":{"button":null,"message":"Games can achieve originality without creating new mechanics by focusing on sound, visuals, characters, story, and more.  "},"type":null},{"choices":[{"order":0,"points":100,"sticky":false,"text":"art and sound "},{"order":0,"points":0,"sticky":false,"text":"a genre"},{"order":0,"points":0,"sticky":false,"text":"reactive controllers"},{"order":0,"points":0,"sticky":false,"text":"a technical design document   "}],"failure":{"button":null,"message":"Angry Birds is an example of achieving original style through art and sound, without creating new mechanics.   "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn20-gamestructure-rules-original-micro-7","number_of_choices":4,"question":"A game's original style can be demonstrated to audiences with _____, as well as new mechanics.","start":3600,"success":{"button":null,"message":"Angry Birds is an example of achieving original style through art and sound, without creating new mechanics.   "},"type":null}],"reference":"game-structure-2","text":null,"title":"Original Style"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"game-structure","movie":".\/video\/gamestructure-rules-end-micro-8.mp4","name":"Creating Rules of a Game Summary","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"target audience\u0009   "},{"order":0,"points":0,"sticky":false,"text":"focused genre\u0009   "},{"order":0,"points":100,"sticky":false,"text":"game design document"},{"order":0,"points":0,"sticky":false,"text":"strong marketing campaign"}],"failure":{"button":null,"message":"Documentation is crucial to creating and retaining a game's structure during development. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn21-gamestructure-rules-end-micro-8","number_of_choices":4,"question":"The good game checklist, as well as a ____, helps give a game structure for development.","start":3600,"success":{"button":null,"message":"Documentation is crucial to creating and retaining a game's structure during development. "},"type":null}],"reference":"game-structure-2","text":null,"title":"Creating Rules of a Game Summary"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"game-structure","movie":".\/video\/gamestructure-oco-objectives-micro-1.mp4","name":"Objectives, Conflicts & Outcomes","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"conflict\u0009   "},{"order":0,"points":100,"sticky":false,"text":"objective  "},{"order":0,"points":0,"sticky":false,"text":"challenge"},{"order":0,"points":0,"sticky":false,"text":"interface"}],"failure":{"button":null,"message":"All games offer players objectives to discover and accomplish. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn22-gamestructure-oco-objectives-micro-1","number_of_choices":4,"question":"A(n) _____ is an in-game goal for players to discover and achieve.","start":3600,"success":{"button":null,"message":"All games offer players objectives to discover and accomplish. "},"type":null},{"choices":[{"order":0,"points":100,"sticky":false,"text":"short term   "},{"order":0,"points":0,"sticky":false,"text":"end game "},{"order":0,"points":0,"sticky":false,"text":"frustrating"},{"order":0,"points":0,"sticky":false,"text":"fun"}],"failure":{"button":null,"message":"Most games use learning new skills and abilities as short term objectives.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn23-gamestructure-oco-objectives-micro-1","number_of_choices":4,"question":"Learning a new skill will typically be a _____ objective. ","start":3600,"success":{"button":null,"message":"Most games use learning new skills and abilities as short term objectives.  "},"type":null}],"reference":"game-structure-3","text":null,"title":"Objectives, Conflicts & Outcomes"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"game-structure","movie":".\/video\/gamestructure-oco-objectiveexample-micro-2.mp4","name":"Objective Examples","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"Smooth interface\u0009   "},{"order":0,"points":0,"sticky":false,"text":"Reactive controls\u0009   "},{"order":0,"points":0,"sticky":false,"text":"Original style"},{"order":0,"points":100,"sticky":false,"text":"Completing a quest"}],"failure":{"button":null,"message":"Completing a quest would be an in-game player objective, while the other choices are objectives of the development team. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn24-gamestructure-oco-objectiveexample-micro-2","number_of_choices":4,"question":"Which of the following could be considered an in-game objective of a player in a video game?","start":3600,"success":{"button":null,"message":"Completing a quest would be an in-game player objective, while the other choices are objectives of the development team. "},"type":null},{"choices":[{"order":0,"points":100,"sticky":false,"text":"Chess   "},{"order":0,"points":0,"sticky":false,"text":"Tetris    "},{"order":0,"points":0,"sticky":false,"text":"Sim City"},{"order":21,"points":0,"sticky":false,"text":"None of the above"}],"failure":{"button":null,"message":"Chess is a game where the ultimate objective is to eliminate your opponent's king.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn25-gamestructure-oco-objectiveexample-micro-2","number_of_choices":4,"question":"Which of the following games have \"destroy & eliminate\" objectives?","start":3600,"success":{"button":null,"message":"Chess is a game where the ultimate objective is to eliminate your opponent's king.  "},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Arcade games "},{"order":0,"points":0,"sticky":false,"text":"Sports games   "},{"order":0,"points":100,"sticky":false,"text":"Simulation games"},{"order":0,"points":0,"sticky":false,"text":"Strategy war games"}],"failure":{"button":null,"message":"Railroad Tycoon is a simulation games where the main objective is to build a railroad empire.   "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn26-gamestructure-oco-objectiveexample-micro-2","number_of_choices":4,"question":"Which of the following types of games are based on objectives to create or build something?","start":3600,"success":{"button":null,"message":"Railroad Tycoon is a simulation games where the main objective is to build a railroad empire.   "},"type":null}],"reference":"game-structure-3","text":null,"title":"Objective Examples"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"game-structure","movie":".\/video\/gamestructure-oco-conflict-micro-3.mp4","name":"Why Conflict?","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"non-player characters\u0009   "},{"order":0,"points":100,"sticky":false,"text":"conflicts\u0009   "},{"order":0,"points":0,"sticky":false,"text":"rewards"},{"order":0,"points":0,"sticky":false,"text":"controller reactions"}],"failure":{"button":null,"message":"Without conflict, objectives are achieved too easily and become boring. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn27-gamestructure-oco-conflict-micro-3","number_of_choices":4,"question":"In all games, _____ are what makes achieving objectives a challenge.","start":3600,"success":{"button":null,"message":"Without conflict, objectives are achieved too easily and become boring. "},"type":null}],"reference":"game-structure-3","text":null,"title":"Why Conflict?"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"game-structure","movie":".\/video\/gamestructure-oco-conflictexample-micro-4.mp4","name":"Examples of Conflict","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"opponents; obstacles; dilemmas\u0009   "},{"order":0,"points":0,"sticky":false,"text":"opponents; obstacles; objectives\u0009   "},{"order":0,"points":0,"sticky":false,"text":"opponents; objectives; dilemmas"},{"order":0,"points":0,"sticky":false,"text":"obstacles; orientation, opponents"}],"failure":{"button":null,"message":"All conflict in a video game will have at least one opponent, obstacle, or dilemma to resolve."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn28-gamestructure-oco-conflictexample-micro-4","number_of_choices":4,"question":"The three most basic components for creating conflict in a video game are _____, _____, and _____.","start":3600,"success":{"button":null,"message":"All conflict in a video game will have at least one opponent, obstacle, or dilemma to resolve."},"type":"Multiple"},{"choices":[{"order":0,"points":100,"sticky":false,"text":"opponents\u0009   "},{"order":0,"points":0,"sticky":false,"text":"objectives\u0009   "},{"order":0,"points":0,"sticky":false,"text":"dilemmas"},{"order":0,"points":0,"sticky":false,"text":"obstacles"}],"failure":{"button":null,"message":"In video games, an opponent, typically, is another player or a non-player character, such as a monster. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn29-gamestructure-oco-conflictexample-micro-4","number_of_choices":4,"question":"In a video game, _____ offer conflict between players and\/or non-player characters. ","start":3600,"success":{"button":null,"message":"In video games, an opponent, typically, is another player or a non-player character, such as a monster. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"opponents\u0009   "},{"order":0,"points":0,"sticky":false,"text":"objectives\u0009   "},{"order":0,"points":100,"sticky":false,"text":"dilemmas"},{"order":0,"points":0,"sticky":false,"text":"obstacles"}],"failure":{"button":null,"message":"Often there is no wrong or right decision with a dilemma, only trade-offs of positive and negative outcomes. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn30-gamestructure-oco-conflictexample-micro-4","number_of_choices":4,"question":"_____ are choices a player must make that come with trade-offs. ","start":3600,"success":{"button":null,"message":"Often there is no wrong or right decision with a dilemma, only trade-offs of positive and negative outcomes. "},"type":"Multiple"}],"reference":"game-structure-3","text":null,"title":"Examples of Conflict"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"game-structure","movie":".\/video\/gamestructure-oco-outcomes-micro-5.mp4","name":"Determining Outcomes","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"Motivators\u0009   "},{"order":0,"points":0,"sticky":false,"text":"Dilemmas\u0009   "},{"order":0,"points":0,"sticky":false,"text":"Obstacles"},{"order":0,"points":100,"sticky":false,"text":"Outcomes"}],"failure":{"button":null,"message":"Whether a player is successful or not, the conclusion of a conflict creates an outcome. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn31-gamestructure-oco-outcomes-micro-5","number_of_choices":4,"question":"_____ are the consequences of a player's success or failure when dealing with conflict.  ","start":3600,"success":{"button":null,"message":"Whether a player is successful or not, the conclusion of a conflict creates an outcome. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"motivated\u0009   "},{"order":0,"points":100,"sticky":false,"text":"frustrated "},{"order":0,"points":0,"sticky":false,"text":"competitive"},{"order":0,"points":0,"sticky":false,"text":"cooperative"}],"failure":{"button":null,"message":"Balance of work and reward is the real trick of creating good structure in video games. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn32-gamestructure-oco-outcomes-micro-5","number_of_choices":4,"question":"If an outcome requires too much work for too little reward, a player could become _____.","start":3600,"success":{"button":null,"message":"Balance of work and reward is the real trick of creating good structure in video games. "},"type":"Multiple"}],"reference":"game-structure-3","text":null,"title":"Determining Outcomes"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"game-structure","movie":".\/video\/gamestructure-economies-intro-micro-1.mp4","name":"In-Game Economies","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"sale\u0009   "},{"order":0,"points":0,"sticky":false,"text":"micro-transaction\u0009   "},{"order":0,"points":100,"sticky":false,"text":"in-game economy"},{"order":0,"points":0,"sticky":false,"text":"objective economy"}],"failure":{"button":null,"message":"Different games structure their in-game economies with different goals. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn33-gamestructure-economies-intro-micro-1","number_of_choices":4,"question":"A system within a video game that facilitates buying and selling of goods through some sort of currency is generally called a(n) _____.","start":3600,"success":{"button":null,"message":"Different games structure their in-game economies with different goals. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Hard\u0009   "},{"order":0,"points":100,"sticky":false,"text":"Soft\u0009   "},{"order":0,"points":0,"sticky":false,"text":"Coin"},{"order":0,"points":0,"sticky":false,"text":"Micro-transaction"}],"failure":{"button":null,"message":"Games with soft money economies do not allow real money to influence gameplay. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn34-gamestructure-economies-intro-micro-1","number_of_choices":4,"question":"_____ currency is completely contained within the game and represents no real value outside of the game. ","start":3600,"success":{"button":null,"message":"Games with soft money economies do not allow real money to influence gameplay. "},"type":"Multiple"},{"choices":[{"order":0,"points":100,"sticky":false,"text":"hard\u0009   "},{"order":0,"points":0,"sticky":false,"text":"soft\u0009   "},{"order":0,"points":0,"sticky":false,"text":"green"},{"order":0,"points":0,"sticky":false,"text":"keynesian"}],"failure":{"button":null,"message":"Games with hard money economies do allow real money to influence gameplay. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn35-gamestructure-economies-intro-micro-1","number_of_choices":4,"question":"Games with _____ currency systems allow players to spend real money to purchase items or advantages in-play. ","start":3600,"success":{"button":null,"message":"Games with hard money economies do allow real money to influence gameplay. "},"type":"Multiple"}],"reference":"game-structure-4","text":null,"title":"In-Game Economies"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"game-structure","movie":".\/video\/gamestructure-economies-virtual-micro-2.mp4","name":"Virtual Currency","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"priority\u0009   "},{"order":0,"points":0,"sticky":false,"text":"incentive\u0009   "},{"order":0,"points":0,"sticky":false,"text":"vital"},{"order":0,"points":100,"sticky":false,"text":"virtual"}],"failure":{"button":null,"message":"Elder Scrolls V: Skyrim is an excellent example of a game with a virtual currency in-game economy."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn36-gamestructure-economies-virtual-micro-2","number_of_choices":4,"question":"In video games, a _____ currency system uses soft money to allow players to purchase improvements for their characters. ","start":3600,"success":{"button":null,"message":"Elder Scrolls V: Skyrim is an excellent example of a game with a virtual currency in-game economy."},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"competition; rewards   "},{"order":0,"points":100,"sticky":false,"text":"incentives; rewards   "},{"order":0,"points":0,"sticky":false,"text":"booms: busts"},{"order":0,"points":0,"sticky":false,"text":"houses; micro-transactions"}],"failure":{"button":null,"message":"By not allowing real currency to affect gameplay, players must play the game as intended to gain in-game money.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn37-gamestructure-economies-virtual-micro-2","number_of_choices":4,"question":"Games use virtual currency to create _____ and _____ for players. ","start":3600,"success":{"button":null,"message":"By not allowing real currency to affect gameplay, players must play the game as intended to gain in-game money.  "},"type":null}],"reference":"game-structure-4","text":null,"title":"Virtual Currency"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"game-structure","movie":".\/video\/gamestructure-economies-virtualexample-micro-3.mp4","name":"Example of Virtual Currency","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"micro-transactions\u0009   "},{"order":0,"points":100,"sticky":false,"text":"real-world economies\u0009   "},{"order":0,"points":0,"sticky":false,"text":"soft money"},{"order":0,"points":0,"sticky":false,"text":"game theory"}],"failure":{"button":null,"message":"Eve Online is, effectively, a real economy in a virtual world. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn38-gamestructure-economies-virtualexample-micro-3","number_of_choices":4,"question":"Eve Online creates such an in-depth economy, it imitates _____.","start":3600,"success":{"button":null,"message":"Eve Online is, effectively, a real economy in a virtual world. "},"type":null}],"reference":"game-structure-4","text":null,"title":"Example of Virtual Currency"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"game-structure","movie":".\/video\/gamestructure-economies-microtransactions-micro-4.mp4","name":"Micro-Transactions","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"virtual currency\u0009   "},{"order":0,"points":0,"sticky":false,"text":"experience points\u0009   "},{"order":0,"points":0,"sticky":false,"text":"pre-orders"},{"order":0,"points":100,"sticky":false,"text":"real-world currency"}],"failure":{"button":null,"message":"Many app games are developed with a micro-transaction currency systems.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn39-gamestructure-economies-microtransactions-micro-4","number_of_choices":4,"question":"Many games with micro-transactions are free to play but make money by selling in-game items for _____.","start":3600,"success":{"button":null,"message":"Many app games are developed with a micro-transaction currency systems.  "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"virtual; real-world\u0009   "},{"order":0,"points":100,"sticky":false,"text":"more: less\u0009   "},{"order":0,"points":0,"sticky":false,"text":"less: more"},{"order":0,"points":0,"sticky":false,"text":"virtual: monopoly"}],"failure":{"button":null,"message":"Micro-transactions are controversial because they offer players with more money in-game advantages over those with less money. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn40-gamestructure-economies-microtransactions-micro-4","number_of_choices":4,"question":"Micro-transactions are controversial because they offer players with _____ money in-game advantages over those with _____ money.","start":3600,"success":{"button":null,"message":"Micro-transactions are controversial because they offer players with more money in-game advantages over those with less money. "},"type":"Multiple"},{"choices":[{"order":0,"points":100,"sticky":false,"text":"Multi-player\u0009   "},{"order":0,"points":0,"sticky":false,"text":"Single-player\u0009   "},{"order":0,"points":0,"sticky":false,"text":"Rated \"Teen\""},{"order":0,"points":0,"sticky":false,"text":"Console "}],"failure":{"button":null,"message":"Micro-transactions in multi-player games has a huge impact on player vs player gameplay. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn41-gamestructure-economies-microtransactions-micro-4","number_of_choices":4,"question":"_____ games are the most affected by micro-transaction economies because they create imbalance of power among players. ","start":3600,"success":{"button":null,"message":"Micro-transactions in multi-player games has a huge impact on player vs player gameplay. "},"type":"Multiple"}],"reference":"game-structure-4","text":null,"title":"Micro-Transactions"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"game-structure","movie":".\/video\/gamestructure-economies-microtransactionsexample-micro-5.mp4","name":"Example of Micro-Economies","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"micro-transaction\u0009   "},{"order":0,"points":0,"sticky":false,"text":"virtual\u0009   "},{"order":0,"points":0,"sticky":false,"text":"real-world"},{"order":21,"points":0,"sticky":false,"text":"None of the above"}],"failure":{"button":null,"message":"Instead of in-game advantages, Team Fortress 2 allows players to purchase customizations to the way a player's character looks in the game. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn42-gamestructure-microtransactionsexamples -intro-micro-5","number_of_choices":4,"question":"Team Fortress 2 uses a _____ economy, but does not allow players to purchase in-game advantages over other players. ","start":3600,"success":{"button":null,"message":"Instead of in-game advantages, Team Fortress 2 allows players to purchase customizations to the way a player's character looks in the game. "},"type":null}],"reference":"game-structure-4","text":null,"title":"Example of Micro-Economies"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"game-structure","movie":".\/video\/gamestructure-economies-auctionhouse-micro-6.mp4","name":"Auction Houses","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"micro-transaction\u0009   "},{"order":0,"points":100,"sticky":false,"text":"auction house\u0009   "},{"order":0,"points":0,"sticky":false,"text":"guild\u0009"},{"order":0,"points":0,"sticky":false,"text":"dilemma"}],"failure":{"button":null,"message":"Auction houses can work with real or virtual currency, or both."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn43-gamestructure-economies-auctionhouse-micro-6","number_of_choices":4,"question":"A video game _____ allows players to buy and sell in-game items among themselves.","start":3600,"success":{"button":null,"message":"Auction houses can work with real or virtual currency, or both."},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"snake oil salesmen \u0009   "},{"order":0,"points":100,"sticky":false,"text":"merchants\u0009   "},{"order":0,"points":0,"sticky":false,"text":"tax collectors\u0009"},{"order":0,"points":0,"sticky":false,"text":"story tellers"}],"failure":{"button":null,"message":"In many games with auction houses, players have options to avoid most intended gameplay and focus only on buying and selling goods to other players. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn44-gamestructure-economies-auctionhouse-micro-6","number_of_choices":4,"question":"Many games with auction houses actually allow players to be in-game _____.","start":3600,"success":{"button":null,"message":"In many games with auction houses, players have options to avoid most intended gameplay and focus only on buying and selling goods to other players. "},"type":null}],"reference":"game-structure-4","text":null,"title":"Auction Houses"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"game-structure","movie":".\/video\/gamestructure-economies-auctionhouseexample-micro-7.mp4","name":"Example of an Auction House","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"Halo\u0009   "},{"order":0,"points":100,"sticky":false,"text":"World of Warcraft\u0009   "},{"order":0,"points":0,"sticky":false,"text":"chess"},{"order":0,"points":0,"sticky":false,"text":"Angry Birds"}],"failure":{"button":null,"message":"World of Warcraft is a MMO RPG featuring a massive auction house for players to buy and sell with virtual currency. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn45-gamestructure-economies-auctionhouseexample-micro-7","number_of_choices":4,"question":"The game _____ features a huge auction house where hundreds, or even thousands, of players participate in the world economy. ","start":3600,"success":{"button":null,"message":"World of Warcraft is a MMO RPG featuring a massive auction house for players to buy and sell with virtual currency. "},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"virtual currency\u0009   "},{"order":0,"points":100,"sticky":false,"text":"real-world currency\u0009   "},{"order":0,"points":0,"sticky":false,"text":"nepotism "},{"order":0,"points":0,"sticky":false,"text":"refunds"}],"failure":{"button":null,"message":"The only currency allowed in World of Warcraft auction houses is virtual currency found within the game world.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn46-gamestructure-economies-auctionhouseexample-micro-7","number_of_choices":4,"question":"World of Warcraft keeps balance among players by disallowing _____ in their auction houses.  ","start":3600,"success":{"button":null,"message":"The only currency allowed in World of Warcraft auction houses is virtual currency found within the game world.  "},"type":null}],"reference":"game-structure-4","text":null,"title":"Example of an Auction House"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"game-structure","movie":".\/video\/gamestructure-economies-models-micro-8.mp4","name":"Game Economies as Virtual Models","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"game design\u0009   "},{"order":0,"points":100,"sticky":false,"text":"real-world economies\u0009   "},{"order":0,"points":0,"sticky":false,"text":"marketing"},{"order":0,"points":0,"sticky":false,"text":"target audiences "}],"failure":{"button":null,"message":"Many MMOs with vast in-game economies allow us to study economic models with real person motivations and interactions in play. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn47-gamestructure-economies-models-micro-8","number_of_choices":4,"question":"Virtual economies in video games have become so complex they are used as models for understanding _____. ","start":3600,"success":{"button":null,"message":"Many MMOs with vast in-game economies allow us to study economic models with real person motivations and interactions in play. "},"type":null}],"reference":"game-structure-4","text":null,"title":"Game Economies as Virtual Models"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"reference","mod":"","movie":null,"name":"Reference","promptfile":null,"prompts":null,"reference":null,"text":"<a id=\"game-structure-1\" class=\"dest\"><\/a><div class=\"accent\"><h1>Overview<\/h1><p>There is no single, perfect structure for building a video game. <span style=\"color: #3f4549;\">We must consider all of the common elements of structure such as in-game characters, challenges, input devices (controllers), a keyboard, mouse, <\/span>an output device (a monitor) - and there is still a vast amount of unique complexity to sort through. Programming helps determine structure, but programming needs the architecture of game design to be fluid and functional. <span style=\"color: #3f4549;\">The Game Design Document will outline the structures of the in game experiences while the Technical Design Document will outline the specific technical requirements and decisions for the structure of the game<\/span><\/p><p>For this Module, we will take a very board look at video game structure in terms of how systems and concepts create structure. We will examine a Good Game Checklist to make sure the fundamentals of game design in structure are covered. We will also examine some ways to integrate player objectives, and how to motivate play through some time tested tricks of the industry. Finally, we will look at how In-Game economies work and add their own structures to a game.<\/p><p>In detail, this Module will cover:<\/p><div style=\"text-align: center;\"><ul class=\"anchorGroup\" style=\"text-align: left; display: inline-block;\"><li><a class=\"ankor\" href=\"#game-structure-2\">Creating Rules for a Video Game<\/a><\/li><li><a class=\"ankor\" href=\"#game-structure-3\">Objectives, Conflicts, and Outcomes<\/a><\/li><li><a class=\"ankor\" href=\"#game-structure-4\">In-Game Economies<\/a><\/li><\/ul><\/div><\/div><a class=\"dest\" id=\"game-structure-2\"><\/a>&nbsp;<div class=\"accent\"><h1>Creating Rules of a Game<\/h1><p>There is no real standard for how a video game should be structured. Programming will demand its own structure standards, but there are many non-programming based structure concepts that will always be valid to consider. We call this the Good Game Checklist. It is a broad scope view of the most fundamental elements that need to be considered in creating a fun, well-conceived game or mechanic.<\/p><h3>Tight Concept<\/h3><p>A tight concept is a crucial step in the process of structuring a solid video game. The brilliance of a concept will automatically inform the player of how the game is built and how it may operate. When creating a concept for a mechanic it should serve a purpose. Most often this purpose is going to be that it serves to entertain the player and inform them of the game mechanics, the world or some other part of the game the designer wants the player to experience. In addition to being entertaining, a tight concept, no matter how complex its design and function, must be easy to comprehend for the Player. Remember, though, that easy comprehension of how the concept works is not the same as making it easy to master. This plays more into the next item on our checklist.<\/p><img class=\"aligncenter\" src=\".\/images\/image_tetrisblocks.png\" alt=\"image_tetrisblocks\" width=\"729\" height=\"248\" \/><p><em>Pac-Man<\/em> is an example of a game with a tight concept. The gameplay is easy to understand; the mechanics are compelling and easy to learn but difficult to master; and the whole experience is enhanced by terrific sound and images. The concept is concise and well executed.<\/p><h3>Fun Mechanics<\/h3><p>Once a tight concept has been established, the next step is to make fun mechanics. So what makes a mechanic fun? It must be more than just the act of pushing letters on a keyboard or typing essays on a computer would be great entertainment. What makes any mechanic “fun” is strictly a matter of subjective option vs. good structure. There are, however, a few general concepts to keep in mind. First, a fun mechanic is easy to identify. The Player instantly understands what the task or mechanic is and why it must be performed. Secondly, once identified, the mechanic must be easy to learn and improve upon. Players have fun when they perceive themselves mastering, even slowly, a mechanic. This is really a balance of labor vs. reward, which will be discussed more below. Finally, a fun mechanic is meaningful or “deep”. Meaningful, in game terms, means that while the mechanic is fun to explore for the Player, it actually has a larger purpose or meaning within the game. This purpose could be any number of things; psychological immersion adding enjoyment to the experience; educational value where the mechanic actually teaches a skill or some aspect of the game world; or just building a cohesive experience to define the gameplay. In other words, a meaningful mechanic is designed to express the themes and functions of the game while remaining easy to identify and easy to get started learning and improving.<\/p><p>Sports games often shine because their mechanics so closely resemble the actions on the field. There mechanics are meaningful in that they feel like real actions a player would take, and fun in that they allow a player to feel the thrill of playing professional sports.<\/p><h3>Reactive Controls<\/h3><p>Even a great concept for a new and innovative mechanic can be instantly derailed by poor execution of the player's control of that mechanic. Poor, or un-reactive, control creates frustration in the player and causes them to want to quit the game. All of the promises of fun and meaningful mechanics are lost to the fact that the controls to enact a mechanic are unable to create the desired purpose simply because of sloppy execution.<\/p><p>The goal here is to create reactive controls. Reactive control means the player can easily use the controller to accomplish goals and has immediate response from the controller when they want or need it. When this works as it should, the player actually forgets about using the controller consciously and begins to seamlessly blend mechanics and immersive gameplay. They become “lost” in the game's intended design instead of being aware of it.<\/p><p>For example, timing jumps are crucial to games like <em>Mario Bros<\/em>. and other platform jumpers. If Mario does not jump at the exact moment the player pushes the button he will miss the target. In this case, the controller reaction will make the game unplayable.<\/p><h3>Motivators and Rewards<\/h3><p>By integrating a tight concept, fun mechanics, and reactive controls, we now have the tools to create incentives for players to continue playing the game. Incentives are the motivators and rewards that give the player a reason to play. Fun is always the best motivator and reward, but fun can also be the hardest incentive to achieve.<\/p><p>In one game, the mechanic to jump the gap is motivated by the reward of reaching the other side and continuing the game. When the Player attempts to make the jump, the reactive controls gives them a high chance of success with practice and a sense of fun in ultimately achieving the goal of making the jump. Here we not only have a series of motivators and rewards, but each combines and adds to the other creating larger loops of motivators and rewards. For example, along with jump, the player may have been mastering other controller skills simultaneously. The skills sync perfectly with all of the other game elements such as sound and visuals. Each of these isolated mechanics then combines in the overall experience to create an accumulative motivator and reward cycle.<\/p><p>There are three basic considerations when designing motivators and rewards. The first is the idea of creating consistent player skill improvement. This is in addition to fun and smooth controls. The player needs to feel as if they are making progress mastering the controls and challenges throughout the course of the game. Failing this creates frustration and a willingness to drop the game. The player must also identify a clear learning curve to improvement. This allows the skill mastering to be challenging without the player wondering if they are, in fact, improving. This is followed with positive feedback, or an acknowledgement from the game that the player is doing well and improving. Positive feedback can come in many different forms, such as; awarding experience points; a power-up of some kind; completion of a level; a new in-game ability and more.<\/p><h3>Smooth Interface<\/h3><p>Much like the need for a reactive controller, a smooth interface design not only enhances gameplay, but it also helps eliminate player frustration. This is done by designing interactions with the interface to be easy to navigate and organized to be pleasing to the eye. Easy to navigate means the player doesn't spend time looking for ways to do the things they want to in the game. This includes not only the gameplay interface, but all the other interfaces such as options screens, save and load screens, etc. When a game interface has these components and quickly gets the player to having fun, it is said to have good flow.<\/p><h3>Original Style<\/h3><p>This might seem to go without saying but a game concept or mechanic should have originality. Believe it or not, not every possible video game mechanic has been invented yet. While it is true, the most obvious and basic mechanics are now well utilized (if not overused) there are always new ideas to develop. It is not, however, strictly required to create new mechanics. Even with an old mechanic, there is still room to explore and expand the ground already covered. In general, we can approach originality in a number of ways. The most obvious and easy to customize are the sound and visuals. New character and sound design can make the old seem new again, at least for a while. To counter the inevitable “I've done this before” effect, the mechanic can be innovated. In our jump example, we could add a double-jump allowing the character to reach bigger heights. Finally, we can add some creative flair. Perhaps the character does a flip in the air when jumping or perhaps they land in a gymnastics-like victory stance. The point is, there are many things to make a mechanic feel new and fun again without having to create entirely new concepts.<\/p><\/div><a class=\"dest\" id=\"game-structure-3\"><\/a>&nbsp;<div class=\"accent\"><h1>Objectives, Conflicts, and Outcomes<\/h1><p>We can think of the structure of almost any game as breaking down into a set of objectives, conflicts, and outcomes.<\/p><h3>Objectives<\/h3><p>Objectives are in-game goals for the player to accomplish or master. These can be immediate objectives, such as jumping a gap; long-term objectives, such as defeating a level; or game objectives such as defeating the final boss. Layered objectives work nicely to constantly give the player short-term, long-term, and game wide interest and immersion throughout the entirety of the game.<\/p><img class=\"aligncenter\" src=\".\/images\/image_ObjectivesConflictsOutcomes.png\" alt=\"image_ObjectivesConflictsOutcomes\" width=\"719\" height=\"179\" \/><h3>Conflicts<\/h3><p>Conflict is what makes achieving objectives a challenge. Conflicts are designed to maximize the fun of achieving an objective without making it too easy or too hard for the player. The three most basic tools for creating conflict in a game are the use of opponents, obstacles, and dilemmas. Opponents represent conflicts with NPCs or other players. NPCs (or other characters for that matter) can be just about anything that reacts to a player's physical proximity. They typically force the player to deal with them in some particular manner such as combat or other competition. Obstacles are usually fixed location conflicts that are part of the game's environment. They often require the player to make decisions on what path to take or in finding ways around the obstacle. Often an obstacle is combined with a puzzle as the way of circumventing an obstacle. Finally, dilemmas create conflicts in the choices the player must make. For example, open world games present dilemmas of early world exploration vs. safe character growth. Even <em>Pac-Man<\/em> creates dilemmas: Is it worth trying to eat the cherry? Should ghost be attacked or when vulnerable or should Pac-Man just concentrate on eating the dots?<\/p><h3>Outcomes<\/h3><p>Outcomes are the consequences of a player's success or failure in conflicts. Games want to emphasis positive success outcomes and negative failure outcomes. This is tricky, however, because we don't want to over-reward or over-punish and we don't want to under-reward or under-punish. Balance, once again, is the key to making it fun and seamless. In many ways, outcomes are the most crucial to get right, because the positive outcomes of success are what will motivate the player to keep going. Too much work for too little reward and the player will become frustrated. Too much reward for too little work and the player will become bored.<\/p><\/div><a class=\"dest\" id=\"game-structure-4\"><\/a>&nbsp;<div class=\"accent\"><h1>In-Game Economies<\/h1><p>Video games are structures within structures within more structures. The bigger and more complex a game, the more structures it will have and support. As an example of an isolated structure that affects the overall structure of a game, let's look at in-game economies in video games.<\/p><img class=\"aligncenter\" src=\".\/images\/image_GameEconomy.png\" alt=\"image_GameEconomy\" width=\"626\" height=\"470\" \/><h3>Virtual Currency<\/h3><p>There are many types of in-game economies with different purposes. Most common is the concept of virtual currency. Virtual currency systems, at their most basic, are structures within the game that allow the player(s) a way of customization; or the designer a way to control player improvement while teasing greater power to come. For example, a fantasy RPG may have the option to visit shops and purchase items. The gold to purchase these items comes from defeating monsters in the world (Objective=take gold from monsters; Conflict=monster's fight to keep it; Outcome=defeat monsters, get gold). Once the player has the gold, shops offer ways to spend that gold on better equipment that, in turn, allow the player to fight bigger monsters for bigger gold rewards. Clever design will also have items that offer great advantages (a flame sword perhaps) but is also out of the affordable range of the player upon seeing the option to buy it for the first time. Now the player is even more motivated to return to gameplay to fight more monsters and eventually earn the gold to buy the flaming sword.<\/p><p><em>Eve Online<\/em> is an excellent example of another type of in-game economy that uses virtual currency.  Eve's in-game economy is complex and vast and functions in many ways how real world economies behave. Players can collect materials in the game world, manufacture items with that material, and then bring those items to an in-game market that all players have access to. This system is so detailed that players can actually play exclusively as manufacturers and merchants, and do nothing else if they wish.<\/p><img class=\"aligncenter\" src=\".\/images\/image_Microtransactions.png\" alt=\"image_Microtransactions\" width=\"341\" height=\"273\" \/><h3>Micro-Transactions<\/h3><p>Micro-transaction economies are a little different. Typically, games with micro-transactions use them as a for profit pay model for the game. These games offer most or all of the game's content for free, but also offer the player(s) an opportunity to spend virtual currency (this time bought with real money) on upgrades and advantages in the game. For example, instead of exploring ten dungeons to accumulate the coins to purchase that flaming sword, the player simply paid five dollars in real cash (which he has because the game was free) to get the sword immediately. This kind of structure, however, can create many problems in design. By its very design, players with more money can instantly have an advantage over players with less money. If the game is multiplayer or an MMO, this can create balance issues that cause frustration and boredom at the same time; making the game for players with the flaming sword too easy and too hard for those without it.<\/p><p><em>Valve's<\/em> <em>Team Fortress 2<\/em> offers a compromise on micro-transaction purchases. Players are not able to purchase items that give a them an in-game advantage over other players. Instead, they can purchase special hats or rare weapons designs that customize a player character's look and style but not their effectiveness in the game. This has proven to be an incredibly successful pay model for Valve and very popular among Team Fortress 2 fans.<\/p><h3>Auction Houses<\/h3><p>Auction Houses are a sort compromise between strictly in-game economies and micro-economies. They allow an in-game market where supply and demand for purchasable items are determined by the players themselves. All items sold at the auction house come from achieving objectives in the game just like normal. However, players are then free to sell their spoils to other players at a price they determine themselves through open auction. This model actually creates new motivations for players. Perhaps a player has completed the game and now finds fun being a merchant of sorts to new players. This model also creates new, unexpected content, as players send other players on quests to bring items to the auction house.<\/p><p><em>Blizzard's World of Warcraft<\/em> has an in-game auction house with thousands of items. Each item was created or acquired within the game by a player and then brought to the auction house to sell to another player. In this case, no real-world currency is allowed, only virtual, in-game currency found while playing the game is accepted. This system also rewards those who play the game for long hours over those with extra real world cash to spend.<\/p><h3>Game Economies as Virtual Models<\/h3><p>Perhaps most fascinating is that in-game economies are actually virtual models of how real-world economies work. Bad in-game economies can destroy the intended markets just like good structures can make markets flourish. Each game with a virtual currency is a mini social experiment with economies that any market economists would be fascinated by. They, in fact, teach us how markets work and react with specific decisions and structures.<\/p><\/div><!--page:~~game-structure-reference-text~~-->","title":"Reference Material"},{"bIsChecked":true,"exercise":".\/exercise\/DevProProspectorPeril_ReactiveControls.stack","instructions":"        <h1>Goal<\/h1>        <p>            In this Exercise, we will evaluate a version of our vertical endless runner, <em>Prospector Peril<\/em>, using the Good Game Checklist.  We will then modify elements of the game, including the reactivity of the controls and the rewards and motivators, to meet more of the \"Good Game\" criteria.        <\/p>        <img class=\"aligncenter size-full wp-image-701\" src=\".\/images\/game-structure-reactivecontrols-gamesnap-exercise_1.png\" alt=\"game-structure-reactivecontrols-gamesnap-exercise_1\" width=\"640\" height=\"360\" \/><p style=\"text-align: center;\">The final game should look similar to the one in this image.<\/p>        <h1>Is Prospector Peril a \"Good Game\"?<\/h1>        <p>First, let's see what the game looks like without modification.        <ol>            <li>Run the Exercise by clicking the green flag. Click the \"play!\" button and use the arrow keys to play. (Press the up arrow to start the game.  The right and left arrows control the Prospector's horizontal movement, and the down arrow makes him dive down to attack objects.) We can quickly sense that the controls are not properly reactive - the prospector moves much too slowly from left to right and much too quickly when attacking downward.<\/li>            <li>Click the red stop sign to stop running the Exercise.<\/li>\u0009\u0009\u0009<li>Evaluate this version of Prospector Peril using the Good Game Checklist below.  Remember that these questions are subjective and different people might come to different conclusions.  Be prepared to give reasons for your ratings in each category.<\/li><\/ol><\/p>\u0009\u0009<p><\/p>\u0009\u0009\u0009<h2>Good Game Checklist<\/h2>\u0009\u0009\u0009\u0009<p><ul><li>Tight Concept<\/li>\u0009\u0009\u0009\u0009\u0009<ul><li>Is the game easy to learn but difficult to master?<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<li>Does the sound enhance the experience?<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<li>Do the images enhance the experience?<\/li><\/ul>\u0009\u0009\u0009\u0009\u0009<li>Fun Mechanics<\/li>\u0009\u0009\u0009\u0009\u0009<ul><li>Are the game mechanics easy to identify?<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<li>Are the game mechanics easy to learn?<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<li>Do the game mechanics have a purpose?<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<li>Is it easy to improve your skill?<\/li><\/ul>\u0009\u0009\u0009\u0009\u0009<li>Reactive Controls<\/li>\u0009\u0009\u0009\u0009\u0009<ul><li>Is it easy to create your intended action?<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<li>Do you get an immediate response from the controller?<\/li><\/ul>\u0009\u0009\u0009\u0009\u0009<li>Motivators and Rewards<\/li>\u0009\u0009\u0009\u0009\u0009<ul><li>Does the game allow for consistent skill improvement?<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<li>Do you get regular positive feedback?<\/li><\/ul>\u0009\u0009\u0009\u0009\u0009<li>Smooth Interface<\/li>\u0009\u0009\u0009\u0009\u0009<ul><li>Is the game easy to navigate?<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<li>Is the game visually pleasing?<\/li><\/ul>\u0009\u0009\u0009\u0009\u0009<li>Original Style<\/li>\u0009\u0009\u0009\u0009\u0009<ul><li>What makes this game different from other games?<\/li><\/ul><\/ul><\/p>\u0009\u0009<p><\/p>\u0009\u0009<h1>Modifying Prospector Peril<\/h1>\u0009\u0009<p><\/p>\u0009\u0009\u0009<h2>Improving the Reactive Controls<\/h2>\u0009\u0009\u0009<p>All work in this section will be done within the <em>Prospector<\/em> sprite.  Let's begin by increasing the speed at which the prospector moves left and right in response to the player pressing the left and right arrow keys.  Locate <em>Focus Area 1<\/em> in the <em>Prospector<\/em> sprite. Inside is a <img src=\".\/images\/set_()_to_().png\" alt=\"set_()_to_()\" \/> block where we can see the Prospector's <em>HorizontalSpeed<\/em> variable is currently set to 3.            <ol><li>Decrease the horizontal speed.  What effect does this have on the player's control over the Prospector?<\/li>\u0009\u0009\u0009\u0009<li>Increase the horizontal speed.  What effect does this have on the player's control over the Prospector?<\/li>\u0009\u0009\u0009\u0009<li>What happens if you set the horizontal speed to 0?<\/li>\u0009\u0009\u0009\u0009<li>What happens if you set the horizontal speed to a negative number?<\/li>\u0009\u0009\u0009\u0009<li>Find the horizontal speed setting that you feel provides the best reactive control.<\/li>                <\/ol><\/p>\u0009\u0009<p><\/p>            <p>Next, let's investigate the Prospector's dive speed.  Locate <em>Focus Area 2<\/em>, also in the <em>Prospector<\/em> sprite. Here we have another <img src=\".\/images\/set_()_to_().png\" alt=\"set_()_to_()\" \/> piece, where the Prospector's <em>DiveVelocity<\/em> variable is currently set to -100.\u0009\u0009\u0009\u0009<ol><li>The dive velocity is a negative number.  Why?<\/li>\u0009\u0009\u0009\u0009\u0009<li>Decrease the dive velocity. (Remember, decreasing a negative number makes it further away from zero.)  What effect does this have on the Prospector's dive attack?<\/li>\u0009\u0009\u0009\u0009\u0009<li>Increase the dive velocity.  (Bring it closer to zero.)  What effect does this have on the player's ability to control the Prospector's dive attack?<\/li>\u0009\u0009\u0009\u0009\u0009<li>What happens if you set the dive velocity to 0?<\/li>\u0009\u0009\u0009\u0009\u0009<li>What happens if you set the dive velocity to a positive number?<\/li>\u0009\u0009\u0009\u0009\u0009<li>Find the dive velocity that you feel provides the best reactive control.<\/li><\/ol><\/p>\u0009\u0009<p><\/p>\u0009\u0009\u0009<h2>Adjusting the Rewards and Motivators<\/h2>\u0009\u0009\u0009<p>The object of the Prospector Peril game is to go as fast as possible.  The Prospector's upward speed decreases over time, but every time he hits an object his speed increases.  At the end of the game, you can see what your top speed was.  This is a great example of rewards and motivators.  A successful attack results in an immediate reward of speed points.  Getting a top speed score is a great motivator to play again.  Let's see what happens when we adjust these rewards and motivators in the game.<\/p>            <p>In the Prospector sprite, find Focus Area 3.  Notice that this block of code refers to a ProspectorSuccessfulAttack.  If the speed is less than 99, then a successful attack will change the speed by 1.  So if the Prospector's speed before the attack was 10, a successful attack will change his speed to 11.Let's experiment with this variable.\u0009\u0009\u0009<ol><li>Increase the speed change to 2.  Play the game and observe how much easier it is to get a high score.  Does this make the game more or less fun for you?<\/li>\u0009\u0009\u0009\u0009<li>What happens if you set the speed change to 0?  How does this affect your motivation to play the game?<\/li>\u0009\u0009\u0009\u0009<li>What happens if you set the speed change to a negative number?  How does this affect your motivation to play the game?<\/li>\u0009\u0009\u0009\u0009<li>Set the speed change to a value that makes the game more fun for you.  Is it more motivating for you when the game is easier or more difficult?  Do you think everyone will feel the same way?  Why?<\/li><\/ol><\/p>\u0009\u0009<p><\/p>\u0009\u0009\u0009<h2>Adjusting the Conflict<\/h2>\u0009\u0009\u0009<p>All games break down into the essential components of Goals, Conflicts, and Outcomes.  In Prospector Peril, the Goal is to go as fast as you can, the Conflict is to overcome gravity by smashing obstacles, and the Outcome is life or death for the Prospector and speed points for the player.  In this section, we will explore how adjusting the Conflict affects the game play.\u0009\u0009\u0009<ol><li>Click on the EnemyCart sprite and find the block inside Focus Area 4 that adjusts the Cart Speed:  <img src=\".\/images\/cartspeed-block.png\" alt=\"cartspeed-block\"\/>.  Notice that CartSpeed is set to a random variable with a range from 5 to 7.<\/li>\u0009\u0009\u0009\u0009<li>Start by making the cart speed slower.  Keep a range of two, just with slower speeds (for example, 3 to 5).  What effect does this have on the game's playability?<\/li>\u0009\u0009\u0009\u0009<li>Next, make the cart speed faster.  Again, keep a range of two, but with faster speeds (for example, 5 to 7).  What effect does this have on the game's playability?<\/li>\u0009\u0009\u0009\u0009<li>Now let's see what happens when we make the range of possible speeds larger.  Originally, the range was two (5 to 7).  Let's double this by making a range of four with variables 4 to 8.  What effect does this have on the game?<\/li>\u0009\u0009\u0009\u0009<li>Continue to adjust the range of cart speed until you think you have optimized it.  How does adjusting the conflict in the game affect the rewards and motivators?<\/li><\/ol><\/p>\u0009\u0009<p><\/p>\u0009\u0009\u0009<h2>Share Your Findings<\/h2>\u0009\u0009\u0009<p>Now that you have optimized Prospector Peril for Reactive Controls and Rewards and Motivators, run through the Good Game Checklist again.  Did your changes cause any significant differences?  Prepare either a paper, video, or presentation that demonstrates how adjusting the game settings can significantly affect players' enjoyment of the game.  Be sure to include the following things:\u0009\u0009\u0009<ul><li>When you first evaluated the game using the Checklist, what were its areas of weakness?<\/li>\u0009\u0009\u0009\u0009<li>How did the reactivity of the controls affect the enjoyability of the game?  What did you choose as your final control settings and why did you choose these values?<\/li>\u0009\u0009\u0009\u0009<li>How did the ease of getting speed points affect your motivation to play the game?  What did you choose as your final speed change settings and why?  Do you think these settings will be right for everyone?  Why or why not?<\/li>\u0009\u0009\u0009\u0009<li>How did adjusting the variation in cart speed affect the difficulty of the game?  Did you find you it more rewarding and motivating to play an easier or more difficult game?  Why?  Do you think this would be the same for everyone?  Why or why not?<\/li>\u0009\u0009\u0009\u0009<li>Are there any other areas of weakness in the Checklist that we didn't address in this exercise?  If you had more time to work on this game, what would be the next thing you would want to change?<\/li><\/ul><\/p>        <p><\/p>\u0009\u0009<h1>Challenge Quest<\/h1>\u0009\u0009<p>Explore the Game Stack code to find one more way to adjust the game to help address an area of weakness in the Good Game Checklist.  Incorporate your findings into your final report.<\/p>        <p><\/p>        <!--page:~~game-structure-gamestack-exercise~~-->","link":"","mod":"game-structure","movie":null,"name":"game-structure-gamestack-exercise","promptfile":null,"prompts":null,"reference":null,"text":null,"title":"Game Stack Exercise"},{"bIsChecked":true,"exercise":"","instructions":"<h1>Goal<\/h1><p> To recognize sound game structure and demonstrate understanding of Objectives, Conflicts, and Outcomes as game design concepts.<\/p><h1>Steps<\/h1><ol><li> Play and become familiar with the gameplay elements of the Game Stack game, Prospector Peril.<\/li><li> Write one paragraph on each of the following topics::<ol><li> Identify the primary Objective in the game.<\/li><li> Identify two Conflicts in the game that make achieving the Objective a challenge.<\/li><li> Identify all possible Outcomes of success and failure.<\/li><\/ol><\/li><li> Once again, we have the option to implement this information into our Game Design Document to create a more complete document.<\/li><\/ol><h1>Hints and Challenges<\/h1><p> For those wanting a complete and structured GDD, this exercise can be integrated into the document as its own section. Keep playing with the format and page layout and continue to make the GDD informative, well organized, and visually attractive.<\/p><!--page:~~game-structure-writing-exercise~~-->","link":"","mod":"game-structure","movie":null,"name":"game-structure-writing-exercise","promptfile":null,"prompts":null,"reference":null,"text":null,"title":"Writing Exercise"}]},{"bIsChecked":true,"name":"game-mechanics","title":"Game Mechanics","topics":[{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"game-mechanics","movie":".\/video\/gamemech-common-overview-all-micro-1.mp4","name":"Overview","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"platform\u0009   "},{"order":0,"points":0,"sticky":false,"text":"theorem \u0009   "},{"order":0,"points":100,"sticky":false,"text":"mechanic"},{"order":0,"points":0,"sticky":false,"text":"zero-sum"}],"failure":{"button":null,"message":"It is the ability to control actions on screen that truly separates a video game from a video. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn1-gamemechanics-overview-all-micro-1","number_of_choices":4,"question":"At its very basic level, a _____ is the ability to control actions in a game.","start":3600,"success":{"button":null,"message":"It is the ability to control actions on screen that truly separates a video game from a video. "},"type":null},{"choices":[{"order":0,"points":100,"sticky":false,"text":"interactive   "},{"order":0,"points":0,"sticky":false,"text":"passive \u0009   "},{"order":0,"points":0,"sticky":false,"text":"asymmetric "},{"order":0,"points":0,"sticky":false,"text":"zero-sum"}],"failure":{"button":null,"message":"Video games are an interactive experience because of mechanics.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn2-gamemechanics-overview-all-micro-1","number_of_choices":4,"question":"Unlike books or movies, video games create a(n) _______ experience through mechanics.","start":3600,"success":{"button":null,"message":"Video games are an interactive experience because of mechanics.  "},"type":null}],"reference":"game-mechanics-1","text":null,"title":"Overview"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"game-mechanics","movie":".\/video\/gamemech-common-intro-micro-1.mp4","name":"Common Mechanics","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"patented\u0009   "},{"order":0,"points":0,"sticky":false,"text":"boring\u0009   "},{"order":0,"points":0,"sticky":false,"text":"puzzles"},{"order":0,"points":100,"sticky":false,"text":"time-tested"}],"failure":{"button":null,"message":"Game designers today have the advantage of common mechanics that have been time-tested over decades. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn3-gamemechanics-common-micro-1","number_of_choices":4,"question":"Common mechanics are those that are used across many games and genres because they work and have been _____.","start":3600,"success":{"button":null,"message":"Game designers today have the advantage of common mechanics that have been time-tested over decades. "},"type":null}],"reference":"game-mechanics-2","text":null,"title":"Common Mechanics"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"game-mechanics","movie":".\/video\/gamemech-common-puzzlemech-micro-2.mp4","name":"Puzzle Mechanics","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"Clear objectives \u0009   "},{"order":0,"points":0,"sticky":false,"text":"Clear rules of play\u0009   "},{"order":0,"points":100,"sticky":false,"text":"Clear victory solutions"},{"order":0,"points":0,"sticky":false,"text":"Clear path to improvement of skill"}],"failure":{"button":null,"message":"Good puzzle mechanics will give players everything needed to solve the puzzle but still retain a challenge. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn4-gamemechanics-common-puzzlemech-micro-2","number_of_choices":4,"question":"Which of the following is NOT an advantage of good puzzle mechanics? ","start":3600,"success":{"button":null,"message":"Good puzzle mechanics will give players everything needed to solve the puzzle but still retain a challenge. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Halo \u0009   "},{"order":0,"points":0,"sticky":false,"text":"World of Warcraft\u0009   "},{"order":0,"points":100,"sticky":false,"text":"Tetris "},{"order":0,"points":0,"sticky":false,"text":"Farmville "}],"failure":{"button":null,"message":"Tetris remains one of the greatest achievements in  puzzle games ever produced.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn5-gamemechanics-common-puzzlemech-micro-2","number_of_choices":4,"question":"_____ is one of the most popular and well-designed puzzle games of all time. ","start":3600,"success":{"button":null,"message":"Tetris remains one of the greatest achievements in  puzzle games ever produced.  "},"type":"Multiple"},{"choices":[{"order":0,"points":100,"sticky":false,"text":"Portal\u0009   "},{"order":0,"points":0,"sticky":false,"text":"World of Warcraft\u0009   "},{"order":0,"points":0,"sticky":false,"text":"Tetris "},{"order":0,"points":0,"sticky":false,"text":"Angry Birds"}],"failure":{"button":null,"message":"3-D graphics create all new puzzle possibilities.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn6-gamemechanics-common-puzzlemech-micro-2","number_of_choices":4,"question":"Puzzle mechanics are often combined with other genres, such as in the game _____, which combines puzzles with a first-person shooter game.  ","start":3600,"success":{"button":null,"message":"3-D graphics create all new puzzle possibilities.  "},"type":"Multiple"}],"reference":"game-mechanics-2","text":null,"title":"Puzzle Mechanics"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"game-mechanics","movie":".\/video\/gamemech-common-combatmech-micro-3.mp4","name":"Combat Mechanics","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"jump\u0009   "},{"order":0,"points":100,"sticky":false,"text":"combat\u0009   "},{"order":0,"points":0,"sticky":false,"text":"puzzle"},{"order":0,"points":0,"sticky":false,"text":"flight"}],"failure":{"button":null,"message":"Combat mechanics adapt to many design theories and are widely used in video games.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn7-gamemechanics-common-combatmech-micro-3","number_of_choices":4,"question":"The game design philosophy of objectives, conflict, and outcome often perfectly fits _____ mechanics. ","start":3600,"success":{"button":null,"message":"Combat mechanics adapt to many design theories and are widely used in video games.  "},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Pong\u0009   "},{"order":0,"points":100,"sticky":false,"text":"Halo\u0009   "},{"order":0,"points":0,"sticky":false,"text":"Mario Bros. "},{"order":0,"points":0,"sticky":false,"text":"Pacman "}],"failure":{"button":null,"message":"Halo is still looked at as one of the most near perfect executions of combat mechanics of all time. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn8-gamemechanics-common-combatmech-micro-3","number_of_choices":4,"question":"The game _____ was considered, at the time of its release, to have some of the best executed combat mechanics of its era.  ","start":3600,"success":{"button":null,"message":"Halo is still looked at as one of the most near perfect executions of combat mechanics of all time. "},"type":null}],"reference":"game-mechanics-2","text":null,"title":"Combat Mechanics"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"game-mechanics","movie":".\/video\/gamemech-common-simulationmech-micro-4.mp4","name":"Simulation Mechanics","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"hand-to-hand combat\u0009   "},{"order":0,"points":100,"sticky":false,"text":"real-life experiences \u0009   "},{"order":0,"points":0,"sticky":false,"text":"puzzles"},{"order":0,"points":0,"sticky":false,"text":"2-D graphics"}],"failure":{"button":null,"message":"Simulation games strive to recreate some aspect of the real world and day-to-day life. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn9-gamemechanics-common-simulationmech-micro-4","number_of_choices":4,"question":"Simulation games utilize mechanics that mimic _____.","start":3600,"success":{"button":null,"message":"Simulation games strive to recreate some aspect of the real world and day-to-day life. "},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Tetris\u0009   "},{"order":0,"points":100,"sticky":false,"text":"Sid Meier's Civilization V\u0009   "},{"order":0,"points":0,"sticky":false,"text":"Portal"},{"order":0,"points":0,"sticky":false,"text":"Donkey Kong"}],"failure":{"button":null,"message":"Sid Meier's Civilization V demonstrates aspects of the simulation genre, as well as the strategy war game genre. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn10-gamemechanics-common-simulationmech-micro-4","number_of_choices":4,"question":"_____ is a video game that uses simulation mechanics to recreate Earth's history of societies rising with the evolution of real-world technology.","start":3600,"success":{"button":null,"message":"Sid Meier's Civilization V demonstrates aspects of the simulation genre, as well as the strategy war game genre. "},"type":null},{"choices":[{"order":0,"points":100,"sticky":false,"text":"precision controller reaction\u0009   "},{"order":0,"points":0,"sticky":false,"text":"optimum strategy options. \u0009   "},{"order":0,"points":0,"sticky":false,"text":"a license to play"},{"order":0,"points":0,"sticky":false,"text":"parental supervision"}],"failure":{"button":null,"message":"Driving simulations must have the same precision controller reaction as a real car or plane.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn11-gamemechanics-common-simulationmech-micro-4","number_of_choices":4,"question":"Machine simulator games, such as flight or driving simulators, require _____.","start":3600,"success":{"button":null,"message":"Driving simulations must have the same precision controller reaction as a real car or plane.  "},"type":null}],"reference":"game-mechanics-2","text":null,"title":"Simulation Mechanics"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"game-mechanics","movie":".\/video\/gamemech-common-rpgmech-micro-5.mp4","name":"RPG Mechanics","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"simulate driving mechanics\u0009   "},{"order":0,"points":100,"sticky":false,"text":"take on the persona of someone else   "},{"order":0,"points":0,"sticky":false,"text":"coordinate massive troops on a battlefield"},{"order":0,"points":0,"sticky":false,"text":"allocate resources to build cities"}],"failure":{"button":null,"message":"The most fundamental aspect of a role-playing game is the player's immersion into a character."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn12-gamemechanics-common-rpgmech-micro-5","number_of_choices":4,"question":"Role-playing games, at their core, attempt to allow players to _____.","start":3600,"success":{"button":null,"message":"The most fundamental aspect of a role-playing game is the player's immersion into a character."},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"the real-world\u0009   "},{"order":0,"points":100,"sticky":false,"text":"worlds of magic and advanced technology   "},{"order":0,"points":0,"sticky":false,"text":"cities"},{"order":0,"points":0,"sticky":false,"text":"nature"}],"failure":{"button":null,"message":"Role-playing games often have simulation mechanics, however, they are generally in fantastical settings more than the real world. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn13-gamemechanics-common-rpgmech-micro-5","number_of_choices":4,"question":"Unlike most simulation games, role-playing games are often set in _____.","start":3600,"success":{"button":null,"message":"Role-playing games often have simulation mechanics, however, they are generally in fantastical settings more than the real world. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"exploration\u0009   "},{"order":0,"points":0,"sticky":false,"text":"interaction with the world   "},{"order":0,"points":0,"sticky":false,"text":"character development"},{"order":21,"points":100,"sticky":false,"text":"All of the above."}],"failure":{"button":null,"message":"MMO role-playing games also allow player characters to interact with each other."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn14-gamemechanics-common-rpgmech-micro-5","number_of_choices":4,"question":"Role-playing mechanics typically emphasize _____.","start":3600,"success":{"button":null,"message":"MMO role-playing games also allow player characters to interact with each other."},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Asteroids Deluxe \u0009   "},{"order":0,"points":100,"sticky":false,"text":"The Elder Scrolls V: Skyrim   "},{"order":0,"points":0,"sticky":false,"text":"Chess"},{"order":0,"points":0,"sticky":false,"text":"Railroad Tycoon"}],"failure":{"button":null,"message":"The Elder Scrolls is a very popular role-playing game series developed by Bethesda. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn15-gamemechanics-common-rpgmech-micro-5","number_of_choices":4,"question":"_____ exemplifies character development and exploration of a world.  ","start":3600,"success":{"button":null,"message":"The Elder Scrolls is a very popular role-playing game series developed by Bethesda. "},"type":"Multiple"}],"reference":"game-mechanics-2","text":null,"title":"RPG Mechanics"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"game-mechanics","movie":".\/video\/gamemech-common-complexity-micro-6.mp4","name":"Complexity","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"optimum\u0009   "},{"order":0,"points":100,"sticky":false,"text":"interconnected   "},{"order":0,"points":0,"sticky":false,"text":"dominate"},{"order":0,"points":0,"sticky":false,"text":"simulated "}],"failure":{"button":null,"message":"The complexity of mechanics increases as they work in tandem with each other."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn16-gamemechanics-common-complexity-micro-6","number_of_choices":4,"question":"Simple mechanics can combine to construct _____ behaviors that create complexity in game design.","start":3600,"success":{"button":null,"message":"The complexity of mechanics increases as they work in tandem with each other."},"type":null}],"reference":"game-mechanics-2","text":null,"title":"Complexity"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"game-mechanics","movie":".\/video\/gamemech-gimmick-intro-micro-1.mp4","name":"Mechanics and Gimmicks Intro","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"Is it cheap?\u0009   "},{"order":0,"points":0,"sticky":false,"text":"Is it simple?\u0009   "},{"order":0,"points":100,"sticky":false,"text":"Is it meaningful?"},{"order":0,"points":0,"sticky":false,"text":"Is it marketable?"}],"failure":{"button":null,"message":"For any mechanic, a designer should always ask, \"Is it fun? Is it meaningful? Is it necessary?\""},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn17-gamemechanics-gimmick-intro-micro-1","number_of_choices":4,"question":"Which of the following questions are part of the good mechanic checklist?","start":3600,"success":{"button":null,"message":"For any mechanic, a designer should always ask, \"Is it fun? Is it meaningful? Is it necessary?\""},"type":null}],"reference":"game-mechanics-3","text":null,"title":"Mechanics and Gimmicks"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"game-mechanics","movie":".\/video\/gamemech-gimmick-gimmick-micro-2.mp4","name":"What's a Gimmick","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"Changing a game's visuals but keeping all the gameplay the same. \u0009   "},{"order":0,"points":0,"sticky":false,"text":"Developing a fantasy role-playing game\u0009   "},{"order":0,"points":0,"sticky":false,"text":"Creating original mechanics for a first-person shooter "},{"order":0,"points":0,"sticky":false,"text":"Creating original puzzle challenges"}],"failure":{"button":null,"message":"Gimmicks typically change a small aspect of a game for quick and obvious results. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn18-gamemechanics-gimmick-gimmick-micro-2","number_of_choices":4,"question":"Which of the following would be considered a gimmick in a video game?","start":3600,"success":{"button":null,"message":"Gimmicks typically change a small aspect of a game for quick and obvious results. "},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"add flair and style to a game"},{"order":0,"points":0,"sticky":false,"text":"create novelty and variety in similar games\u0009   "},{"order":0,"points":0,"sticky":false,"text":"create new mechanics that don't significantly add to the fun of a game "},{"order":0,"points":100,"sticky":false,"text":"are marketing tools that attempt to hide flaws in a game"}],"failure":{"button":null,"message":"Far too often, gimmicks are treated as features by marketing teams when games lack substance or good design. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn19-gamemechanics-gimmick-gimmick-micro-2","number_of_choices":4,"question":"At their worst, gimmicks _____.","start":3600,"success":{"button":null,"message":"Far too often, gimmicks are treated as features by marketing teams when games lack substance or good design. "},"type":null}],"reference":"game-mechanics-3","text":null,"title":"What's a Gimmick"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"game-mechanics","movie":".\/video\/gamemech-gimmick-goodgimmick-micro-3.mp4","name":"Good Gimmick","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"Angry Birds\u0009   "},{"order":0,"points":0,"sticky":false,"text":"Pong\u0009   "},{"order":0,"points":0,"sticky":false,"text":"Tetris"},{"order":0,"points":0,"sticky":false,"text":"Pacman"}],"failure":{"button":null,"message":"Angry Birds is a \"reskin\" of Castle Clout. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn20-gamemechanics-gimmick-goodgimmick-micro-3","number_of_choices":4,"question":"_____ is a highly successful game that used existing gameplay and mechanics, but created new visuals and audio as the gimmick.","start":3600,"success":{"button":null,"message":"Angry Birds is a \"reskin\" of Castle Clout. "},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Angry Birds\u0009   "},{"order":0,"points":100,"sticky":false,"text":"Rampage\u0009   "},{"order":0,"points":0,"sticky":false,"text":"Tetris"},{"order":0,"points":0,"sticky":false,"text":"Donkey Kong"}],"failure":{"button":null,"message":"Many games, in part, take elements and mechanics from other games, but manage to make them feel fresh with gimmicks. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn21-gamemechanics-gimmick-goodgimmick-micro-3","number_of_choices":4,"question":"Even the makers of Castle Clout admit their game took elements of other games, such as _____.","start":3600,"success":{"button":null,"message":"Many games, in part, take elements and mechanics from other games, but manage to make them feel fresh with gimmicks. "},"type":null}],"reference":"game-mechanics-3","text":null,"title":"Good Gimmick"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"game-mechanics","movie":".\/video\/gamemech-gimmick-casestudy-micro-4.mp4","name":"Case Study","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"sales\u0009   "},{"order":0,"points":0,"sticky":false,"text":"micro-transaction\u0009   "},{"order":0,"points":0,"sticky":false,"text":"customization"},{"order":21,"points":100,"sticky":false,"text":"all of the above"}],"failure":{"button":null,"message":"Team Fortress 2 uses customized hats to create micro-transaction sales that do not effect gameplay. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn22-gamemechanics-gimmick-casestudy-micro-4","number_of_choices":4,"question":"Team Fortress 2 uses custom hats as a _____ gimmick, but it does not affect gameplay.","start":3600,"success":{"button":null,"message":"Team Fortress 2 uses customized hats to create micro-transaction sales that do not effect gameplay. "},"type":null}],"reference":"game-mechanics-3","text":null,"title":"Case Study"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"game-mechanics","movie":".\/video\/gamemech-gimmick-mvsg-micro-5.mp4","name":"Mechanics VS Gimmicks","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"are mechanical; are artistic \u0009   "},{"order":0,"points":0,"sticky":false,"text":"succeed; fail\u0009   "},{"order":0,"points":100,"sticky":false,"text":"fail: succeed"},{"order":0,"points":0,"sticky":false,"text":"fail: should"}],"failure":{"button":null,"message":"Gimmick fail more often than not because they are usually an attempt to make up for some deficiency in a game. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn23-gamemechanics-gimmick-mvsg-micro-5","number_of_choices":4,"question":"In general, gimmicks ____ far more often than they _____.","start":3600,"success":{"button":null,"message":"Gimmick fail more often than not because they are usually an attempt to make up for some deficiency in a game. "},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Angry Birds \u0009   "},{"order":0,"points":0,"sticky":false,"text":"unnecessary \u0009   "},{"order":0,"points":100,"sticky":false,"text":"original"},{"order":0,"points":0,"sticky":false,"text":"developed by marketing teams"}],"failure":{"button":null,"message":"At the very least, a gimmick should attempt to be original.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn24-gamemechanics-gimmick-mvsg-micro-5","number_of_choices":4,"question":"Gimmicks in video games work best if they are _____.","start":3600,"success":{"button":null,"message":"At the very least, a gimmick should attempt to be original.  "},"type":null}],"reference":"game-mechanics-3","text":null,"title":"Mechanics VS Gimmicks"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"game-mechanics","movie":".\/video\/gamemech-victory-intro-micro-1.mp4","name":"Victory Conditions Intro","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"Defined victory conditions\u0009   "},{"order":0,"points":0,"sticky":false,"text":"Game over conditions\u0009   "},{"order":0,"points":0,"sticky":false,"text":"No victory conditions"},{"order":21,"points":100,"sticky":false,"text":"All of the above"}],"failure":{"button":null,"message":"There are many ways in which players can \"win\" a game."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn25-gamemechanics-victory-intro-micro-1","number_of_choices":4,"question":"Which of the following represent victory conditions in video games?","start":3600,"success":{"button":null,"message":"There are many ways in which players can \"win\" a game."},"type":null}],"reference":"game-mechanics-4","text":null,"title":"Victory Conditions Intro"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"game-mechanics","movie":".\/video\/gamemech-victory-whatisvictory-micro-2.mp4","name":"What is Victory?","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"True"},{"order":0,"points":100,"sticky":false,"text":"False"}],"failure":{"button":null,"message":"Video games today have a huge variety of victory conditions and some even have none at all. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn26-gamemechanics-victory-whatisvictory-micro-2","number_of_choices":2,"question":"True or False: All video games have the same defined victory conditions.","start":3600,"success":{"button":null,"message":"Video games today have a huge variety of victory conditions and some even have none at all. "},"type":null}],"reference":"game-mechanics-4","text":null,"title":"What is Victory?"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"game-mechanics","movie":".\/video\/gamemech-victory-defined-micro-3.mp4","name":"Victory Defined","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"the board is cleared of an opponent's pieces\u0009   "},{"order":0,"points":0,"sticky":false,"text":"a player takes an opponent's knight   "},{"order":0,"points":100,"sticky":false,"text":"a player takes an opponent's king"},{"order":0,"points":0,"sticky":false,"text":"a player is able to castle "}],"failure":{"button":null,"message":"Chess sets a clearly defined victory condition: you win when you take the opponent's king. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn27-gamemechanics-victory-defined-micro-3","number_of_choices":4,"question":"The victory condition in chess is met when _____?","start":3600,"success":{"button":null,"message":"Chess sets a clearly defined victory condition: you win when you take the opponent's king. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Sid Meier's Civilization V\u0009   "},{"order":0,"points":0,"sticky":false,"text":"chess   "},{"order":0,"points":0,"sticky":false,"text":"Pong"},{"order":21,"points":100,"sticky":false,"text":"All of the above"}],"failure":{"button":null,"message":"Each of these zero-sum games have defined victory conditions that proscribe when one person wins, the other then losses.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn28-gamemechanics-victory-defined-micro-3","number_of_choices":4,"question":"Which of the following games have defined victory conditions?","start":3600,"success":{"button":null,"message":"Each of these zero-sum games have defined victory conditions that proscribe when one person wins, the other then losses.  "},"type":"Multiple"}],"reference":"game-mechanics-4","text":null,"title":"Victory Defined"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"game-mechanics","movie":".\/video\/gamemech-victory-gameover-micro-4.mp4","name":"Victory VS Game Over Conditions","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"World of Warcraft\u0009   "},{"order":0,"points":100,"sticky":false,"text":"Asteroids \u0009   "},{"order":0,"points":0,"sticky":false,"text":"Railroad Tycoon"},{"order":21,"points":0,"sticky":false,"text":"None of the above"}],"failure":{"button":null,"message":"Many arcade games from the 1980's followed a game-over victory condition model. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn29-gamemechanics-victory-gameover-micro-4","number_of_choices":4,"question":"Which of the following games have game-over victory conditions?","start":3600,"success":{"button":null,"message":"Many arcade games from the 1980's followed a game-over victory condition model. "},"type":null},{"choices":[{"order":0,"points":100,"sticky":false,"text":"game over condition\u0009   "},{"order":0,"points":0,"sticky":false,"text":"alien ships   "},{"order":0,"points":0,"sticky":false,"text":"asteroids "},{"order":0,"points":0,"sticky":false,"text":"dominate strategies"}],"failure":{"button":null,"message":"By keeping your ship from destruction, you can avoid the game's game over condition and keep playing."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn30-gamemechanics-victory-gameover-micro-4","number_of_choices":4,"question":"With enough skill, players can avoid the _____ in Asteroids and conceivably play forever (or until they get tired). ","start":3600,"success":{"button":null,"message":"By keeping your ship from destruction, you can avoid the game's game over condition and keep playing."},"type":null}],"reference":"game-mechanics-4","text":null,"title":"Victory VS Game Over Conditions"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"game-mechanics","movie":".\/video\/gamemech-victory-neverending-micro-5.mp4","name":"The Neverending Story","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"exploration\u0009   "},{"order":0,"points":0,"sticky":false,"text":"character growth\u0009   "},{"order":0,"points":0,"sticky":false,"text":"socialization"},{"order":21,"points":100,"sticky":false,"text":"all of the above"}],"failure":{"button":null,"message":"Role-playing games and simulations often are designed without defined victory conditions or game-over conditions. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn1-gamemechanics-victory-neverending-micro-5","number_of_choices":4,"question":"For games designed without any game-over conditions, the focus of play is primarily on _____.","start":3600,"success":{"button":null,"message":"Role-playing games and simulations often are designed without defined victory conditions or game-over conditions. "},"type":"Multiple"},{"choices":[{"order":0,"points":100,"sticky":false,"text":"World of Warcraft\u0009   "},{"order":0,"points":0,"sticky":false,"text":"Pacman\u0009   "},{"order":0,"points":0,"sticky":false,"text":"Halo"},{"order":0,"points":0,"sticky":false,"text":"Pong"}],"failure":{"button":null,"message":"In World of Warcraft your character can \"die\" many times, but dying never ends the game.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn1-gamemechanics-victory-neverending-micro-5","number_of_choices":4,"question":"Games like _____ do not have game-over conditions: even if a player character \"dies\" the player is merely inconvenienced for a time and then continues playing where they left off.  ","start":3600,"success":{"button":null,"message":"In World of Warcraft your character can \"die\" many times, but dying never ends the game.  "},"type":"Multiple"}],"reference":"game-mechanics-4","text":null,"title":"The Neverending Story"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"reference","mod":"","movie":null,"name":"Reference","promptfile":null,"prompts":null,"reference":null,"text":"<a id=\"game-mechanics-1\" class=\"dest\"><\/a><div class=\"accent\"><h1>Overview<\/h1><p>Mechanics are what makes something a video game rather than just a video. The ability to control actions on screen is the core element of making something a mechanic. Beyond that simple definition, mechanics can be anything one can imagine and implement into a game. Of course, game developers have found mixed results when building mechanics. Intentions of how a mechanic will be fun are not always how the final results turn out. At this point in video game development, some basic mechanics have now passed the test of time and hold to be standard mechanics in many games. <em>Walk, Jump, Swing<\/em>, and<em> Slide<\/em> are just some of the most basic and most common.<\/p><p>It is important to remember that not every game needs every mechanic. Designing mechanics in a game should not be like playing jazz. Think of them more as a recipe for a dish. We are looking for the right mechanics in the right amount and combination to create a fun, engaging, interactive experience. Too many ingredients will spoil the meal. There is a limit to how many mechanics a player will be willing to learn, especially if those mechanics do not add to the overall joy of playing the game. For example, a game may offer five different modes of jumping: however, if there is not a compelling in-game reason to master and use all these jumps, they become tiresome and boring.<\/p><p>This Module will take a broad look at different types of game mechanics and how they interact with the player and each other to make up a video game. The Topics will cover:<\/p><div style=\"text-align: center;\"><ul class=\"anchorGroup\" style=\"text-align: left; display: inline-block;\"><li><a class=\"ankor\" href=\"#game-mechanics-2\">Common Mechanics in Video Games<\/a><\/li><li><a class=\"ankor\" href=\"#game-mechanics-3\">Mechanics vs. Gimmicks<\/a><\/li><li><a class=\"ankor\" href=\"#game-mechanics-4\">Victory Condition Mechanics<\/a><\/li><\/ul><\/div><\/div><a class=\"dest\" id=\"game-mechanics-2\"><\/a>&nbsp;<div class=\"accent\"><h1>Common Mechanics in Video Games<\/h1><p>In this Topic we are going to take a closer look at some common, or standard, mechanics in existing games. First we will examine the goals of the mechanic and then determine if the mechanic is “meaningful” in terms of achieving those goals. Finally, for each category of mechanic, we will look at some examples where mechanics failed in a game or were successful and innovative<\/p><h3>Puzzles<\/h3><img class=\"aligncenter\" src=\".\/images\/image_puzzle.png\" alt=\"image_puzzle\" width=\"539\" height=\"306\" \/><p>Puzzles are great mechanics for video games. They are perfect tools to achieve design goals in that a well-structured puzzle has clear objectives, clear rules-of-play, and a clear path to improvement of skill. They are also easy to scale difficulty to always offer a challenge to players. One of the most popular and successful puzzle games of all time is <em>Tetris<\/em>. Its design creates “addictive play” because it constantly stimulates the brain's play impulses. Puzzles can also be integrated into other game genres to add gameplay and depth. Role-Playing Games (RPGs) are great examples where puzzles can add to the other mechanics in the game for a richer and more varied experience.<\/p><p>The game <em>Portal <\/em>is a terrific example of blending puzzle elements with a first-person shooter game. In doing so, it innovated how gameplay with puzzles can be new and original. It also integrated a deep storyline and even characters into puzzles.<\/p><h3>Combat<\/h3><img class=\"aligncenter\" src=\".\/images\/image_combat.png\" alt=\"image_combat\" width=\"556\" height=\"306\" \/><p>Combat is one of the most common and most diverse mechanics in video games. It perfectly utilizes the design philosophy of Objectives (in-game goals), Conflicts (in-game challenges that must be overcome to obtain objectives), and Outcomes (results of conflict). It blends well with character and story for immersion. It also adapts well to the learning curve of skill acquirement that keeps players motivated and interested. Combat can also be structured in many different styles of gameplay. First-person shooter combat is vastly different in gameplay than a real-time strategy war game. Combat mechanics could encompass one-on-one sword-fighting, massive battlefield campaigns, martial arts, and perhaps hundreds of others.<\/p><p>Halo, at the time of its release in late 2001, was hailed as a near perfect demonstration of video game combat mechanics. It seamlessly blended art, story, character, environments, and combat to create a rich and immersive world. Later, other mechanics, such as <em>cover<\/em> (the ability to hide behind an object) became innovations of combat games from the Halo era.<\/p><h3>Simulation<\/h3><img class=\"aligncenter\" src=\".\/images\/image_simulation.png\" alt=\"image_simulation\" width=\"556\" height=\"306\" \/><p>Simulation games utilize mechanics that mimic real-life experiences. They can include machine Simulations, such as driving cars or flying jet planes, or they can simulate societal events like, world exploration or conquest. Most are interested in creating mechanics that are complex enough to emulate actual complexities of real-life. For example, <em>Civilization V<\/em> has mechanical structures for  complexity and depth of play: food production, human resources, natural resources, economics, science, war, etc. Each of these options creates a cause and effect on each other. It is important to balance how each element affects other elements to create a Simulation that is as realistic as possible but still allows for quality gameplay. For this type of Simulation, a good user interface is crucial. For machine simulators, the mechanical focus is on precision. When the player hits the button to make the car go forward, it has to feel like the control is connected to the car as if the player is actually driving a car. In this regard, reactive controls become a key part of many Simulation games.<\/p><h3>Role-Playing<\/h3><img class=\"aligncenter\" src=\".\/images\/image_roleplaying.png\" alt=\"image_roleplaying\" width=\"556\" height=\"306\" \/><p>Role-Playing games put the player in someone (or something) else's shoes and allows them to imagine what it would be like to live someone else's life. This premise is often made more intriguing by making that life take place in a wondrous and mysterious world. Often the mechanical goals of a Role-Playing game are drawn from the fantasy world and story line that is created for the game. For example, the in-game mechanics of a medieval fantasy world of sword and sorcery are going to be quite different than a modern world of fashion and careers. Either way, most of the mechanics are going to emphasis exploration of the world and interacting with the players, NPCs and objects within the world. This interaction often integrates additional mechanics such as puzzles and combat. That said, character development is the mechanic that is most unique and important in Role-Playing Games.<\/p><p>There are many different ways to express character development through mechanics; remember, though, the goals are the same as just about any other video game. As video game designers we want to have the player quickly recognize how to navigate through the game world and how to improve the skills needed to succeed in the game.<\/p><p>The Fantasy Role-Playing game series, <em>The Elder Scrolls, is a terrific example of using multiple mechanics that allow a player to explore and develop skills within a world.<\/em>. The series offers combat, exploration, character improvement, and an in-game economy.<\/p><\/div><a class=\"dest\" id=\"game-mechanics-3\"><\/a>&nbsp;<div class=\"accent\"><h1>Mechanics and Gimmicks<\/h1><p>Gameplay can be broken down into two categories: Mechanics and Gimmicks.<\/p><img class=\"aligncenter\" src=\".\/images\/image_MechanicsVSGimmics.png\" alt=\"image_MechanicsVSGimmics\" width=\"817\" height=\"344\" \/><h3>Mechanics<\/h3><p>A mechanic is essential to core gameplay and deeply integrated into design and game structure. The goal of a mechanic is first and foremost be fun. Fun is achieved by balancing difficulty with a player's investment in time and effort and offering incentives to continue playing. Remember our checklist for a good mechanic? We always want to ask: Is it fun? Is it meaningful? Is it necessary?<\/p><h3>Gimmicks<\/h3><p>So what is a gimmick? At their best, gimmicks add flair, style, or some cool-factor to a game, but do not add a significant increase to the game's mechanical design. On the other hand, a bad gimmick is any element that is added to a game to entice players on false pretenses: it adds nothing, or even distracts, from the fun of the game. Most gimmicks, unfortunately, fail far more often than they succeed. They are either desperate attempts to disguise bad design or signs of a lazy and uninspired creative process. This sort of gimmick is most often attempted by marketing teams trying to create excitement for an upcoming game that has some flaws the creators want to hide.<\/p><h3>Gimmick or Ripoff?<\/h3><p>Sometimes a gimmick is just a re-skin. Angry Birds, for example, did not invent any new mechanics. The game simply applied  gimmicks (in this case a new look and a story about birds and pigs) to a castle trebuchet game. This new style happened to make the game much more appealing to a mass audience and opened the door for millions of fans. This was in no way an accident. The cuteness was calculated to make the game more fun without changing a single mechanic. It was a very successful and is now a gimmick that is very common.  Some consider Angry Birds a ripoff of Castle Clout: adding only superficial visual and audio changes. But those changes are exactly what catapulted, pardon the pun, Angry Birds to a higher success than Castle Clout.  Oddly enough, the creators of Castle Clout actually acknowledge Angry Birds and hold no grudges. This is partially because, they also recognize that their game borrowed heavily from other games, as well.<\/p><p>According to Jeff Wofford, one of the developers of Crush the Castle (from Armor Games, makers of Castle Clout)<\/p><img class=\"aligncenter\" src=\".\/images\/image_gimmics.png\" alt=\"image_gimmics\" width=\"734\" height=\"208\" \/><p>“<i>Sure, Angry Birds took elements from Crush the Castle. But those elements were hardly novel or innovative. Crush the Castle borrowed from many previous games. Castle Clout is the most obvious example (obvious because the Crush the Castle credits give them a shout-out), but the general idea of allowing the user to smash buildings dates back to Rampage or even earlier.”<\/i><\/p><h3>Other Gimmicks<\/h3><p>Not all gimmicks are controversial. Knowing that microtransactions are unpopular with fans when they allow people to purchase in-game power and advantages, Valve's Team Fortress 2 instead offers gimmicks in the form of custom hats and weapons. These items do not give extra power or advantage to the player, but do offer customized character styles and looks. It offers a completely optional and non-game changing payment model for the game without altering the core mechanics of the first-person shooter model. This model has been very successful for Valve; bringing in $139 million in micro-transactions in 2013, according to some analysts (http:\/\/www.superdataresearch.com\/).<\/p><p>Gimmicks fail far more often than they succeed. All too often, they are tagged on as bells and whistles that don't actually add anything to the fun or quality of the game. At their worst, gimmicks actually take away from the entertainment value of a game. This sort of gimmick is most often attempted by marketing teams trying to create excitement for an upcoming game that has some flaws the creators want to hide. Consider a game that plays just like <em>Angry Birds<\/em> but with poorly animated frogs and ducks: this would also be a gimmick, but now, a bad one. Whether a gimmick is good or not can be subjective. A good rule of thumb is if a gimmick is not at least original it should probably not be used.<\/p>&nbsp;<\/div><a class=\"dest\" id=\"game-mechanics-4\"><\/a>&nbsp;<div class=\"accent\"><h1>Victory Condition Mechanics<\/h1><p>Let's look more closely at a common mechanic in most all games: the Victory Condition. Just like it sounds, this mechanic determines if and when a player has won or lost. Seems simple, right? Actually, there are alternatives to the simple victory condition formula. In this topic we are going to examine in detail, defined victory conditions, Game over conditions, and even games that never end.<\/p><img class=\"aligncenter\" src=\".\/images\/image_win-300x201.png\" alt=\"image_win\" width=\"300\" height=\"201\" \/><p>Victory conditions can vary greatly from game to game; but, usually when a victory condition is achieved the game ends. Note, however, that victory conditions are not always the same as game-over conditions. Sometimes games have defined victory conditions, and some have undefined victory conditions, while some many have none at all.<\/p><h3>Games with Defined Victory Conditions<\/h3><p>Most games provide a clear victory condition for players to work towards. As stressed earlier, it is important to give players clearly defined mechanics they must master as well as a not too difficult to identify path to victory. That doesn't mean the mechanics to achieve victory have to be boring. Chess for example is fairly simple in its mechanics and the victory objective (take the King) is clear and simple. Actually achieving the victory condition in a good game of chess can be a bit more challenging. It is the brilliant design of chess that also allows the mechanics to inform and alter the players' perception of how close each of them is to achieving victory over the course of the game. In other words, in chess, the closer one player comes to victory, the easier it becomes and the more obvious it becomes.<\/p><img class=\"aligncenter\" src=\".\/images\/image_wincondition.png\" alt=\"image_wincondition\" width=\"739\" height=\"488\" \/><p>In chess, each player goes through a series of lesser victory conditions that built toward the ultimate objective of taking the king. In video games, we can create similar rules for games with multiple layers and systems, but the basic victory condition mechanic stays similar enough that the structure has merit. Take for example the computer game <em>Civilization V. <\/em>Players each have a broad understanding of certain victory conditions they must achieve to win the game. When those conditions have been met, the game will be over.<\/p><h3>Games with Game-Over Conditions<\/h3><img class=\"aligncenter\" src=\".\/images\/image_gameover.png\" alt=\"image_gameover\" width=\"530\" height=\"403\" \/><p>Not all games are trying to push the player to a game-over condition through victory conditions. Some games will even practically go on forever if the player achieves perfection in achieving victory conditions. In these games, the design goals are to create game-over conditions. Most of the classic arcade games of the 1980s used this type of mechanic. For example, in the arcade game <em>Asteroids, <\/em>victory conditions were fulfilled by surviving the level, but the game did not end. A new wave of asteroids was always ready to begin the challenge again. For games like this, the game-over condition is more important. Players will typically only have a certain number of mistakes they can make before the game ends. If the gameplay was fun and engaging, they will not care that the goals of the game are repetitive; they will want to play again and improve their skill level.<\/p><h3>The Never Ending Story<\/h3><p>Some games want none of those pesky victory conditions or game-over conditions. For some games, the experience of the game is about exploration, growth and socialization. Social media games often fall under this category. Many games are built around the concept of creating an ever growing and improving “theme park” of some kind: farm, carnival, zoo, etc. They don't have defined victory conditions because there is no real winner or loser – only degrees of prosperity. In addition, there is no game-over mechanic threatening to end the game if the player makes a misstep.<\/p><p>Sometimes this mechanic is blurred for the sake of emergence. For example, in <em>World of Warcraft<\/em>, players do have victory conditions that feel like achievements and allow for character growth, but the threats do not actually ever create a game-over condition. The player is merely inconvenienced (or otherwise penalized) and then allowed to continue playing.<\/p><h3>Going Forward: Emergence and Complexity<\/h3><img class=\"aligncenter\" src=\".\/images\/image_future.png\" alt=\"image_future\" width=\"618\" height=\"279\" \/><p>From here, game mechanics become vastly more multifaceted. Now that the basics of game mechanics have been introduced, the truly complicated structures begin to take shape to create emergence and complexity. Simply put, this is where we begin layer simple mechanics to create interconnected choices for the player. It is important to remember that this is not dependent on complex rules but rather simple rules that combine to create complex behavior in the game design.<\/p><\/div><!--page:~~game-mechanics-reference-text~~-->","title":"Reference Material"},{"bIsChecked":true,"exercise":".\/exercise\/ProspectorTwins_Exercise_GameMechanics.stack","instructions":"\u0009\u0009<section class=\"goals\">\u0009\u0009\u0009<h1>Goals<\/h1>\u0009\u0009\u0009<ul>\u0009\u0009\u0009\u0009<li>Add a mechanic to allow players to jump higher than normal.<\/li>\u0009\u0009\u0009\u0009<li>Add a mechanic to allow players to attack enemies.<\/li>\u0009\u0009\u0009<\/ul>\u0009\u0009\u0009\u0009\u0009<\/section>\u0009\u0009<aside class=\"reference\">\u0009\u0009\u0009<figure>\u0009\u0009\u0009\u0009<img src=\".\/images\/gameMechanics_screen-02.png\" alt=\"screenshot\" \/>\u0009\u0009\u0009\u0009<figcaption>Sprite Reference<\/figcaption>\u0009\u0009\u0009<\/figure>\u0009\u0009\u0009\u0009\u0009\u0009<h2>Environment<\/h2>\u0009\u0009\u0009\u0009<h3>stage<\/h3>\u0009\u0009\u0009\u0009<ul>\u0009\u0009\u0009\u0009\u0009<li>contains backdrops which show underneath the game sprites<\/li>\u0009\u0009\u0009\u0009\u0009<li>all of the global variables can be configured in its Scripts tab<\/li>\u0009\u0009\u0009\u0009<\/ul>\u0009\u0009\u0009\u0009<h3>platform<\/h3>\u0009\u0009\u0009\u0009<ul>\u0009\u0009\u0009\u0009\u0009<li>can be placed anywhere on the screen<\/li>\u0009\u0009\u0009\u0009\u0009<li>can be configured to only appear after a certain level is reached<\/li>\u0009\u0009\u0009\u0009\u0009<li>the light and dark colors of the platform are used to let the player's sensor and boulders know when and where they hit the \"ground\" and should only be changed if you are comfortable editing sprite template logic<\/li>\u0009\u0009\u0009\u0009<\/ul>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<h3>goal<\/h3>\u0009\u0009\u0009\u0009<ul>\u0009\u0009\u0009\u0009\u0009<li>can be placed anywhere<\/li>\u0009\u0009\u0009\u0009\u0009<li>when the player sprite touches this sprite, the level is complete<\/li>\u0009\u0009\u0009\u0009\u0009<li>awards a configurable number of points (multiplied by current level)<\/li>\u0009\u0009\u0009\u0009<\/ul>\u0009\u0009\u0009\u0009<h3>trampoline<\/h3>\u0009\u0009\u0009\u0009<ul>\u0009\u0009\u0009\u0009\u0009<li>can be placed anywhere on the screen<\/li>\u0009\u0009\u0009\u0009\u0009<li>causes the player and boulders to bounce, enabling the player to \"super jump\"<\/li>\u0009\u0009\u0009\u0009\u0009<li>the light and dark colors of the trampoline are used to let the player's sensor and boulders know when and where they hit something bouncy and should only be changed if you are comfortable editing sprite template logic<\/li>\u0009\u0009\u0009\u0009<\/ul>\u0009\u0009\u0009\u0009\u0009\u0009<h2>Interface<\/h2>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<h3>menu<\/h3>\u0009\u0009\u0009\u0009<ul>\u0009\u0009\u0009\u0009\u0009<li>automatically positions itself in the center of the screen<\/li>\u0009\u0009\u0009\u0009\u0009<li>shows the game title and instructions to the player when the game first starts<\/li>\u0009\u0009\u0009\u0009\u0009<li>congratulates the player when they finish a level<\/li>\u0009\u0009\u0009\u0009\u0009<li>taunts the player when they lose and the game is over<\/li>\u0009\u0009\u0009\u0009<\/ul>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<h3>lives<\/h3>\u0009\u0009\u0009\u0009<ul>\u0009\u0009\u0009\u0009\u0009<li>automatically positions itself in the lower left of the screen<\/li>\u0009\u0009\u0009\u0009\u0009<li>indicates the number of lives the player has left throughout the game<\/li>\u0009\u0009\u0009\u0009<\/ul>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<h3>level<\/h3>\u0009\u0009\u0009\u0009<ul>\u0009\u0009\u0009\u0009\u0009<li>automatically positions itself in the lower center of the screen<\/li>\u0009\u0009\u0009\u0009\u0009<li>indicates the current level<\/li>\u0009\u0009\u0009\u0009<\/ul>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<h3>score<\/h3>\u0009\u0009\u0009\u0009<ul>\u0009\u0009\u0009\u0009\u0009<li>automatically positions itself in the lower right of the screen<\/li>\u0009\u0009\u0009\u0009\u0009<li>indicates the player's current score<\/li>\u0009\u0009\u0009\u0009<\/ul>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<h2>Player<\/h2>\u0009\u0009\u0009\u0009<h3>player<\/h3>\u0009\u0009\u0009\u0009<ul>\u0009\u0009\u0009\u0009\u0009<li>represents the player on the screen<\/li>\u0009\u0009\u0009\u0009\u0009<li>automatically goes to the configurable starting position when each level starts<\/li>\u0009\u0009\u0009\u0009\u0009<li>movement is configured by several global variables<\/li>\u0009\u0009\u0009\u0009\u0009<li>requires costumes for the following states: idle, walking, running, jumping, hurt, victory<\/li>\u0009\u0009\u0009\u0009\u0009<li>if the number of costumes is changed, there are variables assigned to this sprite which tell the game how many of each type of costume exist so the animations play correctly<\/li>\u0009\u0009\u0009\u0009\u0009<li>controlled by the arrow keys left, right, and up to jump<\/li>\u0009\u0009\u0009\u0009<\/ul>\u0009\u0009\u0009\u0009<h3>sensor<\/h3>\u0009\u0009\u0009\u0009<ul>\u0009\u0009\u0009\u0009\u0009<li>hides itself when the game starts<\/li>\u0009\u0009\u0009\u0009\u0009<li>constantly follows the player sprite to \"sense\" collisions with other objects<\/li>\u0009\u0009\u0009\u0009<\/ul>\u0009\u0009\u0009\u0009<h3>attack<\/h3>\u0009\u0009\u0009\u0009<ul>\u0009\u0009\u0009\u0009\u0009<li>hides itself when the game starts<\/li>\u0009\u0009\u0009\u0009\u0009<li>when the sensor detects the player's head touching the bottom of a platform, a copy of this sprite will spawn in that position, animate upwards, and disappear<\/li>\u0009\u0009\u0009\u0009\u0009<li>if an attack touches either an obstacle or boulder, the other object is destroyed and the player is awarded a number of points depending on current level and point value of the object<\/li>\u0009\u0009\u0009\u0009<\/ul>\u0009\u0009\u0009\u0009\u0009\u0009<h2>Enemies<\/h2>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<h3>spawner<\/h3>\u0009\u0009\u0009\u0009<ul>\u0009\u0009\u0009\u0009\u0009<li>hides itself when the game starts<\/li>\u0009\u0009\u0009\u0009\u0009<li>spawns copies of the boulder sprite to disrupt the player<\/li>\u0009\u0009\u0009\u0009\u0009<li>configurable by variables<\/li>\u0009\u0009\u0009\u0009<\/ul>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<h3>boulder<\/h3>\u0009\u0009\u0009\u0009<ul>\u0009\u0009\u0009\u0009\u0009<li>automatically hidden when the game starts<\/li>\u0009\u0009\u0009\u0009\u0009<li>the spawner makes a copy of this sprite and activates it every time it decides a new boulder should be spawned<\/li>\u0009\u0009\u0009\u0009\u0009<li>behavior can be configured with several global variables<\/li>\u0009\u0009\u0009\u0009\u0009<li>anytime a player comes into contact with a boulder, a number of lives equal to the boulder's strength are lost and it is destroyed<\/li>\u0009\u0009\u0009\u0009\u0009<li>if a boulder hits an obstacle, the obstacle is destroyed<\/li>\u0009\u0009\u0009\u0009<\/ul>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<h3>obstacle<\/h3>\u0009\u0009\u0009\u0009<ul>\u0009\u0009\u0009\u0009\u0009<li>can be placed anywhere on the screen<\/li>\u0009\u0009\u0009\u0009\u0009<li>can be configured to only appear after a certain level is reached<\/li>\u0009\u0009\u0009\u0009\u0009<li>when the player touches any obstacle, a number of lives equal to the obstacle's strength are lost and it is destroyed<\/li>\u0009\u0009\u0009\u0009<\/ul>\u0009\u0009\u0009\u0009\u0009\u0009<h2>Collectibles<\/h2>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<h3>gold<\/h3>\u0009\u0009\u0009\u0009<ul>\u0009\u0009\u0009\u0009\u0009<li>can be placed anywhere<\/li>\u0009\u0009\u0009\u0009\u0009<li>can be configured to only appear after a certain level is reached<\/li>\u0009\u0009\u0009\u0009\u0009<li>anytime the player comes into contact with the gold, a number of points equal to the gold's strength are awarded and then it disappears from the level<\/li>\u0009\u0009\u0009\u0009<\/ul>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<h3>powerup<\/h3>\u0009\u0009\u0009\u0009<ul>\u0009\u0009\u0009\u0009\u0009<li>can be placed anywhere<\/li>\u0009\u0009\u0009\u0009\u0009<li>can be configured to only appear after a certain level is reached<\/li>\u0009\u0009\u0009\u0009\u0009<li>anytime the player comes into contact with the powerup, a number of lives equal to the powerup's strength are awarded and then disappears from the level<\/li>\u0009\u0009\u0009\u0009\u0009<li>reveals itself when the player has lost at least one life<\/li>\u0009\u0009\u0009\u0009\u0009<li>only appears once on each level<\/li>\u0009\u0009\u0009\u0009<\/ul>\u0009\u0009<\/aside>\u0009\u0009<section class=\"steps\">\u0009\u0009\u0009<h1>Steps<\/h1>\u0009\u0009\u0009<h2>Load the exercise into GameStack.<\/h2>\u0009\u0009\u0009<figure>\u0009\u0009\u0009\u0009<img src=\".\/images\/gameMechanics_screen-01.png\" alt=\"screenshot\" \/>\u0009\u0009\u0009\u0009<figcaption>This is what the exercise should look like once you have it open.<\/figcaption>\u0009\u0009\u0009<\/figure>\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009<li>Click the download button to download the LevelDesign.stack file.<\/li>\u0009\u0009\u0009\u0009<li>Save the file to a location that you can access on your computer.<\/li>\u0009\u0009\u0009\u0009<li>Click to open the file in game stack.<\/li>\u0009\u0009\u0009\u0009<li>You should see something that looks like the screenshot above and be ready to start.<\/li>\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009<h2>Play the game.<\/h2>\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009<li>Click the <img src=\".\/images\/gamestackflag.png\" alt=\"green flag button\" \/><\/li>\u0009\u0009\u0009\u0009<li>Read the instructions, and press the spacebar to start when ready.<\/li>\u0009\u0009\u0009\u0009<li>Try to get the prospector to the minecart, avoiding flying boulders.<\/li>\u0009\u0009\u0009\u0009<li>Observe that the prospector cannot jump high enough to reach the top platforms.<\/li>\u0009\u0009\u0009\u0009<li>Press the <img src=\".\/images\/icon_stop.png\" alt=\"red stop button\" \/>.<\/li>\u0009\u0009\u0009\u0009<li>Choose \"Revert\" from the main menu to reset the game to it's original settings.<\/li>\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009<h2>Add a game mechanic that allows the prospector to jump higher.<\/h2>\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009<li>Reveal the Template Sprites Tab in your editor.<br \/>\u0009\u0009\u0009\u0009\u0009<figure>\u0009\u0009\u0009\u0009\u0009\u0009<img src=\".\/images\/gameMechanics_screen-03.png\" alt=\"screenshot\" \/>\u0009\u0009\u0009\u0009\u0009\u0009<figcaption>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Choose \"Toggle Template Sprites Tab\" from the \"Edit\" column of the main menu.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>There should now be a Templates tab next to the Sprites tab in your editor.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009\u0009\u0009\u0009<\/figcaption>\u0009\u0009\u0009\u0009\u0009<\/figure>\u0009\u0009\u0009\u0009<\/li>\u0009\u0009\u0009\u0009<li>Switch to the Templates tab.<br \/>\u0009\u0009\u0009\u0009\u0009<figure>\u0009\u0009\u0009\u0009\u0009\u0009<img src=\".\/images\/gameMechanics_screen-04.png\" alt=\"screenshot\" \/>\u0009\u0009\u0009\u0009\u0009\u0009<figcaption>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Click the Templates tab<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Observe that you now see a list of \"template\" sprites which contain all of the logic used by the game's sprites.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009\u0009\u0009\u0009<\/figcaption>\u0009\u0009\u0009\u0009\u0009<\/figure>\u0009\u0009\u0009\u0009<\/li>\u0009\u0009\u0009\u0009<li>Create a game sprite from the trampoline template.<br \/>\u0009\u0009\u0009\u0009\u0009<figure>\u0009\u0009\u0009\u0009\u0009\u0009<img src=\".\/images\/gameMechanics_screen-05.png\" alt=\"screenshot\" \/>\u0009\u0009\u0009\u0009\u0009\u0009<figcaption>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Right-click the template sprite called \"trampoline_template\" which looks like a pink platform with arrows on it.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Select \"new sprite\" from the menu.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009\u0009\u0009\u0009<\/figcaption>\u0009\u0009\u0009\u0009\u0009<\/figure>\u0009\u0009\u0009\u0009<\/li>\u0009\u0009\u0009\u0009<li>Position and rename the trampoline sprite.<br \/>\u0009\u0009\u0009\u0009\u0009<figure>\u0009\u0009\u0009\u0009\u0009\u0009<img src=\".\/images\/gameMechanics_screen-06.png\" alt=\"screenshot\" \/>\u0009\u0009\u0009\u0009\u0009\u0009<figcaption>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Change the new sprite's name to \"trampoline\".<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Drag the trampoline to the middle of the central platform, using the screenshot as a guide.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Hint: the exact position used in this example is x: 0, y: -43<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009\u0009\u0009\u0009<\/figcaption>\u0009\u0009\u0009\u0009\u0009<\/figure>\u0009\u0009\u0009\u0009<\/li>\u0009\u0009\u0009\u0009<li>Play the game with the new mechanic in place.<br \/>\u0009\u0009\u0009\u0009\u0009<figure>\u0009\u0009\u0009\u0009\u0009\u0009<img src=\".\/images\/gameMechanics_screen-07.png\" alt=\"screenshot\" \/>\u0009\u0009\u0009\u0009\u0009\u0009<figcaption>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Click the <img src=\".\/images\/gamestackflag.png\" alt=\"green flag button\" \/><\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Try to get the prospector to the minecart, avoiding flying boulders.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Observe that by jumping from the trampoline, the prospector can now jump high enough to reach the top platforms.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Press the <img src=\".\/images\/icon_stop.png\" alt=\"red stop button\" \/> whenever you have had enough.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Definitely better, but <i>wouldn't it be interesting if the prospector could fight back against the boulders?<\/i><\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009\u0009\u0009\u0009<\/figcaption>\u0009\u0009\u0009\u0009\u0009<\/figure>\u0009\u0009\u0009\u0009<\/li>\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009<h2>Add a game mechanic that allows the prospector to destroy enemies \"Mario Brothers style\".<\/h2>\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009<li>Create a new sprite from the template sprite called \"attack_template\".<br \/>\u0009\u0009\u0009\u0009\u0009<figure>\u0009\u0009\u0009\u0009\u0009\u0009<img src=\".\/images\/gameMechanics_screen-08.png\" alt=\"screenshot\" \/>\u0009\u0009\u0009\u0009\u0009\u0009<figcaption>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Click the Templates tab.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Find the template sprite called \"attack_template\" which looks like a square-shaped green block.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Right-click the attack template.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Select \"new sprite\" from the menu.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009\u0009\u0009\u0009<\/figcaption>\u0009\u0009\u0009\u0009\u0009<\/figure>\u0009\u0009\u0009\u0009<\/li>\u0009\u0009\u0009\u0009<li>Rename the new attack sprite.<br \/>\u0009\u0009\u0009\u0009\u0009<figure>\u0009\u0009\u0009\u0009\u0009\u0009<img src=\".\/images\/gameMechanics_screen-09.png\" alt=\"screenshot\" \/>\u0009\u0009\u0009\u0009\u0009\u0009<figcaption>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>In the Sprites tab, right click the new sprite you created.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Select \"info\" from the menu.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Change the name to just \"attack\".<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Hint: there is premade logic in other templates which will look for a sprite with that exact name, so this step is vital.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009\u0009\u0009\u0009<\/figcaption>\u0009\u0009\u0009\u0009\u0009<\/figure>\u0009\u0009\u0009\u0009<\/li>\u0009\u0009\u0009\u0009<li>Create a logic block for the attack sprite that will fire everytime it is cloned<br \/>\u0009\u0009\u0009\u0009\u0009<figure>\u0009\u0009\u0009\u0009\u0009\u0009<img src=\".\/images\/gameMechanics_screen-10.png\" alt=\"screenshot\" \/>\u0009\u0009\u0009\u0009\u0009\u0009<figcaption>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>With the attack sprite selected, go to the Scripts tab in the right side of the editor.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Switch the view to show Control blocks.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Drag the block called \"when I start as a clone...\" to the script panel.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009\u0009\u0009\u0009<\/figcaption>\u0009\u0009\u0009\u0009\u0009<\/figure>\u0009\u0009\u0009\u0009<\/li>\u0009\u0009\u0009\u0009<li>Add the required logic to the \"when I start as a clone\" stack.<br \/>\u0009\u0009\u0009\u0009\u0009<figure>\u0009\u0009\u0009\u0009\u0009\u0009<img src=\".\/images\/gameMechanics_screen-11.png\" alt=\"screenshot\" \/>\u0009\u0009\u0009\u0009\u0009\u0009<figcaption>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Make sure you still have the attack sprite and Scripts tab active.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Switch the view to show More Blocks.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Drag the block called \"launchAttack\" to the script panel.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>latch it onto the bottom of the \"when I start as a clone...\" stack.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Hint: this \"launchAttack\" block actually refers to a stack of blocks defined in the attack template, and it basically tells the clone to position itself where the prospector's head is, animate, and then remove itself<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009\u0009\u0009\u0009<\/figcaption>\u0009\u0009\u0009\u0009\u0009<\/figure>\u0009\u0009\u0009\u0009<\/li>\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009\u0009\u0009\u0009<h2>Play the finished game and have fun!<\/h2>\u0009\u0009\u0009\u0009\u0009\u0009<figure>\u0009\u0009\u0009\u0009<img src=\".\/images\/gameMechanics_screen-12.png\" alt=\"screenshot\" \/>\u0009\u0009\u0009\u0009<figcaption>the new attack mechanic in action<\/figcaption>\u0009\u0009\u0009<\/figure>\u0009\u0009\u0009\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009<li>Be sure to save your work first.<\/li>\u0009\u0009\u0009\u0009<li>Click the <img src=\".\/images\/gamestackflag.png\" alt=\"green flag button\" \/><\/li>\u0009\u0009\u0009\u0009<li>Take a deep breath, press the spacebar, and try to get the prospector to the goal.<\/li>\u0009\u0009\u0009\u0009<li>This time around, try hitting the bottom of a platform with the prospector's head when a boulder or barrel is directly above.<\/li>\u0009\u0009\u0009\u0009<li>Observe that the attack sprite is cloned above the point of contact, destroying any obstacles it comes in contact with.<\/li>\u0009\u0009\u0009\u0009<li>Now that the prospector can fight back against the onslaught of boulders, things should get more interesting!<\/li>\u0009\u0009\u0009\u0009<li>Still though, the game might not be perfect yet... Press the <img src=\".\/images\/icon_stop.png\" alt=\"red stop button\" \/>.<\/li>\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009\u0009\u0009\u0009<h2>Experiment with the settings for the game's mechanics to find the \"best\" combination.<\/h2>\u0009\u0009\u0009\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009<li>If the game menu screen is showing, hide it immediately! (optional)<br \/>\u0009\u0009\u0009\u0009\u0009<figure>\u0009\u0009\u0009\u0009\u0009\u0009<img src=\".\/images\/gameMechanics_screen-13.png\" alt=\"screenshot\" \/>\u0009\u0009\u0009\u0009\u0009\u0009<figcaption>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Right-click the game's menu overlay (only if you cannot see the game sprites in the editor).<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Click \"Info\".<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Uncheck the \"Show\" option to hide the menu screen.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009\u0009\u0009\u0009<\/figcaption>\u0009\u0009\u0009\u0009\u0009<\/figure>\u0009\u0009\u0009\u0009<\/li>\u0009\u0009\u0009\u0009<li>Take a moment to familiarize yourself with the exposed settings for various game mechanics.<br \/>\u0009\u0009\u0009\u0009\u0009<figure>\u0009\u0009\u0009\u0009\u0009\u0009<img src=\".\/images\/gameMechanics_screen-01.png\" alt=\"screenshot\" \/>\u0009\u0009\u0009\u0009\u0009\u0009<figcaption>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Click to select the Stage object<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Select its Scripts tab<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Check out the following focus areas and their settings:<br \/>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<ul>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li><b>player_lives_max<\/b> defines how many lives the player gets<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li><b>position_resets<\/b> if equal to \"1\" sends the player back to the start position whenever they lose a life<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li><b>health_resets<\/b> if equal to \"1\" you will get all your lives restored each time you pass a level<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li><b>start_x<\/b> and <b>start_y<\/b> define the x and y coordinates the player starts each level at<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li><b>spawner_delay_min<\/b> and <b>spawner_delay_max<\/b> decide the minimum and maximum number of seconds it will take to spawn a new boulder<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li><b>boulder_count_max<\/b> determines how many boulders can be on the screen at once (increases by 1 every other level)<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li><b>boulder_speed<\/b> how fast the boulders start (this also increases every level)<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li><b>boulder_strength<\/b> how many lives the player loses when hit by a boulder<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li><b>cliff_strength<\/b> how many lives the player loses when falling off the platforms (hitting bottom of screen)<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li><b>velocity_x_max<\/b> and <b>velocity_y_max<\/b> top speed the player can move horizontally (x) and vertically (y)<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li><b>bounce_y_max<\/b> defines the bounciness of the trampoline (careful!)<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li><b>gravity<\/b> is a modifier that slows things down going up and speeds them up going down<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<\/ul>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009\u0009\u0009\u0009<\/figcaption>\u0009\u0009\u0009\u0009\u0009<\/figure>\u0009\u0009\u0009\u0009<\/li>\u0009\u0009\u0009\u0009<li>Experiment with the values for these settings while the game is running.<br \/>\u0009\u0009\u0009\u0009\u0009<figure>\u0009\u0009\u0009\u0009\u0009\u0009<img src=\".\/images\/gameMechanics_screen-14.png\" alt=\"screenshot\" \/>\u0009\u0009\u0009\u0009\u0009\u0009<figcaption>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Click the <img src=\".\/images\/gamestackflag.png\" alt=\"green flag button\" \/><\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Click the Design tab as pictured in the screenshot above.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Observe that the default settings defined in the Stage's Scripts tab are duplicated here on the Design tab.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Keep the following things in mind:<br \/>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<ul>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>In this example, the Design tab is intended for changing game mechanic settings while the game is running.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>It is important to keep in mind that whenever you click the <img src=\".\/images\/gamestackflag.png\" alt=\"green flag button\" \/> <i><b class=\"warning\">all of these values will be reset to the defaults defined in the Stage's Scripts tab.<\/b><\/i><\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Some values, such as <b>player_max_lives<\/b> will only update the game when a new level starts.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>The best way to test new settings is to wait for the level or start screen, change your values carefully, and then play the game.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<\/ul>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Repeat the following steps, while the game is running, until you are satisfied with the results:<br \/>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Change a few numbers around.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Press the spacebar to restart the game or continue to the next level.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Observe how the gameplay has changed because of the modified settings.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Lose all of your lives, or beat a level, and if you are not satisfied repeat from the first step.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009\u0009\u0009\u0009<\/figcaption>\u0009\u0009\u0009\u0009\u0009<\/figure>\u0009\u0009\u0009\u0009<\/li>\u0009\u0009\u0009\u0009<li>Now that you are satisfied, update the game's default settings so it will start your way each time.<br \/>\u0009\u0009\u0009\u0009\u0009<figure>\u0009\u0009\u0009\u0009\u0009\u0009<img src=\".\/images\/gameMechanics_screen-01.png\" alt=\"screenshot\" \/>\u0009\u0009\u0009\u0009\u0009\u0009<figcaption>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Write down the updated values for the different settings you tweaked on the Design tab.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Click to select the Stage object.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Select its Scripts tab.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Set the value of each variable here to whatever you set it to on the Design tab.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Save your work.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Click the <img src=\".\/images\/gamestackflag.png\" alt=\"green flag button\" \/>.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Press the spacebar to play the game, and notice how the game now plays the way you want it to, no tweaking necessary!<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009\u0009\u0009\u0009<\/figcaption>\u0009\u0009\u0009\u0009\u0009<\/figure>\u0009\u0009\u0009\u0009<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<\/ol>\u0009\u0009<\/section>\u0009\u0009<section class=\"extra\">\u0009\u0009\u0009<h1>Extra Credit<\/h1>\u0009\u0009\u0009<h2>Haven't had enough? Keep things going with these crazy ideas.<\/h2>\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009<li>Look through the blocks that make up the game's templates, and see if there are any other values you can change. How do those affect gameplay?<\/li>\u0009\u0009\u0009\u0009<li>While you are at it, make a level comprised of nothing but trampolines, and adjust the settings to make it playable.<\/li>\u0009\u0009\u0009\u0009<li>Mess around with the sprite costumes until the player is a boulder, and the spawner shoots out prospectors!<\/li>\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009\u0009\u0009<\/section><!--page:~~game-mechanics-gamestack-exercise~~-->","link":"","mod":"game-mechanics","movie":null,"name":"game-mechanics-gamestack-exercise","promptfile":null,"prompts":null,"reference":null,"text":null,"title":"Game Stack Exercise"},{"bIsChecked":true,"exercise":"","instructions":"<h1>Goal<\/h1><p>Develop understanding of game mechanics by deconstructing and describing the mechanics of the Game Stack game, Prospector Twins.<\/p><h1>Steps<\/h1><ol><li>From the Game Stack exercise in the Game Mechanics Module, download, play and become familiar with the gameplay elements of Prospector Twins.<\/li><li>Identify three distinct mechanics utilized in the game (Example: Jump) and write a one paragraph description for each mechanic.<\/li><li>Write a one paragraph description of the game's victory condition.<\/li><li>Optional. Integrate this exercise into the Game Design Document we created for the Game Mechanics Module for a fuller example of a complete GDD.<\/li><\/ol><h1>Hints and Challenges<\/h1><p>Can you imagine a different set of victory conditions for the game? For an extra challenge, come up with a new possible victory condition and describe it in a short paragraph.<\/p><!--page:~~game-mechanics-writing-exercise~~-->","link":"","mod":"game-mechanics","movie":null,"name":"game-mechanics-writing-exercise","promptfile":null,"prompts":null,"reference":null,"text":null,"title":"Writing Exercise"}]},{"bIsChecked":true,"name":"common-design-theories","title":"Common Design Theories","topics":[{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"common-design-theories","movie":".\/video\/commondesign-overview-partone-micro-1.mp4","name":"Overview","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"entertaining"},{"order":0,"points":0,"sticky":false,"text":"marketed  "},{"order":0,"points":100,"sticky":false,"text":"interactive"},{"order":0,"points":0,"sticky":false,"text":"inexpensive "}],"failure":{"button":null,"message":"It is the interaction of the game and the player that makes video games such a unique medium for entertainment and education. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn1-commondesign-overview-partone-micro-1","number_of_choices":4,"question":"Video games are distinctive from most books and movies in that they are designed to be _____.","start":3600,"success":{"button":null,"message":"It is the interaction of the game and the player that makes video games such a unique medium for entertainment and education. "},"type":null},{"choices":[{"order":0,"points":100,"sticky":false,"text":"unique"},{"order":0,"points":0,"sticky":false,"text":"frustrating "},{"order":0,"points":0,"sticky":false,"text":"exciting"},{"order":0,"points":0,"sticky":false,"text":"boring"}],"failure":{"button":null,"message":"Interactions in a video game are often approached differently by different players, creating individual experiences that are unique. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn2-commondesign-overview-partone-micro-1","number_of_choices":4,"question":"The interaction of a player and a video game creates a(n) _____ experience for each person that plays.","start":3600,"success":{"button":null,"message":"Interactions in a video game are often approached differently by different players, creating individual experiences that are unique. "},"type":null}],"reference":"common-design-theories-1","text":null,"title":"Overview"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"common-design-theories","movie":".\/video\/commondesign-overview-parttwo-micro-2.mp4","name":"Common Design Topics","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"True"},{"order":0,"points":100,"sticky":false,"text":"False"}],"failure":{"button":null,"message":"While video games can involve vastly complex programming, they are art in the sense something is being created from nothing for the sake of appreciation and enjoyment. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn3-commondesign-overview-parttwo-micro-2","number_of_choices":2,"question":"True or False: While video games are often entertaining, they are not considered art in the way movies, music, and books are. ","start":3600,"success":{"button":null,"message":"While video games can involve vastly complex programming, they are art in the sense something is being created from nothing for the sake of appreciation and enjoyment. "},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Visual design"},{"order":0,"points":0,"sticky":false,"text":"Balance in gameplay"},{"order":0,"points":100,"sticky":false,"text":"Basics of marketing"},{"order":0,"points":0,"sticky":false,"text":"User experience "}],"failure":{"button":null,"message":"This module will focus on the artistry that goes into making a video game, not how to market a finished product. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn4-commondesign-overview-parttwo-micro-2","number_of_choices":4,"question":"Which of the following is NOT a common design theory covered in this module? ","start":3600,"success":{"button":null,"message":"This module will focus on the artistry that goes into making a video game, not how to market a finished product. "},"type":null}],"reference":"common-design-theories-1","text":null,"title":"Common Design Topics"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"common-design-theories","movie":".\/video\/commondesign-fundamentals-intro-micro-1.mp4","name":"Fundamentals of Design","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"Mechanics"},{"order":0,"points":0,"sticky":false,"text":"Visuals  "},{"order":0,"points":0,"sticky":false,"text":"Audio"},{"order":0,"points":0,"sticky":false,"text":"Content"}],"failure":{"button":null,"message":"Mechanics create the interaction of the game and the player that is fundamental to all game design.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn5-commondesign-fundamentals-intro-micro-1","number_of_choices":4,"question":"Which of the following are fundamental elements unique to game design?","start":3600,"success":{"button":null,"message":"Mechanics create the interaction of the game and the player that is fundamental to all game design.  "},"type":null}],"reference":"common-design-theories-2","text":null,"title":"Fundamentals of Design"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"common-design-theories","movie":".\/video\/commondesign-fundamentals-audience-micro-2.mp4","name":"Audience","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"micro-transactions"},{"order":0,"points":100,"sticky":false,"text":"expectations "},{"order":0,"points":0,"sticky":false,"text":"controllers"},{"order":0,"points":0,"sticky":false,"text":"dominate strategies"}],"failure":{"button":null,"message":"It is crucial for game developers to know the expectations of their target audience, even if the game intends to mess with those expectations on purpose. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn6-commondesign-fundamentals-audience-micro-2","number_of_choices":4,"question":"For game designers, it is important to understand that particular audiences come with particular _____ for games they may play.","start":3600,"success":{"button":null,"message":"It is crucial for game developers to know the expectations of their target audience, even if the game intends to mess with those expectations on purpose. "},"type":null},{"choices":[{"order":0,"points":100,"sticky":false,"text":"psychology "},{"order":0,"points":0,"sticky":false,"text":"toxicology  "},{"order":0,"points":0,"sticky":false,"text":"economics "},{"order":0,"points":0,"sticky":false,"text":"physiology "}],"failure":{"button":null,"message":"People choose to play a video game for different reasons and understanding that psychology is key to meeting an audience's expectations."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn7-commondesign-fundamentals-audience-micro-2","number_of_choices":4,"question":"Understanding the expectations and desires of a target audience is more about gamer ______ than genre or mechanics. ","start":3600,"success":{"button":null,"message":"People choose to play a video game for different reasons and understanding that psychology is key to meeting an audience's expectations."},"type":null}],"reference":"common-design-theories-2","text":null,"title":"Audience"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"common-design-theories","movie":".\/video\/commondesign-fundamentals-platform-micro-3.mp4","name":"Platform","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"psychology "},{"order":0,"points":0,"sticky":false,"text":"virtual currency  "},{"order":0,"points":0,"sticky":false,"text":"RAM"},{"order":0,"points":100,"sticky":false,"text":"input device"}],"failure":{"button":null,"message":"Platform choice will strongly influence the type of input device (controller) the game uses. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn8-commondesign-fundamentals-platform-micro-3","number_of_choices":4,"question":"Platform choice will have a huge effect on the _____ used to play the game. ","start":3600,"success":{"button":null,"message":"Platform choice will strongly influence the type of input device (controller) the game uses. "},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"input device"},{"order":0,"points":0,"sticky":false,"text":"development tools  "},{"order":0,"points":0,"sticky":false,"text":"target audience"},{"order":21,"points":100,"sticky":false,"text":"all of the above"}],"failure":{"button":null,"message":"Platform choice brings a host of considerations including who plays on the platform, what tools help develop games on that platform and what controller works best. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn9-commondesign-fundamentals-platform-micro-3","number_of_choices":4,"question":"Which of the following would be a factor in choosing a platform to develop a game on? ","start":3600,"success":{"button":null,"message":"Platform choice brings a host of considerations including who plays on the platform, what tools help develop games on that platform and what controller works best. "},"type":null}],"reference":"common-design-theories-2","text":null,"title":"Platform"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"common-design-theories","movie":".\/video\/commondesign-fundamentals-genre-micro-4.mp4","name":"Genre","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"market a game"},{"order":0,"points":100,"sticky":false,"text":"identify a potential audience  "},{"order":0,"points":0,"sticky":false,"text":"copy mechanics"},{"order":0,"points":0,"sticky":false,"text":"make all games the same"}],"failure":{"button":null,"message":"Genres help developers estimate the potential size and interest an audience has in a particular type of game. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn10-commondesign-fundamentals-genre-micro-4","number_of_choices":4,"question":"For a video game developer, the purpose of a genre is to _____.","start":3600,"success":{"button":null,"message":"Genres help developers estimate the potential size and interest an audience has in a particular type of game. "},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"always have a variety of games"},{"order":0,"points":100,"sticky":false,"text":"identify familiar elements of a game  "},{"order":0,"points":0,"sticky":false,"text":"master arcade games"},{"order":21,"points":0,"sticky":false,"text":"none of the above"}],"failure":{"button":null,"message":"Genres help players make informed decisions on their game purchases by instantly identifying familiar elements they desire. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn11-commondesign-fundamentals-genre-micro-4","number_of_choices":4,"question":"For a video game consumer and player, the purpose of a genre is to _____.","start":3600,"success":{"button":null,"message":"Genres help players make informed decisions on their game purchases by instantly identifying familiar elements they desire. "},"type":null},{"choices":[{"order":0,"points":100,"sticky":false,"text":"deconstructing the mechanics"},{"order":0,"points":0,"sticky":false,"text":"making a sequel  "},{"order":0,"points":0,"sticky":false,"text":"choosing a color palate "},{"order":21,"points":0,"sticky":false,"text":"none of the above"}],"failure":{"button":null,"message":"Removing all player expectations from a genre can be risky. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn12-commondesign-fundamentals-genre-micro-4","number_of_choices":4,"question":"It is crucial for game developers who want to innovate a genre understand what makes the genre popular before _____.","start":3600,"success":{"button":null,"message":"Removing all player expectations from a genre can be risky. "},"type":null}],"reference":"common-design-theories-2","text":null,"title":"Genre"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"common-design-theories","movie":".\/video\/commondesign-fundamentals-mech-micro-5.mp4","name":"Rules and Mechanics","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"not buying the game"},{"order":0,"points":0,"sticky":false,"text":"only playing the game once  "},{"order":0,"points":0,"sticky":false,"text":"waiting for the game to go on sale"},{"order":0,"points":0,"sticky":false,"text":"borrowing a copy from a friend"}],"failure":{"button":null,"message":"Video game consumers are generally well educated on what makes mechanics fun."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn13-commondesign-fundamentals-mech-micro-5","number_of_choices":4,"question":"In general, an audience will let a developer know they have failed at creating good mechanics for a game by _____.","start":3600,"success":{"button":null,"message":"Video game consumers are generally well educated on what makes mechanics fun."},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"practical needs "},{"order":0,"points":0,"sticky":false,"text":"player psychology  "},{"order":0,"points":0,"sticky":false,"text":"fun and flow"},{"order":21,"points":100,"sticky":false,"text":"all of the above"}],"failure":{"button":null,"message":"No one mechanic, or set of mechanics, is going to be a perfect fit for every game. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn14-commondesign-fundamentals-mech-micro-5","number_of_choices":4,"question":"Designing good rules and mechanics in a video game is often a balancing act of  _____.","start":3600,"success":{"button":null,"message":"No one mechanic, or set of mechanics, is going to be a perfect fit for every game. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"symmetrically  "},{"order":0,"points":0,"sticky":false,"text":"asymmetrically  "},{"order":0,"points":100,"sticky":false,"text":"abstractly "},{"order":0,"points":0,"sticky":false,"text":"sacredly  "}],"failure":{"button":null,"message":"Remember the three goals of a mechanic: it should be meaningful, fun, and necessary. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn15-commondesign-fundamentals-mech-micro-5","number_of_choices":4,"question":"From a designer's point of view, it is best to think of mechanics _____, and not as a rigid set of controller options. ","start":3600,"success":{"button":null,"message":"Remember the three goals of a mechanic: it should be meaningful, fun, and necessary. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"True"},{"order":0,"points":100,"sticky":false,"text":"False"}],"failure":{"button":null,"message":"There are other ways for a game to be innovative and good beyond inventing all new mechanics. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn16-commondesign-fundamentals-mech-micro-5","number_of_choices":2,"question":"True or False: A new game should always invent new mechanics. ","start":3600,"success":{"button":null,"message":"There are other ways for a game to be innovative and good beyond inventing all new mechanics. "},"type":"Multiple"}],"reference":"common-design-theories-2","text":null,"title":"Rules and Mechanics"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"common-design-theories","movie":".\/video\/commondesign-fundamentals-challenges-micro-6.mp4","name":"Challenges","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"challenges"},{"order":0,"points":0,"sticky":false,"text":"cut scenes  "},{"order":0,"points":0,"sticky":false,"text":"visual design"},{"order":0,"points":0,"sticky":false,"text":"dialog "}],"failure":{"button":null,"message":"Overcoming intellectual and physical challenges are what makes a video game an interactive experience. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn17-commondesign-fundamentals-challenges-micro-6","number_of_choices":4,"question":"Video games are interactive because of _____ in the game. ","start":3600,"success":{"button":null,"message":"Overcoming intellectual and physical challenges are what makes a video game an interactive experience. "},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"frustrating "},{"order":0,"points":0,"sticky":false,"text":"expensive  "},{"order":0,"points":100,"sticky":false,"text":"unique "},{"order":0,"points":0,"sticky":false,"text":"interactive"}],"failure":{"button":null,"message":"Good mechanics make games replayable while still offering a different play experience each time.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn18-commondesign-fundamentals-challenges-micro-6","number_of_choices":4,"question":"Unlike a book or a movie, challenges make a video game a(n) _____ experience each time the game is played. ","start":3600,"success":{"button":null,"message":"Good mechanics make games replayable while still offering a different play experience each time.  "},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"strategy; obstacles"},{"order":0,"points":100,"sticky":false,"text":"difficulty; reward  "},{"order":0,"points":0,"sticky":false,"text":"originality; expectations"},{"order":0,"points":0,"sticky":false,"text":"hit points; controller reaction"}],"failure":{"button":null,"message":"A good mechanic rewards a player for going through the process of improving a skill in the game. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn19-commondesign-fundamentals-challenges-micro-6","number_of_choices":4,"question":"The key to designing good challenges in a video game is balancing _____ and _____.","start":3600,"success":{"button":null,"message":"A good mechanic rewards a player for going through the process of improving a skill in the game. "},"type":null},{"choices":[{"order":0,"points":100,"sticky":false,"text":"to take on the next challenge"},{"order":0,"points":0,"sticky":false,"text":"quit the game  "},{"order":0,"points":0,"sticky":false,"text":"buy the sequel "},{"order":0,"points":0,"sticky":false,"text":"enjoy the genre"}],"failure":{"button":null,"message":"When a player eagerly awaits the next challenge, a game has succeeded, at least in part, in being fun.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn20-commondesign-fundamentals-challenges-micro-6","number_of_choices":4,"question":"Completing a properly balanced challenge in a video game should entice a player to _____.","start":3600,"success":{"button":null,"message":"When a player eagerly awaits the next challenge, a game has succeeded, at least in part, in being fun.  "},"type":null}],"reference":"common-design-theories-2","text":null,"title":"Challenges"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"common-design-theories","movie":".\/video\/commondesign-fundamentals-incentives-micro-7.mp4","name":"Incentives","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"challenges; experience points"},{"order":0,"points":0,"sticky":false,"text":"incentives; mechanics  "},{"order":0,"points":100,"sticky":false,"text":"incentives; challenges"},{"order":0,"points":0,"sticky":false,"text":"challenges; game titles"}],"failure":{"button":null,"message":"Incentives include anything offered as a reward to take on a challenge."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn21-commondesign-fundamentals-incentives-micro-7","number_of_choices":4,"question":"Game designers use _____ to reinforce a player's interest in seeking out new _____.","start":3600,"success":{"button":null,"message":"Incentives include anything offered as a reward to take on a challenge."},"type":null},{"choices":[{"order":0,"points":100,"sticky":false,"text":"Gaining experience points"},{"order":0,"points":0,"sticky":false,"text":"Fighting monsters  "},{"order":0,"points":0,"sticky":false,"text":"Exploration"},{"order":0,"points":0,"sticky":false,"text":"Player vs player combat"}],"failure":{"button":null,"message":"Gaining experience points for character improvement is a common incentive for players to explore and fight enemies in role-playing games.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn22-commondesign-fundamentals-incentives-micro-7","number_of_choices":4,"question":"_____ is an example of an incentive to seek out challenges in many role-playing games, such as Fallout 3.","start":3600,"success":{"button":null,"message":"Gaining experience points for character improvement is a common incentive for players to explore and fight enemies in role-playing games.  "},"type":null}],"reference":"common-design-theories-2","text":null,"title":"Incentives"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"common-design-theories","movie":".\/video\/commondesign-fundamentals-playability-micro-8.mp4","name":"Playability","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"cost"},{"order":0,"points":0,"sticky":false,"text":"platform  "},{"order":0,"points":100,"sticky":false,"text":"control"},{"order":0,"points":0,"sticky":false,"text":"fun"}],"failure":{"button":null,"message":"Mechanics, user interface, and control are the three main components to playability.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn23-commondesign-fundamentals-playabilitiy-micro-8","number_of_choices":4,"question":"Playability is determined by a combination of mechanics, user interface, and _____.","start":3600,"success":{"button":null,"message":"Mechanics, user interface, and control are the three main components to playability.  "},"type":null},{"choices":[{"order":0,"points":100,"sticky":false,"text":"be fun"},{"order":0,"points":0,"sticky":false,"text":"receive a ESRB rating "},{"order":0,"points":0,"sticky":false,"text":"have good visual design"},{"order":0,"points":0,"sticky":false,"text":"fit into a genre"}],"failure":{"button":null,"message":"In many ways, playability must be perfected before a game can ever be fun. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn24-commondesign-fundamentals-playabilitiy-micro-8","number_of_choices":4,"question":"Without playability, a game will never _____.","start":3600,"success":{"button":null,"message":"In many ways, playability must be perfected before a game can ever be fun. "},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"sales"},{"order":0,"points":100,"sticky":false,"text":"play testing "},{"order":0,"points":0,"sticky":false,"text":"word of mouth"},{"order":0,"points":0,"sticky":false,"text":"incentives"}],"failure":{"button":null,"message":"Games could sound fun on paper and still fail at being playable without hands-on play testing. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn25-commondesign-fundamentals-playabilitiy-micro-8","number_of_choices":4,"question":"The best way to know if a game has playability is through _____.","start":3600,"success":{"button":null,"message":"Games could sound fun on paper and still fail at being playable without hands-on play testing. "},"type":null}],"reference":"common-design-theories-2","text":null,"title":"Playability"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"common-design-theories","movie":".\/video\/commondesign-fundamentals-content-micro-9.mp4","name":"Content","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"marketing"},{"order":0,"points":100,"sticky":false,"text":"content   "},{"order":0,"points":0,"sticky":false,"text":"gimmicks"},{"order":0,"points":0,"sticky":false,"text":"incentives "}],"failure":{"button":null,"message":"Content includes every aspect of a game a consumer expects from their purchase. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn26-commondesign-fundamentals-content-micro-9","number_of_choices":4,"question":"Games separate themselves from other games mostly through unique _____.","start":3600,"success":{"button":null,"message":"Content includes every aspect of a game a consumer expects from their purchase. "},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Genre"},{"order":0,"points":0,"sticky":false,"text":"Platform "},{"order":0,"points":100,"sticky":false,"text":"Quality"},{"order":0,"points":0,"sticky":false,"text":"Price "}],"failure":{"button":null,"message":"Quality, Quantity, and Originality are the three core aspects of content. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn27-commondesign-fundamentals-content-micro-9","number_of_choices":4,"question":"Which of the following is a core aspect of content in a video game?","start":3600,"success":{"button":null,"message":"Quality, Quantity, and Originality are the three core aspects of content. "},"type":null}],"reference":"common-design-theories-2","text":null,"title":"Content"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"common-design-theories","movie":".\/video\/commondesign-fundamentals-contentquality-micro-10.mp4","name":"Content Quality","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"fun"},{"order":0,"points":100,"sticky":false,"text":"functional "},{"order":0,"points":0,"sticky":false,"text":"full of content"},{"order":0,"points":0,"sticky":false,"text":"marketable"}],"failure":{"button":null,"message":"At the very least, a game must work in terms of being competently programed and designed. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn28-commondesign-fundamentals-contentquality-micro-10","number_of_choices":4,"question":"Meeting the minimum bar for quality means that the game is _____.","start":3600,"success":{"button":null,"message":"At the very least, a game must work in terms of being competently programed and designed. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"vacations"},{"order":0,"points":100,"sticky":false,"text":"shortcuts "},{"order":0,"points":0,"sticky":false,"text":"investors "},{"order":21,"points":0,"sticky":false,"text":"none of the above"}],"failure":{"button":null,"message":"Time, money, and resources are all factors that affect quality. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn29-commondesign-fundamentals-contentquality-micro-10","number_of_choices":4,"question":"Video game studios often lose quality when they take _____ during development","start":3600,"success":{"button":null,"message":"Time, money, and resources are all factors that affect quality. "},"type":"Multiple"}],"reference":"common-design-theories-2","text":null,"title":"Content Quality"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"common-design-theories","movie":".\/video\/commondesign-fundamentals-contentquantity-micro-11.mp4","name":"Content Quantity","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"linear "},{"order":0,"points":100,"sticky":false,"text":"too short   "},{"order":0,"points":0,"sticky":false,"text":"sold at a discount"},{"order":0,"points":0,"sticky":false,"text":"unplayable "}],"failure":{"button":null,"message":"Sometimes a game can be fun but end too soon."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn30-commondesign-fundamentals-contentquantity-micro-11","number_of_choices":4,"question":"When a game lacks content quantity, it usually means the game is _____.","start":3600,"success":{"button":null,"message":"Sometimes a game can be fun but end too soon."},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"quality"},{"order":0,"points":0,"sticky":false,"text":"breadcrumbs   "},{"order":0,"points":100,"sticky":false,"text":"quantity"},{"order":0,"points":0,"sticky":false,"text":"collectables  "}],"failure":{"button":null,"message":"Repetition is a common way to add quantity to video games. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn31-commondesign-fundamentals-contentquantity-micro-11","number_of_choices":4,"question":"Having players constantly backtrack through the game's environment is one way developers make a game's lack of ____ seem like more. ","start":3600,"success":{"button":null,"message":"Repetition is a common way to add quantity to video games. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"time"},{"order":0,"points":0,"sticky":false,"text":"budget  "},{"order":0,"points":0,"sticky":false,"text":"goals"},{"order":21,"points":100,"sticky":false,"text":"all of the above "}],"failure":{"button":null,"message":"Content quantity is often sacrificed when time and money run short in the development process. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn32-commondesign-fundamentals-contentquantity-micro-11","number_of_choices":4,"question":"Content quantity is typically determined by a developer's ______. ","start":3600,"success":{"button":null,"message":"Content quantity is often sacrificed when time and money run short in the development process. "},"type":"Multiple"}],"reference":"common-design-theories-2","text":null,"title":"Content Quantity"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"common-design-theories","movie":".\/video\/commondesign-fundamentals-contentoriginality-micro-12.mp4","name":"Content Originality","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"fun"},{"order":0,"points":0,"sticky":false,"text":"meaningful   "},{"order":0,"points":0,"sticky":false,"text":"necessary"},{"order":21,"points":100,"sticky":false,"text":"all of the above"}],"failure":{"button":null,"message":"Originality in mechanics, story, or design should always pass the test of: are they fun, are they meaningful, and are they necessary?"},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn33-commondesign-fundamentals-contentoriginality -micro-12","number_of_choices":4,"question":"Originality is difficult because a new mechanic isn't always ____.","start":3600,"success":{"button":null,"message":"Originality in mechanics, story, or design should always pass the test of: are they fun, are they meaningful, and are they necessary?"},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"sales"},{"order":0,"points":100,"sticky":false,"text":"rapid prototyping   "},{"order":0,"points":0,"sticky":false,"text":"questionnaires  "},{"order":0,"points":0,"sticky":false,"text":"reviews"}],"failure":{"button":null,"message":"Rapid prototyping is a quick method for developers to experiment with new mechanics and concepts. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn34-commondesign-fundamentals-contentoriginality -micro-12","number_of_choices":4,"question":"One way developers test whether an original mechanic is fun, meaningful, and necessary is through _____.","start":3600,"success":{"button":null,"message":"Rapid prototyping is a quick method for developers to experiment with new mechanics and concepts. "},"type":null}],"reference":"common-design-theories-2","text":null,"title":"Content Originality"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"common-design-theories","movie":".\/video\/commondesign-fundamentals-visualandsound-micro-13.mp4","name":"Visuals and Sound","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"hide"},{"order":0,"points":0,"sticky":false,"text":"limit   "},{"order":0,"points":0,"sticky":false,"text":"document "},{"order":0,"points":100,"sticky":false,"text":"accentuate "}],"failure":{"button":null,"message":"A game's visuals and sound should enhance a game's mechanics without altering their functionality. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn35-commondesign-fundamentals-visualandsound-micro- ","number_of_choices":4,"question":"Good visual and sound design in a video game helps to _____ the design goals of a game.","start":3600,"success":{"button":null,"message":"A game's visuals and sound should enhance a game's mechanics without altering their functionality. "},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"light; magic"},{"order":0,"points":0,"sticky":false,"text":"points; penalties"},{"order":0,"points":100,"sticky":false,"text":"visuals: sound"},{"order":0,"points":0,"sticky":false,"text":"visuals; copyright"}],"failure":{"button":null,"message":"Angry Birds is an example of a game that uses excellent visuals and sound to improve the fun of the game without altering the way the game is played.   "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn36-commondesign-fundamentals-visualandsound-micro- ","number_of_choices":4,"question":"Angry Birds uses _____ and _____ to create originality with a known mechanic.  ","start":3600,"success":{"button":null,"message":"Angry Birds is an example of a game that uses excellent visuals and sound to improve the fun of the game without altering the way the game is played.   "},"type":null}],"reference":"common-design-theories-2","text":null,"title":"Visuals and Sound"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"common-design-theories","movie":".\/video\/commondesign-balance-intro-micro-1.mp4","name":"Balance in Gameplay","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"profit"},{"order":0,"points":100,"sticky":false,"text":"balance "},{"order":0,"points":0,"sticky":false,"text":"puzzle mastery"},{"order":0,"points":0,"sticky":false,"text":"visuals"}],"failure":{"button":null,"message":"Balance includes a host of considerations including difficulty, fairness, and more. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn37-commondesign-balance-intro-micro-1","number_of_choices":4,"question":"Much of the challenge in game design is achieving _____ in gameplay. ","start":3600,"success":{"button":null,"message":"Balance includes a host of considerations including difficulty, fairness, and more. "},"type":null}],"reference":"common-design-theories-3","text":null,"title":"Balance in Gameplay"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"common-design-theories","movie":".\/video\/commondesign-balance-difficulty1-micro-2.mp4","name":"Difficulty","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"difficulty"},{"order":0,"points":0,"sticky":false,"text":"controller reaction  "},{"order":0,"points":0,"sticky":false,"text":"visual flair"},{"order":0,"points":0,"sticky":false,"text":"fun"}],"failure":{"button":null,"message":"Not all audiences want to play a game with a high degree of difficulty."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn38-commondesign-balance-difficulty1-micro-2","number_of_choices":4,"question":"Some games are purposely easier than other games because audiences demand different degrees of _____.","start":3600,"success":{"button":null,"message":"Not all audiences want to play a game with a high degree of difficulty."},"type":null},{"choices":[{"order":0,"points":100,"sticky":false,"text":"casual"},{"order":0,"points":0,"sticky":false,"text":"genre "},{"order":0,"points":0,"sticky":false,"text":"younger"},{"order":0,"points":0,"sticky":false,"text":"serious"}],"failure":{"button":null,"message":"Mobile games are very popular with casual gamers who may have never played a game on a console or PC. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn39-commondesign-balance-difficulty1-micro-2","number_of_choices":4,"question":"In general, tablet and mobile games are designed for _____ gamers interested in games with less difficulty than traditional computer and console games. ","start":3600,"success":{"button":null,"message":"Mobile games are very popular with casual gamers who may have never played a game on a console or PC. "},"type":null}],"reference":"common-design-theories-3","text":null,"title":"Difficulty"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"common-design-theories","movie":".\/video\/commondesign-balance-difficulty2-micro-3.mp4","name":"Skill Improvement","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"micro-transactions"},{"order":0,"points":0,"sticky":false,"text":"collectables   "},{"order":0,"points":100,"sticky":false,"text":"skill level"},{"order":0,"points":0,"sticky":false,"text":"controller reaction"}],"failure":{"button":null,"message":"Challenges should increase as a player masters their skills in the game. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn40-commondesign-balance-difficulty2-micro-3","number_of_choices":4,"question":"Difficulty in a game should progress along with a player's _____.","start":3600,"success":{"button":null,"message":"Challenges should increase as a player masters their skills in the game. "},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"fun; difficult"},{"order":0,"points":100,"sticky":false,"text":"demanding; impossible  "},{"order":0,"points":0,"sticky":false,"text":"difficult: meaningful"},{"order":0,"points":0,"sticky":false,"text":"meaningful: fun"}],"failure":{"button":null,"message":"Players feel reward when their time spent mastering a skill allows them to take on bigger challenges. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn41-commondesign-balance-difficulty2-micro-3","number_of_choices":4,"question":"Slowly teaching players to improve their skills in the game allows for future challenges to be _____ but not _____.","start":3600,"success":{"button":null,"message":"Players feel reward when their time spent mastering a skill allows them to take on bigger challenges. "},"type":null}],"reference":"common-design-theories-3","text":null,"title":"Skill Improvement"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"common-design-theories","movie":".\/video\/commondesign-balance-difficulty3-micro-4.mp4","name":"Balancing Difficulty","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"frustrated "},{"order":0,"points":0,"sticky":false,"text":"bored   "},{"order":0,"points":0,"sticky":false,"text":"casual gamers"},{"order":0,"points":0,"sticky":false,"text":"happy"}],"failure":{"button":null,"message":"Making a game challenging without frustrating players is a key aspect to game design. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn42-commondesign-balance-difficulty3-micro-4","number_of_choices":4,"question":"When a game is too difficult for a player, they will quickly become _____.","start":3600,"success":{"button":null,"message":"Making a game challenging without frustrating players is a key aspect to game design. "},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"more frustrated"},{"order":0,"points":100,"sticky":false,"text":"bored  "},{"order":0,"points":0,"sticky":false,"text":"casual gamers"},{"order":0,"points":0,"sticky":false,"text":"happy"}],"failure":{"button":null,"message":"Balancing difficulty can be difficult!"},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn43-commondesign-balance-difficulty3-micro-4","number_of_choices":4,"question":"Allowing players to lower the difficulty of a game helps alleviate frustration, but at the risk of them becoming ____.  ","start":3600,"success":{"button":null,"message":"Balancing difficulty can be difficult!"},"type":null}],"reference":"common-design-theories-3","text":null,"title":"Balancing Difficulty"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"common-design-theories","movie":".\/video\/commondesign-balance-difficulty4-micro-5.mp4","name":"Character Skill","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"math calculations"},{"order":0,"points":0,"sticky":false,"text":"luck  "},{"order":0,"points":0,"sticky":false,"text":"micro-transactions"},{"order":0,"points":0,"sticky":false,"text":"a magic system"}],"failure":{"button":null,"message":"These games typically focus on strategy and planning more than how fast one can push a button."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn44-commondesign-balance-difficulty4-micro-5","number_of_choices":4,"question":"Some games replace controller mastery with rules mastery, which determines the outcome of all actions through _____, and not hand-eye coordination. ","start":3600,"success":{"button":null,"message":"These games typically focus on strategy and planning more than how fast one can push a button."},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"purple items"},{"order":0,"points":100,"sticky":false,"text":"experience points"},{"order":0,"points":0,"sticky":false,"text":"micro-transactions"},{"order":0,"points":0,"sticky":false,"text":"auction houses"}],"failure":{"button":null,"message":"Experience points give player's characters \"levels\" which improve character skills.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn45-commondesign-balance-difficulty4-micro-5","number_of_choices":4,"question":"Role-playing games often use _____ to determine how skilled a player's character is in the game. ","start":3600,"success":{"button":null,"message":"Experience points give player's characters \"levels\" which improve character skills.  "},"type":"Multiple"}],"reference":"common-design-theories-3","text":null,"title":"Character Skill"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"common-design-theories","movie":".\/video\/commondesign-balance-fairness1-micro-6.mp4","name":"Fairness","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"hats"},{"order":0,"points":100,"sticky":false,"text":"statistical advantage"},{"order":0,"points":0,"sticky":false,"text":"experience points"},{"order":0,"points":0,"sticky":false,"text":"items"}],"failure":{"button":null,"message":"This balance of fairness can be designed symmetrical or asymmetrical."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn46-commondesign-balance-fairness1-micro-6","number_of_choices":4,"question":"In player vs player games, it is crucial that all players have the same _____.","start":3600,"success":{"button":null,"message":"This balance of fairness can be designed symmetrical or asymmetrical."},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"rules mastery"},{"order":0,"points":100,"sticky":false,"text":"micro-transactions"},{"order":0,"points":0,"sticky":false,"text":"experience points"},{"order":0,"points":0,"sticky":false,"text":"power-ups"}],"failure":{"button":null,"message":"Micro-transactions often allow players to purchase greater power in a game with real world money, which creates fairness issues with those who cannot afford to spend as much. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn47-commondesign-balance-fairness1-micro-6","number_of_choices":4,"question":"The biggest complaint about games featuring _____ is that they create an imbalance of fairness in player vs. player gameplay. ","start":3600,"success":{"button":null,"message":"Micro-transactions often allow players to purchase greater power in a game with real world money, which creates fairness issues with those who cannot afford to spend as much. "},"type":null}],"reference":"common-design-theories-3","text":null,"title":"Fairness"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"common-design-theories","movie":".\/video\/commondesign-balance-fairness2-micro-7.mp4","name":"Nerf","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"Nashed"},{"order":0,"points":0,"sticky":false,"text":"Nixed   "},{"order":0,"points":0,"sticky":false,"text":"Nuked"},{"order":0,"points":100,"sticky":false,"text":"Nerfed"}],"failure":{"button":null,"message":"The opposite of a character being \"nerfed\" is called being \"buffed\"."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn48-commondesign-balance-fairness2-micro-7","number_of_choices":4,"question":"_____ is a slang term among video game fans used when studios lower the power of certain player characters to even out balance.","start":3600,"success":{"button":null,"message":"The opposite of a character being \"nerfed\" is called being \"buffed\"."},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Guilded"},{"order":0,"points":100,"sticky":false,"text":"Gimped"},{"order":0,"points":0,"sticky":false,"text":"Graded"},{"order":0,"points":0,"sticky":false,"text":"Gloomed"}],"failure":{"button":null,"message":"The reason players do not like it when developers \"nerf\" games is because they fear their favorite character will be \"gimped\". "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn49-commondesign-balance-fairness2-micro-7","number_of_choices":4,"question":"_____ is a term used by video game fans when they perceive that a particular character class is \"nerfed\" too far.","start":3600,"success":{"button":null,"message":"The reason players do not like it when developers \"nerf\" games is because they fear their favorite character will be \"gimped\". "},"type":"Multiple"}],"reference":"common-design-theories-3","text":null,"title":"Nerf"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"common-design-theories","movie":".\/video\/commondesign-balance-pacing1-micro-8.mp4","name":"Pacing","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"pacing"},{"order":0,"points":0,"sticky":false,"text":"development budget  "},{"order":0,"points":0,"sticky":false,"text":"environment"},{"order":0,"points":0,"sticky":false,"text":"technical design"}],"failure":{"button":null,"message":"Good pacing is the balance of a player's time spent playing vs their continued enjoyment of the game. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn50-commondesign-balance-pacing1-micro-8","number_of_choices":4,"question":"How long a game takes to complete is largely determined by a game's _____.","start":3600,"success":{"button":null,"message":"Good pacing is the balance of a player's time spent playing vs their continued enjoyment of the game. "},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"controller reaction"},{"order":0,"points":100,"sticky":false,"text":"player behavior"},{"order":0,"points":0,"sticky":false,"text":"environmental crashes"},{"order":0,"points":0,"sticky":false,"text":"technical design"}],"failure":{"button":null,"message":"It is impossible for a game designer to predict all player behavior and how it may upset the balance of pacing intended for a game.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn51-commondesign-balance-pacing1-micro-8","number_of_choices":4,"question":"Unpredictable _____ can often affect a designer's intended pacing of a game in negative ways. ","start":3600,"success":{"button":null,"message":"It is impossible for a game designer to predict all player behavior and how it may upset the balance of pacing intended for a game.  "},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"magic"},{"order":0,"points":0,"sticky":false,"text":"player vs player combat"},{"order":0,"points":0,"sticky":false,"text":"platform jumping"},{"order":0,"points":100,"sticky":false,"text":"exploration"}],"failure":{"button":null,"message":"Different players will explore a game setting at a different pace, depending on their style of play and approach to the challenges of the game.   "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn52-commondesign-balance-pacing1-micro-8","number_of_choices":4,"question":"Games featuring _____ often have the biggest issues with pacing because they allow players to determine their own pace through a game.  ","start":3600,"success":{"button":null,"message":"Different players will explore a game setting at a different pace, depending on their style of play and approach to the challenges of the game.   "},"type":null}],"reference":"common-design-theories-3","text":null,"title":"Pacing"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"common-design-theories","movie":".\/video\/commondesign-balance-pacing2-micro-9.mp4","name":"Open World Pacing","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"frustrated"},{"order":0,"points":0,"sticky":false,"text":"overwhelmed "},{"order":0,"points":0,"sticky":false,"text":"bored"},{"order":21,"points":100,"sticky":false,"text":"all of the above"}],"failure":{"button":null,"message":"If a player remains lost or looking for things to do for too long they can become bored, frustrated, and overwhelmed.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn53-commondesign-balance-pacing2-micro-9","number_of_choices":4,"question":"While open world games typically allow players to set their own pace in a game, they risk those same players becoming lost and _____.","start":3600,"success":{"button":null,"message":"If a player remains lost or looking for things to do for too long they can become bored, frustrated, and overwhelmed.  "},"type":null}],"reference":"common-design-theories-3","text":null,"title":"Open World Pacing"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"common-design-theories","movie":".\/video\/commondesign-balance-rewards1-micro-10.mp4","name":"Rewards","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"fun"},{"order":0,"points":0,"sticky":false,"text":"educational   "},{"order":0,"points":0,"sticky":false,"text":"profitable"},{"order":0,"points":0,"sticky":false,"text":"bearable "}],"failure":{"button":null,"message":"The best reward a video game can give a player for their work is fun."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn54-commondesign-balance-rewards1-micro-10","number_of_choices":4,"question":"At the most basic level, good game design aims at making the experience of playing a game ____.","start":3600,"success":{"button":null,"message":"The best reward a video game can give a player for their work is fun."},"type":null}],"reference":"common-design-theories-3","text":null,"title":"Rewards"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"common-design-theories","movie":".\/video\/commondesign-balance-rewards2-micro-11.mp4","name":"Work and Reward","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"rewards"},{"order":0,"points":0,"sticky":false,"text":"virtual currency   "},{"order":0,"points":0,"sticky":false,"text":"real-world currency"},{"order":0,"points":0,"sticky":false,"text":"leveling systems"}],"failure":{"button":null,"message":"Work includes everything a player does in exploring the game."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn55-commondesign-balance-rewards2-micro-11","number_of_choices":4,"question":"Games that lack good _____ for work quickly become tedious and boring. ","start":3600,"success":{"button":null,"message":"Work includes everything a player does in exploring the game."},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"animosity "},{"order":0,"points":100,"sticky":false,"text":"motivation   "},{"order":0,"points":0,"sticky":false,"text":"avatars"},{"order":21,"points":0,"sticky":false,"text":"none of the above"}],"failure":{"button":null,"message":"Work, reward, motivation to work again. Work, reward, motivation to work again. Repeat."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn56-commondesign-balance-rewards2-micro-11","number_of_choices":4,"question":"A game that gives players good rewards for their work creates player _____ to continue exploring the game. ","start":3600,"success":{"button":null,"message":"Work, reward, motivation to work again. Work, reward, motivation to work again. Repeat."},"type":null}],"reference":"common-design-theories-3","text":null,"title":"Work and Reward"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"common-design-theories","movie":".\/video\/commondesign-balance-cvm-micro-12.mp4","name":"Creative vs. Mechanical","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"Controller reaction"},{"order":0,"points":0,"sticky":false,"text":"Rate-of-fire  "},{"order":0,"points":100,"sticky":false,"text":"Story"},{"order":0,"points":0,"sticky":false,"text":"Run speed "}],"failure":{"button":null,"message":"Good creative elements in a video game add motivation for players to play and rewards them with fun. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn57-commondesign-balance-cvm-micro-12","number_of_choices":4,"question":"Which of the following is a non-mechanical, creative element of a video game?","start":3600,"success":{"button":null,"message":"Good creative elements in a video game add motivation for players to play and rewards them with fun. "},"type":null},{"choices":[{"order":0,"points":100,"sticky":false,"text":"creative"},{"order":0,"points":0,"sticky":false,"text":"mechanical  "},{"order":0,"points":0,"sticky":false,"text":"technical"},{"order":0,"points":0,"sticky":false,"text":"genre "}],"failure":{"button":null,"message":"Without creative content, many games become pointless exercises of button mashing.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn58-commondesign-balance-cvm-micro-12","number_of_choices":4,"question":"Story, characters, and visual design are all part of a game's _____ content. ","start":3600,"success":{"button":null,"message":"Without creative content, many games become pointless exercises of button mashing.  "},"type":null}],"reference":"common-design-theories-3","text":null,"title":"Creative vs. Mechanical"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"common-design-theories","movie":".\/video\/commondesign-impactofux-intro-micro-1.mp4","name":"Impact of User Experience","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"visual design"},{"order":0,"points":0,"sticky":false,"text":"story   "},{"order":0,"points":100,"sticky":false,"text":"user experience "},{"order":0,"points":0,"sticky":false,"text":"experience points"}],"failure":{"button":null,"message":"Good user experience is the first step to keeping a player interested in continuing to play a game. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn59-commondesign-impactofux-intro-micro-1","number_of_choices":4,"question":"The keys of usability are guidelines to help create good _____.","start":3600,"success":{"button":null,"message":"Good user experience is the first step to keeping a player interested in continuing to play a game. "},"type":null}],"reference":"common-design-theories-4","text":null,"title":"Impact of User Experience"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"common-design-theories","movie":".\/video\/commondesign-impactofux-checklist-micro-2.mp4","name":"Usability","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"fun"},{"order":0,"points":100,"sticky":false,"text":"functional  "},{"order":0,"points":0,"sticky":false,"text":"fast"},{"order":0,"points":0,"sticky":false,"text":"friendly"}],"failure":{"button":null,"message":"Usability seeks to make a game fluid and functional in its performance."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn60-commondesign-impactofux-checklist-micro-2","number_of_choices":4,"question":"Usability is a term used to describe how _____ a game is to play. ","start":3600,"success":{"button":null,"message":"Usability seeks to make a game fluid and functional in its performance."},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"seamlessness"},{"order":0,"points":0,"sticky":false,"text":"usefulness"},{"order":0,"points":0,"sticky":false,"text":"desirability "},{"order":21,"points":100,"sticky":false,"text":"all of the above"}],"failure":{"button":null,"message":"The keys of usability include seamlessness, usefulness, desirability, and overall elegance of design. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn61-commondesign-impactofux-checklist-micro-2","number_of_choices":4,"question":"Which of the following is a measure of usability in design according to the keys of usability? ","start":3600,"success":{"button":null,"message":"The keys of usability include seamlessness, usefulness, desirability, and overall elegance of design. "},"type":null}],"reference":"common-design-theories-4","text":null,"title":"Usability"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"common-design-theories","movie":".\/video\/commondesign-impactofux-seamlessness1-micro-3.mp4","name":"Seamlessness","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"cut scene"},{"order":0,"points":0,"sticky":false,"text":"poor color scheme   "},{"order":0,"points":100,"sticky":false,"text":"glitch"},{"order":0,"points":0,"sticky":false,"text":"stich"}],"failure":{"button":null,"message":"Glitches are obvious errors in the game's intended functionality or visuals. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn62-commondesign-impactofux-seamlessness1-micro-3","number_of_choices":4,"question":"The most glaring issue a video game can have that distracts from seamlessness is a _____.","start":3600,"success":{"button":null,"message":"Glitches are obvious errors in the game's intended functionality or visuals. "},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"avatar"},{"order":0,"points":0,"sticky":false,"text":"score   "},{"order":0,"points":0,"sticky":false,"text":"reputation"},{"order":0,"points":100,"sticky":false,"text":"immersion "}],"failure":{"button":null,"message":"Glitches ruin immersion by reminding a player they are playing a game. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn63-commondesign-impactofux-seamlessness1-micro-3","number_of_choices":4,"question":"Besides possibly creating mechanical issues, all glitches also harm a player's _____ in a game. ","start":3600,"success":{"button":null,"message":"Glitches ruin immersion by reminding a player they are playing a game. "},"type":null}],"reference":"common-design-theories-4","text":null,"title":"Seamlessness"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"common-design-theories","movie":".\/video\/commondesign-impactofux-seamlessness2-micro-4.mp4","name":"Controller Response","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"Good controller reaction"},{"order":0,"points":0,"sticky":false,"text":"Good story telling  "},{"order":0,"points":0,"sticky":false,"text":"Stunning visuals "},{"order":0,"points":0,"sticky":false,"text":"Creative flair"}],"failure":{"button":null,"message":"Games strive for both creative and mechanical seamlessness. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn64-commondesign-impactofux-seamlessness2-micro-4","number_of_choices":4,"question":"_____ is an example of mechanical seamlessness in a video game.","start":3600,"success":{"button":null,"message":"Games strive for both creative and mechanical seamlessness. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Stunning visuals"},{"order":0,"points":0,"sticky":false,"text":"Good story telling  "},{"order":0,"points":0,"sticky":false,"text":"Excellent sound design"},{"order":21,"points":100,"sticky":false,"text":"All of the above."}],"failure":{"button":null,"message":"Plot holes, illogically visuals, and poor sound quality all affect seamlessness as much as poor controller reactions.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn65-commondesign-impactofux-seamlessness2-micro-4","number_of_choices":4,"question":"_____ is an example of creative seamlessness in a video game. ","start":3600,"success":{"button":null,"message":"Plot holes, illogically visuals, and poor sound quality all affect seamlessness as much as poor controller reactions.  "},"type":"Multiple"}],"reference":"common-design-theories-4","text":null,"title":"Controller Response"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"common-design-theories","movie":".\/video\/commondesign-impactofux-usefulness-micro-5.mp4","name":"Usefulness","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"meaningful; rewarding"},{"order":0,"points":0,"sticky":false,"text":"meaningless; unfulfilling  "},{"order":0,"points":0,"sticky":false,"text":"fun; frivolous "},{"order":0,"points":0,"sticky":false,"text":"meaningful; repetitive"}],"failure":{"button":null,"message":"Usefulness in a mechanic means it has purpose and is rewarding to do. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn66-commondesign-impactofux-usefulness-micro-5","number_of_choices":4,"question":"A mechanic is considered to have usefulness if it is _____ and _____ to a player.","start":3600,"success":{"button":null,"message":"Usefulness in a mechanic means it has purpose and is rewarding to do. "},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"True"},{"order":0,"points":100,"sticky":false,"text":"False"}],"failure":{"button":null,"message":"Usefulness can apply to creative elements, as well, such as visuals that enhance or inform a player on dangers in the environment. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn67-commondesign-impactofux-usefulness-micro-5","number_of_choices":2,"question":"True or False: the term usefulness, in video games, only applies to mechanics.","start":3600,"success":{"button":null,"message":"Usefulness can apply to creative elements, as well, such as visuals that enhance or inform a player on dangers in the environment. "},"type":null}],"reference":"common-design-theories-4","text":null,"title":"Usefulness"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"common-design-theories","movie":".\/video\/commondesign-impactofux-desirability-micro-6.mp4","name":"Desirability","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"fun"},{"order":0,"points":0,"sticky":false,"text":"original   "},{"order":0,"points":0,"sticky":false,"text":"compelling "},{"order":21,"points":100,"sticky":false,"text":"all of the above"}],"failure":{"button":null,"message":"Desirability in a game is what makes players want to play."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn68-commondesign-impactofux-desirability-micro-6","number_of_choices":4,"question":"A game with desirability implies a game will be:","start":3600,"success":{"button":null,"message":"Desirability in a game is what makes players want to play."},"type":null},{"choices":[{"order":0,"points":100,"sticky":false,"text":"consumer evaluation"},{"order":0,"points":0,"sticky":false,"text":"algorithms "},{"order":0,"points":0,"sticky":false,"text":"prophecy  "},{"order":0,"points":0,"sticky":false,"text":"guesswork"}],"failure":{"button":null,"message":"Developers would all love to claim their games have desirability, but it is really the consumer who decides.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn69-commondesign-impactofux-desirability-micro-6","number_of_choices":4,"question":"Desirability in a video game is assessed by developers through _____.","start":3600,"success":{"button":null,"message":"Developers would all love to claim their games have desirability, but it is really the consumer who decides.  "},"type":null}],"reference":"common-design-theories-4","text":null,"title":"Desirability"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"common-design-theories","movie":".\/video\/commondesign-impactofux-elegance-micro-7.mp4","name":"Elegance","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"seamlessness"},{"order":0,"points":0,"sticky":false,"text":"usability   "},{"order":0,"points":100,"sticky":false,"text":"overall elegance"},{"order":0,"points":0,"sticky":false,"text":"flow"}],"failure":{"button":null,"message":"Overall elegance replaces figuring out how to play a game with learning as you play. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn70-commondesign-impactofux-elegance-micro-7","number_of_choices":4,"question":"A game's rules complexity versus how easy it is to learn creates its _____.","start":3600,"success":{"button":null,"message":"Overall elegance replaces figuring out how to play a game with learning as you play. "},"type":null}],"reference":"common-design-theories-4","text":null,"title":"Elegance"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"common-design-theories","movie":".\/video\/commondesign-impactofux-testingintro-micro-8.mp4","name":"Usability Testing","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"To isolate and remove glitches  "},{"order":0,"points":100,"sticky":false,"text":"To evaluate player satisfaction   "},{"order":0,"points":0,"sticky":false,"text":"To determine functionality of programming"},{"order":21,"points":0,"sticky":false,"text":"All of the above"}],"failure":{"button":null,"message":"Usability testing is crucial to ultimately creating player satisfaction. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn71-commondesign-impactofux-testingintro-micro-8","number_of_choices":4,"question":"Which of the following is a goal of usability testing?","start":3600,"success":{"button":null,"message":"Usability testing is crucial to ultimately creating player satisfaction. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"interns"},{"order":0,"points":100,"sticky":false,"text":"time   "},{"order":0,"points":0,"sticky":false,"text":"additional funding"},{"order":21,"points":0,"sticky":false,"text":"all of the above"}],"failure":{"button":null,"message":"Effort put into early usability testing will save countless hours of panic and hasty fixes later in the development process. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn72-commondesign-impactofux-testingintro-micro-8","number_of_choices":4,"question":"Through proper usability testing developers have _____ to fix known issues. ","start":3600,"success":{"button":null,"message":"Effort put into early usability testing will save countless hours of panic and hasty fixes later in the development process. "},"type":"Multiple"}],"reference":"common-design-theories-4","text":null,"title":"Usability Testing"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"common-design-theories","movie":".\/video\/commondesign-impactofux-expertreview-micro-9.mp4","name":"Expert Review","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"game theory"},{"order":0,"points":0,"sticky":false,"text":"platform  "},{"order":0,"points":100,"sticky":false,"text":"usability testing"},{"order":0,"points":0,"sticky":false,"text":"seamlessness"}],"failure":{"button":null,"message":"Expert review is an internal examination of a game's issues by the team of developers. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn73-commondesign-impactofux-expertreview-micro-9","number_of_choices":4,"question":"Expert review is one type of ____ in video game development.","start":3600,"success":{"button":null,"message":"Expert review is an internal examination of a game's issues by the team of developers. "},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"first-thought theater"},{"order":0,"points":0,"sticky":false,"text":"rapid pitching "},{"order":0,"points":0,"sticky":false,"text":"rapid testing"},{"order":0,"points":100,"sticky":false,"text":"rapid prototyping. "}],"failure":{"button":null,"message":"Rapid prototyping is an excellent way to examine original concepts and mechanics for a game, before it is too late to change them. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn74-commondesign-impactofux-expertreview-micro-9","number_of_choices":4,"question":"When developer quickly test game design concepts via pen and paper conceptualizations, it is called _____. ","start":3600,"success":{"button":null,"message":"Rapid prototyping is an excellent way to examine original concepts and mechanics for a game, before it is too late to change them. "},"type":null}],"reference":"common-design-theories-4","text":null,"title":"Expert Review"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"common-design-theories","movie":".\/video\/commondesign-impactofux-playtesting-micro-10.mp4","name":"Playtesting","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"True"},{"order":0,"points":0,"sticky":false,"text":"False"}],"failure":{"button":null,"message":"Playtesting is another form of usability testing."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"Playtesting Question 1","number_of_choices":2,"question":"Playtesting is another form of usability testing.","start":1200,"success":{"button":null,"message":"Playtesting is another form of usability testing."},"type":"Multiple"},{"choices":[{"order":0,"points":100,"sticky":false,"text":"early"},{"order":0,"points":0,"sticky":false,"text":"final"},{"order":0,"points":0,"sticky":false,"text":"prototype"},{"order":0,"points":0,"sticky":false,"text":"test"}],"failure":{"button":null,"message":"Playtesting uses an early version of the game."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"Playtesting Question 2","number_of_choices":4,"question":"Playtesting uses a(n) _________ version of the game for users.","start":1200,"success":{"button":null,"message":"Playtesting uses an early version of the game."},"type":"Multiple"}],"reference":"common-design-theories-4","text":null,"title":"Playtesting"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"common-design-theories","movie":".\/video\/commondesign-elementsofvisuals-intro-micro-1.mp4","name":"Elements of Visual Design","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"visual design"},{"order":0,"points":0,"sticky":false,"text":"development tools  "},{"order":0,"points":0,"sticky":false,"text":"marketing"},{"order":0,"points":0,"sticky":false,"text":"reviews"}],"failure":{"button":null,"message":"In many ways, a game's visual design is as important as mechanics, programming, and story. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn75-commondesign-elementsofvisuals-intro-micro-1","number_of_choices":4,"question":"Regardless how a game plays, good _____ can enhance the overall user experience and perception of a game.  ","start":3600,"success":{"button":null,"message":"In many ways, a game's visual design is as important as mechanics, programming, and story. "},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Color"},{"order":0,"points":0,"sticky":false,"text":"Line   "},{"order":0,"points":0,"sticky":false,"text":"Texture"},{"order":0,"points":100,"sticky":false,"text":"Perception"}],"failure":{"button":null,"message":"The elements of visual design include value, color, line, shape, size, and texture.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn76-commondesign-elementsofvisuals-intro-micro-1","number_of_choices":4,"question":"Which of the following is NOT an element of a visual design?  ","start":3600,"success":{"button":null,"message":"The elements of visual design include value, color, line, shape, size, and texture.  "},"type":null}],"reference":"common-design-theories-5","text":null,"title":"Elements of Visual Design"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"common-design-theories","movie":".\/video\/commondesign-elementsofvisuals-value-micro-2.mp4","name":"Value","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"gray scale "},{"order":0,"points":0,"sticky":false,"text":"gray skull    "},{"order":0,"points":0,"sticky":false,"text":"grave scale"},{"order":0,"points":0,"sticky":false,"text":"gray scope"}],"failure":{"button":null,"message":"Gray scale removes all color and views the image in \"black and white\"."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn77-commondesign-elementsofvisuals-value-micro-2","number_of_choices":4,"question":"One way artists evaluate \"value\" is to view an image in what is called _____.","start":3600,"success":{"button":null,"message":"Gray scale removes all color and views the image in \"black and white\"."},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"black "},{"order":0,"points":100,"sticky":false,"text":"white    "},{"order":0,"points":0,"sticky":false,"text":"light gray"},{"order":0,"points":0,"sticky":false,"text":"dark gray"}],"failure":{"button":null,"message":"Gray scale demonstrates 10 values of grey from 1 (black) to 10 (white)."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn78-commondesign-elementsofvisuals-value-micro-2","number_of_choices":4,"question":"On the gray scale value chart, number 10 represents _____.","start":3600,"success":{"button":null,"message":"Gray scale demonstrates 10 values of grey from 1 (black) to 10 (white)."},"type":null}],"reference":"common-design-theories-5","text":null,"title":"Value"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"common-design-theories","movie":".\/video\/commondesign-elementsofvisuals-color-micro-3.mp4","name":"Color","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"ball"},{"order":0,"points":0,"sticky":false,"text":"brick   "},{"order":0,"points":100,"sticky":false,"text":"wheel"},{"order":0,"points":0,"sticky":false,"text":"well"}],"failure":{"button":null,"message":"The wheel is just one form artists can conceptualize the effect of color."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn79-commondesign-elementsofvisuals-color-micro-3","number_of_choices":4,"question":"With the color ____, artist can see how colors contrast and compliment each other. ","start":3600,"success":{"button":null,"message":"The wheel is just one form artists can conceptualize the effect of color."},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"purple"},{"order":0,"points":0,"sticky":false,"text":"green "},{"order":0,"points":0,"sticky":false,"text":"black"},{"order":0,"points":100,"sticky":false,"text":"red"}],"failure":{"button":null,"message":"The primary colors are red, yellow, and blue."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn80-commondesign-elementsofvisuals-color-micro-3","number_of_choices":4,"question":"Witch of the following is a primary color? ","start":3600,"success":{"button":null,"message":"The primary colors are red, yellow, and blue."},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Outer space"},{"order":0,"points":0,"sticky":false,"text":"A flag"},{"order":0,"points":100,"sticky":false,"text":"Nature"},{"order":0,"points":0,"sticky":false,"text":"Red"}],"failure":{"button":null,"message":"Nature is a flawless example of color theory in living glory. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn81-commondesign-elementsofvisuals-color-micro-3","number_of_choices":4,"question":"_____ is a perfect example of exceptional color theory in practice. ","start":3600,"success":{"button":null,"message":"Nature is a flawless example of color theory in living glory. "},"type":null}],"reference":"common-design-theories-5","text":null,"title":"Color"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"common-design-theories","movie":".\/video\/commondesign-elementsofvisuals-line-micro-4.mp4","name":"Line","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"hue"},{"order":0,"points":100,"sticky":false,"text":"line  "},{"order":0,"points":0,"sticky":false,"text":"Photoshop"},{"order":0,"points":0,"sticky":false,"text":"value"}],"failure":{"button":null,"message":"Through horizontal, vertical, and diagonal lines artists create dynamics and action in an artwork.   "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn82-commondesign-elementsofvisuals-line-micro-4","number_of_choices":4,"question":"Artists use ____ to manipulate the viewer's eye and create dynamic emotion and action in a piece. ","start":3600,"success":{"button":null,"message":"Through horizontal, vertical, and diagonal lines artists create dynamics and action in an artwork.   "},"type":null}],"reference":"common-design-theories-5","text":null,"title":"Line"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"common-design-theories","movie":".\/video\/commondesign-elementsofvisuals-shape-micro-5.mp4","name":"Shape","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"colors"},{"order":0,"points":0,"sticky":false,"text":"value  "},{"order":0,"points":100,"sticky":false,"text":"lines"},{"order":0,"points":0,"sticky":false,"text":"hues"}],"failure":{"button":null,"message":"A circle is a shape created by connecting all points on a curved line. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn83-commondesign-elementsofvisuals-shape-micro-5","number_of_choices":4,"question":"Shape is what is formed from a fully connected series of _____.","start":3600,"success":{"button":null,"message":"A circle is a shape created by connecting all points on a curved line. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"circle"},{"order":0,"points":0,"sticky":false,"text":"square "},{"order":0,"points":0,"sticky":false,"text":"non-geometric outline"},{"order":21,"points":100,"sticky":false,"text":"all of the above"}],"failure":{"button":null,"message":"A shape can be just about anything, not just geometric. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn84-commondesign-elementsofvisuals-shape-micro-5","number_of_choices":4,"question":"Which of the following is a type of shape?","start":3600,"success":{"button":null,"message":"A shape can be just about anything, not just geometric. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"geometric shape"},{"order":0,"points":0,"sticky":false,"text":"square "},{"order":0,"points":100,"sticky":false,"text":"silhouette "},{"order":0,"points":0,"sticky":false,"text":"vigilante "}],"failure":{"button":null,"message":"All shadows form a silhouette of the thing casting the shadow. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn85-commondesign-elementsofvisuals-shape-micro-5","number_of_choices":4,"question":"The shadow of the mask and cape of the DC comic book character, Batman, is an example of an iconic _____","start":3600,"success":{"button":null,"message":"All shadows form a silhouette of the thing casting the shadow. "},"type":"Multiple"}],"reference":"common-design-theories-5","text":null,"title":"Shape"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"common-design-theories","movie":".\/video\/commondesign-elementsofvisuals-size-micro-6.mp4","name":"Size","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"lines: shape "},{"order":0,"points":0,"sticky":false,"text":"colors; hue   "},{"order":0,"points":0,"sticky":false,"text":"shapes: silhouette "},{"order":0,"points":100,"sticky":false,"text":"shapes; space"}],"failure":{"button":null,"message":"Artists use size to create contrast among images. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn86-commondesign-elementsofvisuals-size-micro-6","number_of_choices":4,"question":"Size is the comparison of two or more _____, in terms of the ____ they occupy within an image. ","start":3600,"success":{"button":null,"message":"Artists use size to create contrast among images. "},"type":"Multiple"}],"reference":"common-design-theories-5","text":null,"title":"Size"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"common-design-theories","movie":".\/video\/commondesign-elementsofvisuals-texture-micro-7.mp4","name":"Texture","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"color"},{"order":0,"points":100,"sticky":false,"text":"geometry   "},{"order":0,"points":0,"sticky":false,"text":"shapes"},{"order":0,"points":0,"sticky":false,"text":"circles"}],"failure":{"button":null,"message":"Texture are so important in video games, many people specialize as texture artists. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn87-commondesign-elementsofvisuals-texture-micro-7","number_of_choices":4,"question":"In videos games, textures are images mapped to _____.","start":3600,"success":{"button":null,"message":"Texture are so important in video games, many people specialize as texture artists. "},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"earth"},{"order":0,"points":0,"sticky":false,"text":"sky   "},{"order":0,"points":0,"sticky":false,"text":"grass"},{"order":21,"points":100,"sticky":false,"text":"all of the above"}],"failure":{"button":null,"message":"Texture make up most of what a player sees in a game environment. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn88-commondesign-elementsofvisuals-texture-micro-7","number_of_choices":4,"question":"Which of the following are typically textures in a video game. ","start":3600,"success":{"button":null,"message":"Texture make up most of what a player sees in a game environment. "},"type":null}],"reference":"common-design-theories-5","text":null,"title":"Texture"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"common-design-theories","movie":".\/video\/commondesign-elementsofvisuals-intro-micro-8.mp4","name":"Principles of Visual Design","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"repetition techniques "},{"order":0,"points":0,"sticky":false,"text":"sizing techniques  "},{"order":0,"points":100,"sticky":false,"text":"applied techniques "},{"order":0,"points":0,"sticky":false,"text":"color techniques"}],"failure":{"button":null,"message":"The principles of visual design are applied to the core elements of visual design to add extra layers of visual detail. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn89-commondesign-elementsofvisuals-intro-micro-8","number_of_choices":4,"question":"The principles of visual design are _____ that use the foundations of the elements of visual design to create original works of art.  ","start":3600,"success":{"button":null,"message":"The principles of visual design are applied to the core elements of visual design to add extra layers of visual detail. "},"type":null}],"reference":"common-design-theories-5","text":null,"title":"Principles of Visual Design"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"common-design-theories","movie":".\/video\/commondesign-elementsofvisuals-composition-micro-9.mp4","name":"Composition","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"elements"},{"order":0,"points":0,"sticky":false,"text":"principles  "},{"order":0,"points":0,"sticky":false,"text":"value"},{"order":0,"points":0,"sticky":false,"text":"animation"}],"failure":{"button":null,"message":"Composition gives the arrangement of visual elements coherence and comprehensive design. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn90-commondesign-elementsofvisuals-composition-micro-9","number_of_choices":4,"question":"Composition describes the placement or arrangement of visual ______ in a work of art.  ","start":3600,"success":{"button":null,"message":"Composition gives the arrangement of visual elements coherence and comprehensive design. "},"type":null},{"choices":[{"order":0,"points":100,"sticky":false,"text":"user interface"},{"order":0,"points":0,"sticky":false,"text":"victory condition "},{"order":0,"points":0,"sticky":false,"text":"story"},{"order":0,"points":0,"sticky":false,"text":"mechanic"}],"failure":{"button":null,"message":"Good composition for an user interface means that buttons and screens are placed in a cohesive manner that increases the player's efficacy while playing the game.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn91-commondesign-elementsofvisuals-composition-micro-9","number_of_choices":4,"question":"In a video game, good composition is crucial to designing a good _____. ","start":3600,"success":{"button":null,"message":"Good composition for an user interface means that buttons and screens are placed in a cohesive manner that increases the player's efficacy while playing the game.  "},"type":null}],"reference":"common-design-theories-5","text":null,"title":"Composition"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"common-design-theories","movie":".\/video\/commondesign-elementsofvisuals-balance-micro-10.mp4","name":"Balance","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"True"},{"order":0,"points":100,"sticky":false,"text":"False"}],"failure":{"button":null,"message":"Artists seek to balance the entirety of all aspects of a piece of art into a pleasing composition, not force all things to be equally symmetric.   "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn92-commondesign-elementsofvisuals-balance-micro-10","number_of_choices":2,"question":"True or False: Balance means that each image in a composition must be exactly symmetrical.  ","start":3600,"success":{"button":null,"message":"Artists seek to balance the entirety of all aspects of a piece of art into a pleasing composition, not force all things to be equally symmetric.   "},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Horizontal "},{"order":0,"points":0,"sticky":false,"text":"Radial"},{"order":0,"points":100,"sticky":false,"text":"Ethereal "},{"order":0,"points":0,"sticky":false,"text":"Vertical"}],"failure":{"button":null,"message":"Through manipulating horizontal, radial, and vertical balance, artists can lead the viewer's eye through a piece of art.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn93-commondesign-elementsofvisuals-balance-micro-10","number_of_choices":4,"question":"Which of the following is NOT a category of balance?  ","start":3600,"success":{"button":null,"message":"Through manipulating horizontal, radial, and vertical balance, artists can lead the viewer's eye through a piece of art.  "},"type":null}],"reference":"common-design-theories-5","text":null,"title":"Balance"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"common-design-theories","movie":".\/video\/commondesign-elementsofvisuals-gradation-micro-11.mp4","name":"Gradation","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"size"},{"order":0,"points":0,"sticky":false,"text":"value  "},{"order":0,"points":0,"sticky":false,"text":"texture"},{"order":21,"points":100,"sticky":false,"text":"All of the above"}],"failure":{"button":null,"message":"Gradation is commonly used in visual design but often the viewer is unaware. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn94-commondesign-elementsofvisuals-gradation-micro-11","number_of_choices":4,"question":"Gradation refers to a subtle change in _____ that is visually obvious only if the start and end of the gradation is examined closely.  ","start":3600,"success":{"button":null,"message":"Gradation is commonly used in visual design but often the viewer is unaware. "},"type":null},{"choices":[{"order":0,"points":100,"sticky":false,"text":"blue; purple"},{"order":0,"points":0,"sticky":false,"text":"value; texture "},{"order":0,"points":0,"sticky":false,"text":"composition; balanced"},{"order":0,"points":0,"sticky":false,"text":"blue; blue"}],"failure":{"button":null,"message":"In this example, a gradation would be a transition from blue to purple.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn95-commondesign-elementsofvisuals-gradation-micro-11","number_of_choices":4,"question":"An example of color gradation could be a gradual transition in hue from ____ to _____.   ","start":3600,"success":{"button":null,"message":"In this example, a gradation would be a transition from blue to purple.  "},"type":null}],"reference":"common-design-theories-5","text":null,"title":"Gradation"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"common-design-theories","movie":".\/video\/commondesign-elementsofvisuals-harmony-micro-12.mp4","name":"Harmony","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"symmetric"},{"order":0,"points":100,"sticky":false,"text":"similar  "},{"order":0,"points":0,"sticky":false,"text":"simple"},{"order":0,"points":0,"sticky":false,"text":"spontaneous "}],"failure":{"button":null,"message":"Remember the color wheel as a guide to finding color harmony in art. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn96-commondesign-elementsofvisuals-harmony-micro-12","number_of_choices":4,"question":"Harmony is the assembly of _____ visual elements combined in an eye pleasing manner. ","start":3600,"success":{"button":null,"message":"Remember the color wheel as a guide to finding color harmony in art. "},"type":null}],"reference":"common-design-theories-5","text":null,"title":"Harmony"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"common-design-theories","movie":".\/video\/commondesign-elementsofvisuals-contrast-micro-13.mp4","name":"Contrast","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"opposite colors on the color wheel"},{"order":0,"points":0,"sticky":false,"text":"two circles of the same size  "},{"order":0,"points":0,"sticky":false,"text":"two parallel lines "},{"order":21,"points":0,"sticky":false,"text":"None of the above"}],"failure":{"button":null,"message":"Contrast is the juxtaposition of two opposites, such as opposing colors on the color wheel. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn97-commondesign-elementsofvisuals-contrast-micro-13","number_of_choices":4,"question":"Which of the following is an example of contrast?","start":3600,"success":{"button":null,"message":"Contrast is the juxtaposition of two opposites, such as opposing colors on the color wheel. "},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"The extremes of value."},{"order":0,"points":0,"sticky":false,"text":"Black and white."},{"order":0,"points":0,"sticky":false,"text":"Blue and orange"},{"order":21,"points":100,"sticky":false,"text":"All of the above"}],"failure":{"button":null,"message":"Contrast can be difficult for artists to apply, but creates harmony in a piece when done well.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn98-commondesign-elementsofvisuals-contrast-micro-13","number_of_choices":4,"question":"Which of the following is an example of contrast?","start":3600,"success":{"button":null,"message":"Contrast can be difficult for artists to apply, but creates harmony in a piece when done well.  "},"type":null}],"reference":"common-design-theories-5","text":null,"title":"Contrast"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"common-design-theories","movie":".\/video\/commondesign-elementsofvisuals-unity-micro-14.mp4","name":"Unity","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"value"},{"order":0,"points":100,"sticky":false,"text":"unity"},{"order":0,"points":0,"sticky":false,"text":"shapes"},{"order":0,"points":0,"sticky":false,"text":"color"}],"failure":{"button":null,"message":"When unity in an artwork is bad, it is usually glaringly obvious. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn99-commondesign-elementsofvisuals-unity-micro-14","number_of_choices":4,"question":"Placing unrelated or illogical images together in a single piece of art risks ruining _____.","start":3600,"success":{"button":null,"message":"When unity in an artwork is bad, it is usually glaringly obvious. "},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"A dragon in a cave"},{"order":0,"points":100,"sticky":false,"text":"A fish on a bicycle"},{"order":0,"points":0,"sticky":false,"text":"A tree in a forest"},{"order":0,"points":0,"sticky":false,"text":"A boat in an ocean"}],"failure":{"button":null,"message":"Usually common sense and logic will identify poor unity. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn100-commondesign-elementsofvisuals-unity-micro-14","number_of_choices":4,"question":"_____ is generally an example of bad unity in an art piece.","start":3600,"success":{"button":null,"message":"Usually common sense and logic will identify poor unity. "},"type":null}],"reference":"common-design-theories-5","text":null,"title":"Unity"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"common-design-theories","movie":".\/video\/commondesign-elementsofvisuals-emphasis-micro-15.mp4","name":"Emphasis","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"value dominance"},{"order":0,"points":100,"sticky":false,"text":"visual dominance   "},{"order":0,"points":0,"sticky":false,"text":"visual demand"},{"order":0,"points":0,"sticky":false,"text":"visual design "}],"failure":{"button":null,"message":"Visual dominance is achieved by emphasizing one element over another. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn101-commondesign-elementsofvisuals-emphasis-micro-15","number_of_choices":4,"question":"Emphasis is used by an artist to lead the eye to where the artists wants through _____.","start":3600,"success":{"button":null,"message":"Visual dominance is achieved by emphasizing one element over another. "},"type":null}],"reference":"common-design-theories-5","text":null,"title":"Emphasis"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"common-design-theories","movie":".\/video\/commondesign-elementsofvisuals-proximity-micro-16.mp4","name":"Proximity","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"elements"},{"order":0,"points":0,"sticky":false,"text":"composition  "},{"order":0,"points":0,"sticky":false,"text":"emphasis"},{"order":0,"points":0,"sticky":false,"text":"unity"}],"failure":{"button":null,"message":"For example, an artist might cluster a group of snowflakes together to illustrate a snow storm. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn102-commondesign-elementsofvisuals-proximity-micro-16","number_of_choices":4,"question":"Proximity is the placement of ____ in groups or in relation to each other. ","start":3600,"success":{"button":null,"message":"For example, an artist might cluster a group of snowflakes together to illustrate a snow storm. "},"type":null}],"reference":"common-design-theories-5","text":null,"title":"Proximity"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"common-design-theories","movie":".\/video\/commondesign-elementsofvisuals-proportion-micro-17.mp4","name":"Proportion","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"color"},{"order":0,"points":0,"sticky":false,"text":"proximity    "},{"order":0,"points":0,"sticky":false,"text":"perplexity "},{"order":0,"points":100,"sticky":false,"text":"proportion "}],"failure":{"button":null,"message":"Often games will give characters wild proportions to better identify them on screen when viewed from afar. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn103-commondesign-elementsofvisuals-proportion-micro-17","number_of_choices":4,"question":"A cartoon character with a huge head and tiny hands is an example of an artist manipulating _____.","start":3600,"success":{"button":null,"message":"Often games will give characters wild proportions to better identify them on screen when viewed from afar. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Principle"},{"order":0,"points":100,"sticky":false,"text":"Thirds  "},{"order":0,"points":0,"sticky":false,"text":"Proportions"},{"order":0,"points":0,"sticky":false,"text":"Humans "}],"failure":{"button":null,"message":"The Rule of Thirds helps artists create realistic proportions on human characters. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn105-commondesign-elementsofvisuals-proportion-micro-17","number_of_choices":4,"question":"Artists interested in accurate proportions in human characters often use the Rule of ____, to better visualize proportion. ","start":3600,"success":{"button":null,"message":"The Rule of Thirds helps artists create realistic proportions on human characters. "},"type":"Multiple"}],"reference":"common-design-theories-5","text":null,"title":"Proportion"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"common-design-theories","movie":".\/video\/commondesign-elementsofvisuals-repetition-micro-18.mp4","name":"Repitition","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"environmental textures"},{"order":0,"points":0,"sticky":false,"text":"boring gameplay  "},{"order":0,"points":0,"sticky":false,"text":"value"},{"order":0,"points":0,"sticky":false,"text":"micro-transaction hats"}],"failure":{"button":null,"message":"Textures in a video game include grass, sky, water, and much more. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn106-commondesign-elementsofvisuals-repetition-micro-18","number_of_choices":4,"question":"In video games, the visual principle of repetition is widely used to create _____.","start":3600,"success":{"button":null,"message":"Textures in a video game include grass, sky, water, and much more. "},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"color"},{"order":0,"points":100,"sticky":false,"text":"contrast  "},{"order":0,"points":0,"sticky":false,"text":"emphasis"},{"order":0,"points":0,"sticky":false,"text":"proportion "}],"failure":{"button":null,"message":"The key to using repetition is keeping the viewer from identifying the repetition. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn107-commondesign-elementsofvisuals-repetition-micro-18","number_of_choices":4,"question":"In many ways, repetition is the opposite of _____.","start":3600,"success":{"button":null,"message":"The key to using repetition is keeping the viewer from identifying the repetition. "},"type":null}],"reference":"common-design-theories-5","text":null,"title":"Repitition"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"reference","mod":"","movie":null,"name":"Reference","promptfile":null,"prompts":null,"reference":null,"text":"<a class=\"dest\" id=\"common-design-theories-1\"><\/a><div class=\"accent\"><h1>Overview<\/h1><p>Video Games are an art form that allows, and even demands, that players explore and interact at a level no art form has previously achieved. It is the interaction with the game that creates new, and often unexpected, surprises for the audience. In other words, the \"art\" isn't complete without the player interaction that creates something more than the sum of code, art, story, sound effects, and mechanics. In this view, the art of a video game isn't a complete experience until the game is played and its “true artistry” is discovered through interacting with the game.<\/p><p>Another aspect to consider is that interacting with a video game creates a unique aesthetic experience for the player that may be entirely different than someone else's. The options presented in game mechanics or the narrative are individually chosen to create a different user experience for each person that plays the game, and often a different experience each time the game is played. Unlike a movie, the aesthetics of a video game are more layered and dependent upon more factors than anything that has come before.<\/p><p>As video game developers, we are creating art as well as entertainment and it is important to remember why certain design theories work and some don't. We must understand how and why an audience approaches a video game as opposed to a book or a movie. These are what we call the Common design theories in video game development<\/p><p>This Module will explore these common game design theories and will include:<\/p><div style=\"text-align: center;\"><ul class=\"anchorGroup\" style=\"text-align: left; display: inline-block;\"><li><a class=\"ankor\" href=\"#common-design-theories-2\">Fundamentals of Game Design<\/a><\/li><li><a class=\"ankor\" href=\"#common-design-theories-3\">The Importance of Balance in Gameplay<\/a><\/li><li><a class=\"ankor\" href=\"#common-design-theories-4\">The Impact of User Experience on Game Design<\/a><\/li><li><a class=\"ankor\" href=\"#common-design-theories-5\">Elements and Principles in Visual Design<\/a><\/li><\/ul><\/div><\/div><a class=\"dest\" id=\"common-design-theories-2\"><\/a>&nbsp;<div class=\"accent\"><h1>Fundamentals of Game Design<\/h1><p>Video games are unique forms of art and entertainment. They are not just for an audience using their senses to contemplate an image, idea, or sound: video games allow a deeper interaction, which demands its own set of foundations. Some of these considerations are the same any art form would contemplate, others, however, are absolutely exclusive to video games.<\/p><h2>Audience<\/h2><p>Having an <em>audience<\/em> is not just a matter of knowing and targeting a particular demographic that has excessive free time and money to spend. When discussing video game design, we must understand what the audience expectations of experiencing a video game has become. “Gamers” are savvy people who have formed definite opinions on video game narratives and mechanics up to this point in history. Taking outdated ideas such as 'girls like pink' and 'boys like blue' and then using pink visuals in your game to target girls or blue visuals to target an audience of boys is not enough. Audience, in terms of game theory is more about player psychology than pure aesthetics or genre preference. For design purposes, we are concerned about holding their interest.<\/p><img class=\"aligncenter\" src=\".\/images\/image_demographics.jpg\" alt=\"image_demographics\" width=\"670\" height=\"401\" \/><p>Game theory as it relates to developing and maintaining an Audience can be abstract and complex. We will cover some of the more complex game design theories in later Modules, but for now, understand that Audience immersion and player psychology are keys to the basic functionality of a game as well as making the game entertaining.<\/p><h2>Platform<\/h2><img class=\"aligncenter\" src=\".\/images\/image_platforms.png\" alt=\"image_platforms\" width=\"809\" height=\"306\" \/><p>We have already discussed various <em>platforms<\/em> and their similarities and differences; now we are going to touch on how platform choice also affects game design. Platforms each come with their own benefits and limitations: for the player the most obvious differences are the input devices associated with different platforms. This is an important consideration for the game designer. Will the player use a keyboard or a console controller? What buttons will be used and how? If the game is cross-platform, will gameplay be drastically more difficult on one type of input device over another? This is just one impact platform will have on game design. Others may include which game engine to use to build the game, what built-in audiences are associated with a particular platform and what fee and\/or restrictions are part of creating a game for a platform. In short, the choice of platform will have profound impact on game design in many ways.<\/p><h2>Genre<\/h2><p><em>Genres don't help market a game &#8211; instead, the selection of a genre has an effect on what (and what size of) audience is likely to be interested and willing to purchase a game.<\/em> Genres do help  an audience understand the basics of a game by promising them a certain amount of familiar elements they desire (or demand) in a particular genre. For example, fans of medieval fantasy will expect some common themes in a Fantasy Real-Time Strategy game (FRTS): knights, castles, troop combat, and magic, to name a few. As a game designer, it is important to understand what kind of audience expectations exist across different genres. Stray too far from these expectations without designing a brilliant alternative and the game will lose its audience. Stick too close to what has come before and the game will be overlooked as offering nothing new. Even the bold designer that intends on rewriting all that we know about how a genre game is played, needs to understand what, to this point, has made the genre popular before deconstructing it and making it better.<\/p><h2>Rules and Mechanics<\/h2><img class=\"aligncenter\" src=\".\/images\/image_actions.png\" alt=\"image_actions\" width=\"828\" height=\"281\" \/><p>There are countless theories on the best <em>rules and mechanics<\/em> for video games. On a more pragmatic level, video game audiences filter out bad mechanics by not purchasing poorly designed games. That said, there is no perfect mechanic for every game. Designing good rules and mechanics is a balancing act of practical needs, player psychology and fun. For example, jumping is a common video game mechanic, but is it fun? The answer depends on why the player is jumping, how fast they are getting good at jumping, and how integrated being a good jumper affects the fun and goals of the game. If jumping is repetitive, meaningless, or too easy (or too hard), then it could be an awful mechanic for a game.<\/p><p>It is best to think of mechanics abstractly, and not as a rigid set of controller options. They are a means to an end and should be used as such, and not as sacred cows that must be avoided or always utilized. There are still ways to “reinvent the wheel”, in game mechanics, but that, in and of itself, is a poor design goal. Good design is finding the best mechanics for a particular game, or building a great game around a particular mechanic goal. In a later Course, we will look much closer at theoretical abstracts in game design mechanics, but for now, understanding what a game wants to accomplish as far as mechanics, is a good place to start.<\/p><h2>Challenges<\/h2><p>A <em>challenge<\/em> is what makes a game an interactive experience, as opposed to a book or a movie. Although a deep and well-constructed movie or book can challenge the intellect, games present both intellectual and physical challenges. The viewer is also a doer in the sense that their interactions change the experience, the aesthetics, and make the game unique every time it is experienced. From a gameplay point of view, challenges are the bread and butter of mechanic design. Everything a player must do in a video game is, in a way, a challenge. Simply walking a character across the screen is still a challenge in terms of learning what “buttons” to push to make the character go. This also illustrates that not every challenge remains challenging for long. The key to challenges is making them balanced with difficulty and enticing players to want to take them on with a sense of purpose in overcoming them. A player who has defeated a properly balanced challenge will feel confident in their skills and will want to face the next challenge. A poorly balanced challenge will frustrate the player and cause them to want to avoid gameplay that leads to more disappointment in the game.<\/p><h2>Incentives<\/h2><img class=\"aligncenter\" src=\".\/images\/image_incentives.png\" alt=\"image_incentives\" width=\"632\" height=\"405\" \/><p><em>Incentives<\/em> are ways to make players seek out challenges. An incentive is any positive reinforcement of good gameplay from a player. For example, completing a difficult level on a 2D platform game, requiring intense jumping challenges, might offer unlocking a double-jump mechanic. This in turn, will make previous jumping challenges easier, as well as allowing for more complex and difficult levels to come. Incentives come in many different forms, depending on the type of game and genre. Some incentives are abstract, while some are called out in the rules of the game. Role-playing games (RPGs) often have experience points, which are built in incentives, the players can know ahead of time, plan on, and plan ahead for just by playing the game. The game tells them that by playing more, they will become better at it, even sometimes going as far as giving them a little experience point countdown on when they will improve next. Now, the closer the player gets to “making a level” and once again improving, the more incentive they have to continue playing to achieve that goal. It gets much more complex from here, and we will cover incentives much deeper in a later Course.<\/p><h2>Playability<\/h2><p><em>Playability<\/em> is a combination of mechanics, interface and control. These three elements must weave together well to create playability. Playability comes even before fun. If a game is frustrating because of playability issues such as, poor button response or a difficult user interface, it will never be fun, no matter how smart and original it is. Playability is also very difficult to get right just from a writing standpoint. It is all well and good to declare excellent playability in the game design document; however, actually achieving playability is quite another set of challenges. Playability will often be maximized in QA testing, where bugs in the control, interface, and gameplay can be altered for a better user experience. That said, good game designers will not let testing completely dictate playability design. Even though it will be refined as the game develops, understanding playability issues is a good place to start when first designing a new game.<\/p><h2>Content<\/h2><p><em>Content<\/em> is what really separates one game from another, even in similar genres selling to similar audiences. Content is usually the first thing people look for when deciding whether or not to buy a new game. New mechanics can be exciting (if they are fun and meaningful) but it is content that makes or breaks a game. Content can be further broken down into quantity, quality and originality.<\/p><img class=\"aligncenter\" src=\".\/images\/image_originality.png\" alt=\"image_originality\" width=\"345\" height=\"259\" \/><p>Sometimes a game can offer awesome new mechanics, amazing visuals, and sound, but then falls short on content quantity. That is to say, the game is short and lacking enough content to make the game feel worth the purchase price. There are many design tricks (some say dirty tricks) one can use to expand content quantity, such as “grinding”, “back-tracking”, or even “expansive retrieval quests”. These are typically used in games to make their worlds seem bigger than they are. They are also tricks used in games that otherwise would end too soon without them. Other games can present too few mechanical options and quickly become boring. Content quantity is going to be a balance of time, budget and design goals.<\/p><p>Quality implies that the game works as advertised and demonstrates at least basic competency in delivering a playable game. That may not seem like a lofty goal, however, it is more difficult than imagined. Poor design for quality can create the need to make short cuts or cut features in order to maintain quality. Even games with quality can also fail from offering too little content (quantity) or too little originality.<\/p><p>Original content is always in demand, but it will always be judged on “what works” rather than “what's new”. New titles must always offer at least some originality over sequels. Sequels can expand concepts, while new titles must establish their own. Here is the most dangerous aspect of designing new mechanics: should mechanics be new just for the sake of being new? That is to say, if a mechanic is new, it must, more than ever, pass the design test of: Is it meaningful, is it fun? Often, with a truly original mechanic, its final interactions are going to be guessed at in the early stages of game design. Here is where rapid prototyping (discussed in a later Module) comes in handy.<\/p><h2>Visuals and Sound<\/h2><p><em>Visuals and sound<\/em> have a design component as well. Both should be used to articulate and accentuate the design goals of the game. Angry Birds, without the brilliant visual and sound design is just another catapult game with nothing new to offer. In fact, in many ways the visuals and sound of Angry Birds are the only new offerings the game makes. Mechanically it plays exactly the same as a host of other games just like it, just with different visuals and sound. So why did Angry Birds succeed so dramatically while others failed? Angry Birds was the seamless blend of simple gameplay and aesthetics that fit perfectly to a new platform (smartphones), a new audience (casual gamers), and just cute enough original design in visuals and sound.<\/p><\/div><a class=\"dest\" id=\"common-design-theories-3\"><\/a>&nbsp;<div class=\"accent\"><h1>The Importance of Balance in Gameplay<\/h1><img class=\"aligncenter\" src=\".\/images\/image_balance.png\" alt=\"image_balance\" width=\"664\" height=\"390\" \/><p>Much of the challenge in game design is in achieving balance in gameplay. Balance means the game's difficulty, fairness, pacing, challenges, and controls all work in tandem to give a seamless, cohesive experience to the player. Here the psychology of game play comes to the forefront and demands certain considerations.<\/p><h2>Difficulty<\/h2><p>It is important to remember, a difficult video game is not necessarily a good or a bad thing. Different audiences seek different levels of difficulty in their games of choice. Casual games, such as most phone and tablet designed games, generally seek a lower range of difficulty than, say, PC games.<em> Difficulty<\/em> in any game can be mitigated or increased by making certain design decisions. The true goal in mastering difficulty is understanding the player's psyche when playing games.<\/p><img class=\"aligncenter\" src=\".\/images\/image_difficulty.png\" alt=\"image_difficulty\" width=\"700\" height=\"479\" \/><p>In general, players expect a learning curve when playing a new game. Their sense of difficulty, beyond controller reaction, is going to be based on how they are asked to learn a new skill. Jumping the final platforms of a game's finale should pose an overwhelming difficulty if the players just skipped ahead past all the earlier levels. It is by slowly staging skill improvement that when a player reaches the final level its difficulty is a challenge but not impossible, and thus overcoming the challenge is then rewarding.<\/p><p>This balance is hard to gage for every single player that may play the game. Some are simply going to find the difficulty balance is off for them. Some games design ways to alter or change their difficulty. Some do this simply by allowing the player to adjust the difficulty as they wish. Doing so does offer a player to customize difficulty for their own enjoyment, however, doing so often ruins the balance the other way (making it too easy) and the player grows bored and leaves the game anyway.<\/p><p>Some games tackle difficulty by replacing player skill mastery with player character skill mastery. In this type of game, the players do not need to improve a skill themselves, improvement is integrated into the player's avatar. For example, instead of having to constantly practice aiming a crossbow to improve at it, the game might assign the player character a percentage chance of success based on hardcoded character improvement paths. As the character gains “experience levels” their percentage to hit a target automatically goes up.<\/p><h2>Fairness<\/h2><p><em>Fairness<\/em> is a concept often used in talking about player vs player (PvP) games. In these games, it is important not to give one player a statistical advantage over another player. For games that present class systems, this balance can be quite difficult. Players can easily follow a less difficult path through the game, or make mistakes when able to improve their character's skills in the game. This can create unintended imbalance due to different levels of game mastery by the players. Those that want to invest more time can become significantly better at playing the game than casual players. This can be through actual mastery of the game or it could just be through exploitation of balance issues in the design itself. This might seem fair enough, however, from a design point of view, we don't want people feeling left behind and “lesser” than the hardcore players. They might grow bored or frustrated at what is required of them to be competitive and that will affect the game's market success.<\/p><p>Solutions to fairness issues can be harsh to hardcore fans and difficult to implement. Often, when a game developer sees fairness issues in their game, the only solutions are to “nerf” or \"buff\" the mechanics to some degree. Nerf is a slang term for downgrading the stats of something in the game to help even out fairness, while buffing is a term for upgrading stats. In the RPG example, an overpowered or underpowered class might be nerfed or buffed to bring the class closer in line with the power of other classes. Of course, this has the potential of throwing every other class out of balance as well as making people angry that their favorite class has changed. When fans feel their favorite class is nerfed too much, they may accuse the developer of “gimping” the class. That is, they feel the changes have the opposite effect of balance and simply make the class undesirable to play.<\/p><p>Real solutions to fairness are going to be step by step processes, which have various levels of success and failure in terms of finding the right balance of fairness.<\/p><h2>Pacing<\/h2><img class=\"aligncenter\" src=\".\/images\/image_pacing.png\" alt=\"image_pacing\" width=\"468\" height=\"380\" \/><p>Designers put a lot of work in setting the <em>pace<\/em> of gameplay. Pace determines how long the game will last while maintaining a high level of entertainment from start to finish. Unfortunately, pacing is in many ways out of the control of designers.  For example, from a skill mastery position, different players are going to take various amounts of time to learn a skill. For simple 2D platform games, repetition is the solution; however, this makes it difficult to estimate the hours of gameplay a title offers. In addition, there is unpredictable player behavior that will also seriously undermine pacing and how the designer originally intended the game to be played. Pacing problems often occur in player vs environment (PvE) games, where exploration is encouraged. For these games, the player largely is in control of the game's pace. This leaves room for the player to play in ways that are not necessarily wrong, but have unintended consequences in terms of pacing.<\/p><p>For example, an open world RPG may allow players to explore anywhere in the world at any time. This is positive in terms of players being unrestricted in how they want to explore the game, however, it also opens the door for them to become overwhelmed, lost, or missing key points in the game Also, by wandering away from intended design, players risk missing important parts of the game and become frustrated or bored.<\/p><h2>Work and Reward<\/h2><p>Although good design will hide this fact, players of video games are required to do <em>work.<\/em> The reason players accept this work is because they perceive some<em> reward<\/em> for doing so. Most often this reward is “fun”. The labor to get better at the game is rewarded by the enjoyment of fulfilling goals within the game. At the most basic level, good design aims at making the experience fun. Being fun is a tremendous motivator to play a game and perhaps the most obvious. Beyond being fun, there are other player motivators in good game design, many of which are subtle and buried in gameplay.<\/p><p>No matter what tricks a game uses as player motivations, the concept remains the same: the game must offer the player rewards as they play to foster continued growth in skill and exploration of the game.  Games that lack work motivators in the form of rewards quickly become tedious, pointless, and boring. At the same time, games that offer too much reward can also become too easy and boring. Video game designers have, over the years, created a host of theories, tricks, and methodologies to address and implement player motivation. In almost all cases, player motivation breaks down to simple player psychology of seeking rewards for completing tasks. This simple concept pattern can then be repeated in “loops” and stacked upon each other to create larger circles of player work and reward. In a later Module, we will take this concept to another level of complexity, but for now, understanding the basic, but vastly important, concept of fostering player motivation through rewards is crucial to good game design.<\/p><h2>Creative vs. Mechanical<\/h2><img class=\"aligncenter\" src=\".\/images\/image_CreativeVSMechanical.png\" alt=\"image_CreativeVSMechanical\" width=\"802\" height=\"332\" \/><p>It is a mistake to focus game design entirely on<em> mechanics<\/em>. As mentioned with the Angry Birds example, <em>creative<\/em> design (in this case, art and sound design) can be just as important. Story, character, and visual themes do more than just add colorful elements to a game; they create points of immersion and their own set of motivators for play. Without a story, a first-person shooter game becomes a pointless excuse for violence. Without characters and setting, a fantasy MMO becomes a clone war of pure number crunching. There is no magical number that can be given to exactly balance creative vs. mechanical elements in any particular game. Each must be given equal consideration and then balanced for the goals of the game. Just keep in mind; games like Pac-Man succeed because they are not just a maze mechanic, but because they also create joy in the experience through character and story design.<\/p><p>We will further discuss Story and Characters in video games in more detail in upcoming Modules.<\/p><\/div><a class=\"dest\" id=\"common-design-theories-4\"><\/a>&nbsp;<div class=\"accent\"><h1>The Impact of User Experience on Game Design<\/h1><p>The goal of making a video game, in the most general sense, is to create a user experience. The tricky part is, designing mechanics is mostly guesswork until the systems are tested. That said, there are certain criteria we can follow to avoid the biggest pitfalls of negative user experience. In the video game industry, these are commonly called The Keys to Usability. These keys help developers increase quality and reduced development costs by planning ahead.<\/p><img class=\"aligncenter\" src=\".\/images\/image_UserExperience.png\" alt=\"image_UserExperience\" width=\"530\" height=\"472\" \/><h2>Keys to Usability<\/h2><p><em>Usability i<\/em>s a term used to describe how fluid and functional a game is to play. It measures consistency, simplicity, and efficiency in design. We can use Keys to Usability as a checklist of broad but universal design goals every game should strive for. They also help define some design standards that can be checked for during usability testing. While different game makers might organize and title them a little differently, the following covers the basic concepts of ensuring usability.<\/p><h3>Seamlessness<\/h3><p><em>Seamlessness<\/em> is our first goal for usability. Playing a video game is meant to be an immersive experience. That means we want to avoid things that unnecessarily pull players attention from the game as we want to present it. The most glaring issue that can detract from seamlessness is glitches. Glitches are unintended programming errors that instantly, and often visually, break the spell of the game. Once the veil of the coding is revealed through a glitch, it becomes difficult for the player to get lost in intended design. Poor controller response can also ruin seamlessness. Other non-technical problems can be additional obstructions to seamlessness. Bad storytelling, poor character dialog, or incoherent visual themes can easily jolt a player from their focused engagement with the game. For seamlessness to occur, all of the elements of mechanics, story, visuals, and sound must blend together without showing the audience the man behind the curtain.<\/p><h3>Usefulness<\/h3><p><em>Usefulness <\/em>is another important consideration for any design element put into a game. Concepts should never be tossed into a game with no forethought as to how those concepts will make the game better, as opposed to just bigger. Mechanics that are not useful, or meaningful, become tiresome for the player, as they offer no tangible purpose to master and no reward. Non-mechanical usefulness is also important. Visuals work better if they convey concise messages of the world rather than a random assortment of unrelated or tossed in images. Visuals display their own usefulness in that they help guide the player through obstacles in the game world. Any visuals that confuse that guidance fail in usefulness.<\/p><h3>Desirability<\/h3><img class=\"aligncenter\" src=\".\/images\/image_desirability.png\" alt=\"image_desirability\" width=\"616\" height=\"412\" \/><p><em>Desirability<\/em> asks the question: will anyone want to play this? A desirable game will have a sense of something new, be exciting to play, encourage players to play to the end and have friendly, meaningful mechanics. Evaluating desirability is a matter of asking direct questions of the experience. How did x make you feel? What is your reaction to x? With this sort of questioning, developers can evaluate positive and negative areas of the game's attraction to an audience.<\/p><h3>Overall Elegance<\/h3><p>In video game terms, <em>Overall Elegance<\/em>, is the balance between rules complexity and ease of play. A game is considered elegant if its rule set is simple enough for the player to instantly (or nearly so) begin to play. This is done by giving the player clear options to explore the game without having to work too hard at discovering how they work. Elegance means the game's design meets the core design goals of keeping a player immersed and learning the game as intended.<\/p><h2>Usability Testing<\/h2><p>By using the keys of usability checklist, we can avoid many usability issues &#8211; on a theoretical basis. The concepts make sense and should help us minimize problems. The lingering problem is, we just don't know for sure. That is where usability testing comes into play. Usability testing lets us evaluate the game's effectiveness in engaging an audience, its efficiency in delivering its concepts, and players' satisfaction in playing it. It mitigates glitches, player frustration, and any other problems in the game's design and implementation. Mostly it pinpoints the true user experience and allows time and a process to correct any problems that create a negative user experience. For video games, this is an extremely important process, as user satisfaction is really the difference between success and failure. Remember, gamers are only going to put up with usability issues so much before they simply move on to another, less frustrating game.<\/p><h3>Expert Review<\/h3><img class=\"aligncenter\" src=\".\/images\/image_expertreview-300x199.png\" alt=\"image_expertreview\" width=\"300\" height=\"199\" \/><p>So usability testing is important, now, how do we do it? One way is through <em>expert review<\/em>. Developers and game experts take a red pen to the GDD and mark out known and unknown issues and then rank those issues according to severity. The review teams then meet and discuss possible solutions. The value of this method is that it is quick and can be done multiple times throughout the development process. It is also a very flexible process that can be scaled according to issues of greatest importance. Expert review often involves rapid prototyping, which is a sort of pen and paper testing of concepts, UI design, and other instant evaluation techniques (we will expand on rapid prototyping in a later Module).  The end results are well worth the effort as this kind of scrutiny can reveal many usability problems with good use of time and personnel.<\/p><h3>Playtesting<\/h3><p><em>Playtesting<\/em> is another form of usability testing. Usually this involves allowing an early version of the game to a limited group of gamers to try out and find usability issues. This type of usability testing goes straight to the audience that may purchase the game and gets their opinions on what works and what doesn't. Generally, players testing a game give honest, yet sometimes harsh, evaluations on whether or not they would want to play the game and detailed descriptions on why or why not. This is a group that genuinely wants good games on the market and has familiarity in evaluating their own user experiences. Remember, this is not QA testing, this is much more limited in scope. Test groups are usually less than ten people who are drawn from the game's target demographic and often testing is done in a “lab”, in a controlled environment, as opposed to loosely tested at home.<\/p><\/div><a class=\"dest\" id=\"common-design-theories-5\"><\/a>&nbsp;<div class=\"accent\"><h1>Elements and Principles of Visual Design<\/h1><p>Creating visuals for video games is an art form unto itself. The contribution of visuals to a game is, in many ways, as essential as mechanics and programming. The instantaneous mental effect of imagery in a game has an incredible amount of influence on a player's perception of a game regardless of how well the game plays. Poor visuals in a game can ruin its popularity, while terrific visuals can make a mechanically boring game a hit. Professional artists are masters of seeing the art within the art and will often break down visual design into two very broad categories: Elements and Principles.<\/p><h2>Elements of Visual Design<\/h2><p>We can broadly think of the elements of visual design as the building blocks of art. They are the elements every piece of art will incorporate.<\/p><h3>Value<\/h3><img class=\"aligncenter\" src=\".\/images\/image_value1.png\" alt=\"image_value1\" width=\"592\" height=\"340\" \/><p><em>Value<\/em> is an extremely important and a sometimes confusing element of visual design for non-artists. Value describes a range of gray between perfect white and perfect black. White on this scale is given a value of zero and black is given a value of 10. The 1 to 9 values are all shades of gray ranging from light to dark gray. Art professionals can usually identify the exact value of any gray by using this scale.<\/p><img class=\"aligncenter\" src=\".\/images\/image_value2.png\" alt=\"image_value2\" width=\"1209\" height=\"382\" \/><p>Why is Value important? Value is how the eye separates one detail in an image from another. Without value images have no distinction and even color is worthless and washed out. One trick artists do to evaluate value is to remove all color from an image (remember video game artists use a digital art medium) and examine the image purely in “gray-scale”. This allows them to see the true value of a piece.<\/p><h3>Color<\/h3><p><em>Color<\/em> (or hue) is an obvious element in visual design, but here again; we find there is a sort of art science to its usage. Artists refer to what is known as <em>color theory <\/em>and the color wheel when discussing color.<\/p><img class=\"aligncenter\" src=\".\/images\/image_color1.png\" alt=\"image_color1\" width=\"615\" height=\"334\" \/><p>By examining the color wheel, we can see how colors compliment and contrast each other. First we can identify the primary colors (red, yellow, and blue). Between the primary colors are the secondary colors (green, orange, and violet). Then between each primary and secondary color we have the tertiary colors (blue violet, yellow orange, etc.).<\/p><p>Artists learn how to use color theory to create proper color compositions. By referring to the color wheel they learn which color combinations work well together and which blend into hues that turn the stomach. We can also look to nature, the perfect example of color theory in motion, to further our understanding. Examine a sunset, a bird, a flower, or even a fish and notice how they each follow color theory, or rather perhaps, how color theory conforms to nature.<\/p><img class=\"aligncenter\" src=\".\/images\/image_color2.gif\" alt=\"image_color2\" width=\"705\" height=\"224\" \/><p>&nbsp;<\/p><h3>Line<\/h3><p><em>Line<\/em> is a very basic element of art that actually has a very complex and powerful purpose. As in math, a line is a series of points that combine in their closeness to create a new thing.  For artists, lines are used to create emotion and manipulate the eye of the beholder through direction. By using vertical, horizontal, and diagonal lines an artist can guide the eye and create dynamics and action in the piece.<\/p><img class=\"aligncenter\" src=\".\/images\/image_lines.png\" alt=\"image_lines\" width=\"765\" height=\"351\" \/><h3>Shape<\/h3><p><em>Shape<\/em> is the form inside a connected series of lines. Color and value help define shape. Shapes are either geometric (square, circle, etc.) or organic (non-geometric or free-formed). Silhouettes are iconic shapes that represent an actual thing. The shape of Batman's cowl is an example of an iconic silhouette. It is instantly powerful and recognizable as uniquely belonging to Batman. Shape can also be described as positive or negative. A positive shape automatically contrasts itself against its negative opposite creating a value scale.<\/p><img class=\"aligncenter\" src=\".\/images\/image_shapes1.png\" alt=\"image_shapes1\" width=\"1024\" height=\"314\" \/><h3>Size<\/h3><p><em>Size<\/em> is a comparison of two or more shapes in terms of the space they occupy in the image. By making shapes different sizes the artist can (via height, width, line thickness and depth in 3D art) provide information, convey emphasis, and create contrast in the image.<\/p><img class=\"aligncenter\" src=\".\/images\/image_size.png\" alt=\"image_size\" width=\"994\" height=\"412\" \/><h3>Texture<\/h3><p><em>Texture i<\/em>s an extremely important art element in video games. Texture describes the look and feel of a surface. In video game terms, textures are, in the most basic sense, images mapped to geometry. For many games, textures make up most of what the player sees: grass, earth, concrete, sky, clothing, the shine on a bouncy ball, they are all textures, or art images attached to a shape or 3D object. Textures are often painted as single images that replicate to create the illusion of a texture, such as a patch of green grass. Good textures in a video game are close to seamless and add a certain lushness to the visuals.<\/p><img class=\"aligncenter\" src=\".\/images\/image_texture.png\" alt=\"image_texture\" width=\"723\" height=\"266\" \/><h2>Principles of Design<\/h2><p>Now that we have briefly covered the elements of visual design, what do we do with them? Right now, these elements are just our building blocks to create visuals. What we are still missing are application techniques to best utilize our elements. Proper use of visual design principles will turn our building blocks into wondrous works or beauty.<\/p><h3>Composition<\/h3><p>The location or arrangement of visual elements in a work of art is called <em>composition.<\/em> It describes how art elements are put together to create a comprehensive and coherent design. In video games, composition is crucial. Think of a user interface: the placement of screens, buttons and player information are all affected by composition. So, how do we create good composition? Let's look at some other design principles.<\/p><img class=\"aligncenter\" src=\".\/images\/image_compositon1.gif\" alt=\"image_compositon1\" width=\"1161\" height=\"370\" \/><h3>Balance<\/h3><p><em>Balance<\/em> implies equilibrium and symmetry. That doesn't mean every half of an image must be a mirror image of itself. What it means is that the entirety of the composition should be a balance of overall eye pleasing aesthetics. In this sense, balance can be seen as formal (perfect symmetry) or informal (imperfect but still balanced). Informal balance creates dramatic focus of attention in the viewer and allows the artist to, again, manipulate where the eye is lead. Balance can also be divided into three broad categories: horizontal balance, vertical balance, and radial balance.<\/p><img class=\"aligncenter\" src=\".\/images\/image_balance1.png\" alt=\"image_balance1\" width=\"740\" height=\"368\" \/><h3>Gradation<\/h3><p><em>Gradation<\/em> refers to a subtle change in size, value, color or other visual element that is visually obvious if one looks at the beginning and end of the gradation. Artist use gradation to, once again, lead the viewer's eye and thinking when looking at an image. Gradation can lead the eye in a linear pattern through gradients in size or direction. It can transition colors from cool to warm. Gradation is also useful in creating an illusion of motion in a shape or keeping the eye fixated on a shape.<\/p><img class=\"aligncenter\" src=\".\/images\/image_gradients1.png\" alt=\"image_gradients1\" width=\"806\" height=\"285\" \/><h3>Harmony<\/h3><p><em>Harmony <\/em>is an achievement of element aesthetics. A harmonic image is one that combines related elements (similar colors, shapes, etc.) in an eye pleasing way. This is not as subjective as it may sound. Remember our color wheel: some color combinations are complementary and “pop” while others over saturate the image.<\/p><img class=\"aligncenter\" src=\".\/images\/image_harmony.png\" alt=\"image_harmony\" width=\"629\" height=\"275\" \/><h3>Contrast<\/h3><p>The use of opposite or juxtaposing elements in an image creates <em>contrast.<\/em> Opposite colors on the color wheel, for example, can contrast. We can also see contrast in value ranges with the extremes being black and white. Contrast can be a difficult principle to work properly. Too much, or improper use of contrast can weaken visual unity and become chaos for the eye to take in. That said, good use of contrast can center the attention of the viewer and create a delicate harmony in the composition.<\/p><img class=\"aligncenter\" src=\".\/images\/image_contrast.png\" alt=\"image_contrast\" width=\"511\" height=\"264\" \/><h3>Unity<\/h3><p>The idea of<em> unity<\/em> is that elements should accentuate the ideas being expressed in the visual design. The simplest example of messing up unity would be if an artist placed unrelated images into a single confusing piece of art. For example, a fish or a rainbow in an image of an exploding volcano would generally disrupt the image's unity. In addition to using elements to create unity, various principles can be useful, as well. In our volcano example, using diagonal lines can create a feeling of motion in the lava and value can add to the foreboding tone of the piece.<\/p><img class=\"aligncenter\" src=\".\/images\/image_unity.png\" alt=\"image_unity\" width=\"740\" height=\"244\" \/><h3>Emphasis<\/h3><p><em>Emphasis<\/em> is another principle used to create focus on a visual design where the artist wants it. Emphasis deals with the concept of visual dominance. Dominance dictates where the eye looks first, which the artist can then use other principles to lead their eye through the entire image. Good emphasis grabs the viewer's attention immediately and gives them a starting point to explore the image.<\/p><img class=\"aligncenter\" src=\".\/images\/image_emphasis.png\" alt=\"image_emphasis\" width=\"716\" height=\"161\" \/><h3>Proportion<\/h3><p><em>Proportion<\/em> is the harmony an image has in relationship to each of its elements. Character art is a great way to look at proportion. Often video games and cartoons develop character designs that emphasize disproportional anatomy: oversized hands, feet, and heads. This warping of proportion creates its own style that works in context of making characters stand out on screen. In general, though, proportion is going to be more constrained. Artists often use what is called the Rule of Thirds, which is a way of dividing the image space so that proportions can be accurately estimated. Think of the image space divided into nine equal blocks. Now we have a better reference point to ensure proper proportions. Another visual example of proportion is the nautilus-like triangle graph.<\/p><img class=\"aligncenter\" src=\".\/images\/image_proportion.png\" alt=\"image_proportion\" width=\"739\" height=\"329\" \/><h3>Proximity<\/h3><p><em>Proximity<\/em> describes how elements are grouped or placed in relationship to each other to create a coherent image. The principle states that similar objects should be grouped to convey they are seen as a group, and that objects that are close to each other are to be viewed as related. It plays on the psychology of the viewer and attempts to make the relationship of proximity obvious.<\/p><img class=\"aligncenter\" src=\".\/images\/image_proximity.png\" alt=\"image_proximity\" width=\"722\" height=\"328\" \/><h3>Repetition<\/h3><p><em>Repetition<\/em> of elements creates unity and a general sense of cohesiveness in an image. In video games, repetition is extensively used to create massive textures and worlds. In many ways, repetition is the opposite of contrast, in that it allows the player to imagine what they are seeing as part of a larger whole. The key is repetition is hiding it. If repetition of an element becomes obvious, it has failed in its purpose.<\/p><img class=\"aligncenter\" src=\".\/images\/image_repetition.png\" alt=\"image_repetition\" width=\"648\" height=\"277\" \/><\/div><!--page:~~common-design-theories-reference-text~~-->","title":"Reference Material"},{"bIsChecked":true,"exercise":".\/exercise\/DevProRattyFlap.stack","instructions":"        <h1>Goal<\/h1>        <p>            In this Exercise, we will be demonstrating a Tight Concept made popular by the game <em>Flappy Bird<\/em> by setting up the same simple core gameplay elements in our own version, <em>Ratty Flap<\/em>.        <\/p>        <img class=\"aligncenter size-full wp-image-701\" src=\".\/images\/game-structure-tightconcept-gamesnap-exercise_1.png\" alt=\"game-structure-tightconcept-gamesnap-exercise_1\" width=\"640\" height=\"360\" \/><p style=\"text-align: center;\">The final game should look similar to the one in this image.<\/p>        <h1>Steps<\/h1>        <p>All work in this Exercise will be done in the <em>Stage<\/em> area and <em>BatRat<\/em> sprite within the Tight Concept exercise.<\/p>        <ol>            <li>First, let's see what the Exercise looks like without modification. Run the Exercise by clicking the green flag. Click the Start button and click again to dismiss the instructions. Once the game begins, the rat should do nothing but flap its wings and turn a bit.<\/li>            <li>Click the red stop sign to stop running the Exercise.<\/li>            <li>Let's start by adding a repeating pipe set, with a standard gap between top and bottom pipes and a reasonable amount of time between sets.                <ol type=\"a\">                    <li>Locate <em>Focus Area 1<\/em> in the <em>Stage<\/em>. First, drag a <img src=\".\/images\/forever.png\" alt=\"forever\" \/> block from the \"Control\" category and place it inside the focus area. This will make the pipes keep coming.<\/li>                    <li>Next, go to the \"Data\" category and drag a <img src=\".\/images\/set_()_to_().png\" alt=\"set_()_to_()\" \/> block inside the <img src=\".\/images\/forever.png\" alt=\"forever\" \/> we just placed. Select \"NextTopPipePositionY\" from the dropdown and set it to 275.<\/li>                    <li>Add another <img src=\".\/images\/set_()_to_().png\" alt=\"set_()_to_()\" \/> block under that. This time, select \"NextBottomPipePositionY\" from the dropdown. For the value, add a <img src=\".\/images\/()_-_().png\" alt=\"()_-_()\" \/> block from the \"Operators\" category and set the left operand to \"NextTopPipePositionY\". (Grab it from the \"Data\" category).  (Hint:  to get \"NextTopPositionY\" to drop onto the <img src=\".\/images\/()_-_().png\" alt=\"()_-_()\" \/>, line up the left edge of the two blocks.) Set the right operand to 500. We have now set the position of the top pipe and have offset the bottom pipe to leave a big gap.<\/li>                    <li>Next, go to the \"Control\" category and drag in two <img src=\".\/images\/create_clone_of_().png\" alt=\"create_clone_of_()\" \/> pieces. Set the first to \"TopPipe\" and the second to \"BottomPipe\". These will create both pieces of a pipe set at the positions we specified.<\/li>                    <li>Complete the <img src=\".\/images\/forever.png\" alt=\"forever\" \/> block by adding a <img src=\".\/images\/wait_()_secs.png\" alt=\"wait_()_secs\" \/> of 3 seconds. This defines the time between pipe sets.<\/li>                    <li>The completed focus area should look exactly like this:<img class=\"aligncenter size-full wp-image-701\" src=\".\/images\/game-structure-tightconcept-gamesnap-exercise_2.png\" alt=\"game-structure-tightconcept-gamesnap-exercise_2\" \/><\/li>                <\/ol>            <\/li>            <li>Next, we need to add the movement and control of the rat.                <ol type=\"a\">                    <li>Locate <em>Focus Area 2<\/em> in the <em>Stage<\/em>. Insert a <img src=\".\/images\/set_()_to_().png\" alt=\"set_()_to_()\" \/> block. Select \"DefaultGravity\" from the dropdown and set it to -9.8. This will make the rat fall downward.<\/li>                    <li>Now, we need to allow the player to make the rat fly up. Go to the <em>BatRat<\/em> sprite and find <em>Focus Area 3<\/em>. We want the rat to work to flap upwards over time, so add a <img src=\".\/images\/glide_()_secs_to_x_()_y_().png\" alt=\"glide_()_secs_to_x_()_y_()\" \/> piece from the \"Motion\" category. Set the glide time to 0.5 seconds, x to <img src=\".\/images\/x_position.png\" alt=\"x_position\" \/> (this can be dragged from the \"Motion\" category as well), and y to <img src=\".\/images\/y_position.png\" alt=\"y_position\" \/> + 100. (You will need to add a <img src=\".\/images\/()_+_().png\" alt=\"()_+_()\" \/> block to achieve the plus function.) This will make the rat climb 100 units over half a second each time the player makes it flap.<\/li>                <\/ol>            <\/li>            <li>Run the Exercise again and play for a bit. Observe how our simple recreation of this Tight Concept (navigating through a repeating pipe) is all that is needed for the basic gameplay, and it's already kind of fun!<\/li>\u0009\u0009<\/ol>\u0009\u0009<p><\/p>\u0009\u0009<h1>Optimizing Ratty Flap<\/h1>\u0009\u0009\u0009<p>Next, we will experiment with the variables in the code you just created to determine how each one affects the game.<\/p>\u0009\u0009\u0009<p><\/p>\u0009\u0009\u0009<h2>Size of the Top Pipe<\/h2>\u0009\u0009\u0009<p>First, let's experiment with the NextTopPipePositionY variable.  First, let's think about what this variable means.  Imagine that there is a graph paper grid placed on top of the game.  The exact center of the screen would be the origin, (0,0).  Setting NextTopPipePositionY to 275 means that the next top pipe will come down to a line that is 275 units above the x-axis.\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009<li>Make the NextTopPipePositionY value smaller.  What effect does this have on the Top Pipe?<\/li>\u0009\u0009\u0009\u0009<li>Make the NextTopPipePositionY value larger.  What effect does this have on the Top Pipe?<\/li>\u0009\u0009\u0009\u0009<li>What happens if you set the NextTopPipePositionY value to 0?  Why does this happen?<\/li>\u0009\u0009\u0009\u0009<li>What happens if you set the NextTopPipePositionY value to a negative number?  Why does this happen?<\/li>\u0009\u0009\u0009<\/ol><\/p>\u0009\u0009\u0009<p><\/p>\u0009\u0009\u0009<h2>Size of the Bottom Pipe<\/h2>\u0009\u0009\u0009<p>Next, we will repeat the process with the NextBottomPipePositionY.  Again, pause to think about the starting position:  NextTopPipePositionY-500.  This means that the bottom pipe will start 500 units below the top pipe.\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009<li>Make the NextBottomPipePositionY value smaller.  What effect does this have on the Bottom Pipe?  Why is this different than the effect of changing the value of the NextTopPipePositionY?<\/li>\u0009\u0009\u0009\u0009<li>Make the NextBottomPipePositionY value larger.  What effect does this have on the Bottom Pipe?<\/li>\u0009\u0009\u0009\u0009<li>What happens if you set the NextBottomPipePositionY value equal to 0? Why does this happen?<\/li>\u0009\u0009\u0009\u0009<li>What happens if you make the NextBottomPipePositionY value negative?  Why?<\/li>\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009<\/p>\u0009\u0009\u0009<p><\/p>\u0009\u0009\u0009<p>Play around with different heights for the Top and Bottom pipes until you find one that provides what you believe to be the perfect amount of challenge.<\/p>\u0009\u0009\u0009<p><\/p>\u0009\u0009\u0009<h2>Distance between Pipes<\/h2>\u0009\u0009\u0009<p>Next, let's figure out what happens when we change the \"wait\" variable at the end of Focus Area 1.  The wait time is currently set to 3 seconds.\u0009\u0009\u0009<ol><li>What happens if you increase the wait time?<\/li>\u0009\u0009\u0009\u0009<li>What happens if you decrease the wait time?<\/li>\u0009\u0009\u0009\u0009<li>What happens if you make the wait time 0? Why?<\/li>\u0009\u0009\u0009\u0009<li>What happens if you make the wait time negative? Why?<\/li>\u0009\u0009\u0009\u0009<li>What wait time do you feel provides the optimal level of challenge?<\/li><\/ol><\/p>\u0009\u0009\u0009<p><\/p>\u0009\u0009\u0009<h2>Simulating Gravity<\/h2>\u0009\u0009\u0009<p>Now let's think about gravity.\u0009\u0009\u0009<ol><li>We initially set gravity to -9.8.  Why 9.8?  Why is it negative?<\/li>\u0009\u0009\u0009\u0009<li>What happens if you increase the gravitational force?  (Pause for mathematical thought:  increasing the gravitational force requires decreasing the value of the variable.)<\/li>\u0009\u0009\u0009\u0009<li>What happens if you decrease the gravitational force?<\/li>\u0009\u0009\u0009\u0009<li>What happens if you set gravity to 0?<\/li>\u0009\u0009\u0009\u0009<li>What happens if you set the value of gravity to a positive number?  Why?<\/li>\u0009\u0009\u0009\u0009<li>Look up the gravitational force on several other planets in our solar system and simulate them using Ratty Flap.  Which planet creates the most fun game?<\/li><\/ol><\/p>\u0009\u0009\u0009<p><\/p>\u0009\u0009\u0009<h2>Ratty's Flight<\/h2>\u0009\u0009\u0009<p>A real key to the enjoyability of the Ratty Flap game is the flying motion of the rat.  You set this up in Focus Area 3, under the Rat sprite.  The rat's flight is achieved by two variables:  glide time and change in y-position.<\/p>\u0009\u0009\u0009<p><b>Glide Time<\/b>\u0009\u0009\u0009Let's examine glide time first.<\/p>\u0009\u0009\u0009\u0009<ol><li>What happens if you decrease the glide time?<\/li>\u0009\u0009\u0009\u0009\u0009<li>What happens if you increase the glide time?<\/li>\u0009\u0009\u0009\u0009\u0009<li>Are there some glide times that are just too short or too long, to the point where they make it almost impossible to play the game?  Based upon this, can you come up with a range of acceptable glide time values that allow for reasonable game play?<\/li><\/ol>\u0009\u0009\u0009<p><\/p>\u0009\u0009\u0009<p><b>y-position<\/b>\u0009\u0009\u0009\u0009Finally, let's look at what's happening to the rat's y-position as he flies.  The initial value in Focus Area 3 is set to y-position+100.<\/p>\u0009\u0009\u0009\u0009<ol><li>What does the 100 mean in this expression?<\/li>\u0009\u0009\u0009\u0009\u0009<li>What happens if you decrease the variable?<\/li>\u0009\u0009\u0009\u0009\u0009<li>What happens if you increase the variable?<\/li>\u0009\u0009\u0009\u0009\u0009<li>What happens if you set the variable to 0? Why?<\/li>\u0009\u0009\u0009\u0009\u0009<li>What happens if you make the variable negative?  Why?<\/li>\u0009\u0009\u0009\u0009\u0009<li>Are there some values that are so low or so high that they make it virtually impossible to play the game?  Can you determine an acceptable range for this variable?<\/li><\/ol>\u0009\u0009\u0009<p><\/p>\u0009\u0009\u0009<h2>The Joy of Randomization<\/h2>\u0009\u0009\u0009<p>Now you have a fairly optimized game that's fun to play.  That means it's time to think about adjusting the difficulty to fit our audience. Let's add a new feature to our game:  randomizing the size of the gap between top and bottom pipes.                <ol>                    <li>Locate <em>Focus Area 1<\/em> in the <em>Stage<\/em>.<\/li>                     <li>Replace the value 275 with a <img src=\".\/images\/pick_random_()_to_().png\" alt=\"pick_random_()_to_()\" \/> piece. Set the initial range at 250 to 350.<\/li>                    <li>Play the game.  Notice how the pipes are now at random heights.<\/li>\u0009\u0009\u0009\u0009\u0009<li>What happens if you make the range smaller?  (Note:  this doesn't mean making the actual numbers smaller, it means making them closer together.  For example, 250-300 has a range of 50, but 250-350 has a range of 100.  The first range is smaller.)<\/li>\u0009\u0009\u0009\u0009\u0009<li>What happens if you make the range larger?<\/li>\u0009\u0009\u0009\u0009\u0009<li>What happens if you keep a range of 100, but increase both variables (i.e. 350-450)?<\/li>\u0009\u0009\u0009\u0009\u0009<li>What happens if you keep a range of 100, but decrease both variables (i.e. 150-250)?<\/li>\u0009\u0009\u0009\u0009\u0009<li>Now let's think about how all these changes affect the difficulty of the game.  Can you define ranges that create beginner, intermediate, and advanced play?<\/li>                <\/ol><\/p>\u0009\u0009\u0009<p><\/p>\u0009\u0009\u0009<h2>Optimizing the Game<\/h2>\u0009\u0009\u0009<p>Alright, now it's time to put everything together.  There are many adjustments you can make that affect the difficulty of this game:  the height of the pipes, the spacing between them, gravity, and the way the rat flies.  Let's adjust these values for a target audience.\u0009\u0009\u0009<ol><li>First, decide who your target audience will be.  It must be someone besides yourself, because you will be running some user tests.  Also, try to be general so that you can test on multiple users (for example, \"seven-year-olds\" instead of \"my little brother\").<\/li>\u0009\u0009\u0009\u0009<li>Adjust the game parameters to best fit your audience.  Write down what you chose for each variable and why.<\/li>\u0009\u0009\u0009\u0009<li>Conduct user testing:  have people in your target audience play the game and give you feedback.<\/li>\u0009\u0009\u0009\u0009<li>Adjust the game again based upon the user feedback.  Try to make it even better for your target audience.<\/li>\u0009\u0009\u0009\u0009<li>Repeat until you feel you have optimized the game for your audience.<\/li><\/ol><\/p>\u0009\u0009\u0009<p><\/p>\u0009\u0009\u0009<h2>Share Your Results<\/h2>\u0009\u0009\u0009<p>Prepare your report.  You can either write a paper, make a video, or prepare a presentation.  No matter what form you choose, your final product must address the following:\u0009\u0009\u0009<ol><li>Describe your target audience.<\/li>\u0009\u0009\u0009\u0009<li>Describe the settings you chose for each of the following variables and how you optimized them for your target audience:\u0009\u0009\u0009\u0009\u0009<ol type=\"a\"><li>NextTopPipePositionY<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<li>NextBottomPipePositionY<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<li>wait time<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<li>gravity<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<li>glide time<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<li>glide y-position change<\/li><\/ol><\/li>\u0009\u0009\u0009\u0009<li>Describe how you conducted your user testing and the feedback you received.<\/li>\u0009\u0009\u0009\u0009<li>Describe how you used the feedback to improve your game.<\/li>\u0009\u0009\u0009\u0009<li>Provide a current status of your game.  Is it completely optimized for your audience, or did you run out of time?  If it is completely optimized, how do you know?  If it not yet completely optimized, what would you do next if you had more time?<\/li><\/ol><\/p>\u0009\u0009\u0009<p><\/p>\u0009\u0009\u0009<h2>Challenge Quest<\/h2>  \u0009\u0009\u0009<p>Figure out how to adjust the scores at which players earn bronze, silver, and gold medals.  Then include this variable in your optimization for your target audience.<\/p>        <p><\/p>        <!--page:~~commondesign-gamestack-exercise~~-->","link":null,"mod":"common-design-theories","movie":null,"name":"commondesign-gamestack-exercise","promptfile":null,"prompts":null,"reference":null,"text":null,"title":"Game Stack Exercise"},{"bIsChecked":true,"exercise":"","instructions":"<h1>Goal<\/h1><p>Demonstrate understanding of common design theories by de-constructing game design elements from the Game Stack game, Ratty Flap.<\/p><h1>Steps<\/h1><ol><li>Open the Common Design Theories Module Game Stack exercise and download Ratty Flap.<\/li><li>Write a brief paragraph on each of the following topics:<ol><li>In Ratty Flap, what mechanics determine balance?<\/li><li>In what ways can the game's difficulty be adjusted?<\/li><li>In what ways can the game's fairness be adjusted?<\/li><li>In what ways can the game's pacing be adjusted?<\/li><li>What are two purely creative elements that make the game fun?<\/li><\/ol><\/li><li>Be prepared to discuss your answers with your instructor or the class.<\/li><\/ol><h1>Hints and Challenges<\/h1><p>When describing what makes the game fun, consider more than just mechanics. Do sound and graphics contribute to the overall experience of the game? How about color schemes and user interface?<\/p><!--page:~~common-design-theories-writing-exercise~~-->","link":null,"mod":"common-design-theories","movie":null,"name":"common-design-theories-writing-exercise","promptfile":null,"prompts":null,"reference":null,"text":null,"title":"Writing Exercise"}]}],"title":"Implementing Game Design"},{"bIsChecked":true,"description":"Get an overview of Game Development careers and an introduction to legal issues and ethics in video games.","image":"ethicscontrac3t.png","modules":[{"bIsChecked":true,"name":"careers-in-game-development","title":"Game Development Careers","topics":[{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":null,"movie":".\/video\/Course2-introduction-careers-in-game-development-CareersInGameDevelopment_Overview.mp4","name":"Overview","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"programmer"},{"order":0,"points":100,"sticky":false,"text":"game designer"},{"order":0,"points":0,"sticky":false,"text":"Q.A. tester"},{"order":0,"points":0,"sticky":false,"text":"artist"}],"failure":{"button":null,"message":"The game designer is typically responsible for writing the game's Game Design Document. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn1-careers-overview-all-micro-1","number_of_choices":4,"question":"It is the job of the _____ to imagine the game and communicate their design to the development team. ","start":3600,"success":{"button":null,"message":"The game designer is typically responsible for writing the game's Game Design Document. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"producer"},{"order":0,"points":0,"sticky":false,"text":"game designer"},{"order":0,"points":100,"sticky":false,"text":"Q.A. tester"},{"order":0,"points":0,"sticky":false,"text":"studio director"}],"failure":{"button":null,"message":"Q.A. testers are a vital component throughout the development process."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn2-careers-overview-all-micro-1","number_of_choices":4,"question":"It is the job of the _____ to insure the game is playable and without glitches and errors. ","start":3600,"success":{"button":null,"message":"Q.A. testers are a vital component throughout the development process."},"type":"Multiple"},{"choices":[{"order":0,"points":100,"sticky":false,"text":"programmer"},{"order":0,"points":0,"sticky":false,"text":"game designer"},{"order":0,"points":0,"sticky":false,"text":"Q.A. tester"},{"order":0,"points":0,"sticky":false,"text":"artist"}],"failure":{"button":null,"message":"Programmers write the code that make video games possible!"},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn3-careers-overview-all-micro-1","number_of_choices":4,"question":"It is the job of the _____ to build the logic of the game and make it functional. ","start":3600,"success":{"button":null,"message":"Programmers write the code that make video games possible!"},"type":"Multiple"}],"reference":"careers-in-game-development-1","text":null,"title":"Overview"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"role-designer","mod":null,"movie":".\/video\/Course2-careers-in-game-development-Scene_GameDesigner.mp4","name":"Game Designer","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"Imagining the concept of a game"},{"order":0,"points":0,"sticky":false,"text":"Creating music for a game"},{"order":0,"points":0,"sticky":false,"text":"Programming a game"},{"order":0,"points":0,"sticky":false,"text":"Marketing"}],"failure":{"button":null,"message":"Game designers with programming skills are in high demand in the video game industry."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn4-careers-gamedesigner-micro-2","number_of_choices":4,"question":"Which of the following is a typical role of a game designer?","start":3600,"success":{"button":null,"message":"Game designers with programming skills are in high demand in the video game industry."},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Sound design"},{"order":0,"points":0,"sticky":false,"text":"Marketing "},{"order":0,"points":100,"sticky":false,"text":"Playing video games"},{"order":0,"points":0,"sticky":false,"text":"Upper management "}],"failure":{"button":null,"message":"Game designer who don't play games lack credibility. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn5-careers-gamedesigner-micro-2","number_of_choices":4,"question":"Which of the following is a typical background of a game designer?","start":3600,"success":{"button":null,"message":"Game designer who don't play games lack credibility. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"A degree in mathematics "},{"order":0,"points":0,"sticky":false,"text":"Management experience  "},{"order":0,"points":100,"sticky":false,"text":"Good writing skills"},{"order":0,"points":0,"sticky":false,"text":"Marketing skills "}],"failure":{"button":null,"message":"Game designers will be required to do extensive writing. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn6-careers-gamedesigner-micro-2","number_of_choices":4,"question":"Which of the following is typically a requirement to be a game designer in the video game industry?","start":3600,"success":{"button":null,"message":"Game designers will be required to do extensive writing. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Computer science "},{"order":0,"points":0,"sticky":false,"text":"Creative writing  "},{"order":0,"points":0,"sticky":false,"text":"A college degree"},{"order":21,"points":100,"sticky":false,"text":"All of the above "}],"failure":{"button":null,"message":"Game designers acquire a mixture of technical and creative skills from their education. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn7-careers-gamedesigner-micro-2","number_of_choices":4,"question":"A game designer's education will typically include ____.","start":3600,"success":{"button":null,"message":"Game designers acquire a mixture of technical and creative skills from their education. "},"type":"Multiple"}],"reference":"careers-in-game-development-2","text":null,"title":"Game Designers"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"role-programmer","mod":null,"movie":".\/video\/Course2-careers-in-game-development-Scene_Programmer.mp4","name":"Game Programmer","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"Ensuring software functionality "},{"order":0,"points":0,"sticky":false,"text":"Marketing and public relations "},{"order":0,"points":0,"sticky":false,"text":"Project management"},{"order":0,"points":0,"sticky":false,"text":"Creating the Game Design Document "}],"failure":{"button":null,"message":"Programmers write all the code or use game engines to brings video games to life. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn8-careers-programmer-micro-3","number_of_choices":4,"question":"Which of the following is a typical role of a game programmer?","start":3600,"success":{"button":null,"message":"Programmers write all the code or use game engines to brings video games to life. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Creative writing"},{"order":0,"points":0,"sticky":false,"text":"Art"},{"order":0,"points":0,"sticky":false,"text":"Management"},{"order":0,"points":100,"sticky":false,"text":"Computer knowledge"}],"failure":{"button":null,"message":"Most programmers have used computers from a young age.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn9-careers-programmer-micro-3","number_of_choices":4,"question":"Which of the following is a typical background of a game programmer?","start":3600,"success":{"button":null,"message":"Most programmers have used computers from a young age.  "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Ten years of experience "},{"order":0,"points":100,"sticky":false,"text":"Proficiency in at least one scripting language"},{"order":0,"points":0,"sticky":false,"text":"A Master's degree in business"},{"order":21,"points":0,"sticky":false,"text":"All of the above"}],"failure":{"button":null,"message":"Competent programming skills in a current scripting language is a must to work in the video game industry as a programmer. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn10-careers-programmer-micro-3","number_of_choices":4,"question":"Which of the following is typically a requirement to be a programmer in the video game industry?","start":3600,"success":{"button":null,"message":"Competent programming skills in a current scripting language is a must to work in the video game industry as a programmer. "},"type":"Multiple"},{"choices":[{"order":0,"points":100,"sticky":false,"text":"Computer Science  "},{"order":0,"points":0,"sticky":false,"text":"Economics"},{"order":0,"points":0,"sticky":false,"text":"A Bachelor of Arts degree"},{"order":21,"points":0,"sticky":false,"text":"None of the above"}],"failure":{"button":null,"message":"Schools and universities are rapidly increasing their computer science departments to keep up with the need for programmers."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn11-careers-programmer-micro-3","number_of_choices":4,"question":"A game programmer's education will typically include ____.","start":3600,"success":{"button":null,"message":"Schools and universities are rapidly increasing their computer science departments to keep up with the need for programmers."},"type":"Multiple"}],"reference":"careers-in-game-development-3","text":null,"title":"Game Programmers"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"role-designer","mod":null,"movie":".\/video\/Course2-careers-in-game-development-Scene_Artist.mp4","name":"Game Artist","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"Programming"},{"order":0,"points":100,"sticky":false,"text":"3D imaging "},{"order":0,"points":0,"sticky":false,"text":"Sound engineering "},{"order":0,"points":0,"sticky":false,"text":"Creating a Game Design Document"}],"failure":{"button":null,"message":"Video game artists are typically very diverse in their talents, encompasing storyboarding, 2D art, 3D art, animations, and more. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn12-careers-artist-micro-4","number_of_choices":4,"question":"Which of the following could be a typical role of a game artist?","start":3600,"success":{"button":null,"message":"Video game artists are typically very diverse in their talents, encompasing storyboarding, 2D art, 3D art, animations, and more. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Theater"},{"order":0,"points":0,"sticky":false,"text":"Sports"},{"order":0,"points":100,"sticky":false,"text":"Art appreciation"},{"order":21,"points":0,"sticky":false,"text":"None of the above"}],"failure":{"button":null,"message":"Artists are often exposed to art and art museums at an early age. For many game artists that early exposure to art came from cartoons, comics, and video games!"},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn13-careers-artist-micro-4","number_of_choices":4,"question":"Which of the following is a typical background of a game artist?","start":3600,"success":{"button":null,"message":"Artists are often exposed to art and art museums at an early age. For many game artists that early exposure to art came from cartoons, comics, and video games!"},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Fundamental writing skills "},{"order":0,"points":100,"sticky":false,"text":"A terrific art portfolio"},{"order":0,"points":0,"sticky":false,"text":"Management experience"},{"order":0,"points":0,"sticky":false,"text":"Fundamental programming skills"}],"failure":{"button":null,"message":"Most employers seeking artists will expect to see an art portfolio before granting an interview. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn14-careers-artist-micro-4","number_of_choices":4,"question":"Which of the following is typically a requirement to be an artist in the video game industry?","start":3600,"success":{"button":null,"message":"Most employers seeking artists will expect to see an art portfolio before granting an interview. "},"type":"Multiple"},{"choices":[{"order":0,"points":100,"sticky":false,"text":"Dedicated art training"},{"order":0,"points":0,"sticky":false,"text":"A Masters degree"},{"order":0,"points":0,"sticky":false,"text":"A business degree"},{"order":21,"points":0,"sticky":false,"text":"All of the above"}],"failure":{"button":null,"message":"Creating great art takes training and lots of practice. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn15-careers-artist-micro-4","number_of_choices":4,"question":"A game artist's education will typically include ____.","start":3600,"success":{"button":null,"message":"Creating great art takes training and lots of practice. "},"type":"Multiple"}],"reference":"careers-in-game-development-4","text":null,"title":"Game Artists"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"role-tester","mod":"careers","movie":".\/video\/Course2-careers-in-game-development-Scene_QATester.mp4","name":"QA Tester","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"Testing compatibility "},{"order":0,"points":0,"sticky":false,"text":"Discovering 'bugs'"},{"order":0,"points":0,"sticky":false,"text":"Documenting glitches "},{"order":21,"points":100,"sticky":false,"text":"All of the above"}],"failure":{"button":null,"message":"QA testers are the last line of defense for a game to discover, document and fix bugs and compatibility issues. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn16-careers-qatester-micro-5","number_of_choices":4,"question":"Which of the following is a typical role of a QA tester?","start":3600,"success":{"button":null,"message":"QA testers are the last line of defense for a game to discover, document and fix bugs and compatibility issues. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Beta testing"},{"order":0,"points":0,"sticky":false,"text":"Exploiting glitches"},{"order":0,"points":0,"sticky":false,"text":"Organizational obsession "},{"order":21,"points":100,"sticky":false,"text":"All of the above"}],"failure":{"button":null,"message":"QA testers are typically meticulous in their approach to tasks, such as beta testing and breaking games. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn17-careers-qatester-micro-5","number_of_choices":4,"question":"Which of the following is a typical background of a QA tester?","start":3600,"success":{"button":null,"message":"QA testers are typically meticulous in their approach to tasks, such as beta testing and breaking games. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Experience in beta testing"},{"order":0,"points":0,"sticky":false,"text":"Excellent writing skills "},{"order":0,"points":0,"sticky":false,"text":"Meticulous documentation skills"},{"order":21,"points":100,"sticky":false,"text":"All of the above "}],"failure":{"button":null,"message":"QA testers becomes experts through experience and developed writing and documentation skills. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn18-careers-qatester-micro-5","number_of_choices":4,"question":"Which of the following is typically a requirement to be a QA tester in the video game industry?","start":3600,"success":{"button":null,"message":"QA testers becomes experts through experience and developed writing and documentation skills. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Computer Science "},{"order":0,"points":0,"sticky":false,"text":"Practical experience "},{"order":0,"points":0,"sticky":false,"text":"Game knowledge"},{"order":21,"points":100,"sticky":false,"text":"All of the above"}],"failure":{"button":null,"message":"QA testers can have various degrees of formal education but typically share an abundance of practical experience and computer science skills. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn19-careers-qatester-micro-5","number_of_choices":4,"question":"A QA tester's education will typically include ____.","start":3600,"success":{"button":null,"message":"QA testers can have various degrees of formal education but typically share an abundance of practical experience and computer science skills. "},"type":"Multiple"}],"reference":"careers-in-game-development-5","text":null,"title":"Quality Assurance Testers"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"role-producer","mod":null,"movie":".\/video\/Course2-careers-in-game-development-Scene_Producer.mp4","name":"Producers","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"Responsibility for the final product"},{"order":0,"points":0,"sticky":false,"text":"Upper management"},{"order":0,"points":0,"sticky":false,"text":"Project scheduling"},{"order":21,"points":100,"sticky":false,"text":"All of the above"}],"failure":{"button":null,"message":"Producers typically hold the highest level management and responsibility in a game studio. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn20-careers-producer-micro-6","number_of_choices":4,"question":"Which of the following is a typical role of a game producer?","start":3600,"success":{"button":null,"message":"Producers typically hold the highest level management and responsibility in a game studio. "},"type":"Multiple"},{"choices":[{"order":0,"points":100,"sticky":false,"text":"Demonstrated leadership"},{"order":0,"points":0,"sticky":false,"text":"Former game designer"},{"order":0,"points":0,"sticky":false,"text":"CEO of a Fortune 500 company"},{"order":21,"points":0,"sticky":false,"text":"All of the above "}],"failure":{"button":null,"message":"Producers often have a background of successful management in other projects. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn21-careers-producer-micro-6","number_of_choices":4,"question":"Which of the following is a typical background of a game producer?","start":3600,"success":{"button":null,"message":"Producers often have a background of successful management in other projects. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Fundamental programming skills"},{"order":0,"points":100,"sticky":false,"text":"Prior experience as a producer"},{"order":0,"points":0,"sticky":false,"text":"A Master's degree in Economics"},{"order":0,"points":0,"sticky":false,"text":"Art appreciation "}],"failure":{"button":null,"message":"Typically a video game producer has shared co-producer credits on previous projects before going solo.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn23-careers-producer-micro-6","number_of_choices":4,"question":"Which of the following is typically a requirement to be a game producer in the video game industry?","start":3600,"success":{"button":null,"message":"Typically a video game producer has shared co-producer credits on previous projects before going solo.  "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Computer Science "},{"order":0,"points":0,"sticky":false,"text":"Leadership training "},{"order":0,"points":0,"sticky":false,"text":"Business background"},{"order":21,"points":100,"sticky":false,"text":"All of the above "}],"failure":{"button":null,"message":"In today's video game industry, producers must have not only leadership skills, but a focus on business and an understanding of technology. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn24-careers-producer-micro-6","number_of_choices":4,"question":"A game producer's education will typically include ____.","start":3600,"success":{"button":null,"message":"In today's video game industry, producers must have not only leadership skills, but a focus on business and an understanding of technology. "},"type":"Multiple"}],"reference":"careers-in-game-development-6","text":null,"title":"Producers"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"role-director","mod":null,"movie":".\/video\/Course2-careers-in-game-development-Scene_Director.mp4","name":"Studio Director","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"Leadership "},{"order":0,"points":0,"sticky":false,"text":"Sound Engineering "},{"order":0,"points":0,"sticky":false,"text":"QA testing"},{"order":21,"points":0,"sticky":false,"text":"All of the above"}],"failure":{"button":null,"message":"Leadership is a skill that all Studio Directers are required to have. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn25-careers-studiodirector-micro-7","number_of_choices":4,"question":"Which of the following is a typical role of a studio director?","start":3600,"success":{"button":null,"message":"Leadership is a skill that all Studio Directers are required to have. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Art appreciation"},{"order":0,"points":0,"sticky":false,"text":"Exposure to digital art technology"},{"order":0,"points":0,"sticky":false,"text":"Leadership experience "},{"order":21,"points":100,"sticky":false,"text":"All of the above "}],"failure":{"button":null,"message":"Art directors were usually members of other art teams, where they gained knowledge and experience. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn26-careers-studiodirector-micro-7","number_of_choices":4,"question":"Which of the following is a typical background of an art director?","start":3600,"success":{"button":null,"message":"Art directors were usually members of other art teams, where they gained knowledge and experience. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Prior success in upper management"},{"order":0,"points":0,"sticky":false,"text":"Computer Science "},{"order":0,"points":0,"sticky":false,"text":"Proven leadership"},{"order":21,"points":100,"sticky":false,"text":"All of the above "}],"failure":{"button":null,"message":"Studio directors represent the most experienced of their fields of expertise. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn27-careers-studiodirector-micro-7","number_of_choices":4,"question":"Which of the following is typically a requirement to be a studio director in the video game industry?","start":3600,"success":{"button":null,"message":"Studio directors represent the most experienced of their fields of expertise. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"A high school degree"},{"order":0,"points":0,"sticky":false,"text":"A Bachelor's degree"},{"order":0,"points":100,"sticky":false,"text":"A Master's degree "},{"order":0,"points":0,"sticky":false,"text":"A Doctorate of Philosophy "}],"failure":{"button":null,"message":"Many studio directors gain their credentials through universities and higher education.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn28-careers-studiodirector-micro-7","number_of_choices":4,"question":"A studio director's education will typically go as high as ____.","start":3600,"success":{"button":null,"message":"Many studio directors gain their credentials through universities and higher education.  "},"type":"Multiple"}],"reference":"careers-in-game-development-7","text":null,"title":"Game Studio Directors"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"role-support","mod":null,"movie":".\/video\/Course2-careers-in-game-development-Scene_SupportRoles.mp4","name":"Supporting Roles","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"Studio director"},{"order":0,"points":0,"sticky":false,"text":"Senior programmer"},{"order":0,"points":100,"sticky":false,"text":"Technical support specialist "},{"order":0,"points":0,"sticky":false,"text":"Producer"}],"failure":{"button":null,"message":"Technical support specialists are required to work with customers and so need social skills as well as technical. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn29-careers-supportingroles-micro-8","number_of_choices":4,"question":"Which of the following is more likely to be an entry-level position in the video game industry?","start":3600,"success":{"button":null,"message":"Technical support specialists are required to work with customers and so need social skills as well as technical. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Technical support specialist"},{"order":0,"points":0,"sticky":false,"text":"QA tester"},{"order":0,"points":100,"sticky":false,"text":"Market research analyst"},{"order":0,"points":0,"sticky":false,"text":"Localization translator "}],"failure":{"button":null,"message":"This position is hired in the pre-production stage of development."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn30-careers-supportingroles-micro-8 ","number_of_choices":4,"question":"It is the responsibility of the _____ to research and identify a target audience for a game. ","start":3600,"success":{"button":null,"message":"This position is hired in the pre-production stage of development."},"type":"Multiple"},{"choices":[{"order":0,"points":100,"sticky":false,"text":"Marketing manager"},{"order":0,"points":0,"sticky":false,"text":"Sound Engineer"},{"order":0,"points":0,"sticky":false,"text":"Composer "},{"order":0,"points":0,"sticky":false,"text":"Market research analyst "}],"failure":{"button":null,"message":"Often a marketing research analyst will take on the role of the marketing manager, as well. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn31-careers-supportingroles-micro-8","number_of_choices":4,"question":"It is the responsibility of the _____ to promote a game to the public.","start":3600,"success":{"button":null,"message":"Often a marketing research analyst will take on the role of the marketing manager, as well. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"make games playable on different platforms "},{"order":0,"points":0,"sticky":false,"text":"make games suitable for all ages "},{"order":0,"points":100,"sticky":false,"text":"translate games to different languages "},{"order":0,"points":0,"sticky":false,"text":"help customers with technical issues"}],"failure":{"button":null,"message":"Localization basically means making a game understandable in different world locations. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn32-careers-supportingroles-micro-8","number_of_choices":4,"question":"The purpose of localization is to _____.","start":3600,"success":{"button":null,"message":"Localization basically means making a game understandable in different world locations. "},"type":"Multiple"}],"reference":"careers-in-game-development-8","text":null,"title":"Supporting Roles"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"indie-developer","mod":null,"movie":".\/video\/Course2-careers-in-game-development-Scene_IndieDeveloper.mp4","name":"Indie Developer","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"Vast development capital"},{"order":0,"points":100,"sticky":false,"text":"\"Do It Yourself\" attitude"},{"order":0,"points":0,"sticky":false,"text":"Hundreds of employees"},{"order":21,"points":0,"sticky":false,"text":"All of the above"}],"failure":{"button":null,"message":"Without vast amounts of labor and capital, independent studios must do more with less. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn33-careers-indiedev-micro-9","number_of_choices":4,"question":"Which of the following is typical of an independent developer?","start":3600,"success":{"button":null,"message":"Without vast amounts of labor and capital, independent studios must do more with less. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Producer "},{"order":0,"points":0,"sticky":false,"text":"Programmer"},{"order":0,"points":0,"sticky":false,"text":"Game designer"},{"order":21,"points":100,"sticky":false,"text":"All of the above"}],"failure":{"button":null,"message":"At minimum, someone will need to fulfill the roles of programmer, producer, and game designer to produce a game on the market.   "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn34-careers-indiedev-micro-9","number_of_choices":4,"question":"Which of the following are required roles for an indie studio.","start":3600,"success":{"button":null,"message":"At minimum, someone will need to fulfill the roles of programmer, producer, and game designer to produce a game on the market.   "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"An accountant  "},{"order":0,"points":0,"sticky":false,"text":"A human relations department "},{"order":0,"points":0,"sticky":false,"text":"Studio design"},{"order":0,"points":100,"sticky":false,"text":"Time  "}],"failure":{"button":null,"message":"Time is an independent studio's most valuable asset. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn35-careers-indiedev-micro-9","number_of_choices":4,"question":"Without much money or vast personnel, the most important consideration for an independent studio is _____.","start":3600,"success":{"button":null,"message":"Time is an independent studio's most valuable asset. "},"type":"Multiple"},{"choices":[{"order":0,"points":100,"sticky":false,"text":"digital downloads"},{"order":0,"points":0,"sticky":false,"text":"Intellectual property licenses "},{"order":0,"points":0,"sticky":false,"text":"multi-million dollar development budgets"},{"order":0,"points":0,"sticky":false,"text":"Multi-million dollar marketing campaigns "}],"failure":{"button":null,"message":"Being able to skip most manufacturing and distribution costs via digital downloads online play has been key to indie developers gaining profitability in the industry.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn36-careers-indiedev-micro-9","number_of_choices":4,"question":"Indie studios have thrived in recent years in part due to _____.","start":3600,"success":{"button":null,"message":"Being able to skip most manufacturing and distribution costs via digital downloads online play has been key to indie developers gaining profitability in the industry.  "},"type":"Multiple"}],"reference":"careers-in-game-development-9","text":null,"title":"Indie Developer"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"reference","mod":"careers","movie":null,"name":"Reference","promptfile":null,"prompts":null,"reference":null,"text":"<a id=\"careers-in-game-development-1\" class=\"dest\"><\/a><div class=\"accent\"><h1>Overview<\/h1><p>Video game development is a multi-billion dollar industry and a popular career path. Many kids grow up dreaming of being an athlete, actor, or singer; a new generation is growing up wanting to make video games as a profession. Similar to other entertainment industries, developing a video game requires individuals that specialize in various creative, management, and technical positions. As we go through each career path, we will examine the background requirements, competition, and salary expectations for a number of common positions in game development. Specifically we will cover the following Topics in the Careers in Game Development Module:<\/p><div style=\"text-align: center;\"><ul class=\"anchorGroup\" style=\"text-align: left; display: inline-block;\"><li><a class=\"ankor\" href=\"#careers-in-game-development-2\">Role of a Game Designer<\/a><\/li><li><a class=\"ankor\" href=\"#careers-in-game-development-3\">Role of a Video Game Programmer<\/a><\/li><li><a class=\"ankor\" href=\"#careers-in-game-development-4\">Role of a Video Game Artist<\/a><\/li><li><a class=\"ankor\" href=\"#careers-in-game-development-5\">Role of a QA Tester<\/a><\/li><li><a class=\"ankor\" href=\"#careers-in-game-development-6\">Role of a Video Game Producer<\/a><\/li><li><a class=\"ankor\" href=\"#careers-in-game-development-7\">Role of a Video Game Studio Director<\/a><\/li><li><a class=\"ankor\" href=\"#careers-in-game-development-8\">Supporting Roles in the Video Game Industry<\/a><\/li><li><a class=\"ankor\" href=\"#careers-in-game-development-9\">The Independent Developer<\/a><\/li><\/ul><\/div><\/div><a id=\"careers-in-game-development-2\" class=\"dest\"><\/a>&nbsp;<div class=\"accent\"><h1>The Role of a Game Designer<\/h1><img class=\"aligncenter\" src=\".\/images\/image_designer1.png\" alt=\"image_designer\" width=\"627\" height=\"433\" \/><p>When most people dream about making their mark in the video game industry, they usually imagine developing their own video game concept into a working game. The role that is responsible for conceiving and designing a game is called the Game Designer. This position is perhaps the most desired by those who love to play and develop video games.<\/p><h3>Role<\/h3><p>The role of the Game Designer is to conceive, document, and present the game in a Game Design Document (GDD). Senior Game Designers are responsible for the entire game design document, while other Game Designers might focus on smaller components of a game, such as specific level or character design.<\/p><h3>Background<\/h3><p>Game design requires a deep understanding of game mechanics and how they interact with story and character (see upcoming modules focusing on Story and Character). This experience initially comes from vast experience playing games (QA Testing is included here). However, a game designer must be more than a fan of playing games. What is more crucial is the ability to look beyond the screen and understand how the game interacts: both with the player and within the game itself. The best way to establish a game design career path is to play, design, and theorize about games from an early age. It is also a good idea to have at least some technical knowledge on how video games are actually made.<\/p><h3>Requirements<\/h3><p>Historically, Game Designers were often programmers. As things evolved, creative talent and technical talent have sort of split the position in some cases. This said, it has been possible for Game Designers to enter the field with only writing backgrounds. Typically the writer has demonstrated a successful career as a non-video game writer\/designer. This, however, is changing. Today, Game Designers are expected to have a broad set of skills including programming, understanding of software and hardware, mastery of plot and character, and of course, a grasp on fundamental and abstract game design. In addition, Game Designers with a firm understanding of visuals, such as UI design and art, will have an advantage.<\/p><h3>Education<\/h3><p>Although there are many schools with game design programs, many are still trying to understand the ever expanding core skills that a Game Designer must focus on. In all cases, Game Designers of the future are going to do better with an emphasis on programming in their education. College students will also want to include courses on creative writing, logic, and mathematics, particularly: trigonometry, linear algebra, calculus, and analytic geometry. Helpful majors include Computer Programming, Computer Science, and Visual Communications with an emphasis on computers.<\/p><h3>Entry Level Expectations<\/h3><p>Entry level Game Designer jobs are nearly non-existent. This is in part because it is the most popular position for people seeking to work in the video game industry. Like the movie star, it is often thought of as the \"glamour\" position in the industry. It is the perceived position where one can flex their creative muscle and envision something amazing that has never before been seen. Realistically, this position is going to someone who has a proven track record of quality storytelling or game mechanic design. More reasonable entry level Game Designer positions might include level designer, character designer, quest designer, effects designer, or scripter.<\/p><h3>Salary Expectations<\/h3><p>According to the International Game Developers Association, there are four basic pay models for Game Designers:<\/p><ul><li>Basic Game Designer<\/li><li>Lead Designer<\/li><li>Level Designer<\/li><li>Writer<\/li><\/ul><p>Game Designer positions typically start around $50,000\/year and can increase as far as $80,000. Senior game designers can make as much as $120,000 with a successful track record. \"Rock Star\" Game Designers, those famous for a previous and popular work, can earn much more.<\/p><\/div><a id=\"careers-in-game-development-3\" class=\"dest\"><\/a>&nbsp;<div class=\"accent\"><h1>The Role of a Video Game Programmer<\/h1><img class=\"aligncenter\" src=\".\/images\/image_programmer1.png\" alt=\"image_programmer\" width=\"627\" height=\"433\" \/><p>The foundation of any video game is programming. Here the complexities of writing code transforms design, art and story into an interactive experience we call video games. This is the work of the Programmer.<\/p><h3>Role<\/h3><p>A Programmer's job is to turn a Technical Design Document (TDD) into working code, and in turn, into a working game. They are responsible for the game functioning as designed and integrating all of the components such as art, UI, and game play.<\/p><h3>Background<\/h3><p>The best way to initiate a career as a Programmer is to simply start programming and learning how to write code. There are many free programs out there to get started just by searching the Internet. Many start with engines that require only scripts and slowly transition to writing actual code as they progress their skills and understanding.<\/p><h3>Requirements<\/h3><p>As stated, programming requires tremendous discipline, attention to detail, and focus. Starting early is the best way to develop the long-term skills that will be needed for a successful career as a Programmer. Fortunately, the Internet is full of resources to get started. Many will specialize in a particular focus or programming language, and in fact, this is a very smart path to take. Choose carefully, however, as these things change rapidly and often studios will have their own unique choices. Finally, having a good memory and the ability to think in abstract ways are incredibly helpful traits to have as a Programmer. The primary programming language of game development is C++; however, the entry positions are going to be more focused on scripting languages or languages that are appropriate for development tools such as C#. Lua is one of the most popular languages for game scripting. When you learn one language well, you can typically jump to other languages fairly easily<\/p><h3>Education<\/h3><p>Most entry level programming positions require, at a minimum, a bachelor's degree in computer science. Trade schools can also offer courses focused on programming. The truly competitive will have an advanced education with an undergraduate degree from a notable university. Math and science courses never hurt. That said, in the game industry, one can do pretty well if they can demonstrate exceptional work. For most, however, a college education is a good investment for a Programmer.<\/p><h3>Entry Level Expectations<\/h3><p>Programming is an excellent focus for obtaining entry level positions in the video game industry. Quality Programmers are always, and will always, be in high demand. Be prepared, studios will often want candidates to demonstrate their knowledge in a test given during the interview process.<\/p><h3>Salary Expectations<\/h3><p>According to Game Developer Magazine, Programmers command some of the most respectable salaries in the industry. The average entry level salary of a Programmer in the video game industry is around $50,000\/year. Experienced video game Programmers can easily command upwards of $90,000\/year.<\/p><\/div><a id=\"careers-in-game-development-4\" class=\"dest\"><\/a>&nbsp;<div class=\"accent\"><h1>The Role of a Video Game Artist<\/h1><img class=\"aligncenter\" src=\".\/images\/image_artist1.png\" alt=\"image_artist\" width=\"627\" height=\"433\" \/><p>Video games are largely a visual medium. Though once game art was extremely limited, today's games allow near photo-realistic images. It is the duty of the video game Artist to create the look and feel of all visuals in a game including colors, textures and the overall art style of the project.<\/p><h3>Role<\/h3><p>Artists play a critical role in developing the look of a game. In industry terms, Artists can specialize in different categories of game artist, such as: concept artist, texture artist, character artist, background artist, environmental artist, and more. Artists may also branch out to 3D modeling and animation.<\/p><h3>Background<\/h3><p>For Artists desiring a career in video games, it is a smart idea to start painting digitally as early as possible. Video game Artists today also must master the Wacom tablet and Photoshop (or their equivalents) long before their first job as a working video game artist. It is also a good idea for students to delve into art theory, color theory, and design theory early in their studies.  For character Artists, studying anatomy is highly recommended.<\/p><h3>Requirements<\/h3><p>Often, Artists in the video game industry are hired for very specialized and focused jobs requiring specific knowledge or training. Beyond possessing expert skills in art, Artists might also be required to have some understanding of programming or software and how art integrates into a game.<\/p><h3>Education<\/h3><p>There are plenty of art schools and colleges that will give a quality education in art. Strictly speaking, however, what is really going to win a job is an outstanding portfolio. Schools can help teach theory and develop discipline, but many Artists are able to train themselves. Perhaps the most valuable quality of a formal art education is the ability to take courses in support subjects such as computer science and anatomy.<\/p><h3>Entry Level Expectations<\/h3><p>There are many entry level positions for Artists in the video game industry, however, there is also an abundance of struggling Artists seeking those positions. There is also the industry's trend of outsourcing art to consider. Working as an Artist in games today is highly competitive and even though art and video games are inseparable, not every studio hires full-time artists on staff.<\/p><h3>Salary Expectations<\/h3><p>Pay ranges vary greatly for Artists. Small studios may have tiny budgets for art and still have people knocking down their doors for the opportunity to be a working artist on a game, no matter what the pay is. Other studios only hire contract artists which, again, can vary greatly in terms of pay. An artist with five years of experience working full time in the industry is paid an average of $50,000.<\/p><\/div><a id=\"careers-in-game-development-5\" class=\"dest\"><\/a>&nbsp;<div class=\"accent\"><h1>The Role of a QA Tester<\/h1><img class=\"aligncenter\" src=\".\/images\/image_QA.png\" alt=\"image_QA\" width=\"627\" height=\"433\" \/><p>Another popular position in the video game industry is the Quality Assurance Tester, or QA Tester. This is because many gamers dream of being paid to play games, and the QA Tester is a dream job for those individuals.<\/p><h3>Role<\/h3><p>QA Testers troubleshoot games to discover bugs and glitches in the programming or continuity issues in the gameplay and story. In many ways, they are paid to play games and find ways to break them before their faults are released to the public. That said, there is much more to QA testing than just playing games. Intense documentation is the foundation of QA testing which means it is a lot of work outside of just playing a game.<\/p><h3>Background<\/h3><p>Most QA Testers are obsessed with figuring out how to find a game's flaws and exploiting them in ways the game designers never conceived. For people who like to play games like this, QA testing is the perfect job. The best way for students to explore QA testing is to volunteer for public Beta testing when it is offered.<\/p><h3>Requirements<\/h3><p>QA testing requires keen attention to detail. It also requires some skill in diplomacy as feedback to developers must be concise, yet authoritative. This aspect of QA testing also requires excellent writing and documentation skills. Overall, computer, organizational, writing, and technical skills are going to be used daily.<\/p><h3>Education<\/h3><p>A college degree is not strictly needed for a career in QA testing, but as competition for jobs increases, a degree will help to separate one from the masses. There are trade school courses in QA testing that will certainly give some advantage, but they are rare. A degree in computer sciences will certainly help but does not replace experience in Beta testing.<\/p><h3>Entry Level Expectations<\/h3><p>There a lots of entry level QA positions in the industry, however, paid positions are harder to get. As mentioned, developers have turned to video game fans to help in QA testing, often requiring fewer in-house personnel. Fortunately, there are many kinds of QA testing needed, and not just in the game development industry.<\/p><h3>Salary Expectations<\/h3><p>QA testing as entry level positions can start low on the pay scale. This is because there is so much interest and demand by fans to be part of this process. Game testers start around $20,000\/year or even less. Experienced Lead QA Testers, however, can reach upwards of $90,000\/year. The average is around $47,000\/year.<\/p><\/div><a id=\"careers-in-game-development-6\" class=\"dest\"><\/a>&nbsp;<div class=\"accent\"><h1>The Role of a Video Game Producer<\/h1><img class=\"aligncenter\" src=\".\/images\/image_producer.png\" alt=\"image_producer\" width=\"627\" height=\"433\" \/><p>Producer can be a difficult position to define as the roles can vary from studio to studio. In general, Producers are overseers. They are responsible for bringing together schedules, budgets, and all personnel into a coherent development process that leads to the successful completion of a game.<\/p><h3>Role<\/h3><p>There are many similarities between a Video Game Producer and a Hollywood Producer. Once the similar named title was a poor fit for what a Producer does in video games, but as time has passed, the Producer role in games has been better defined and is now accepted as a core position. To be sure, the Producer plays a crucial role in game development today.<\/p><h3>Background<\/h3><p>There is little one can do outside of actual experience to develop skills as a Producer. Producers must be masters of having a big picture view of a project and that comes from practical knowledge. Any type of project management, however, develops skills a Producer will need. In addition, it is not unusual for Producers to be promoted or shifted from other game development positions such as those mentioned in this Module.<\/p><h3>Requirements<\/h3><p>Producers are usually judged by results. Did the project finish on budget? Did the end product meet the goals of the GDD? Producers need an excellent overview of the entire game making process. They often come from other fields once their experience is enough to give them expertise in understanding how each department works and combines to make a game. Producers need attention to detail and the ability to see a project in scope of all of its parts.<\/p><h3>Education<\/h3><p>Business and management degrees are most applicable to producer positions, but mean little until one gains some actual (and successful) Producer experience. In general, Producers do well with a broad education and lots of project management practice.<\/p><h3>Entry Level Expectations<\/h3><p>There are no entry level producer positions. Producers are typically hired from staff &#8211; those that have shown exceptional organizational and people skills are typically promoted. They may also be hired based on their past success in project management.<\/p><h3>Salary Expectations<\/h3><p>Because Producers must have a body of experience before they can work as Producers, base pay is higher when compared to other positions.<\/p><ul><li>Less than three years of experience: Average $50,000<\/li><li>Three to six years of experience: Average $70,000<\/li><li>Six plus years of experience: $90,000<\/li><\/ul><p>Those who demonstrate tremendous success on their projects can command even more.<\/p><\/div><a id=\"careers-in-game-development-7\" class=\"dest\"><\/a>&nbsp;<div class=\"accent\"><h1>The Role of Video Game Studio Director<\/h1><img class=\"aligncenter\" src=\".\/images\/image_director.png\" alt=\"image_director\" width=\"627\" height=\"433\" \/><p>Director is another position whose duties can vary from studio to studio. In many companies, the role of the producer or executive producer fulfills the same role as a Director.<\/p><h3>Role<\/h3><p>For the most part, Directors represent either the top level of management oversight (aka executive producer) or are in charge of creative oversight (aka Art Director\/Creative Director). Because of the entertainment focus of most video games, Directors are often skilled in one or more of the following disciplines as part of their areas of expertise: business, marketing, technology, art, and story.<\/p><h3>Background<\/h3><p>Directors are made, not born. It takes years of industry experience to earn the right to be considered a professional Director in the video game industry (with the exception of independent developers, of course). Directors are drawn from producers, game designers, programmers, artists, and other positions once their level of expertise surpasses their value in these fields as strictly focused disciplines.<\/p><h3>Requirements<\/h3><p>The biggest requirement for being a Director in video games is a long and impressive resume. In particular, successful completion of complex, high-tech, high-budget projects.<\/p><h3>Education<\/h3><p>Business and management degrees may seem like a logical educational focus for long term goals of being a Director, however, this is not always the case. Many Directors come from a writing or art background with a lot of project management experience mixed in.<\/p><h3>Entry Level Expectations<\/h3><p>Once again, there are no entry level Director jobs. One must earn the right through years of experience and success. That said, gaining experience as a community manager is a great place to get your feet wet for future Director positions.<\/p><h3>Salary Expectations<\/h3><p>Directors' pay can start as high as $90,000, depending on their relevant experience. For experienced Directors with a history of successful and profitable video game development, there really is no limit to the value a Director brings to a video game company.<\/p><\/div><a id=\"careers-in-game-development-8\" class=\"dest\"><\/a>&nbsp<div class=\"accent\"><h1>Support Roles in the Video Game Industry<\/h1><img class=\"aligncenter\" src=\".\/images\/image_sound2.png\" alt=\"image_sound\" width=\"611\" height=\"404\" \/><p>So far we have looked at what may be considered the “glamour” roles in the video game industry: those positions with the greatest popularity and understanding from the fans of video games. There are, however, many other positions required to make a successful video game. Best of all, many of these positions offer less competition for entry level jobs.<\/p><h3>Marketing Manager<\/h3><p>Games don't typically sell well if nobody knows they exist. Just like blockbuster movies, games need marketing to reach the public's attention. All too often, marketing is an afterthought in the video game industry, however, even a low budget game can find clever ways to market itself, particularly through the Internet and a good Marketing Manager. Average Salary: $55,000\/year<\/p><h3>Localization\/Translation<\/h3><p>Video games are popular all over the world and are often translated to multiple languages by a Translator. Game tutorials, character dialog, and all screen information are just some examples of elements that may need translation so the game will sell in foreign markets. Average Salary: $51,000\/year<\/p><h3>Technical Support Specialist<\/h3><p>Once a game is released to the public, the Technical Support Specialist is there to help customers with any technical issues they may have. They are the public relations face of the company when it comes to technical support for the product. Average Salary: $40,000\/year<\/p><h3>Writer<\/h3><p>Not all games require a dedicated Writer beyond the game designer. When they do, it's often a story or character driven game requiring a lot of dialog and plot. Technical writing is also an option for Writers wanting to find jobs in the video game industry. Technical Writers translate the mechanics laid out in the GDD into language for programmers to turn into code. Average Salary: $45,000\/year<\/p><h3>Market Research Analyst<\/h3><p>Many companies employ a Market Research Analyst to study trends and market forces to help determine sales strategies and demographics to target. They also determine prices and the best way to sell the product to an audience. Market research analysis, as a tool, is often overlooked before game development, and many video games fail in the market because they neglect to study trends and audiences.  Average Salary: $52,000\/year<\/p><h3>Composer<\/h3><p>Separate from the sound engineer, the Composer writes and records the music in a game. Composers have a musical educational\/experience background including knowledge of music composition and theory. Average Salary: varies<\/p><\/div><a id=\"careers-in-game-development-9\" class=\"dest\"><\/a>&nbsp;<div class=\"accent\"><h1>The Independent Developer<\/h1><img class=\"aligncenter\" src=\".\/images\/image_indie.png\" alt=\"image_indie\" width=\"627\" height=\"433\" \/><p>The video game industry is incredibly diverse. While it is true that it typically takes vast amounts of money, time, and people-power to create a large, complex video game, there are plenty of developers making games on shoe-string budgets and almost no personnel. These are the Independent Developers.<\/p><h3>Role<\/h3><p>The Independent Developer (or Indie Developer) must be all things at once, finding shrewd ways to fill the roles of game designer, artist, sound engineer, and all the rest. Many Independent Developers are single individuals or very small teams. Typically, this means the games they make are smaller in scale and often very niche in the audience they seek.<\/p><h3>Background<\/h3><p>Independent Developers come from diverse backgrounds. Many are programmers which eliminates the need to hire the most expensive personnel. Often Independent Developers are small teams with just enough expertise and diversity to cover all the needed fields.<\/p><h3>Requirements<\/h3><p>Independent game development requires a lot of time. Without huge budgets and hordes of workers, making even a small game is time consuming. It also requires a high level of expertise and dedicaton from each member of the small development team.<\/p><h3>Distribution<\/h3><p>Independent Developers face many challenges. Distribution is one concern. Once it was nearly impossible to compete for shelf space with big game developers. Now, however, the market is wide open to Indie Developers with Internet browser games, Apps, and consoles that allow indie games to be sold through their platforms. Without these avenues of distribution the indie game market would not exist as it does today.<\/p><h3>Entry Level Expectations<\/h3><p>Just like with studio games, indie games often fail to make a profit. Without marketing budgets, Independent Developers have to be very clever in spreading word of their creation. Today's App markets and console platforms present tremendous opportunities to make, market, and sell independent video games.<\/p><h3>Salary Expectations<\/h3><p>Most Independent Developers make games because they love to make games. If they are lucky, their first game will make enough money for the Independent Developer to make another modest game. Of course, some indie games do catch the public eye in a big way and make millions. That lightning in a bottle, however, is quite rare.<\/p><\/div><!--page:~~careers-in-game-development-reference-text~~-->","title":"Reference Material"},{"bIsChecked":true,"exercise":null,"instructions":"<h1>Goal<\/h1><p>In this Exercise, we will choose one of the video game career positions discussed in this Module and formulate a written plan that will prepare us for our first entry-level position at a game studio.<\/p><h1>Steps<\/h1><ol><li>Review the material in this Module and choose one position in video game development.<\/li><li>Write an essay that demonstrates how best to prepare for that position's career path. Be sure to include in the essay:<ol><li>The title of the position<\/li><li>Why this position is of interest<\/li><li>The role of the position within the development team<\/li><li>The skill sets needed for the position<\/li><li>The background activities that will increase the needed skill sets<\/li><li>An educational path and how it benefits pursuing the chosen position<\/li><li>The most likely entry level job title this position offers<\/li><li>Starting salary expectations<\/li><li>The next step in advancing from an entry-level position to a mid-level position<\/li><li>State a position goal for the future and how initial strategy choices can help you obtain that goal.<\/li><\/ol><\/li><li>Once the essay is complete, assess the content. Were each of the above bullet points addressed with a logical and thought out response? Was a reasonable plan to be hired in the video game industry demonstrated?<\/li><li>Now score the essay from 1 to 10. Give one point for each of the above elements discussed in the essay.<\/li><\/ol><h1>Hints and Challenges<\/h1><p>For extra insight, use an Internet search engine to find a professional currently working in the industry. For example, type, “Famous video game artists”. You can then examine their work history and perhaps even contact them for inspiration.<\/p><!--page:~~careers-in-game-development-exercise~~-->","link":"exercise","mod":"careers-in-game-development","movie":null,"name":"CareersWritingExercise","promptfile":null,"prompts":null,"reference":null,"text":null,"title":"Writing Exercise"}]},{"bIsChecked":true,"name":"ip-and-video-games","title":"IP and Video Games","topics":[{"bIsChecked":true,"exercise":null,"instructions":null,"link":"disclaimer","mod":null,"movie":".\/video\/Course1-IP-Disclaimer-1.mp4","name":"Disclaimer","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"True"},{"order":0,"points":0,"sticky":false,"text":"False"}],"failure":{"button":null,"message":"Always consult a lawyer on any legal issues."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn1-ip-diclaimer-micro-1","number_of_choices":2,"question":"True or False: The material in this course is for education purposes only and should not be construed as actual legal advice. ","start":3600,"success":{"button":null,"message":"Always consult a lawyer on any legal issues."},"type":null}],"reference":"ip-and-video-games-1","text":null,"title":"Disclaimer"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":null,"movie":".\/video\/Course1-IP-Overview-2.mp4","name":"Overview","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"To make money"},{"order":0,"points":0,"sticky":false,"text":"To share an idea"},{"order":0,"points":0,"sticky":false,"text":"To entertain"},{"order":21,"points":100,"sticky":false,"text":"All of the above"}],"failure":{"button":null,"message":"Whatever the reason, intellectual property laws are meant to protect a creators control over their creation on a legal and financial basis. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn2-ip-overview-micro-2","number_of_choices":4,"question":"Which of the following is a common reason why people create art or bodies of work? ","start":3600,"success":{"button":null,"message":"Whatever the reason, intellectual property laws are meant to protect a creators control over their creation on a legal and financial basis. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Copyright"},{"order":0,"points":0,"sticky":false,"text":"Patent"},{"order":0,"points":0,"sticky":false,"text":"Trademark"},{"order":0,"points":100,"sticky":false,"text":"Artificial Intelligence  "}],"failure":{"button":null,"message":"Copyright, patent, trademark, and trade secrets are all concepts covered by intellectual property laws.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn3-ip-overview-micro-2","number_of_choices":4,"question":"Which of the following is NOT a form of intellectual property? ","start":3600,"success":{"button":null,"message":"Copyright, patent, trademark, and trade secrets are all concepts covered by intellectual property laws.  "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Copyright"},{"order":0,"points":100,"sticky":false,"text":"Patent"},{"order":0,"points":0,"sticky":false,"text":"Trademark"},{"order":0,"points":0,"sticky":false,"text":"Trade secret  "}],"failure":{"button":null,"message":"Patent laws are focused on protecting inventors of technical innovations, including software.   "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn4-ip-overview-micro-2","number_of_choices":4,"question":"Which of the following intellectual property law categories is meant to protect inventors and their inventions? ","start":3600,"success":{"button":null,"message":"Patent laws are focused on protecting inventors of technical innovations, including software.   "},"type":"Multiple"}],"reference":"ip-and-video-games-1","text":null,"title":"Overview"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":null,"movie":".\/video\/Course1-IP-WhatisCopy-3.mp4","name":"What is Copyright?","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"Original art "},{"order":0,"points":0,"sticky":false,"text":"Original story"},{"order":0,"points":0,"sticky":false,"text":"Original music"},{"order":21,"points":100,"sticky":false,"text":"All of the above"}],"failure":{"button":null,"message":"Copyright covers original creative elements such as art, story and music."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn5-ip-whatiscopy-micro-3","number_of_choices":4,"question":"Copyright for a video game could include _____.","start":3600,"success":{"button":null,"message":"Copyright covers original creative elements such as art, story and music."},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"True"},{"order":0,"points":100,"sticky":false,"text":"False"}],"failure":{"button":null,"message":"Part of copyright is the ability to give something away for free, which is the case for students who want to reproduce any element of Prospector Peril.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn6-ip-whatiscopy-micro-3","number_of_choices":2,"question":"True or False: Students who reproduce elements (such as art and sound) of Prospector Peril are in violation of copyright.","start":3600,"success":{"button":null,"message":"Part of copyright is the ability to give something away for free, which is the case for students who want to reproduce any element of Prospector Peril.  "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"an obligation; give away "},{"order":0,"points":100,"sticky":false,"text":"exclusive rights; reproduce"},{"order":0,"points":0,"sticky":false,"text":"made money; sell "},{"order":0,"points":0,"sticky":false,"text":"an obligation: sell"}],"failure":{"button":null,"message":"The owner of a copyright can sell, give away, or simple deny reproductions of the material copyrighted. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn7-ip-whatiscopy-micro-3","number_of_choices":4,"question":"Copyright means that the creators of original material have _____ to _____ the material","start":3600,"success":{"button":null,"message":"The owner of a copyright can sell, give away, or simple deny reproductions of the material copyrighted. "},"type":"Multiple"},{"choices":[{"order":0,"points":100,"sticky":false,"text":"own and use"},{"order":0,"points":0,"sticky":false,"text":"make duplicates of"},{"order":0,"points":0,"sticky":false,"text":"sell duplicates of"},{"order":0,"points":0,"sticky":false,"text":"grant permission for others to copy"}],"failure":{"button":null,"message":"Owner ship of a hardcopy of a book allows you do just about anything you want with it, except duplicate it.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn8-ip-whatiscopy-micro-3","number_of_choices":4,"question":"Under copyright law, when you purchase a book, it means you have permission to ____ that book.  ","start":3600,"success":{"button":null,"message":"Owner ship of a hardcopy of a book allows you do just about anything you want with it, except duplicate it.  "},"type":"Multiple"}],"reference":"ip-and-video-games-2","text":null,"title":"What is Copyright?"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":null,"movie":".\/video\/Course1-IP-CopyrightandVG-4.mp4","name":"Copyright and Video Games","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"Two"},{"order":0,"points":0,"sticky":false,"text":"Four"},{"order":0,"points":0,"sticky":false,"text":"Six"},{"order":0,"points":100,"sticky":false,"text":"Eight"}],"failure":{"button":null,"message":"There are eight different categories for copyright, including literary works, musical works, and more. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn9-ip-copyrightandvg-micro-4","number_of_choices":4,"question":"How many categories are there for what can qualify for copyright?","start":3600,"success":{"button":null,"message":"There are eight different categories for copyright, including literary works, musical works, and more. "},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Musical works"},{"order":0,"points":0,"sticky":false,"text":"Audio\/Visual works"},{"order":0,"points":100,"sticky":false,"text":"Trade secrets"},{"order":0,"points":0,"sticky":false,"text":"Architectural works  "}],"failure":{"button":null,"message":"Trade secrets are their own set of intellectual property laws outside of copyright law.   "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn10-ip-copyrightandvg-micro-4","number_of_choices":4,"question":"Which of the following is NOT a category of copyright?","start":3600,"success":{"button":null,"message":"Trade secrets are their own set of intellectual property laws outside of copyright law.   "},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Five years"},{"order":0,"points":0,"sticky":false,"text":"Forever"},{"order":0,"points":100,"sticky":false,"text":"95 years"},{"order":0,"points":0,"sticky":false,"text":"Until the game goes on sale  "}],"failure":{"button":null,"message":"Video games hold copyright for 95 years, meaning ALL video games are still under copyright. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn11-ip-copyrightandvg-micro-4","number_of_choices":4,"question":"How long can a video game hold copyright?","start":3600,"success":{"button":null,"message":"Video games hold copyright for 95 years, meaning ALL video games are still under copyright. "},"type":null},{"choices":[{"order":0,"points":100,"sticky":false,"text":"public domain"},{"order":0,"points":0,"sticky":false,"text":"prospector's domain"},{"order":0,"points":0,"sticky":false,"text":"public dominance"},{"order":0,"points":0,"sticky":false,"text":"public determined   "}],"failure":{"button":null,"message":"Public domain means the game is no longer under copyright protection and can be duplicated at will by the public.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn12-ip-copyrightandvg-micro-4","number_of_choices":4,"question":"After 95 years of copyright, a video game becomes what is known as _____.","start":3600,"success":{"button":null,"message":"Public domain means the game is no longer under copyright protection and can be duplicated at will by the public.  "},"type":null}],"reference":"ip-and-video-games-3","text":null,"title":"Copyright and Video Games"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":null,"movie":".\/video\/Course1-IP-CopyrightandUI-5.mp4","name":"Copyright and Universal Ideas","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"Original text"},{"order":0,"points":0,"sticky":false,"text":"Original art"},{"order":0,"points":100,"sticky":false,"text":"Facts"},{"order":0,"points":0,"sticky":false,"text":"Original music"}],"failure":{"button":null,"message":"Facts and what are called 'universal ideas' cannot be copyrighted. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn13-ip-copyrightandui-micro-5","number_of_choices":4,"question":"Which of the following is NOT copyrightable?","start":3600,"success":{"button":null,"message":"Facts and what are called 'universal ideas' cannot be copyrighted. "},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"True"},{"order":0,"points":100,"sticky":false,"text":"False"}],"failure":{"button":null,"message":"Disney owns the copyright to the word \"droid\"; however, the concept of robots in space is too generic and universal to be copyrighted by anyone.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn14-ip-copyrightandui-micro-5","number_of_choices":2,"question":"True or False: The concept of robots in space is a copyright held by Disney, because they own the intellectual property rights to Star Wars. ","start":3600,"success":{"button":null,"message":"Disney owns the copyright to the word \"droid\"; however, the concept of robots in space is too generic and universal to be copyrighted by anyone.  "},"type":null}],"reference":"ip-and-video-games-4","text":null,"title":"Copyright and Universal Ideas"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":null,"movie":".\/video\/Course1-IP-CopyrightandDW-6.mp4","name":"Copyright and Derivative Works","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"audience  "},{"order":0,"points":100,"sticky":false,"text":"medium"},{"order":0,"points":0,"sticky":false,"text":"sequel"},{"order":0,"points":0,"sticky":false,"text":"lawyer "}],"failure":{"button":null,"message":"Derivative works are \"derived\" from existing intellectual property and applied to a new medium. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn15-ip-copyrightanddw-micro-6","number_of_choices":4,"question":"Derivative works are \"derived\" from existing intellectual property and applied to a new _____.","start":3600,"success":{"button":null,"message":"Derivative works are \"derived\" from existing intellectual property and applied to a new medium. "},"type":null},{"choices":[{"order":0,"points":100,"sticky":false,"text":"derivative work "},{"order":0,"points":0,"sticky":false,"text":"dependent work"},{"order":0,"points":0,"sticky":false,"text":"derivative world"},{"order":0,"points":0,"sticky":false,"text":"literary work "}],"failure":{"button":null,"message":"Disney has exclusive rights to apply the Star Wars IP to movies, books, video games and more!"},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn16-ip-copyrightanddw-micro-6","number_of_choices":4,"question":"When Disney makes a Star Wars video game, it is considered a _____ of their Star Wars movie intellectual property.  ","start":3600,"success":{"button":null,"message":"Disney has exclusive rights to apply the Star Wars IP to movies, books, video games and more!"},"type":null}],"reference":"ip-and-video-games-5","text":null,"title":"Copyright and Derivative Works"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":null,"movie":".\/video\/Course1-IP-FairUse-7.mp4","name":"Copyright and Fair Use","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"fair use"},{"order":0,"points":0,"sticky":false,"text":"flair abuse"},{"order":0,"points":0,"sticky":false,"text":"public domain"},{"order":0,"points":0,"sticky":false,"text":"plagiarism "}],"failure":{"button":null,"message":"Typically fair use in copyright does not allow complete works to be reproduced, only portions. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn17-ip-fairuse-micro-7","number_of_choices":4,"question":"Allowing limited excerpts of copyrighted material for the purpose of education, parody, or other social value is called _____.","start":3600,"success":{"button":null,"message":"Typically fair use in copyright does not allow complete works to be reproduced, only portions. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"True"},{"order":0,"points":100,"sticky":false,"text":"False"}],"failure":{"button":null,"message":"Credit to the originator of the quoted or reproduced material is still required.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn18-ip-fairuse-micro-7","number_of_choices":2,"question":"True or False: When using a portion of copyrighted material for educational purposes, you don't have to identify the author. ","start":3600,"success":{"button":null,"message":"Credit to the originator of the quoted or reproduced material is still required.  "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Parody"},{"order":0,"points":0,"sticky":false,"text":"Educational usage"},{"order":0,"points":100,"sticky":false,"text":"Commercial usage"},{"order":21,"points":0,"sticky":false,"text":"All of the above"}],"failure":{"button":null,"message":"Although making money is not strictly forbidden under fair use, the usage of fair use cannot be strictly commercial either. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn19-ip-fairuse-micro-7","number_of_choices":4,"question":"Which of the following is NOT allowed under fair use? ","start":3600,"success":{"button":null,"message":"Although making money is not strictly forbidden under fair use, the usage of fair use cannot be strictly commercial either. "},"type":"Multiple"}],"reference":"ip-and-video-games-6","text":null,"title":"Copyright and Fair Use"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":null,"movie":".\/video\/Course1-IP-Trademarks-8.mp4","name":"Trademarks","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"Copyright"},{"order":0,"points":0,"sticky":false,"text":"Patents"},{"order":0,"points":100,"sticky":false,"text":"Trademarks"},{"order":0,"points":0,"sticky":false,"text":"Trade secrets "}],"failure":{"button":null,"message":"Trademarks cover logos, catchphrases, and company graphic designs. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn20-ip-trademarks-micro-8","number_of_choices":4,"question":"Company logos and graphic designs are protected under which category of intellectual property law?","start":3600,"success":{"button":null,"message":"Trademarks cover logos, catchphrases, and company graphic designs. "},"type":null},{"choices":[{"order":0,"points":100,"sticky":false,"text":"A corporate logo"},{"order":0,"points":0,"sticky":false,"text":"A secret formula for a soft drink"},{"order":0,"points":0,"sticky":false,"text":"The text from a novel"},{"order":0,"points":0,"sticky":false,"text":"A song"}],"failure":{"button":null,"message":"Formulas are covered under patents, while songs and books are protected under copyright.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn21-ip-trademarks-micro-8","number_of_choices":4,"question":"Which of the following could have a trademark?","start":3600,"success":{"button":null,"message":"Formulas are covered under patents, while songs and books are protected under copyright.  "},"type":null}],"reference":"ip-and-video-games-7","text":null,"title":"Trademarks"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":null,"movie":".\/video\/Course1-IP-VideoGaemTrademarks-9.mp4","name":"Trademarks and Video Games","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"copyright"},{"order":0,"points":100,"sticky":false,"text":"trademark"},{"order":0,"points":0,"sticky":false,"text":"patent"},{"order":0,"points":0,"sticky":false,"text":"lawyer "}],"failure":{"button":null,"message":"Even if another company used a different name, they still may not be permitted to use the exact same font and graphic design of the Nintendo trademarked company logo. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn22-ip-trademarksinvg-micro-9","number_of_choices":4,"question":"Nintendo has exclusive rights to use their company logo because they have a _____ on that name and logo. ","start":3600,"success":{"button":null,"message":"Even if another company used a different name, they still may not be permitted to use the exact same font and graphic design of the Nintendo trademarked company logo. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"A car"},{"order":0,"points":0,"sticky":false,"text":"A restaurant"},{"order":0,"points":0,"sticky":false,"text":"A rock band"},{"order":21,"points":100,"sticky":false,"text":"All of the above "}],"failure":{"button":null,"message":"Almost all commercial products these days, have trademarks.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn23-ip-trademarksinvg-micro-9","number_of_choices":4,"question":"Which of the following is likely to have a trademark associated with it? ","start":3600,"success":{"button":null,"message":"Almost all commercial products these days, have trademarks.  "},"type":"Multiple"},{"choices":[{"order":0,"points":100,"sticky":false,"text":"Marketing and branding"},{"order":0,"points":0,"sticky":false,"text":"Protecting a trade secret"},{"order":0,"points":0,"sticky":false,"text":"To protect copyright"},{"order":21,"points":0,"sticky":false,"text":"All of the above "}],"failure":{"button":null,"message":"Most companies and commercial enterprises use trademarks for marketing and branding. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn24-ip-trademarksinvg-micro-9","number_of_choices":4,"question":"Which of the following is the most likely use of a trademark?","start":3600,"success":{"button":null,"message":"Most companies and commercial enterprises use trademarks for marketing and branding. "},"type":"Multiple"}],"reference":"ip-and-video-games-7","text":null,"title":"Trademarks and Video Games"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":null,"movie":".\/video\/Course1-IP-TrademarkCategories-10.mp4","name":"Trademark Categories","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"expire in 95 years"},{"order":0,"points":0,"sticky":false,"text":"cover all goods and services in all mediums "},{"order":0,"points":0,"sticky":false,"text":"protect against corporate espionage "},{"order":0,"points":100,"sticky":false,"text":"only cover a particular medium or category"}],"failure":{"button":null,"message":"A new trademark must be applied for each category one wishes a trademark for. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn25-ip-trademarkcategories-micro-10","number_of_choices":4,"question":"When applying for a trademark, it is important to understand that a trademark will _____.","start":3600,"success":{"button":null,"message":"A new trademark must be applied for each category one wishes a trademark for. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Chemical product"},{"order":0,"points":0,"sticky":false,"text":"Alien technology products"},{"order":0,"points":0,"sticky":false,"text":"Houseware glass products"},{"order":0,"points":100,"sticky":false,"text":"Computer and software products"}],"failure":{"button":null,"message":"There are currently 45 different classifications of trademarks. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn26-ip-trademarkcategories-micro-10","number_of_choices":4,"question":"Under trademark law, video games are classified as _____.","start":3600,"success":{"button":null,"message":"There are currently 45 different classifications of trademarks. "},"type":"Multiple"}],"reference":"ip-and-video-games-7","text":null,"title":"Trademark Categories"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":null,"movie":".\/video\/Course1-IP-Tradesecrets-11.mp4","name":"Trade Secrets","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"secret ingredients "},{"order":0,"points":0,"sticky":false,"text":"a manufacturing process"},{"order":0,"points":0,"sticky":false,"text":"the design of a battery"},{"order":21,"points":100,"sticky":false,"text":"All of the above"}],"failure":{"button":null,"message":"The \"secret\" part of a trade secret is not revealed to the public."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn27-ip-tradesecrets-micro-11","number_of_choices":4,"question":"Trade secrets, under intellectual property law, are used to protect _____.","start":3600,"success":{"button":null,"message":"The \"secret\" part of a trade secret is not revealed to the public."},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"The design of the can "},{"order":0,"points":100,"sticky":false,"text":"The formula of their soda"},{"order":0,"points":0,"sticky":false,"text":"The corporate logo"},{"order":0,"points":0,"sticky":false,"text":"The product nickname \"coke\""}],"failure":{"button":null,"message":"Coca-Cola does not wish to reveal their formula for their soft drink and so it is a trade secret. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn28-ip-tradesecrets-micro-11","number_of_choices":4,"question":"_____ is a trade secret of the Coca-Cola Company.","start":3600,"success":{"button":null,"message":"Coca-Cola does not wish to reveal their formula for their soft drink and so it is a trade secret. "},"type":null}],"reference":"ip-and-video-games-8","text":null,"title":"Trade Secrets"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":null,"movie":".\/video\/Course1-IP-TradeSecretsinVG-12.mp4","name":"Trade Secrets and Video Games","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"hold an advantage in business"},{"order":0,"points":0,"sticky":false,"text":"protect their corporate logo "},{"order":0,"points":0,"sticky":false,"text":"sue other companies for copyright infringement "},{"order":21,"points":0,"sticky":false,"text":"All of the above"}],"failure":{"button":null,"message":"The advantage of a trade secret is that nobody else has it. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn29-ip-tradesecretsinvg-micro-12","number_of_choices":4,"question":"Typically a company holds a trade secret to _____. ","start":3600,"success":{"button":null,"message":"The advantage of a trade secret is that nobody else has it. "},"type":"Multiple"},{"choices":[{"order":0,"points":100,"sticky":false,"text":"it is meant to be known by the public"},{"order":0,"points":0,"sticky":false,"text":"it is a patent "},{"order":0,"points":0,"sticky":false,"text":"it is not a formula for a soft drink "},{"order":0,"points":0,"sticky":false,"text":"Disney says so"}],"failure":{"button":null,"message":"The key component of a trade secret is that is a secret. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn30-ip-tradesecretsinvg-micro-12","number_of_choices":4,"question":"A company logo is not a trade secret simply because _____. ","start":3600,"success":{"button":null,"message":"The key component of a trade secret is that is a secret. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"A licensing agreement"},{"order":0,"points":0,"sticky":false,"text":"A game's code"},{"order":0,"points":0,"sticky":false,"text":"Customer lists"},{"order":21,"points":100,"sticky":false,"text":"All of the above"}],"failure":{"button":null,"message":"Video game studios often have to watch what they throw away as trash because people are so interested in discovering their trade secrets. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn31-ip-tradesecretsinvg-micro-12","number_of_choices":4,"question":"Which of the following would be considered a trade secret in the video game industry?","start":3600,"success":{"button":null,"message":"Video game studios often have to watch what they throw away as trash because people are so interested in discovering their trade secrets. "},"type":"Multiple"}],"reference":"ip-and-video-games-9","text":null,"title":"Trade Secrets and Video Games"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":null,"movie":".\/video\/Course1-IP_ProtectingTradesecrets-13.mp4","name":"Protecting Trade Secrets","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"the police "},{"order":0,"points":0,"sticky":false,"text":"the military "},{"order":0,"points":100,"sticky":false,"text":"the company holding a trade secret"},{"order":0,"points":0,"sticky":false,"text":"a star-shaped chamber of lawyers"}],"failure":{"button":null,"message":"Once a trade secret is revealed to the public, it will never be a trades secret again. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn32-ip-protectingtradesecrets -micro-13","number_of_choices":4,"question":"For the most part, it is up to _____ to protect a trade secret.","start":3600,"success":{"button":null,"message":"Once a trade secret is revealed to the public, it will never be a trades secret again. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"A new logo"},{"order":0,"points":0,"sticky":false,"text":"copyright for life"},{"order":0,"points":100,"sticky":false,"text":"a competitive edge "},{"order":0,"points":0,"sticky":false,"text":"the formula of Coca-Cola"}],"failure":{"button":null,"message":"Companies go to great effort to protect trades secrets from rivals.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn33-ip-protectingtradesecrets -micro-13","number_of_choices":4,"question":"A trade secret has value only if it gives a company _____.","start":3600,"success":{"button":null,"message":"Companies go to great effort to protect trades secrets from rivals.  "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Non-disclosure agreements"},{"order":0,"points":0,"sticky":false,"text":"Lock and Key"},{"order":0,"points":0,"sticky":false,"text":"Shredding documents"},{"order":21,"points":100,"sticky":false,"text":"All of the above"}],"failure":{"button":null,"message":"With so many fans and competitors seeking a studios trade secrets, it is mostly up to the studio itself to find ways to protect its trade secrets. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn34-ip-protectingtradesecrets -micro-13","number_of_choices":4,"question":"Which of the following is a common method video game studios use to protect their trade secrets?","start":3600,"success":{"button":null,"message":"With so many fans and competitors seeking a studios trade secrets, it is mostly up to the studio itself to find ways to protect its trade secrets. "},"type":"Multiple"}],"reference":"ip-and-video-games-10","text":null,"title":"Protecting Trade Secrets"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":null,"movie":".\/video\/Course1-IP-USPatents-14.mp4","name":"US Patent Law","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"inventors"},{"order":0,"points":0,"sticky":false,"text":"musicians "},{"order":0,"points":0,"sticky":false,"text":"screenwriters "},{"order":0,"points":0,"sticky":false,"text":"managers"}],"failure":{"button":null,"message":"U.S. Patent law is specifically for inventors and their pioneering inventions."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn35-ip-uspatents-micro-14","number_of_choices":4,"question":"U.S. patent law is designed to protect _____.","start":3600,"success":{"button":null,"message":"U.S. Patent law is specifically for inventors and their pioneering inventions."},"type":null},{"choices":[{"order":0,"points":100,"sticky":false,"text":"be innovative "},{"order":0,"points":0,"sticky":false,"text":"already exist"},{"order":0,"points":0,"sticky":false,"text":"first receive copyright"},{"order":0,"points":0,"sticky":false,"text":"be a trade secret"}],"failure":{"button":null,"message":"Being innovative or pioneering is a requirement of patents "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn36-ip-uspatents-micro-14","number_of_choices":4,"question":"To qualify for a U.S. patent an invention must _____. ","start":3600,"success":{"button":null,"message":"Being innovative or pioneering is a requirement of patents "},"type":null}],"reference":"ip-and-video-games-11","text":null,"title":"US Patent Law"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":null,"movie":".\/video\/Course1-IP-SoftwarePatents-15.mp4","name":"Software Patents","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"invention; patent"},{"order":0,"points":0,"sticky":false,"text":"a literary work; copyright "},{"order":0,"points":0,"sticky":false,"text":"trade secret; trademark"},{"order":0,"points":0,"sticky":false,"text":"invention; trade secret"}],"failure":{"button":null,"message":"Unfortunately, software patents are controversial and have caused problems for many software developers. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn37-ip-softwarepatents-micro-15","number_of_choices":4,"question":"In many cases, original programming of computer software is considered a(n) _____ and falls under _____ law.","start":3600,"success":{"button":null,"message":"Unfortunately, software patents are controversial and have caused problems for many software developers. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"They fail at being clearly \"inventive\""},{"order":0,"points":0,"sticky":false,"text":"Their pioneering quality is not obvious  "},{"order":0,"points":0,"sticky":false,"text":"They harm innovation "},{"order":21,"points":100,"sticky":false,"text":"All of the above"}],"failure":{"button":null,"message":"These issues force video game developers to consider whether they can afford possible legal issues for breaking software patent they didn't know existed. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn38-ip-softwarepatents-micro-15","number_of_choices":4,"question":"Which of the following are reasons many question the legitimacy of software patents?","start":3600,"success":{"button":null,"message":"These issues force video game developers to consider whether they can afford possible legal issues for breaking software patent they didn't know existed. "},"type":"Multiple"}],"reference":"ip-and-video-games-12","text":null,"title":"Software Patents"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":null,"movie":".\/video\/Course1-IP_IntellectualProperty-16.mp4","name":"Intellectual Property","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"Copyright"},{"order":0,"points":0,"sticky":false,"text":"Patent"},{"order":0,"points":0,"sticky":false,"text":"Trademarks"},{"order":21,"points":100,"sticky":false,"text":"All of the above"}],"failure":{"button":null,"message":"Intellectual property law covers all of these plus trade secrets."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn39-ip-intellectualproperty-micro-16","number_of_choices":4,"question":"Intellectual property laws cover _____.","start":3600,"success":{"button":null,"message":"Intellectual property law covers all of these plus trade secrets."},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Downloading music without permission"},{"order":0,"points":0,"sticky":false,"text":"excerpting an entire section of a novel without attribution"},{"order":0,"points":0,"sticky":false,"text":"Making a copy of a movie without permission"},{"order":21,"points":100,"sticky":false,"text":"None of the above"}],"failure":{"button":null,"message":"Intellectual property laws are often abused."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn40-ip-intellectualproperty-micro-16","number_of_choices":4,"question":"Which of the following is allowed under intellectual property laws?","start":3600,"success":{"button":null,"message":"Intellectual property laws are often abused."},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"True"},{"order":0,"points":100,"sticky":false,"text":"False"}],"failure":{"button":null,"message":"Although it might seem unreasonable to some, breaking IP laws can lead to large fines or even jail time. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn41-ip-intellectualproperty-micro-16","number_of_choices":2,"question":"True or False: Intellectual property laws are NOT enforceable by actually penalties or legal consequences. ","start":3600,"success":{"button":null,"message":"Although it might seem unreasonable to some, breaking IP laws can lead to large fines or even jail time. "},"type":"Multiple"}],"reference":"ip-and-video-games-13","text":null,"title":"Intellectual Property"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":null,"movie":".\/video\/Course1-IP_Desgin-17.mp4","name":"IP and Design","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"always"},{"order":0,"points":0,"sticky":false,"text":"never"},{"order":0,"points":100,"sticky":false,"text":"possibly"},{"order":21,"points":0,"sticky":false,"text":"None of the above"}],"failure":{"button":null,"message":"It can be difficult to understand the details of IP law and often requires lawyers specializing in the field to help make decisions involving IP issues. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn42-ip-ipdesign-micro-17","number_of_choices":4,"question":"Mechanics in a game are _____ eligible for intellectual property protection.","start":3600,"success":{"button":null,"message":"It can be difficult to understand the details of IP law and often requires lawyers specializing in the field to help make decisions involving IP issues. "},"type":"Multiple"},{"choices":[{"order":0,"points":100,"sticky":false,"text":"plagiarism "},{"order":0,"points":0,"sticky":false,"text":"music downloads"},{"order":0,"points":0,"sticky":false,"text":"trademark violations"},{"order":0,"points":0,"sticky":false,"text":"stealing trade secrets"}],"failure":{"button":null,"message":"Plagiarism is like copyright infringement but with the added concern of a deeper ethics violation."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn43-ip-ipdesign-micro-17","number_of_choices":4,"question":"As students, the biggest issue of intellectual property infringement is typically _____.","start":3600,"success":{"button":null,"message":"Plagiarism is like copyright infringement but with the added concern of a deeper ethics violation."},"type":"Multiple"}],"reference":"ip-and-video-games-14","text":null,"title":"IP and Design"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":null,"movie":".\/video\/Course1-IP-IPandCode-18.mp4","name":"Patents and Code","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"innovative"},{"order":0,"points":0,"sticky":false,"text":"written for a video game"},{"order":0,"points":0,"sticky":false,"text":"a trade secret"},{"order":0,"points":0,"sticky":false,"text":"Java script"}],"failure":{"button":null,"message":"How code is demonstrated as innovative and what qualifies as innovative in programming is highly controversial. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn44-ip-ipandcode-micro-18","number_of_choices":4,"question":"To qualify for a software patent, applicants are required to demonstrate the code is _____.","start":3600,"success":{"button":null,"message":"How code is demonstrated as innovative and what qualifies as innovative in programming is highly controversial. "},"type":null}],"reference":"ip-and-video-games-15","text":null,"title":"Patents and Code"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":null,"movie":".\/video\/Course1-IP-OpenSource-19.mp4","name":"Open Source","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"True"},{"order":0,"points":100,"sticky":false,"text":"False"}],"failure":{"button":null,"message":"IP owners can freely allow people to use their intellectual properties for free if they desire. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn45-ip-opensource-micro-19","number_of_choices":2,"question":"True or False: All intellectual property must be used to make a profit. ","start":3600,"success":{"button":null,"message":"IP owners can freely allow people to use their intellectual properties for free if they desire. "},"type":null},{"choices":[{"order":0,"points":0,"sticky":false,"text":"open road"},{"order":0,"points":100,"sticky":false,"text":"open code"},{"order":0,"points":0,"sticky":false,"text":"open world"},{"order":0,"points":0,"sticky":false,"text":"free "}],"failure":{"button":null,"message":"Although it often is free, open code is not the same as being free by definition.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn46-ip-opensource-micro-19","number_of_choices":4,"question":"In the software industry, open source is typically analogous to _____.","start":3600,"success":{"button":null,"message":"Although it often is free, open code is not the same as being free by definition.  "},"type":null}],"reference":"ip-and-video-games-16","text":null,"title":"Open Source"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":null,"movie":".\/video\/Course1-IP-CreativeCommons-20.mp4","name":"Creative Commons","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"free"},{"order":0,"points":0,"sticky":false,"text":"patented"},{"order":0,"points":0,"sticky":false,"text":"in copyright violation"},{"order":0,"points":0,"sticky":false,"text":"also a trade secret"}],"failure":{"button":null,"message":"They do this for the good of the community, which in this case is a community of programmers. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn47-ip-creativecommons-micro-20","number_of_choices":4,"question":"Creative Commons - US is mostly interested in offering to the public open source software that is _____.","start":3600,"success":{"button":null,"message":"They do this for the good of the community, which in this case is a community of programmers. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"attribution"},{"order":0,"points":100,"sticky":false,"text":"share-alike "},{"order":0,"points":0,"sticky":false,"text":"common cause "},{"order":0,"points":0,"sticky":false,"text":"no derivative works"}],"failure":{"button":null,"message":"The share-alike license refers to the original license for issues distribution.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn48-ip-creativecommons-micro-20","number_of_choices":4,"question":"The _____ license allows use of the copyrighting work as well as distribution rights, however, the user must adhere to the terms of the original license. ","start":3600,"success":{"button":null,"message":"The share-alike license refers to the original license for issues distribution.  "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"for cash"},{"order":0,"points":0,"sticky":false,"text":"and sold"},{"order":0,"points":0,"sticky":false,"text":"for a profit "},{"order":21,"points":100,"sticky":false,"text":"All of the above"}],"failure":{"button":null,"message":"Non-commercial means non-profit.   "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn1-ip-creativecommons-micro-20","number_of_choices":4,"question":"The non-commercial license allows use of the copyrighting work as long as the software is not redistributed _____. ","start":3600,"success":{"button":null,"message":"Non-commercial means non-profit.   "},"type":"Multiple"}],"reference":"ip-and-video-games-18","text":null,"title":"Creative Commons"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"reference","mod":"ip-and-video-games","movie":null,"name":"Reference","promptfile":null,"prompts":null,"reference":null,"text":"<a class=\"dest\" id=\"ip-and-video-games-1\"><\/a><div class=\"accent\"><h1>Legal Disclaimer<\/h1><img class=\"aligncenter\" src=\".\/images\/iprtImage_1.png\" alt=\"iprtimage_1\" width=\"664\" height=\"390\" \/><p>This Module is going to cover a lot of legal concepts in the area of Intellectual Property; however, it is crucial to understand nothing herein should be taken as actual legal or professional advice. The material in this section is for educational and reference purposes only and is not presented by an attorney or legal scholar. It is always prudent to consult a licensed attorney before making any legal decisions.<\/p><h1>Overview<\/h1><img class=\"aligncenter\" src=\".\/images\/iprt_copyright.png\" alt=\"iprt_copyright\" width=\"664\" height=\"390\" \/><p>People create bodies of work for a variety of reasons: to make money, to share an idea, or to just entertain. Regardless of the reasons, someone has to put time and effort to create an original work. It makes sense that any creator would want to protect their creations (their intellectual property) from being stolen or misused. This is why we have intellectual property laws, which protect copyright, trademarks, patents, and trade secrets.<\/p><p>Often these protections are displayed to the public represented by a symbol. For example:.<\/p><p>© is the symbol for something being copyrighted<\/p><p>™ is the symbol for an unregister trademarked<\/p><p>® is the symbol for a registered trademark<\/p><p>But what do they mean? And what legal ramifications do we need to be aware of in developing video games?<\/p><p>There are four main categories of intellectual property: Copyright, Trademarks, Patents, and Trade Secrets. Each covers a different aspect of protecting a body of work.<\/p><p>Copyright includes things such as the notes or words in a song, the story in a book, characters in a video game, art, and\/or any original designs.<\/p><p>Trademark encompasses company names and logos, titles of movies and games, and marketing slogans and catchphrases.<\/p><p>Patents cover inventions and technical innovations such as in software, hardware, and technical designs.<\/p><p>Trade Secrets are things like a company's mailing lists, contracts, formulas, and development tools.<\/p><p>This module will cover the following topics relating to Intellectual Properties and Video Games:<\/p><div style=\"text-align: center;\"><ul class=\"anchorGroup\" style=\"text-align: left; display: inline-block;\"><li><a class=\"ankor\" href=\"#ip-and-video-games-2\">What is copyright?<\/a><\/li><li><a class=\"ankor\" href=\"#ip-and-video-games-3\">Obtaining Copyright<\/a><\/li><li><a class=\"ankor\" href=\"#ip-and-video-games-4\">Copyright and Universal Ideas<\/a><\/li><li><a class=\"ankor\" href=\"#ip-and-video-games-5\">Copyright and Derivative Works<\/a><\/li><li><a class=\"ankor\" href=\"#ip-and-video-games-6\">Copyright and Fair Use<\/a><\/li><li><a class=\"ankor\" href=\"#ip-and-video-games-7\">Trademarks<\/a><\/li><li><a class=\"ankor\" href=\"#ip-and-video-games-8\">Trade Secrets<\/a><\/li><li><a class=\"ankor\" href=\"#ip-and-video-games-9\">Trade Secrets in the Video Game Industry<\/a><\/li><li><a class=\"ankor\" href=\"#ip-and-video-games-10\">Protecting Trade Secrets<\/a><\/li><li><a class=\"ankor\" href=\"#ip-and-video-games-11\">Patents<\/a><\/li><li><a class=\"ankor\" href=\"#ip-and-video-games-12\">Software Patents and Video Games<\/a><\/li><li><a class=\"ankor\" href=\"#ip-and-video-games-13\">What is Intellectual Property?<\/a><\/li><li><a class=\"ankor\" href=\"#ip-and-video-games-14\">Intellectual Properties in Video Games: Design<\/a><\/li><li><a class=\"ankor\" href=\"#ip-and-video-games-15\">Intellectual Properties in Video Games: Coding<\/a><\/li><li><a class=\"ankor\" href=\"#ip-and-video-games-16\">What is Open Source Code?<\/a><\/li><li><a class=\"ankor\" href=\"#ip-and-video-games-17\">Open Source vs. Free Software<\/a><\/li><li><a class=\"ankor\" href=\"#ip-and-video-games-18\">Creative Commons – US<\/a><\/li><\/ul><\/div><\/div><a class=\"dest\" id=\"ip-and-video-games-2\"><\/a>&nbsp;<div class=\"accent\"><h1>What is Copyright?<\/h1><p>Copyright is literately what it says: the right to copy or make a duplicate. To have this right, the person must be the owner of the material or have permission from the owner to make the copy. Traditional, people pay money for that permission. For example, say someone writes an original novel and obtains a copyright on that novel. This means only they have permission to create new copies of their novel. For anyone else, it is illegal to copy the work without permission. Through this restriction, they are able to set terms for others to be allowed a copy of your work. Typically, this restriction is lifted on a “pay per copy” basis, which is how writers and artists are able to make a living off their work. .<\/p><p>Once someone has legally purchased a copy of a work, that copy is theirs to read, watch or listen to as they see fit. Typically, however, you DO NOT have a right to make more copies of the copy you purchased. The creator or owner of the property still holds copyright. <\/p><p>From here copyright laws can become quite complex but the most important thing to know is that copyright laws are used to protect your right to control the reproduction of bodies of work you have created. Also note that this work does not have to be a written document. Copyright can apply to music, images, and even computer code.<\/p><\/div><a class=\"dest\" id=\"ip-and-video-games-3\"><\/a>&nbsp;<div class=\"accent\"><h1>Obtaining Copyright<\/h1><img class=\"aligncenter\" src=\".\/images\/iprtmage2.png\" alt=\"iprtmage2\" width=\"664\" height=\"390\" \/><p>Copyright laws can differ from one country to another; however, in the United States there are eight different categories for what can qualify for copyright:<\/p><p>> Literary works<\/p><p>> Musical works, including accompanying words, if any<\/p><p>> Dramatic works, including accompanying music, if any<\/p><p>> Pantomimes and choreographic works<\/p><p>> Pictorial, graphic, and sculptural works<\/p><p>> Motion pictures and other audiovisual works<\/p><p>> Sound recordings<\/p><p>> Architectural works<\/p><p>Video games typically fall under “other audiovisual works”, but may also fall under “literary works”. A copyright granted to a video game will cover the visuals, sounds, characters, plots, and source code as it accumulates into an overall original body of work. A qualified IP lawyer can help decide what category (or categories) a property should fall under. Remember, there may be costs associated with copyrighting or establishing an Intellectual Property including possible legal fees and registration fees.<\/p><p>For copyright, registration is optional but recommended in case litigation becomes necessary. Some legal copyright protections are granted automatically when an original work is published or “fixed into a tangible medium”. A video game released on Steam would qualify for this. Still, taking the time to register is the best way to protect copyright.<\/p><p>Copyright is typically granted for a fixed period of time. For video games (made after 1978) copyright is granted for 95 years after initial release to the public.  During that time frame, the owner of the copyright can demand others obey their right to grant copyright as they see fit. After that time frame, the original creators are considered to be no longer able to claim exclusivity and the Intellectual Property becomes open to the public (also called Public Domain). Obviously, no video game has yet become public domain. <\/p><p>Breaking copyright (that is, making an unauthorized copy) will typically lead to a nasty “cease and desist” letter from an attorney. It can also lead to being sued for damages. Finally, in some cases, breaking someone's copyright can lead to criminal charges. It really depends on the desire of copyright holder.<\/p><\/div><a class=\"dest\" id=\"ip-and-video-games-4\"><\/a>&nbsp;<div class=\"accent\"><h1>Copyright and Universal Ideas<\/h1><p>One important consideration is that copyright is only given to the specific way a piece of work accumulates into something new; that is to say, what is truly original about it. Facts, universal concepts, and the like cannot be copyrighted. For example, anyone can write a curriculum on game design. All of the concepts will be universal, such as common theories in game design. These ideas are not copyrightable; however, the exact wording, layout, and design in describing these concepts to an audience can be.<\/p><img class=\"aligncenter\" src=\".\/images\/image_concept.png\" alt=\"image_concept\" width=\"530\" height=\"472\" \/><p>For another example, say you wrote a sci-fi novel. Even though Star Wars has spaceships, it doesn't mean your story can't have them as well. Spaceships are a universal concept when it comes to stories set in space.  Now, if you call them X-Wings and have pictures of Star Wars X-Wings, you are going to be in trouble, because those exact spaceships are part of an IP that the Disney Corporation owns. <\/p><p>Sometimes the creator of something will not know something is copyrighted, or even exist, and still violate copyright. This is rare, but can happen.<\/p><\/div><a class=\"dest\" id=\"ip-and-video-games-5\"><\/a>&nbsp;<div class=\"accent\"><h1>Copyright and Derivative Works<\/h1><img class=\"aligncenter\" src=\".\/images\/iprtImage3.png\" alt=\"iprtImage3\" width=\"664\" height=\"390\" \/><p>We often see video games adapted from movies or even the other way around. These are called derivative works. They are new but derived from an existing Intellectual Property. The same general laws apply. A derivative work is defined by statute as:<\/p><p>“based upon one or more pre-existing works such as translation, musical arrangement, dramatization, fictionalization, motion picture version, sound recording, art reproduction, abridgement, condensation, or any other form in which a work may be recast, transformed, or adapted.” <\/p><p>What this means is that a video game studio that wants to make a Star Wars Game based on The Empire Strikes Back, must first obtain permission through a legal license with Disney (owner of the Star Wars IP).  <\/p><\/div><a class=\"dest\" id=\"ip-and-video-games-6\"><\/a>&nbsp;<div class=\"accent\"><h1>Copyright and Fair Use<\/h1><p>In the U.S., copyright can sometimes be circumvented, in a limited way, under certain conditions. These exceptions are usually under what is called Fair Use. The concept of Fair Use is that for purposes of education, parody, or other social need, limited portions of copyrighted material can be reproduced without paying a licensing fee and without fear of legal consequences.<\/p><p>For example, school textbooks can reproduce limited portions of other people's copyrighted works and reprint them for students to learn. They must still give credit to the copyrighted material, but they don't have to ask for permission. Another example of Fair Use is parody. Satire and parody are thought to have social benefits and creators of parody are allowed some freedom to identify the IP's they wish to mock. <\/p><p>Fair Use has many stipulations which protect the original IP. Strictly commercial usages are not allowed. This can become complicated, for say, a for-profit educational company.  Is that educational or commercial? How much sampling of a copyrighted work is okay to reproduce? It is important to note that assuming material is being used as Fair Use, does not necessarily make it so. Companies can still send that “cease and desist” letter and they can still take someone to court if they do not agree that the usage of their copyright does indeed qualify as Fair Use.  Again, this is the realm of law statues and lawyers and one should always seek valid legal advice before assuming Fair Use of any Intellectual Property.<\/p><\/div><a class=\"dest\" id=\"ip-and-video-games-7\"><\/a>&nbsp;<div class=\"accent\"><h1>Trademarks<\/h1><img class=\"aligncenter\" src=\".\/images\/iprtImage4.png\" alt=\"iprtImage4\" width=\"664\" height=\"390\" \/><p>Trademarks deal with words, images, logos, and visual designs meant to distinguish intellectual properties from each other. This is meant to protect the integrity and marketability of one's creation and future creations under that banner. <\/p><p>Look around and you will see trademarks everywhere:<\/p><p>-\u0009Car company emblems on every single car on the road<\/p><p>-\u0009The design of a can of soda<\/p><p>-\u0009The sports logo or any sports team's mascot design<\/p><p>-\u0009Corporate branding and packaging design on every single item in your local grocery store.<\/p><p>-\u0009The name and logo of your favorite musical group. <\/p><p>-\u0009Just about everything else that has image design used as branding for a company, product or service.<\/p><p>All of our favorite (and not so favorite) video game characters are probably trademarked. Pac-Man, Mario, Master Chief all have protected usage from trademarks. Often we will see this symbol “™” which tells us the property is considered trademarked while it goes through the process of public scrutiny. Or this mark “®” which indicates the trademark is approved and in use. Usage is a major component to holding a trademark. In general, a company must publicly use the trademark at all times the trademark is claimed. That means, it has to exist on a currently marketed or used product, service or medium. <\/p><p>Another thing to consider is that a particular trademark only covers a particular category of goods or services. If we trademark the name and logo of a game, say Tempered Steel, we would not have trademark rights in food packaging. So there could be Tempered Steel the video game and Tempered Steel vitamins. <\/p><p>Much like copyright, you are not allowed to reproduce the trademarked image without the expressed approval of the trademark owner. It sounds simple, but it can become very complex. For instance, suppose you are filming a movie that involves a massive car chase on the streets of Los Angeles. Every single automobile has a brand logo and\/or a corporate logo. Are you in violation of trademark if the camera picks up the Chevy “bowtie” on a car that is just in the scene? The answer is, “Maybe”.<\/p><\/div><a class=\"dest\" id=\"ip-and-video-games-8\"><\/a>&nbsp;<div class=\"accent\"><h1>Trade Secrets<\/h1><p>The United States Uniform Trade Secrets Act defines a trade secret as:<\/p><p>“Trade Secret” means information, including a formula, pattern, compilation, program device, method, technique, or process that: (i) derives independent economic value, actual or potential, from not being generally known to, and not being readily ascertainable by proper means by, other persons who can obtain economic value from its disclosure or use, and (ii) is the subject of efforts that are reasonable under the circumstances to maintain its secrecy.”<\/p><p>Now that we are clear on that…wait, what? This may need a little more explanation.<\/p><p>Trade secrets include any information a company has, or anything a company does that gives itself an advantage; however, is not commonly known or practiced by others in their industry or the public. This can encompass a wide variety of “secrets” including:<\/p><p>\u0009• A recipe or formula, such as the secret ingredient of a soft drink<\/p><p>\u0009• A process, such as a factory that makes specialize parts<\/p><p>\u0009• A design, such as a machine or invention<\/p><p>The purpose of a trade secret, as opposed to a patent, is that when a patent is filed for, the secrets of the formula, process, or design become known to the public. For example, if the Coca-Cola Company applied for a patent on its secret formula, they would expose that formula to the world. Even if their patent was accepted (which is not clear it would) they would only have exclusive rights to the exact formula they patented. Meanwhile, every other cola company now knows the secret of Coca-Cola and starts to experiment with it. It is possible another company could alter the recipe just slightly and make something even better than Coke. None of this is to Coca-Cola's advantage. Instead, they keep the formula under heavy security, with only a few select people in the company having access. <\/p><p>To qualify as a trade secret it must fulfill these three requirements:<\/p><p>1.\u0009It must actually be a secret and not general knowledge in an industry or with the public.<\/p><p>2.\u0009It must be economically viable because it is a secret. In other words, if others in the industry could use it, they all certainly would because it gives a clear advantage to the business. <\/p><p>3.\u0009The owners of the trade secret must treat it as valuable and seek reasonable protections from industry theft. <\/p><p>The protections trade secrets receive are fairly nebulous. Even as a trade secret, it is perfectly legal for soft drink competitors to try and figure out the formula of Coca-Cola through chemists, trial and error, and reverse engineering. At the same time, real cases of industrial espionage (such as theft) are already illegal due to other existing criminal laws.  <\/p><\/div><a class=\"dest\" id=\"ip-and-video-games-9\"><\/a>&nbsp;<div class=\"accent\"><h1>Trade Secrets in the Video Game Industry<\/h1><img class=\"aligncenter\" src=\".\/images\/iprtmage11.png\" alt=\"iprtmage114\" width=\"664\" height=\"390\" \/><p>Trade secrets do exist in the video game industry. Here is a list of some of the most common instances:<\/p><p>     • Customer lists. This is a common trade secret across many industries. Companies will often collect data on their clients or customers for internal analysis. This information is kept secret from competitors who would greatly value such information. The Valve Corporation, for example has data on their registered users other companies would covet.  <\/p><p>     • Development tools. Video game companies often create in-house development tools that would hold value to competitors if they had them.  In-house game engines and other internally built systems fall under this category.<\/p><p>     • Code. Systems within games can do amazing things, but sometimes it can be difficult to tell exactly how something was achieved in the coding.  Internal elements of a released game that have not been disclosed to the public could qualify as a trade secret. In some cases, the game designers may even be hiding trade secrets from players. Everquest, for example, attempted to hide the actual numbers and coding that determined combat to prevent players from figuring out ways to trump the game. <\/p><p>     •  Details of licensing agreements. Game engines are often licensed at an un-fixed price. Companies will negotiate based on value and purpose. If a video game company had access to what others are paying for the engine, they could position themselves much better when haggling for a price.<\/p><\/div><a class=\"dest\" id=\"ip-and-video-games-10\"><\/a>&nbsp;<div class=\"accent\"><h1>Protecting Trade Secrets<\/h1><p>For the most part, it is up to the company or studio to protect its trade secrets. Corporate espionage is illegal, but if someone steals a secret, there is little hope of stopping them from exploiting it beyond a lengthy legal process. By the time that is over, the whole world could know their trade secrets. <\/p><p>Video Game Studios often try to keep a lot of information under the public radar. Even knowing a certain game is under development can become a trade secret of sorts if there is potential monetary value in uncovering that secret. For example, competitors may be desperate to know when Half-Life 3 will be released (or if it is even being developed). For competitors developing similar games, it would be hugely valuable to know what the game looks like, what its unique mechanics are, and when it was being released.  With such information they could shift their game slightly to better compete by introducing similar mechanics or esthetics. Most importantly, they could calculate when to release their game based on when Half-Life 3 was being released. They could push to release their game first or much later to avoid direct competition. <\/p><p>Obviously, studios do not want this done to them, but it can be difficult to control. One of the ways studios protect themselves are with Non-Disclosure Agreements or NDAs.  These are legal contracts that bind the signees to silence regarding company trade secrets, often with heavy financial penalties for breaking them. <\/p><p>Another way studios protect their trade secrets is through good ol' fashion security. This can be anything from shredding documents before throwing them away to secured rooms under heavy lock and key. It may sound a bit paranoid considering these are games we are talking about, but remember, this is a multi-billion dollar industry. If rummaging through a game studio's trash can result in valuable information, then a rummaging they will go. <\/p><p>Despite laws, precautions, and ethics sometimes trade secrets get out. This, again, is where real legal council is crucial. At minimum, “cease and desist” letters will be sent. More likely, if espionage or someone breaking a NDA is the cause, litigation in the courts may be required. If it comes to a court case, more than likely, the company will seek monetary compensation for damages done.<\/p><\/div><a class=\"dest\" id=\"ip-and-video-games-11\"><\/a>&nbsp;<div class=\"accent\"><h1>Patents<\/h1><img class=\"aligncenter\" src=\".\/images\/iprtimage33.png\" alt=\"iprtimage33\" width=\"664\" height=\"390\" \/><p>Patents are designed to protect inventors and their rights to own and control their inventions. In exchange for compete disclosure to the public of the details of an invention, a patent grants exclusive rights to that invention to the inventor for a limited amount of time. <\/p><p>Patents are granted and enforced by governments (sovereign states) and can vary in the degree of exclusivity depending on the country the patent originates in.  In addition, patents are far more difficult to acquire than a copyright or a trademark. In order to qualify for a patent the applicant for a patent must prove certain claims made by the invention itself. In short, the inventor must demonstrate that invention does what it says it does. <\/p><p>There are other considerations, as well. Patents are not granted to inventions that are already well known to the public before the filing for the patent. Basically, there is a grace period in which the person or entity applying for a patent must disclose to the public their intention to be granted a patent, thus allowing other patent holders to officially protest the request for the new patent.  <\/p><p>Another consideration in gaining a patent is the inventions “obviousness”. That is to say, in order to be granted a patent, the invention must be, well, inventive, or have what is called an “inventive step”. This is sort of a litmus test to see if an invention is too simplistic or lacks a definitive step forward from what already exists in terms of its technology or state-of-the-art advances.<\/p><\/div><a class=\"dest\" id=\"ip-and-video-games-12\"><\/a>&nbsp;<div class=\"accent\"><h1>Software Patents and Video Games<\/h1><p>In many cases, original programing of computer software is considered an invention and is applicable to patent rights. The exact qualifications that makes software patentable, again, varies greatly from country to country. As of today, the legal definition of a software patent does not exist. Instead, it is categorized under “abstract ideas”, which does create some confusion for those seeking software patents. <\/p><p>In fact, there is great debate on whether software should be granted patents at all. The basic argument being that software patents fail at being clearly inventive and non-obvious and that software patents harm innovation.  <\/p><p>This is an important consideration in the video game industry. Most video games require a large investment in people, time, and effort. If software patents are unintentionally violated because they don't turn out to be as “non-obvious” as first thought, then huge amounts of investment money can be wasted. Not to mention the wasted efforts of the people involved.<\/p><\/div><a class=\"dest\" id=\"ip-and-video-games-13\"><\/a>&nbsp;<div class=\"accent\"><h1>What is Intellectual Property?<\/h1><p>Intellectual Property (IP) is a term that describes inventions, artistic designs, images, writings, or any combination of these elements created purely by the mind of the creator for commercial purposes. <\/p><p>Intellectual property laws cover all laws that protect people's work or creations, such as copyright, trademark, trade secrets, and patents. They give an owner of a piece of work the legal right to deny, charge for, or give away their intellectual property. <\/p><p>In simple terms, intellectual property rights give exclusive control of a property to the owner of that property. For example, The Disney Corporation now owns the intellectual property rights to both Marvel Comics and the entire Star Wars franchise. No one else can create, copy, market or profit off these properties without the permission of Disney. <\/p><p>Generally that means you cannot reproduce any material (either visual, audio, written, or coded) or profit off these properties. For example, you may be a terrific artist who can draw comic book characters like a professional; however, you are not allowed to paint and sell Marvel character images without permission because you do not own the copyright. <\/p><p>Observant readers have probably seen massive intellectual property infringement on the Internet: Illegal download sites, misuse of corporately owned pop culture icons, even entire Youtube videos of completely stolen characters and visuals.  One might be tempted in believing that the controllers of these imitated IP's are okay with this sort of copyright infringement. The truth is, they can send that “cease and desist” letter at any time as well as sue for damages. Just because everyone is doing it, doesn't mean lawyers won't eventually become involved.<\/p><\/div><a class=\"dest\" id=\"ip-and-video-games-14\"><\/a>&nbsp;<div class=\"accent\"><h1>Intellectual Properties in Video Games: Design<\/h1><img class=\"aligncenter\" src=\".\/images\/image_UserInterface.png\" alt=\"image_UserInterface\" width=\"664\" height=\"390\" \/><p>So what exactly does all this mean to us in the video game industry? Well, the truth is, intellectual property issues affect nearly every aspect of game development. In particular for games (almost all of them these days) with design, story, sounds, visuals, and code. <\/p><p>A game's design is copyrightable, including its story, characters, original setting, mechanics, and in some cases, gameplay. A good game design document will help establish all of the original material that the copyright will seek to protect. <\/p><p>Of course, as always, there are stipulations and complications. Obviously, there is a lot of common themes and gameplay in video games. Can someone copyright the ability to jump from one platform to the next? Can someone claim modern Earth as a copyrighted setting for a game?<\/p><p>As with copyright in other mediums, no one can own a fundamental idea or fact. And so, an intellectual property is formed from the unique combination of original and universal elements put into the game. <\/p><p>We will stress again, that these become legal definitions that can be confusing and make sense only to lawyers. Always seek professional legal advice before assuming anything about your own or others intellectual property. That said, the most important thing to avoid when developing a game (from an intellectual property POV) is to avoid plagiarism at all costs. Plagiarism is knowingly or unknowingly stealing, in part or whole, someone else's work.  Even if a work is public domain, it is still considered unethical to copy from someone else and then hide that fact. In almost all cases, and in particular in the age of search engines, plagiarism will be uncovered eventually. Once that happens, not only is one open to legal consequences, they must also face the loss of personal integrity and community support.  <\/p><\/div><a class=\"dest\" id=\"ip-and-video-games-15\"><\/a>&nbsp;<div class=\"accent\"><h1>Intellectual Properties in Video Games: Coding<\/h1><img class=\"aligncenter\" src=\".\/images\/image_code.png\" alt=\"image_code\" width=\"664\" height=\"390\" \/><p>Modern Intellectual Property laws have expanded to include computer coding under copyright law. For proper U.S. registration, some portion of the code must be submitted for review and viewable by the public. Obviously, this does not have to be code that gives away any trade secrets and is still under copyright of the company that posted it. As a game developer, be cautious and deliberate when selecting what portion of code to submit.  <\/p><p>Remember, others have come before you. Within the US patent system you may have demonstrate your code is “novel” or “not-obvious”.  In other words, that it solves a problem in a way that has not previously been solved with similar code. <\/p><p>In the end, once an IP for a game is submitted (including any copyrights, trademarks, or patents) there will be a waiting game. Once fees and applications are submitted (it is best to have a lawyer specializing in IP law for this process) there is still a waiting period after the game has been released. During this time, other individuals and companies can see what is presented and make any claims of copyright, patent, or trademark infringement.<\/p><\/div><a class=\"dest\" id=\"ip-and-video-games-16\"><\/a>&nbsp;<div class=\"accent\"><h1>What is Open Source Code?<\/h1><img class=\"aligncenter\" src=\".\/images\/iprtimage15.png\" alt=\"iprtimage15\" width=\"664\" height=\"390\" \/><p>Not everyone is profit-minded when it comes to intellectual property rights. In fact, many encourage the free use of their intellectual properties by making their creations open source. This means anyone is allowed to alter, edit or otherwise use the created material as they see fit. Generally, the consumers of open source material have similar goals with that material (typically to improve or expand the material).<\/p><p>For video games, Open Source usually means open code. That is to say, the source code created by the game's designers is given to the public to use and modify in new and interesting ways. Often this is a coordinated and collaborating effort of an entire community. <\/p><p>As an example of open source code, GG|interactive's (creators of this curriculum) parent company, GarageGames, offers its Torque 3D and Torque 2D game engines as Open Source. Users must agree to the MIT license which reads:<\/p><p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and\/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. This allows a lot of freedom for anyone who wants to develop games on those engines. The company also hosts a forum for Torque users to gather and discuss their projects and share tips, creating a community of open source developers.<\/p><\/div><a class=\"dest\" id=\"ip-and-video-games-17\"><\/a>&nbsp;<div class=\"accent\"><h1>Open Source vs. Free Software<\/h1><p>Open source software does not necessarily mean free in terms of cost. In fact, the term “free” more often refers to “freedoms to modify” rather than actual costs. Free software, on the other hand, typically is free in both price and unrestricted to modify.  Free software has no limitations or restrictions on anyone changing or editing the software code for their own uses.  <\/p><p>In simple terms, all free software is open source.  However, not all open source software is absolutely free (either in monetary costs or freedom to modify). It all depends on the imposed restrictions by the owners of the source code.<\/p><\/div><a class=\"dest\" id=\"ip-and-video-games-18\"><\/a>&nbsp;<div class=\"accent\"><h1>Creative Commons – US<\/h1><img class=\"aligncenter\" src=\".\/images\/iprtimage16.png\" alt=\"iprtimage16\" width=\"664\" height=\"390\" \/><p>Creative Commons – United States is a non-profit organization that is dedicated to the education and support of people, organizations and communities that use their open source material and, more generally, those who are interested in intellectual property laws and growing open source content for free public use. <\/p><p>One of the features of a Creative Commons license is that it offers tools that, “give everyone from individual creators to large companies and institutions a simple, standardized way to grant copyright permissions to their creative work.” (www.creativecommons.org\/licenses\/) <\/p><p>What is does is allow copyrighted material to be copied, distributed, and otherwise used for non-commercial purposes while the original party still retains copyright in all other cases. This allows companies great freedom in allowing some or all of their copyrights to be used by the public.<\/p><p>As mentioned, intellectual property laws are complex, but in general, if you are not the creator\/owner of a piece of writing, an image, a song, a video game – whatever it may be – then you do not have the right to reproduce, copy, market or enjoy that property without permission.<\/p><\/div><!--page:~~ip-and-video-games-reference-text~~-->","title":"Reference Material"},{"bIsChecked":true,"exercise":null,"instructions":"<h1>Goal<\/h1><p>Demonstrate understanding of the different types of intellectual property by identifying what constitutes a copyright, trademark, trade secret, or patent.<\/p><h1>Steps<\/h1><ol><li>Choose any large company or corporation.<\/li><li>Use the Internet to research that company and identify as many intellectual properties of that company as you can.<\/li><li>One a piece of paper (or a digtial document) write the following:<\/li><ol><li>Describe what the intellectual property is and who it belongs to. You can also use illustrations off the web (as educational use under fair use).<\/li><li>Tell whether that intellectual property would quality as a copyright, trademark, trade secret, or patent, and why.<\/li><li>List at least ten examples of intellectual properties in this way. You may use more than one company to create your list.<\/li><li>Be sure to include at least one example of copyright, trademark, tradesecret, and patent.<\/li><li>DO NOT use any of the examples given in this module.<\/li><\/ol><li>Be prepared to discuss your answers with your instructor or the class.<\/li><\/ol><h1>Hints and Challenges<\/h1><p>A student might choose their favorite video game studio for this exercise. They would then look for logos, game titles, original game assets, etc. as examples of intellectual property.<\/p><!--page:~~ip-and-video-games-writing-exercise~~-->","link":"exercise","mod":"ip-and-video-games","movie":null,"name":"IPWritingExercise","promptfile":null,"prompts":null,"reference":null,"text":null,"title":"Writing Exercise"}]},{"bIsChecked":true,"name":"ethics-in-video-games","title":"Ethics in Video Games","topics":[{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":null,"movie":".\/video\/ethics_overview_1.mp4","name":null,"promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"a classroom"},{"order":0,"points":0,"sticky":false,"text":"mathematics"},{"order":0,"points":100,"sticky":false,"text":"society"},{"order":0,"points":0,"sticky":false,"text":"movies and songs"}],"failure":{"button":null,"message":"Ethics become important in terms of how people relate and behave with each other"},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn1-ethics-overview-micro-1","number_of_choices":4,"question":"Broadly speaking, ethics is the philosophy of determining right and wrong in ______.","start":3600,"success":{"button":null,"message":"Ethics become important in terms of how people relate and behave with each other"},"type":"Multiple"}],"reference":"ethics-in-video-games-1","text":null,"title":"Overview"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":null,"movie":".\/video\/ethics_plagiarism_2.mp4","name":"Plagiarism","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"praise"},{"order":0,"points":100,"sticky":false,"text":"theft"},{"order":0,"points":0,"sticky":false,"text":"journalism"},{"order":0,"points":0,"sticky":false,"text":"free speech"}],"failure":{"button":null,"message":"Attributing sources is one way to avoid accusations of plagiarismr"},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn1-ethics-overview-micro-1","number_of_choices":4,"question":"Plagiarism is a form of _____.","start":3600,"success":{"button":null,"message":"Attributing sources is one way to avoid accusations of plagiarism"},"type":"Multiple"}],"reference":"ethics-in-video-games-2","text":null,"title":"Plagiarism"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":null,"movie":".\/video\/ethics_fairuseintro_3.mp4","name":"FairUseIntro","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"ethical litmus"},{"order":0,"points":100,"sticky":false,"text":"four-point"},{"order":0,"points":0,"sticky":false,"text":"grey-scale"},{"order":0,"points":0,"sticky":false,"text":"justice scale"}],"failure":{"button":null,"message":"The Fair Use Doctrine demonstrates the instances copyrighted material can be used without permission."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn3-ethics-fairuse-micro-3","number_of_choices":4,"question":"The Fair Use Doctrine uses a _____ test to determine the allowable usages of an Intellectual property by a third party.","start":3600,"success":{"button":null,"message":"The Fair Use Doctrine demonstrates the instances copyrighted material can be used without permission."},"type":"Multiple"}],"reference":"ethics-in-video-games-3","text":null,"title":"Fair Use Intro"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":null,"movie":".\/video\/ethics_fairuseclauseone_4.mp4","name":"FairUseClauseOne","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"social commentary"},{"order":0,"points":0,"sticky":false,"text":" parody"},{"order":0,"points":0,"sticky":false,"text":"non-profit education"},{"order":21,"points":100,"sticky":false,"text":"All of the above"}],"failure":{"button":null,"message":"Clause one considers “public benefit” as a reason to use an intellectual property without permission."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn4-ethics-fairuse-clasueone-micro-4","number_of_choices":4,"question":"Clause One of the Fair Use Doctrine allows the use of an intellectual property for the purposes of _____.","start":3600,"success":{"button":null,"message":"Clause one considers “public benefit” as a reason to use an intellectual property without permission."},"type":"Multiple"}],"reference":"ethics-in-video-games-4","text":null,"title":"Fair Use Clause One"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":null,"movie":".\/video\/ethics_fairuseclausetwo_5.mp4","name":"FairUseClauseTwo","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"images"},{"order":0,"points":100,"sticky":false,"text":"real-world facts"},{"order":0,"points":0,"sticky":false,"text":"excerpt"},{"order":21,"points":0,"sticky":false,"text":"All of the above"}],"failure":{"button":null,"message":"Facts or “truths” are not protected by intellectual property laws, however, the manner in which they are presented can be. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn5-ethics-fairuse-clausetwo-micro-5","number_of_choices":4,"question":"Clause Two of the Fair Use Doctrine allows the use of any _____ from an intellectual property.","start":3600,"success":{"button":null,"message":"Facts or “truths” are not protected by intellectual property laws, however, the manner in which they are presented can be. "},"type":"Multiple"}],"reference":"ethics-in-video-games-5","text":null,"title":"Fair Use Clause Two"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":null,"movie":".\/video\/ethics_fairuseclausethree_6.mp4","name":"FairUseClauseThree","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"half of the original work"},{"order":0,"points":0,"sticky":false,"text":"One third of the original work"},{"order":0,"points":100,"sticky":false,"text":"an unspecified amount"},{"order":0,"points":0,"sticky":false,"text":"none at all"}],"failure":{"button":null,"message":"The rule of thumb is “the minimum amount needed” but there are no exact guidelines."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn6-ethics-fairuse-clausethree-micro-6","number_of_choices":4,"question":"Clause Three of the Fair Use Doctrine limits how much of an Intellectual property can be excerpted to _____.","start":3600,"success":{"button":null,"message":"The rule of thumb is “the minimum amount needed” but there are no exact guidelines."},"type":"Multiple"}],"reference":"ethics-in-video-games-6","text":null,"title":"Fair Use Clause Three"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":null,"movie":".\/video\/ethics_fairuseclausefour3_7.mp4","name":"FairUseClauseFour","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"harming of the commercial value "},{"order":0,"points":0,"sticky":false,"text":" use of parody"},{"order":0,"points":0,"sticky":false,"text":"access of facts"},{"order":21,"points":0,"sticky":false,"text":"All of the above"}],"failure":{"button":null,"message":"Clause four protects the original intellectual property owner from commercial competition from people using their work un Fair Use."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn7-ethics-fairuse-clausefour-micro-7","number_of_choices":4,"question":"Clause Four of the Fair Use Doctrine seeks to restrict the _____ of another’s intellectual property.","start":3600,"success":{"button":null,"message":"Clause four protects the original intellectual property owner from commercial competition from people using their work un Fair Use."},"type":"Multiple"}],"reference":"ethics-in-video-games-7","text":null,"title":"Fair Use Clause Four"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":null,"movie":".\/video\/ethics_unauthorizeduse_8.mp4","name":"UnauthorizedUse","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"Using an intellectual property under the Fair Use Doctrine"},{"order":0,"points":100,"sticky":false,"text":"Downloading an intellectual property without permission from its owner"},{"order":0,"points":0,"sticky":false,"text":"Purchasing a legal copy for individual use"},{"order":21,"points":0,"sticky":false,"text":"None of the above"}],"failure":{"button":null,"message":"Unauthorized use should be obvious. If you haven’t received direct permission or if it doesn’t fall under Fair Use, it is unauthorized use."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn8-ethics-unauthorizeduse-micro-8","number_of_choices":4,"question":"Which of the following would be considered unauthorized use of an intellectual property? ","start":3600,"success":{"button":null,"message":"Unauthorized use should be obvious. If you haven’t received direct permission or if it doesn’t fall under Fair Use, it is unauthorized use."},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Unauthorized downloading of music actually helps the music industry."},{"order":0,"points":0,"sticky":false,"text":"Unauthorized downloading of music has cost the music industry millions."},{"order":0,"points":100,"sticky":false,"text":"We do not know the exact economic impact of unauthorized downloading of music."},{"order":0,"points":0,"sticky":false,"text":"Music artists, as a whole, are against unauthorized downloading of their music."}],"failure":{"button":null,"message":"Regardless of odd economic forces that may or may not be at work, ethics dictate that unauthorized use is still a form of theft"},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn9-ethics-unauthorizeduse-micro-8","number_of_choices":4,"question":"Which of the following is the most correct statement?","start":3600,"success":{"button":null,"message":"Regardless of odd economic forces that may or may not be at work, ethics dictate that unauthorized use is still a form of theft"},"type":"Multiple"}],"reference":"ethics-in-video-games-8","text":null,"title":"Unauthorized Use"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":null,"movie":".\/video\/ethics_contractintro_9.mp4","name":"ContractIntro","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"threats"},{"order":0,"points":100,"sticky":false,"text":"contracts"},{"order":0,"points":0,"sticky":false,"text":"handshakes"},{"order":0,"points":0,"sticky":false,"text":"privacy acts"}],"failure":{"button":null,"message":"Always read a contract carefully and be sure you agree with everything written before signing. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"Popcorn51-ethics-contractsintro-micro_9","number_of_choices":4,"question":"Because video game development is a multi-billion dollar industry, _____ are widely used to secure employees.","start":3600,"success":{"button":null,"message":"Always read a contract carefully and be sure you agree with everything written before signing. "},"type":"Multiple"}],"reference":"ethics-in-video-games-9","text":null,"title":"Contract Intro"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":null,"movie":".\/video\/ethics_nda_10.mp4","name":"NDA","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"No Disclosure Allowed"},{"order":0,"points":0,"sticky":false,"text":"Non-Disclosure Argument"},{"order":0,"points":100,"sticky":false,"text":"Non-Disclosure Agreement"},{"order":0,"points":0,"sticky":false,"text":"No Discourse Agreement"}],"failure":{"button":null,"message":"In a contract, NDA typically stands for Non-Disclosure Agreement.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn10-ethics-nda-micro-10","number_of_choices":4,"question":"In legal contracts, NDA is typically an acronym for _____.","start":3600,"success":{"button":null,"message":"In a contract, NDA typically stands for Non-Disclosure Agreement.  "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"not discuss private company information with corporate rivals"},{"order":0,"points":0,"sticky":false,"text":"not discuss private company information with family and friends"},{"order":0,"points":0,"sticky":false,"text":"only discuss company information publicly known from press releases"},{"order":21,"points":100,"sticky":false,"text":" All of the above."}],"failure":{"button":null,"message":"NDA’s allow companies to have open interviews with some protection against corporate espionage."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn11-ethics-nda-micro-10","number_of_choices":4,"question":"By signing a Non-Disclosure Agreement, the signee agrees to _____.","start":3600,"success":{"button":null,"message":"NDA’s allow companies to have open interviews with some protection against corporate espionage."},"type":"Multiple"}],"reference":"ethics-in-video-games-10","text":null,"title":"NDA"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":null,"movie":".\/video\/ethics_ncc_11.mp4","name":"NCC","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"No Corporate Competition"},{"order":0,"points":0,"sticky":false,"text":"Null Contract Consideration"},{"order":0,"points":0,"sticky":false,"text":"Never Consider Consequences"},{"order":0,"points":100,"sticky":false,"text":"Non-Compete Clause"}],"failure":{"button":null,"message":"In a contract, NCC typically stands for Non-Complete Clause."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn12-ethics-ncc-micro-11","number_of_choices":4,"question":"In a contract, NCC is typically an acronym for _____.","start":3600,"success":{"button":null,"message":"In a contract, NCC typically stands for Non-Complete Clause."},"type":"Multiple"},{"choices":[{"order":0,"points":100,"sticky":false,"text":"employer"},{"order":0,"points":0,"sticky":false,"text":"employee"},{"order":0,"points":0,"sticky":false,"text":"consumer"},{"order":21,"points":0,"sticky":false,"text":"All of the above"}],"failure":{"button":null,"message":"Some states, such as California, do not legally hold people to non-compete clauses, allowing them the right to work, instead. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn13-ethics-ncc-micro-11","number_of_choices":4,"question":"Signing a Non-Complete Clause in a contract gives an unfair advantage to the _____.","start":3600,"success":{"button":null,"message":"Some states, such as California, do not legally hold people to non-compete clauses, allowing them the right to work, instead. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"protect both the company and the employee from “poaching” by offers of better pay."},{"order":0,"points":0,"sticky":false,"text":"give employees options if things don’t work out at the current company."},{"order":0,"points":100,"sticky":false,"text":"prevent an employee from taking a job offer from a rival company."},{"order":0,"points":0,"sticky":false,"text":"create fair competition for labor among companies"}],"failure":{"button":null,"message":"NCC’s are never in favor of an employee, but are ethically questionable ways to limit employment options for people."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn14-ethics-ncc-micro-11","number_of_choices":4,"question":"The purpose of a Non-Compete Clause is to _____.","start":3600,"success":{"button":null,"message":"NCC’s are never in favor of an employee, but are ethically questionable ways to limit employment options for people."},"type":"Multiple"}],"reference":"ethics-in-video-games-11","text":null,"title":"NCC"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":null,"movie":".\/video\/ethics_privacy_12.mp4","name":"Privacy","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"when data is being collected on them"},{"order":0,"points":0,"sticky":false,"text":"what data is being collected on them"},{"order":0,"points":0,"sticky":false,"text":"how to protect themselves from data collecting software"},{"order":21,"points":100,"sticky":false,"text":"All of the above."}],"failure":{"button":null,"message":" Most people are ignorant on how their personal information is collected and used on the Internet."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn17-ethics-privacy-micro-12","number_of_choices":4,"question":"Internet privacy is a growing concern because people don’t always know _____.","start":3600,"success":{"button":null,"message":" Most people are ignorant on how their personal information is collected and used on the Internet."},"type":"Multiple"}],"reference":"ethics-in-video-games-12","text":null,"title":"Privacy"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":null,"movie":".\/video\/ethics_datacollecting_13.mp4","name":"DataCollecting","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"profit"},{"order":0,"points":0,"sticky":false,"text":" technical ability"},{"order":0,"points":0,"sticky":false,"text":"competitive advantage"},{"order":21,"points":100,"sticky":false,"text":"All of the above "}],"failure":{"button":null,"message":" Many companies seek to push the very limits of the law in data collection regardless of the ethics in doing so."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn18-ethics-datacollection-micro-13","number_of_choices":4,"question":"Unfortunately, the decision for a company to use hidden data collection software is often a question of _____ rather than ethics.","start":3600,"success":{"button":null,"message":" Many companies seek to push the very limits of the law in data collection regardless of the ethics in doing so."},"type":"Multiple"}],"reference":"ethics-in-video-games-13","text":null,"title":"Data Collecting"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":null,"movie":".\/video\/ethics_digitalfottprints_14.mp4","name":"DigitalFootprints","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"A person’s credit card information after making a purchase Online"},{"order":0,"points":0,"sticky":false,"text":"A person’s annual water usage"},{"order":0,"points":0,"sticky":false,"text":" A person’s computer’s weekly power usage"},{"order":0,"points":0,"sticky":false,"text":" Kicking your monitor in frustration"}],"failure":{"button":null,"message":"Intentionally submitting personal information on the Internet is called an active footprint. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn19-ethics-digitalfootprint-micro-14","number_of_choices":4,"question":"Which of the following is considered a digital footprint on the Internet?","start":3600,"success":{"button":null,"message":"Intentionally submitting personal information on the Internet is called an active footprint. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"identity theft"},{"order":0,"points":0,"sticky":false,"text":"an active footprint"},{"order":0,"points":0,"sticky":false,"text":"cookie dough"},{"order":0,"points":100,"sticky":false,"text":" a passive footprint"}],"failure":{"button":null,"message":"Passive footprints are actively tracked by websites to improve performance and customer satisfaction. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn20-ethics-digitalfootprint-micro-14","number_of_choices":4,"question":"Data collected on a website, based on a visitor’s clicks and browsing history is called _____.","start":3600,"success":{"button":null,"message":"Passive footprints are actively tracked by websites to improve performance and customer satisfaction. "},"type":"Multiple"}],"reference":"ethics-in-video-games-14","text":null,"title":"Digital Footprints"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":null,"movie":".\/video\/ethics_identitytheft_15.mp4","name":"IdentityTheft","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"digital footprints"},{"order":0,"points":0,"sticky":false,"text":"Facebook profile"},{"order":0,"points":0,"sticky":false,"text":"photo ID"},{"order":0,"points":0,"sticky":false,"text":"purchase history"}],"failure":{"button":null,"message":"Using an unsecured Wifi connection gives identity thieves easy access your digital footprints on the Internet"},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn21-ethics-idtheft-micro-15","number_of_choices":4,"question":"Internet identity theft is largely achieved by pulling together an individual’s ______ from the Web","start":3600,"success":{"button":null,"message":"Using an unsecured Wifi connection gives identity thieves easy access your digital footprints on the Internet"},"type":"Multiple"}],"reference":"ethics-in-video-games-15","text":null,"title":"Identity Theft"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":null,"movie":".\/video\/ethics_internetprivacyactsintro_16.mp4","name":"InternetPrivacyActsIntro","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"Emails"},{"order":0,"points":0,"sticky":false,"text":"Location"},{"order":0,"points":0,"sticky":false,"text":"Photos"},{"order":21,"points":100,"sticky":false,"text":"All of the above"}],"failure":{"button":null,"message":"Always be aware of the information an app wants access to before downloading."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn22-ethics-internetprivacy-micro-16","number_of_choices":4,"question":"Which of the following information could an app access from a smart device as a requirement to owning the app?","start":3600,"success":{"button":null,"message":"Always be aware of the information an app wants access to before downloading."},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"the President"},{"order":0,"points":100,"sticky":false,"text":"Congress and the House of Representatives"},{"order":0,"points":0,"sticky":false,"text":"hackers "},{"order":0,"points":0,"sticky":false,"text":"citizen action committees"}],"failure":{"button":null,"message":"Congress and the House are the body of government that writes and passes Internet protection laws in the US. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn23-ethics-internetprivacy-micro-16","number_of_choices":4,"question":"In the U.S., _____ is(are) in charge of creating legislation to protect citizens’ privacy on the Internet.","start":3600,"success":{"button":null,"message":"Congress and the House are the body of government that writes and passes Internet protection laws in the US. "},"type":"Multiple"}],"reference":"ethics-in-video-games-16","text":null,"title":"Internet Privacy Acts Intro"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":null,"movie":".\/video\/ethics_internetprivacyactsexamples_17.mp4","name":"InternetPrivacyActsExamples","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"the Entertainment Software Ratings Board "},{"order":0,"points":0,"sticky":false,"text":"the Fair Use Doctrine"},{"order":0,"points":100,"sticky":false,"text":"the Electronic Communications Act"},{"order":21,"points":0,"sticky":false,"text":"None of the above"}],"failure":{"button":null,"message":"The World Wide Web is a much different thing today than it was in 1986 when the Electronic Communications Act was passed."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn24-ethics-usprivacyacts-micro-17","number_of_choices":4,"question":"Because of the rapid advances of new technology, many feel that _____ is grossly out of date in its ability to protect privacy","start":3600,"success":{"button":null,"message":"The World Wide Web is a much different thing today than it was in 1986 when the Electronic Communications Act was passed."},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"corporate profit"},{"order":0,"points":100,"sticky":false,"text":"civil liberties "},{"order":0,"points":0,"sticky":false,"text":"connection speed"},{"order":0,"points":0,"sticky":false,"text":"passive footprints"}],"failure":{"button":null,"message":"There is a conflict of interest of the government wanting to protect citizens from unauthorized data collection from businesses and their own desire to do the same for national security. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn25-ethics-usprivacyacts-micro-17","number_of_choices":4,"question":"The biggest conflicts of interest of relying on Congress to protect internet privacy are concerns over loss of_____.","start":3600,"success":{"button":null,"message":"There is a conflict of interest of the government wanting to protect citizens from unauthorized data collection from businesses and their own desire to do the same for national security. "},"type":"Multiple"}],"reference":"ethics-in-video-games-17","text":null,"title":"Internet Privacy Acts Examples"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":null,"movie":".\/video\/ethics_invideogames_18.mp4","name":"EthicsinVideoGames","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"open source license"},{"order":0,"points":0,"sticky":false,"text":"Code of Mechanics"},{"order":0,"points":0,"sticky":false,"text":"Call for Ethics"},{"order":0,"points":100,"sticky":false,"text":"Code of Ethics"}],"failure":{"button":null,"message":"Part of this document is a promise to obey and respect intellectual property laws."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn26-ethics-ethicsinvg-micro-18","number_of_choices":4,"question":"The International Game Developers Association created what is called a _____, specific to the video game industry","start":3600,"success":{"button":null,"message":"Part of this document is a promise to obey and respect intellectual property laws."},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"censorship"},{"order":0,"points":0,"sticky":false,"text":"fair treatment of workers"},{"order":0,"points":0,"sticky":false,"text":"violence in games"},{"order":21,"points":100,"sticky":false,"text":"All of the above"}],"failure":{"button":null,"message":"The IGDA website also gathers news articles on the latest trends and discussions related to ethics in video games."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn27-ethics-ethicsinvg-micro-18","number_of_choices":4,"question":"Which of the following does the IGDA Code of Ethics cover?","start":3600,"success":{"button":null,"message":"The IGDA website also gathers news articles on the latest trends and discussions related to ethics in video games."},"type":"Multiple"}],"reference":"ethics-in-video-games-18","text":null,"title":"Ethics in Video Games"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":null,"movie":".\/video\/ethics_socialvalue_19.mp4","name":"SocialValue","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"A game makes a profit"},{"order":0,"points":0,"sticky":false,"text":"A game offers new mechanics"},{"order":0,"points":100,"sticky":false,"text":"A game increases sympathy for the homeless"},{"order":0,"points":0,"sticky":false,"text":"A game gives away free content for pre-orders"}],"failure":{"button":null,"message":"Profits may be important to a studio, but they have little soical value to those outside the company."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn28-ethics-socialvalue-micro-19","number_of_choices":4,"question":"Which of the following would be considered a “social value” as it relates to video games?","start":3600,"success":{"button":null,"message":"Profits may be important to a studio, but they have little soical value to those outside the company like increasing social awareness of homelessness."},"type":"Multiple"},{"choices":[{"order":0,"points":100,"sticky":false,"text":"well-being"},{"order":0,"points":0,"sticky":false,"text":"strife "},{"order":0,"points":0,"sticky":false,"text":"wealth"},{"order":0,"points":0,"sticky":false,"text":"anxiety"}],"failure":{"button":null,"message":"This can be counter-productive if social value is forced upon a studio by political motivations."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn29-ethics-socialvalue-micro-19","number_of_choices":4,"question":"The idea of social value is that it increases the overall ____ among people in a society.","start":3600,"success":{"button":null,"message":"This can be counter-productive if social value is forced upon a studio by political motivations."},"type":"Multiple"}],"reference":"ethics-in-video-games-19","text":null,"title":"Social Value"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":null,"movie":".\/video\/ethics_soicalresponsibility_20.mp4","name":"SocialResponsibility","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"The music industry"},{"order":0,"points":0,"sticky":false,"text":"The movie industry"},{"order":0,"points":0,"sticky":false,"text":"The video game industry"},{"order":21,"points":100,"sticky":false,"text":"All of the above"}],"failure":{"button":null,"message":"Video games are put under the same scrutiny that music, movies, comics, books, and other entertainment products are."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn30-ethics-socialresponsibility-micro-20","number_of_choices":4,"question":"Which of the following industries have, at one time or another, been accused of lacking social responsibility?","start":3600,"success":{"button":null,"message":"Video games are put under the same scrutiny that music, movies, comics, books, and other entertainment products are."},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"police officers "},{"order":0,"points":100,"sticky":false,"text":"children"},{"order":0,"points":0,"sticky":false,"text":"citizens"},{"order":0,"points":0,"sticky":false,"text":"intellectual property laws"}],"failure":{"button":null,"message":"While many disagree, many people feel a child’s access to depictions of violence can create deviant behavior later in their life."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn31-ethics-socialresponsibility-micro-20","number_of_choices":4,"question":"The general reason presented to game studios to self-restrict excessive violence in their games is to protect _____.","start":3600,"success":{"button":null,"message":"While many disagree, many people feel a child’s access to depictions of violence can create deviant behavior later in their life."},"type":"Multiple"}],"reference":"ethics-in-video-games-20","text":null,"title":"Social Responsibility"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":null,"movie":".\/video\/ethics_esrbintro_21.mp4","name":"ESRB Intro","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"censor; control "},{"order":0,"points":100,"sticky":false,"text":"categorize; rate"},{"order":0,"points":0,"sticky":false,"text":"promote; advertise"},{"order":0,"points":0,"sticky":false,"text":"review; criticize"}],"failure":{"button":null,"message":"While not a censorship board, the ESRB does have considerable influence on regulating content in video games through ratings."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn32-ethics-esrbintro-micro-21","number_of_choices":4,"question":"The Entertainment Software Ratings Board claims it was formed to _____ and _____ the content of video games and other digital media in the US.","start":3600,"success":{"button":null,"message":"While not a censorship board, the ESRB does have considerable influence on regulating content in video games through ratings."},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"True"},{"order":0,"points":100,"sticky":false,"text":" False "}],"failure":{"button":null,"message":"Games are not required to place a ratings sticker on their product, but often stores will refuse to sell games that don’t comply to ESRB standards. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn32-ethics-esrbintro-micro-21","number_of_choices":2,"question":"True or False: All video games made in the U.S. are required to submit to the ESRB for a ratings sticker.","start":3600,"success":{"button":null,"message":"Games are not required to place a ratings sticker on their product, but often stores will refuse to sell games that don’t comply to ESRB standards. "},"type":"Multiple"}],"reference":"ethics-in-video-games-21","text":null,"title":"ESRB Intro"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":null,"movie":".\/video\/ethics_esrbprocess_22.mp4","name":"ESRBProcess","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"Clearly displaying their ratings sticker on the product"},{"order":0,"points":0,"sticky":false,"text":"Not marketing to age groups below the recommended sticker age group"},{"order":0,"points":0,"sticky":false,"text":"Not selling directly to age groups below the recommended age group"},{"order":21,"points":100,"sticky":false,"text":" All of the above"}],"failure":{"button":null,"message":"By agreeing to using a ratings sticker, studios also agree to fines if they fail in compliancy to ESRB rules"},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn33-ethics-esrbprocess-micro-22","number_of_choices":4,"question":"Which of the following do studios agree to by accepting an ESRB ratings sticker?","start":3600,"success":{"button":null,"message":"By agreeing to using a ratings sticker, studios also agree to fines if they fail in compliancy to ESRB rules"},"type":"Multiple"}],"reference":"ethics-in-video-games-22","text":null,"title":"ESRB Process"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":null,"movie":".\/video\/ethics_esrbcriteria_23.mp4","name":"ESRBCriteria","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"Crude humor"},{"order":0,"points":0,"sticky":false,"text":"Violence"},{"order":0,"points":100,"sticky":false,"text":"Strobe lighting effects"},{"order":0,"points":0,"sticky":false,"text":"Foul language"}],"failure":{"button":null,"message":"The criterion for issuing a ratings sticker is based on possible psychological consequences of children having access to materials meant for adults. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn1-ethics-esrbcriteria-micro-23","number_of_choices":4,"question":"Which of the following is NOT a consideration when the ESRB issues a ratings sticker to a video game?","start":3600,"success":{"button":null,"message":"The criterion for issuing a ratings sticker is based on possible psychological consequences of children having access to materials meant for adults. "},"type":"Multiple"}],"reference":"ethics-in-video-games-23","text":null,"title":"ESRB Criteria"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":null,"movie":".\/video\/ethics_esrbcategories_24.mp4","name":"ESRBCategories","promptfile":null,"prompts":[{"choices":[{"order":0,"points":100,"sticky":false,"text":"Teen"},{"order":0,"points":0,"sticky":false,"text":"Adolescent"},{"order":0,"points":0,"sticky":false,"text":"Young Adult"},{"order":21,"points":0,"sticky":false,"text":"All of the above"}],"failure":{"button":null,"message":"Teen covers the ages of 13 through 17."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn35-ethics-esrbcategories-micro-24","number_of_choices":4,"question":"Which of the following are actual categories used by the ESRB? ","start":3600,"success":{"button":null,"message":"Teen covers the ages of 13 through 17."},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Restricted to Parents"},{"order":0,"points":0,"sticky":false,"text":"Rated Pure "},{"order":0,"points":100,"sticky":false,"text":"Rating Pending "},{"order":0,"points":0,"sticky":false,"text":"Restricted Permissions "}],"failure":{"button":null,"message":"Typically, Rating Pending is used when games are still in development, before they submit for a real rating and a sticker."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn36-ethics-esrbcategories-micro-24","number_of_choices":4,"question":"The ESRB rating of RP stands for _____. ","start":3600,"success":{"button":null,"message":"Typically, Rating Pending is used when games are still in development, before they submit for a real rating and a sticker."},"type":"Multiple"}],"reference":"ethics-in-video-games-24","text":null,"title":"ESRB Categories"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":null,"movie":".\/video\/ethics_internationalratingsboards_25.mp4","name":"International Ratings Boards","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"True "},{"order":0,"points":100,"sticky":false,"text":"False"}],"failure":{"button":null,"message":"Many countries have their own version of a video game ratings board. "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn37-ethics-internationalratings-micro-25 ","number_of_choices":2,"question":"True or False: The Entertainment Software Ratings Board is used across the globe for rating video game content.","start":3600,"success":{"button":null,"message":"Many countries have their own version of a video game ratings board. "},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":" be banned "},{"order":0,"points":0,"sticky":false,"text":"bring fines if distributed"},{"order":0,"points":0,"sticky":false,"text":" bring imprisonment if distributed"},{"order":21,"points":100,"sticky":false,"text":"All of the above"}],"failure":{"button":null,"message":" It is crucial to know the ethical standards of different countries to avoid legal trouble."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn38-ethics-internationalratings-micro-25 ","number_of_choices":4,"question":"In many countries without guaranteed freedom of speech, games with mature content can _____.","start":3600,"success":{"button":null,"message":" It is crucial to know the ethical standards of different countries to avoid legal trouble."},"type":"Multiple"}],"reference":"ethics-in-video-games-25","text":null,"title":"International Ratings Boards"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":null,"movie":".\/video\/ethics_pegi_26.mp4","name":"PEGI","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"People’s Entertainment Game Information"},{"order":0,"points":0,"sticky":false,"text":"People’s Educational Game Information"},{"order":0,"points":0,"sticky":false,"text":"Pan European Game Industry"},{"order":0,"points":100,"sticky":false,"text":"Pan European Game Information"}],"failure":{"button":null,"message":"Pan European Game Information functions very similar to the American ESRB."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn39-ethics-pegi-micro-26","number_of_choices":4,"question":"PEGI is an acronym for _____. ","start":3600,"success":{"button":null,"message":"Pan European Game Information functions very similar to the American ESRB."},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":" foul language: crude humor"},{"order":0,"points":100,"sticky":false,"text":" violent; sexual"},{"order":0,"points":0,"sticky":false,"text":"sexual; violent"},{"order":0,"points":0,"sticky":false,"text":"gambling; violent"}],"failure":{"button":null,"message":"PEGI, in general, has less concern with nudity in games and more concern with violence."},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn40-ethics-pegi-micro-26 ","number_of_choices":4,"question":"Compared to the standards of the ESRB, PEGI is more concerned with protecting children from _____ content and less with _____ content in games.","start":3600,"success":{"button":null,"message":"PEGI, in general, has less concern with nudity in games and more concern with violence."},"type":"Multiple"},{"choices":[{"order":0,"points":0,"sticky":false,"text":"Bad language"},{"order":0,"points":0,"sticky":false,"text":"Drug use"},{"order":0,"points":0,"sticky":false,"text":"Sexual content"},{"order":0,"points":100,"sticky":false,"text":"Discrimination"}],"failure":{"button":null,"message":"PEGI considers issues of discrimination, such as racism, as content unsuitable for video games, while the ESRB does not consider discrimination in game content at all.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn41-ethics-pegi-micro-26","number_of_choices":4,"question":"Which of the following PEGI category considerations are NOT rating categories used by the American ESRB?","start":3600,"success":{"button":null,"message":"PEGI considers issues of discrimination, such as racism, as content unsuitable for video games, while the ESRB does not consider discrimination in game content at all.  "},"type":"Multiple"}],"reference":"ethics-in-video-games-26","text":null,"title":"PEGI"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":null,"movie":".\/video\/ethics_controversyofcontent_27.mp4","name":"ControversyofContent","promptfile":null,"prompts":[{"choices":[{"order":0,"points":0,"sticky":false,"text":"consoles; PCs "},{"order":0,"points":100,"sticky":false,"text":"community standards; artistic expression "},{"order":0,"points":0,"sticky":false,"text":"orcs; humans "},{"order":0,"points":0,"sticky":false,"text":"government intervention; costs "}],"failure":{"button":null,"message":"The argument over the ethics of video games, movies, music, and more is not likely to be resolved any time soon.  "},"hint":null,"hint_delay":0,"image":null,"limit":0,"name":"popcorn42-ethics-overview-micro-27 ","number_of_choices":4,"question":"The controversy of content in video games is a battle of _____ vs _____. ","start":3600,"success":{"button":null,"message":"The argument over the ethics of video games, movies, music, and more is not likely to be resolved any time soon.  "},"type":"Multiple"}],"reference":"ethics-in-video-games-27","text":null,"title":"Controversy of Content"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"reference","mod":"ethics-reference-text","movie":null,"name":"Reference","promptfile":null,"prompts":null,"reference":null,"text":"<a class=\"dest\" id=\"ethics-in-video-games-1\"><\/a><div class=\"accent\"><h1>Overview<\/h1><p>Ethics, broadly speaking, is the philosophy of determining right and wrong in a society. As the last Module demonstrated, there are many laws that either restrict or enable the use of intellectual property and provide clear guidelines for legal use. Choosing to ignore those restrictions through plagiarism, making illegal copies, or profiting off of someone else's protected creative work are clear examples of unethical practices. Laws, however, can be confusing, and sometimes people are unaware that they have committed a crime. In those cases, is ignorance an excuse for unethical conduct? <\/p><p>This Module will look at some ethical pitfalls in the video game industry in order to understand appropriate levels of legal compliance and social responsibility.<\/p><div style=\"text-align: center;\"><ul class=\"anchorGroup\" style=\"text-align: left; display: inline-block;\"><li><a class=\"ankor\" href=\"#ethics-in-video-games-2\">Plagiarism<\/a><\/li><li><a class=\"ankor\" href=\"#ethics-in-video-games-3\">Legal and Ethical Use of Information in the US<\/a><\/li><li><a class=\"ankor\" href=\"#ethics-in-video-games-4\">Fair Use Doctrine; Clause 1<\/a><\/li><li><a class=\"ankor\" href=\"#ethics-in-video-games-5\">Fair Use Doctrine; Clause 2<\/a><\/li><li><a class=\"ankor\" href=\"#ethics-in-video-games-6\">Fair Use Doctrine; Clause 3<\/a><\/li><li><a class=\"ankor\" href=\"#ethics-in-video-games-7\">Fair Use Doctrine; Clause 4<\/a><\/li><li><a class=\"ankor\" href=\"#ethics-in-video-games-8\">Unauthorized Use in the Digital Age<\/a><\/li><li><a class=\"ankor\" href=\"#ethics-in-video-games-9\">The Non-Disclosure Agreement<\/a><\/li><li><a class=\"ankor\" href=\"#ethics-in-video-games-10\">The Non-Compete Clause<\/a><\/li><li><a class=\"ankor\" href=\"#ethics-in-video-games-11\">Other Contractual Issues<\/a><\/li><li><a class=\"ankor\" href=\"#ethics-in-video-games-12\">Privacy Issues<\/a><\/li><li><a class=\"ankor\" href=\"#ethics-in-video-games-13\">The Ethics of Collecting Consumer Data<\/a><\/li><li><a class=\"ankor\" href=\"#ethics-in-video-games-14\">Evaluating Digital Footprints<\/a><\/li><li><a class=\"ankor\" href=\"#ethics-in-video-games-15\">Identity Theft<\/a><\/li><li><a class=\"ankor\" href=\"#ethics-in-video-games-16\">Internet Privacy Acts Intro<\/a><\/li><li><a class=\"ankor\" href=\"#ethics-in-video-games-17\">Internet Privacy Acts Examples<\/a><\/li><li><a class=\"ankor\" href=\"#ethics-in-video-games-18\">Ethics in the Video Game Industry<\/a><\/li><li><a class=\"ankor\" href=\"#ethics-in-video-games-19\">Social Value and Video Games<\/a><\/li><li><a class=\"ankor\" href=\"#ethics-in-video-games-20\">Social Responsibility in the Video Game Industry<\/a><\/li><li><a class=\"ankor\" href=\"#ethics-in-video-games-21\">Understanding the Entertainment Software Ratings Board<\/a><\/li><li><a class=\"ankor\" href=\"#ethics-in-video-games-22\">ESRB Process<\/a><\/li><li><a class=\"ankor\" href=\"#ethics-in-video-games-23\">ESRB Criteria<\/a><\/li><li><a class=\"ankor\" href=\"#ethics-in-video-games-24\">ESRB Category<\/a><\/li><li><a class=\"ankor\" href=\"#ethics-in-video-games-25\">International Ratings Boards<\/a><\/li><li><a class=\"ankor\" href=\"#ethics-in-video-games-26\">Pan European Game Information<\/a><\/li><li><a class=\"ankor\" href=\"#ethics-in-video-games-27\">The Controversy of Content<\/a><\/li><\/ul><\/div><\/div><a class=\"dest\" id=\"ethics-in-video-games-2\"><\/a>&nbsp;<div class=\"accent\"><h1>Plagiarism<\/h1><img class=\"aligncenter\" src=\".\/images\/ethicsplagiarism2.png\" alt=\"ethicsplagiarism2\" width=\"664\" height=\"390\" \/><p>Plagiarism was mentioned in the IP and copyright discussions as a legal concern but deserves extra mention to students as an ethical issue as well. First and foremost, plagiarism is a form of theft. Depending on the circumstances, plagiarism could lead to legal consequence such as fines. More than that, however, plagiarism is unethical. There is no defense for claiming another's original words or ideas as your own. For some, particularly students, the temptation to plagiarize can be very compelling, but even a few highly respected journalists and politicians have caved to the shortcut of plagiarism. Chances are, in the age of Internet, plagiarism will be discovered. When this happens, the damage to one's personal and ethical reputation could be devastating. The consequences of plagiarism, however, should not play a part in deciding whether or not to plagiarize. One's ethics should dictate the discipline to never even contemplate such actions.<\/p><\/div><a class=\"dest\" id=\"ethics-in-video-games-3\"><\/a>&nbsp;<div class=\"accent\"><h1>Legal and Ethical Use of Information in the US<\/h1><p>Let's be honest, even if we fully want to avoid stepping on someone else's copyright or intellectual property, we don't always know what is legally restricted. It can also be confusing to know when something can be used if the authors or source works are cited and credited.  What if we are making a game just for fun and don't intend to make any money off it? Do we still need permission to use others' intellectual property? How do reporters, school textbooks and social commentators in the US deal with these issues?<\/p><p>The concept of Fair Use is an attempt to answer some of these questions. United States law acknowledges cases of fair use and uses a four-point “test” to determine fair use of an intellectual property owned by another party. It states:<\/p><img class=\"aligncenter\" src=\".\/images\/ethicsfairusefull.png\" alt=\"ethicsfairusefull\" width=\"664\" height=\"390\" \/><p>As we see, this is still a very broad, and perhaps vague, explanation. We will try and translate the four main points.<\/p><\/div><a class=\"dest\" id=\"ethics-in-video-games-4\"><\/a>&nbsp;<div class=\"accent\"><h1>Fair Use Doctrine; Clause 1<\/h1><img class=\"aligncenter\" src=\".\/images\/ethicsfairuseone.png\" alt=\"ethicsfairuseone\" width=\"530\" height=\"472\" \/><p>This is an allowance to use others intellectual properties for the purpose of non-profit education. The reason for this is to allow for the betterment of the public good through knowledge and the sharing of information that benefits society as a whole.  To declare this point as a legitimate reason to break copyright law, we must demonstrate that using it does indeed advance human knowledge in some new and obvious way.  US courts have determined that this definition is fairly broad, allowing social commentary and parodies (think comedians poking fun at stuff) are acceptable cases of fair use, even when making a profit.<\/p><\/div><a class=\"dest\" id=\"ethics-in-video-games-5\"><\/a>&nbsp;<div class=\"accent\"><h1>Fair Use Doctrine; Clause 2<\/h1><img class=\"aligncenter\" src=\".\/images\/ethicsfairusetwo.png\" alt=\"ethicsfairusetwo\" width=\"664\" height=\"390\" \/><p>In general, a creative work does not have to be considered “good” in any objective way to be an intellectual property. That said, no matter the quality of a creative work, real-world facts within that body of work are not protected by copyright. Facts and “truths” are considered to be under the perpetual ownership of the society as a whole. For example, mathematics are not copyrightable because they express an uncontested reality that everyone has a right to access. However, a math textbook can be copyrighted in terms of how it lays out the information through unique design<\/p><\/div><a class=\"dest\" id=\"ethics-in-video-games-6\"><\/a>&nbsp;<div class=\"accent\"><h1>Fair Use Doctrine; Clause 3<\/h1><img class=\"aligncenter\" src=\".\/images\/ethicsfairusethree.png\" alt=\"ethicsfairusethree\" width=\"664\" height=\"390\" \/><p>To be fair to the original work, there are limits to how much of a privately owned IP one can simply lift (cut and paste) and use in an unrelated commercial or public context. Here, the rule of thumb is “less is better.” It is unacceptable, even in an educational, non-profit context, to sample large portions of text or material and use it as content filler. There is still a lot of legal “wiggle room” in this statement. How much is too much? In general, the idea is to sample the minimum amount of material needed, but there are no clear and absolute guidelines as to what that amount is. Taking entire pages of content is probably way too much. Reposting a few sentences is usually more acceptable. It is really a game of hit and miss while trying to be honest in the intention of fair use and not just being lazy. <\/p><\/div><a class=\"dest\" id=\"ethics-in-video-games-7\"><\/a>&nbsp;<div class=\"accent\"><h1>Fair Use Doctrine; Clause 4<\/h1><img class=\"aligncenter\" src=\".\/images\/ethicsfairusefour.png\" alt=\"ethicsfairusefour\" width=\"664\" height=\"390\" \/><p>Finally the law considers the effect using protected material through fair use has on the original IP itself. Specifically, courts look at whether or not a particular claim of fair use harms the value of the IP.  The first criterion is if the fair usage creates a directly comparative product in the marketplace that replaces the sited work. That means that duplication is unacceptable. The second point courts look at is to consider harm in other industries might create indirectly. For example, copy and print stores that copy entire chapters of texts books for students trying to save money.<\/p><\/div><a class=\"dest\" id=\"ethics-in-video-games-8\"><\/a>&nbsp;<div class=\"accent\"><h1>Unauthorized Use in the Digital Age<\/h1><p>Unauthorized use of an intellectual property is pretty much every other example one can think of outside of a paying for use or that which falls under fair use. That means downloading unauthorized music, movies, and books are theft as much as stealing CDs and paper books from stores. It doesn't matter that the copied version didn't cost the creators any money; it is still legal and unethical to take without permission.<\/p><img class=\"aligncenter\" src=\".\/images\/ethicscontrac3t.png\" alt=\"ethicscontrac3t\" width=\"664\" height=\"390\" \/><p>Here some may want to argue the economics of the modern music and film industry, and claim that downloading piracy is actually good for overall sales. This is just a form of rationalizing poor ethics. Even if there are strange economic forces at work, the act of downloading without permission is still unethical and illegal.<\/p><p>Video game development is a multi-billion dollar industry and, as such, companies tend to get litigious when their intellectual property rights are violated. This makes the use of legal contracts very prevalent in game studios and corporations. As potential future employees in the industry it will extremely helpful to understand some the implications of certain agreements we may be asked to sign: In particular, the legal and ethical positions these contracts bind us to.<\/p><\/div><a class=\"dest\" id=\"ethics-in-video-games-9\"><\/a>&nbsp;<div class=\"accent\"><h1>The Non-Disclosure Agreement<\/h1><p>A non-disclosure agreement (NDA) typically means that the signee agrees not to discuss or publish any private information of the company or studio. Private company information typically includes absolutely everything except what the company authorizes in press releases. This is a legal contract and once signed, it would be unethical to then disclose private information of the company. NDA's are often signed during interview stages in staffing. It is important to give an applicant enough information on the project in order to properly interview and assess their skills for the job. Yet, if that person is not hired, companies don't want them talking to the competition about project secrets.<\/p><p>By signing the NDA, the signee agrees to the terms of keeping silent. This is typically for some set amount of time (two years being average). Remember, by signing such an agreement, we legally bind ourselves to the letter of the agreement. If any part of the agreement is not acceptable then we must ask for an amendment before proceeding. To sign an agreement and then complain or break the agreement is both unethical and unprofessional.<\/p><\/div><a class=\"dest\" id=\"ethics-in-video-games-10\"><\/a>&nbsp;<div class=\"accent\"><h1>The Non-Compete Clause<\/h1><p>A non-compete clause in a contract is a bit more serious than a non-disclosure agreement. These contracts typically require the signee to agree to not work for any competitor for the length of the agreement. For example, a company might hire someone, but then require them to sign a NCC declaring that they promise not to work for any competitor for the next two years. In some states, this contract is binding even if the person who signed the contract is fired from their job before the two years are up. That means, by signing the contract, one might be unable to even look for work in their area of expertise because of a rigid non-complete clause. The ethics of such contracts are questionable. Obviously the company requiring a non-complete arrangement gains all of the protection at the expense of the signee. Still, non—complete clauses are very common in the video game and other industries. If a person refuses to sign one, they are the ones that may find themselves completely removed from the industry.<\/p><\/div><a class=\"dest\" id=\"ethics-in-video-games-11\"><\/a>&nbsp;<div class=\"accent\"><h1>Other Contractual Issues<\/h1><p>Many people seek work developing video games because the work is so fun and rewarding from a consumer point of view. Within the industry itself, the practice of ethics and fair play can vary greatly from company to company. Typically, those hired on at a studio will be offered contracts. The binding legality of the contracts can vary from state to state, so it is a good idea to know the state laws pertaining to certain stipulations within the contract.<\/p><p>For example, some contracts insert clauses that claim all creative endeavors of any employee during the course of employment. Depending on how it is worded, this could mean that writing, art, coding, and designing done on projects unrelated to work are also immediately owned by the company, even if the material was never created at work or during work hours. Some contracts may claim immediate ownership of any unregistered intellectual property material that exists on their computers, even if it is just a private email containing information. Be aware of such requirements in contracts. Most companies that require such things find that they cannot attract top talent with these kinds of agreements. By refusing to work for these companies, they are focused to reconsider fairer contracts that do not bind creative freedom and send talent looking for other jobs.<\/p><\/div><a class=\"dest\" id=\"ethics-in-video-games-12\"><\/a>&nbsp;<div class=\"accent\"><h1>Privacy Issues<\/h1><img class=\"aligncenter\" src=\".\/images\/ethicsprivacy3.png\" alt=\"ethicsprivacy3\" width=\"664\" height=\"390\" \/><p>In the near future that is right now, data collection and privacy rights are in conflict. The ethics of hidden “cookies” or unavoidable data collection software is now becoming a much bigger issue in the courts than ever before. Are companies being ethical in their collection and use of personal information? Do they promise not to share any collected data or is that the purpose? What rights do consumers have? What are the dangers of having personal information freely available in the Web?<\/p><\/div><a class=\"dest\" id=\"ethics-in-video-games-13\"><\/a>&nbsp;<div class=\"accent\"><h1>The Ethics of Collecting Consumer Data<\/h1><p>Internet privacy has become an issue of serious concern. Most consumers aren't aware of how much personal information they are leaving behind as they go about their normal Internet viewing habits. As software developers, there are many ways to collect data from users of our products or websites. How we collect this data and inform our users of this collection is an important ethical consideration. Many consumer advocates see a danger in this kind of data collection. In particular the ethics of data collection on people who are unaware of the extent of the practices and how they unknowingly contribute due to unannounced data collecting programs on Websites.<\/p><\/div><a class=\"dest\" id=\"ethics-in-video-games-14\"><\/a>&nbsp;<div class=\"accent\"><h1>Evaluating Digital Footprints<\/h1><img class=\"aligncenter\" src=\".\/images\/ethicsfootprints3.png\" alt=\"ethicsfootprints3\" width=\"664\" height=\"390\" \/><p>Using any type of digital service on the Internet leaves what are now commonly called “digital footprints”. These footprints are all the traces of data and personal information left by users either intentionally or unintentionally. Most often this occurs through Web browsing. Programs seeded on Websites collect data such as what was looked at, what was purchased, and any personal data that is reveled in the course of exploring the site.<\/p><p>When this is done without the person adding any information about them self to the site, it is called a passive footprint. That is, the person is doing nothing intentional to give out data and information. When a person willingly and deliberately gives data and personal information to a site (say to make a purchase using a credit card) it is called an active footprint. The person volunteered the data.<\/p><\/div><a class=\"dest\" id=\"ethics-in-video-games-15\"><\/a>&nbsp;<div class=\"accent\"><h1>Identity Theft<\/h1><img class=\"aligncenter\" src=\".\/images\/ethicsidentitytheft3.png\" alt=\"ethicsidentitytheft3\" width=\"664\" height=\"390\" \/><p>Identity theft is the ultimate crime surrounding digital footprints. While identity theft does not require a digit record of a person's daily life, it certainly helps. Credit card information, bank passwords, personal information are all surprisingly easy to access for smart “cyber criminals”. Many times people are tricked to giving up information with email scams.<\/p><p>All of this type of behavior has ethical implications that modern society is still coming to terms with. There is no moral grey area in outright identity theft, but the extent in which internet companies and individuals accept data collection and how they use and\/or secure that information is now a hotly discussed topic.<\/p><\/div><a class=\"dest\" id=\"ethics-in-video-games-16\"><\/a>&nbsp;<div class=\"accent\"><h1>Internet Privacy Acts Intro<\/h1><p>With advances in communication technology (from telephone to video conferencing) comes unprecedented access to information on people using electronic devices, such as computers, cell phones and tablets. Indeed, even simple apps for games could allow access to one's personal information stored on their smart device. Many app purchasers don't know to look at the requirements an app demands from its user. This could include access to one's email, location, photos, browser history, and more. In all cases, potential users of an app should ask themselves if the evasive requirements to access an app are worth the downsides of having one's personal data collected. While the dangers of data collection are nothing new, they have certainly accelerated through digital pathways on the Internet. As a counter-measure to hacking, unethical data collection, and to improve Internet safety, many Acts have been proposed or passed in Congress. The question becomes, do these Acts actually protect citizens' rights to privacy or are they designed more to insure government access to personal data in the age of terrorism and mass surveillance.<\/p><\/div><a class=\"dest\" id=\"ethics-in-video-games-17\"><\/a>&nbsp;<div class=\"accent\"><h1>Internet Privacy Acts Examples<\/h1><p>The Electronic Communications Privacy Act was enacted in 1986 as an expansion to existing restrictions on government phone wiretapping of American citizens. This legislation was in response to new Internet technologies and included computer and electronic communications as well as the telephone. For many, this legislation is grossly out of date with modern technology and, in fact, contains provisions that grant government powers counter to protecting privacy.  In particular, the Act is out of touch with modern methods of consumer data collection and storage, allowing government many loopholes for its own desire to gather data on citizens. <\/p><p>The Computer Fraud and Abuse Act is another Act enacted by Congress in 1986 that has expanded its scope since then. The Act sets forth criminal offenses in the areas of computer hacking, stealing of information, and acts of fraud perpetrated through the Internet. Once again, the details of the Act are a cause for some controversy in terms of civil liberties and its definitions of illegal acts on the Internet.<\/p><p>In 2011, the Cyber Intelligence Sharing and Protection Act was introduced by Congress as an attempt to strengthen the US government's ability to access electronic data to evaluate and counter cyber terrorism. To this day, the act is still being adjusted (sometimes renamed) and reintroduced in Congress. So far, concerns over civil liberties have prevented it from becoming law.<\/p><\/div><a class=\"dest\" id=\"ethics-in-video-games-18\"><\/a>&nbsp;<div class=\"accent\"><h1>Ethics in the Video Game Industry<\/h1><p>The International Game Developers Association (IGDA) has created a Code of Ethics (http:\/\/www.igda.org\/?page=codeofethics) that states principles of professional conduct specific to the video game industry. Many of the principles stated are promises to abide by (and understand) intellectual property rights. The rest of the document expresses a personal ethics foundation for now and future leaders of the industry and guidelines to treating people fairly and respectfully. The organization's website also discusses related social issues such as censorship, violence in games, court decisions related to the game industry, and news articles that relate to these topics.<\/p><img class=\"aligncenter\" src=\".\/images\/ethicscodeofethics3.png\" alt=\"ethicscodeofethics3\" width=\"664\" height=\"390\" \/><img class=\"aligncenter\" src=\".\/images\/ethicscodeofethics2.png\" alt=\"ethicscodeofethics2\" width=\"664\" height=\"390\" \/><img class=\"aligncenter\" src=\".\/images\/ethicscodeofethics3.png\" alt=\"ethicscodeofethics3\" width=\"664\" height=\"390\" \/><p>As an entertainment industry with legions of fans, both young and old, there are many issues of social value and social responsibility we should be aware of. More often than not, these issues center on kid's access to content that is sexually or violently graphic and the general ethics of depicting gratuitous acts in games.<\/p><\/div><a class=\"dest\" id=\"ethics-in-video-games-19\"><\/a>&nbsp;<div class=\"accent\"><h1>Social Value and Video Games<\/h1><p>The idea of social value is that something offers more than purely inconsequential enjoyment, but also (or instead) offers some greater value to society as a whole. This “something” enriches people's lives in some way, makes society “better”, and increases “well-being”. These can be very subjective values to some, but in general, the concept is that the work in some way makes the world a better place to live.<\/p><p>For video games, this is not always a common goal. In fact, many games are perfectly content to entertain while offering no social value at all. There are some games that have been marked as being deliberately unethical because they allow players to freely explore criminal behavior and even what many consider immoral acts. Are these games unethical in their lack of social conscious? Philosophers, politicians, and religious leaders and artists have debated morality for thousands of years and the conclusions are still being discussed. For game makers, there is little in terms of US law that will censor or restrict content. Many markets require an Entertainment Software Rating Board (ESRB) review and rating before they will accept the game and often they will reject games that receive Adult rating.<\/p><\/div><a class=\"dest\" id=\"ethics-in-video-games-20\"><\/a>&nbsp;<div class=\"accent\"><h1>Social Responsibility in the Video Game Industry<\/h1><p>Social responsibility is sort of the flip side of social value. It is the questioning of not only how to determine some social value, but whether or not video games should be required to be socially responsible to public safety and moral standards. This idea stems from some people perceiving harm in games that do not take it upon themselves to self-censor immoral or inappropriate material.<\/p><p>Psychiatrists, politicians, community leaders, and concerned citizens have been voicing their opinions on this issue for decades, going back to even before Elvis Pressley's scandalous contortions in the 50s. It is not an issue that is likely to be agreed upon any time soon. Many feel that some moral standards absolutely must be established because of the increased exposure to minors these games have (and rely upon for sales). Others feel that the seeds of social deviancy are rooted in other causes and that applying moral standards to entertainment properties is an infringement of free speech.<\/p><p>Video games are put under the same scrutiny that music, movies, comics, books, and other entertainment products are. The fear that deviant behavior can arise from children's unblocked access to violent or sexual material is something the video game industry must acknowledge even if they disagree that such material is the root of real problems. A crass approach to public relations on these concerns will only fuel the fire that the industry is amoral and unconcerned with social responsibility.<\/p><p>It is very important, then, for game developers to at least consider the public reaction to potentially offensive or child sensitive material. In particular, marketing strategies that target age groups younger than is appropriate for a game is an industry trend that causes additional controversy in the area of ethics.<\/p><\/div><a class=\"dest\" id=\"ethics-in-video-games-21\"><\/a>&nbsp;<div class=\"accent\"><h1>Understanding the Entertainment Software Ratings Board (ESRB) Ratings System<\/h1><img class=\"aligncenter\" src=\".\/images\/ethicsesrb.png\" alt=\"ethicsesrb\" width=\"664\" height=\"390\" \/><p>In 1994 the Interactive Digital Software Association (IDSA) was formed to categorize and rate the content of video games and other digital media in the US. Much like the Motion Picture Association of America and film, the goal of the IDSA was to give parents a guide to determine whether a game's content was appropriate for their children. The results are the Entertainment Software Ratings Board (ESRB).<\/p><p>In 2004, the IDSA became the Entertainment Software Association (ESA), but with the same goals of the original organization: to give parents and consumers a method of determining the appropriateness of video games for different age groups (and in particular, minors). Much like the rating system of movies, games are categorized by age groups depending on how much adult content they contained.<\/p><p>It should be noted that obtaining an ESRB rating is not required by law. This is a voluntary process that most studios choose to utilize. That said, many consumers look for an ESRB rating when buying a game, particularly if they are buying a game for a minor. Just like movie ratings, there is considerable social pressure to submit a body of work for a content rating and inform the public of any issues of language, violence, or sexual content. Studios that refuse an ESRB rating are at risk of retailers refusing to carry the game and of being accused of unethical business practices by consumer groups and the media, whether true or not. There is also a responsibility of the retailers to not sell the mature games to minors. This can be deliberately ignored for extra sales at the retail level or be nearly impossible to tell with online sales. Either way, businesses committed to refuse cash on the basis of social responsibility are a mixed bag.<\/p><\/div><a class=\"dest\" id=\"ethics-in-video-games-22\"><\/a>&nbsp;<div class=\"accent\"><h1>ESRB Ratings Process<\/h1><p>The ESRB's main concern for rating video games is to limit a minor's access to inappropriate content. Games are reviewed and then given a “sticker” that lists any questionable content and then suggests age limitations for consumers buying the game. Once a studio accepts a rating, they agree to the ESRB's Principles and Guidelines for Responsible Advertising Practices. This includes such things as clearly displaying the content rating on packaging and agreeing to certain ethical marketing principles such as not targeting ten year olds in marketing for adult games. Once the rating process is initiated by a studio they agree to adhere to their standards. At that point, the ESRB will monitor a studio's compliance to the guidelines and can even levy fines for failure to follow ESRB requirements.<\/p><\/div><a class=\"dest\" id=\"ethics-in-video-games-23\"><\/a>&nbsp;<div class=\"accent\"><h1>ESRB Ratings Criteria<\/h1><p>The ESRB focuses on two broad criteria when issuing a rating: age appropriateness as determined by broad content descriptors. The broad content descriptors look for any and all of the following when determining age appropriateness:<\/p><p>      •\u0009  Drug and Alcohol References<\/p><p>      •\u0009  Blood (animated blood, realistic blood, Blood and Gore)<\/p><p>      •\u0009  Violence (Cartoon, Fantasy, Intense, Sexual)<\/p><p>      •\u0009  Comic Mischief<\/p><p>      •\u0009  Crude Humor<\/p><p>      •\u0009  Language<\/p><p>      •\u0009  Nudity<\/p><p>      •\u0009  Gambling (real or simulated)<\/p><p>      •\u0009  Suggestive Themes<\/p><\/div><a class=\"dest\" id=\"ethics-in-video-games-24\"><\/a>&nbsp;<div class=\"accent\"><h1>Rating Categories<\/h1><p>Based on the levels of content of the above criteria, a game will be given one of the following age category ratings:<\/p><p>      •\u0009  Early Childhood<\/p><p>      •\u0009  Everyone<\/p><p>      •\u0009  Everyone 10+<\/p><p>      •\u0009  Teen 13+<\/p><p>      •\u0009  Mature 17+<\/p><p>      •\u0009  Adult 18+<\/p><p>There are two other common classification categories for video games:<\/p><p>As mentioned, intellectual property laws are complex, but in general, if you are not the creator\/owner of a piece of writing, an image, a song, a video game – whatever it may be – then you do not have the right to reproduce, copy, market or enjoy that property without permission.<\/p><p>      •\u0009  Refused Classification (RC)<\/p><p>      •\u0009  Rating Pending (RP)<\/p><p>The first is Refused Classification or RC. This is usually done because the game's developers know they will get an undesirable rating. For instance, Adults Only (AO). Many corporate chain stores will not sell games that receive an Adults Only rating. On the other hand, these stores will also not sell games that have refused classification. If a studio knows they will be selling their game in a market that does not care about ESRB classifications, they may choose to skip the process all together.<\/p><p>The second “unrated” classification is when a game has been submitted to the ESRB and awaits its decision, or when a studio is still working on a game and has not yet submitted the game for classification. This is called Rating Pending or RP. Sometimes a game receives a rating and then the studio decides to make changes in order to receive the rating they wanted for the game.<\/p><\/div><a class=\"dest\" id=\"ethics-in-video-games-25\"><\/a>&nbsp;<div class=\"accent\"><h1>International Ratings Boards<\/h1><p>The ESRB standards only apply to games sold in the US (and those countries that defer to the ESRB). Many other countries have their own version of a video game ratings board. In some cases, these boards are made up of government officials, while others are independent boards with little to no government involvement.  They all serve the same basic function: to classify content of video games. Some countries will ban games that refuse to be rated (RC) or that receive Adults Only or even Mature ratings. In many countries, banned games are illegal to sell and can bring heavy penalties or even jail time if distributed.<\/p><\/div><a class=\"dest\" id=\"ethics-in-video-games-26\"><\/a>&nbsp;<div class=\"accent\"><h1>Pan European Game Information (PEGI)<\/h1><p>PEGI is the European version of the ESRB. It is widely recognized in Europe as the model for ranking game appropriateness for children of different ages and points of development. PEGI uses a system similar to the ESRB, focusing on age recommendations and labels that designate appropriate age limits for games. Also, like the American ratings system, PEGI gives broad descriptors of why a game should is recommended for age restricted. It should be noted that European PEGI, in general, has looser community standards towards sexual content and nudity, but has stricter considerations for violence that the American ESRB.<\/p><p>The PEGI age guidelines are:<\/p><p>      •\u0009  PEGI 3 (suitable for all ages)<\/p><p>      •\u0009  PEGI 7 (contains material that may be frightening to small children)<\/p><p>      •\u0009  PEGI 12 (contains some mild cartoon violence or nudity)<\/p><p>      •\u0009  PEGI 16 (contains realistic violence, profanity, drug-use, or nudity)<\/p><p>      •\u0009  PEGI 18 (contains graphic violence, sex, or drug-use)<\/p><p>PEGI has slightly different categories of descriptors than the ESRB:<\/p><p>      •\u0009  Bad Language)<\/p><p>      •\u0009  Discrimination (not part of ESRB considerations)<\/p><p>      •\u0009  Drugs)<\/p><p>      •\u0009  Fear (not part of ESRB considerations)<\/p><p>      •\u0009  Gambling<\/p><p>      •\u0009  Sex<\/p><p>      •\u0009  Violence<\/p><p>      •\u0009  Online Gameplay<\/p><\/div><a class=\"dest\" id=\"ethics-in-video-games-27\"><\/a>&nbsp;<div class=\"accent\"><h1>The Controversy of Content<\/h1><img class=\"aligncenter\" src=\".\/images\/ethicscontroversy.png\" alt=\"ethicscontroversy\" width=\"664\" height=\"390\" \/><p>The idea that authoritative agencies are needed to protect the moral decency of our citizens is not new to video games. Even comic books have been accused of indecency, which led to the Comics Code Authority in 1954. Concerns over the lyrical content of rock, rap, and punk music have also been used to justify the Parents Music Resource Center (PMRC) which established the record rating “sticker” system used today. And of course, there is the Motion Picture Ratings System that assigns films ratings of G, PG, PG=13, R, or NC-17. So what is the controversy?<\/p><p>There are many people, particularly those in the business of creating art and entertainment, which feel content ratings boards are tools of censorship. No artist enjoys submitting their work to a committee only to be told it is indecent in some regard. At the same time, the pressure to avoid potential negative ratings can cause studios to put political correctness above their creativity and artistry. This is often regarded as necessary to protect minors from accessing what is called “harmful content”. The problem is that the definition of harmful content can be arbitrary and based on the opinions of small sections of the overall consumer community. This can put artists at risk for breaking these community standards even if they are a thousand miles away.<\/p><p>So where does a desire to protect children from depictions of sex and violence cross the line into unwarranted content control by outside agencies? It is a question video game developers are still trying to figure out.<\/p><\/div><!--page:~~ethics-in-video-games-reference-text~~-->","title":"Reference Material"},{"bIsChecked":true,"exercise":null,"instructions":"<h1>Goal<\/h1><p>Demonstrate understanding how video games can either promote or suppress the concept of social value and ethics.<\/p><h1>Steps<\/h1><ol><li>Choose any of the Game Stack games available from previous exercises.<\/li><li>On a piece of paper (or a digtial document) write the following:<\/li><ol><li>Describe three elements of the game that could be altered to make the game more socially concious, in terms of having positive social value. Make a case for implementing these elements into the game.<\/li><li>Describe three elements of the game that could be altered to make the game less socially concious, in terms of having negative social value. Make a case for implementing these elements into the game.<\/li><\/ol><li>Be prepared to discuss your answers with your instructor or the class.<\/li><\/ol><h1>Hints and Challenges<\/h1><p>Adding foul language to a game is an easy way to at least make a game controversial, in terms of ethics, for young children. Doing so is, in fact, too easy for this lesson. Students should find different examples in completing this exercise.<\/p><!--page:~~ethics-in-video-games-writing-exercise~~-->","link":"exercise","mod":"ethics-in-video-games","movie":null,"name":"EthicsWritingExercise","promptfile":null,"prompts":null,"reference":null,"text":null,"title":"Writing Exercise"}]}],"title":"Game Careers and Ethics"},{"bIsChecked":true,"description":"Complete the Game Design course with a Game Stack capstone project.","image":"image_designer1.png","modules":[{"bIsChecked":true,"name":"game-project","title":"Game Design Project","topics":[{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"game-project","movie":".\/video\/gamedesignproject_1.mp4","name":"Overview","promptfile":null,"prompts":null,"reference":"game-project-1","text":null,"title":"Overview"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"reference","mod":"game project","movie":null,"name":"Reference","promptfile":null,"prompts":null,"reference":null,"text":"<a id=\"game-project-1\" class=\"dest\"><\/a><div class=\"accent\"><h1>Overview<\/h1><img class=\"aligncenter size-full wp-image-701\" src=\".\/images\/gamestacklogo.png\" alt=\"gamestacklogo\" width=\"746\" height=\"559\" \/><p>Congratulations on reaching the final Game Design Project. Here we will put into practice what we have learned from the previous Arcs and Modules. As a quick review, we have covered the abstract concepts of game theory; the value of documentation; the foundations of game structure; implementing mechanics and level design; touched on visuals, story, and character; and finally we are considering careers, ethics, and intellectual property laws within the video game industry as we prepare for our final game design project. Along the way, we have emphasized the key lessons in these discussions with game building exercises using Game Stack.<\/p><p>In this, the final exercise for the Game Design course, we will focus on a game design capstone project: the creation of our own, original version of a Game Stack game. There will not be any additional video lessons in this Module. Once we have watched the overview video, the next step is to go straight to the exercise and follow the steps to reach the goals of the project.<\/p><p>There is no one correct way to approach the final game design project. The only real error one can make is by skipping over any of the requirements of the project. Beyond that, this is an opportunity to be creative and unique in your approach to game design.<\/p><p>Finally, whether we realize it or not, by completing this course, in addition to expanding our knowledge and understanding of game design, we have also taken the first crucial steps into the world of game programming. Game Stack uses blocks as a form of “visual programming”, when deciding how to implement the variables, logic, and functions of the scratch programming language. As we have made adjustments to these Game Stack game templates, our minds have been thinking like coders. Completing this Game Design course demonstrates a level of understanding of abstract concepts, game design, game theory, and even math. Game Programming is an extension of the concepts and goals of this course. By setting our goals on understanding code, and developing the ability to write code, we add tremendous value to our place in the modern workforce, and greatly increase our chances of a long and happy career in video game development. So don't stop now. Keep exploring, learning, and making games for the world to enjoy.<\/p><\/div><!--page:~~game-project-reference-text~~-->","title":"Reference Matertial"},{"bIsChecked":true,"exercise":null,"instructions":"<h1>Goal<\/h1><p>In this final game design project, we will utilize our game design skills, as well as familiarity with Game Stack basic programming, to create an original version of a Game Stack game.<\/p><img class=\"aligncenter size-full wp-image-701\" src=\".\/images\/gamestackfullshot.png\" alt=\"gamestackfullshot\" width=\"743\" height=\"576\" \/><h1>Steps<\/h1><ol><li>Choose a Game Stack game we have previously done an exercise for. You can download the template within this exercise using the download button.<\/li><li>Use the accumulated knowledge you have gained in this course to completely customize the game you have chosen.  This customization must include:<ol><li>An original title<\/li><li>All-new artwork<\/li><li>All-new sounds and music<\/li><li>At least 3 alterations to mechanics that are not in the downloaded version of the game template. These mechanic alterations need to keep the game fun and functional.<\/li><\/ol><\/li><li>You may refer back to any module or exercise to refresh your memory of how to use Game Stack.<\/li><li>Extra Credit. Create an all new mechanic not included in the original game template.<\/li><li>Have fun! It is a lot of work, but remember you are making your own game.<\/li><\/ol><!--page:~~game-project-exercise~~-->","link":null,"mod":"game-project","movie":null,"name":"game-project-exercise","promptfile":null,"prompts":null,"reference":null,"text":null,"title":"Game Stack Exercise"}]}],"title":"Game Design Project"}],"bIsChecked":true,"course_name":"Game Design","image":"bootcamp.jpg","long_desc":"","title":"Game Design","url":null,"version":"July-2017.9.70"},{"arcs":[{"bIsChecked":true,"description":"Begin your game programming journey by learning the basic components of C# a language used commonly in game design.","image":"binarytube.jpg","modules":[{"bIsChecked":true,"name":"vs-primer","title":"Introduction to Visual Studio","topics":[{"bIsChecked":true,"exercise":null,"instructions":null,"link":"section-introduction","mod":"Visual-Studio-Basics","movie":".\/video\/IntroToGameDevProg.mp4","name":"Section Introduction","promptfile":null,"prompts":null,"reference":null,"text":null,"title":"Section Introduction"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"Visual-Studio-Basics","movie":".\/video\/VS-Overview.mp4","name":"Overview","promptfile":null,"prompts":null,"reference":"vs-primer-1","text":null,"title":"Overview"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"exercise-download","mod":"Visual-Studio-Basics","movie":".\/video\/VS-ExerciseDownload.mp4","name":"Exercise Download","promptfile":null,"prompts":null,"reference":"vs-primer-2","text":null,"title":"Exercise Download"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"opening","mod":"Visual-Studio-Basics","movie":".\/video\/VS-OpenSolution.mp4","name":"Opening Files in Visual Studio","promptfile":null,"prompts":null,"reference":"vs-primer-3","text":null,"title":"Opening Files in Visual Studio"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"interface","mod":"Visual-Studio-Basics","movie":".\/video\/VS-InterfaceTour.mp4","name":"A Tour of the Visual Studio Interface","promptfile":null,"prompts":null,"reference":"vs-primer-4","text":null,"title":"A Tour of the Visual Studio Interface"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"building","mod":"Visual-Studio-Basics","movie":".\/video\/VS-BuildAndRun.mp4","name":"Building (or Compiling) Code","promptfile":null,"prompts":null,"reference":"vs-primer-5","text":null,"title":"Building (or Compiling) Code"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"reference","mod":"vs-primer","movie":null,"name":"Reference","promptfile":null,"prompts":null,"reference":null,"text":"<a class=\"dest\" id=\"vs-primer-1\"><\/a><div class=\"accent\"><h1>Overview<\/h1><p>Visual Studio 2013 is used throughout the remainder of this course as we learn the fundamentals of C# programming and game development. Visual Studio is known as an IDE, or Integrated Development Environment. It provides a full-featured text editor to help you write your code, a view into your program's various files, and the tools necessary to turn your code into a program the computer can use. Many times you will see Visual Studio 2013 abbreviated as VS2013, or even just VS.<\/p><p>VS2013 is used by beginners and professionals alike to build applications on the Windows operating system. The skills we will learn in this course will also carry over to other IDE's used on different operating systems. In the following sections, we will walk through the basics of using Visual Studio.<\/p><div style=\"text-align: center;\"><ul class=\"anchorGroup\" style=\"text-align: left; display: inline-block;\"><li><a class=\"ankor\" href=\"#vs-primer-2\">Downloading Exercises<\/a><\/li><li><a class=\"ankor\" href=\"#vs-primer-3\">Opening Files in Visual Studio<\/a><\/li><li><a class=\"ankor\" href=\"#vs-primer-4\">A Tour of the Visual Studio Interface<\/a><\/li><li><a class=\"ankor\" href=\"#vs-primer-5\">Building (or Compiling) Code<\/a><\/li><li><a class=\"ankor\" href=\"#vs-primer-6\">Running Code<\/a><\/li><li><a class=\"ankor\" href=\"#vs-primer-7\">Changing Code<\/a><\/li><li><a class=\"ankor\" href=\"#vs-primer-8\">Commenting Code<\/a><\/li><\/ul><\/div><\/div>        <a class=\"dest\" id=\"vs-primer-2\"><\/a>&nbsp;<div class=\"accent\"><h1>Downloading Exercises<\/h1><p>Nearly every Module in this course has one or more Exercises for us to work through. An Exercise allows you to demonstrate our working knowledge of the particular topic, and often provides a starting point for further experimentation. The Exercise files are contained within a single package that may be downloaded by clicking on the Exercise button found at the top or bottom of each page in a Module.<\/p><p style=\"text-align: center;\">  <img class=\"aligncenter wp-image-4333 size-full\" src=\".\/images\/vs-primer-ref-exercisebutton.png\" alt=\"Exercise button\"\/>  <strong>Figure 1<\/strong>  <em>Exercise Button<\/em><\/p><p>After clicking on the Exercise button we will be asked for a location to save the package. Choose the location given by your teacher or instructor and click on the Save or Save As button, depending on your browser. If allowed by your school (or on your own computer) you can always save the zip package on your Desktop.<\/p><p>Before we may use the files for the Exercise we must extract them from the downloaded package. Find the package we just downloaded (also known as a ZIP file), right click it and choose Extract. We may use the given, default location to save the Visual Studio files, or use any location provided by your teacher.<\/p><p style=\"text-align: center;\">  <img class=\"aligncenter wp-image-4333 size-full\" src=\".\/images\/vs-primer-ref-extract.png\" alt=\"Extract the exercise\"\/>  <strong>Figure 2<\/strong>  <em>Extract the exercise<\/em><\/p><p>After all of the Visual Studio files are extracted from the package, we're ready to open them in Visual Studio and make use of them.<\/p><\/div>        <a class=\"dest\" id=\"vs-primer-3\"><\/a>&nbsp;<div class=\"accent\"><h1>Opening Files in Visual Studio<\/h1><p>In Visual Studio, the collection of files for an Exercise is known as a Project. A Project contains a list of the required files, and information for Visual Studio on how to turn these files into a program that we may run. Each Exercise also has a Solution, which is a collection of related Visual Studio Projects. It is this Solution file (with an extension of .sln) that we will open in Visual Studio.<\/p><p>If Visual Studio has not yet been started, we may double click on the Exercise's Solution file. This will automatically start VS2013 and load the Exercise's code.<\/p><p style=\"text-align: center;\">  <img class=\"aligncenter wp-image-4333 size-full\" src=\".\/images\/vs-primer-ref-solution.png\" alt=\"Exercuse solution file\"\/>  <strong>Figure 3<\/strong>  <em>The Exercise's solution file<\/em><\/p><p>If Visual Studio is already open, we may go to its File menu and choose Open Project… From the file dialog that will appear, we may navigate and open the Exercise's Solution file.<\/p><p style=\"text-align: center;\">  <img class=\"aligncenter wp-image-4333 size-full\" src=\".\/images\/vs-primer-ref-openproject.png\" alt=\"Open a project\"\/>  <strong>Figure 4<\/strong>  <em>Open a Visual Studio solution or project<\/em><\/p><p>While it may seem confusing that the menu item is called \"Open Project\", it is possible for advanced users to open a single Project from a Solution and work with that. While working with our Modules, we always want to open the Exercise's Solution file.<\/p><p>With the Exercise's Solution now open, Visual Studio looks like this:<\/p><p style=\"text-align: center;\">  <img class=\"aligncenter wp-image-4333 size-full\" src=\".\/images\/vs-primer-ref-vsinterface.png\" alt=\"Visual Studio interface\"\/>  <strong>Figure 5<\/strong>  <em>Visual Studio with an open project<\/em><\/p><p>When an Exercise's Solution is opened for the first time, none of its C# code files are open for editing. To start viewing and editing its C# files, double click on one (they have the .cs extension) in the Solution Explorer tab. This will open Visual Studio's text editor and display the top of the chosen code file.<\/p><p style=\"text-align: center;\">  <img class=\"aligncenter wp-image-4333 size-full\" src=\".\/images\/vs-primer-ref-codefile.png\" alt=\"Visual Studio with code file open\"\/>  <strong>Figure 6<\/strong>  <em>Visual Studio with a code file ready for editing<\/em><\/p><p>We will now go through the general parts of the Visual Studio interface.<\/p><\/div>        <a class=\"dest\" id=\"vs-primer-4\"><\/a>&nbsp;<div class=\"accent\"><h1>A Tour of the Visual Studio Interface<\/h1><p>We divide the Visual Studio interface into four general sections and discuss each below.<\/p><p style=\"text-align: center;\">  <img class=\"aligncenter wp-image-4333 size-full\" src=\".\/images\/vs-primer-ref-interfacetour.png\" alt=\"Visual Studio interface tour\"\/>  <strong>Figure 6<\/strong>  <em>Visual Studio interface<\/em><\/p><h2>1. Menu and Toolbar<\/h2><p>At the top of the Visual Studio IDE is the menu and toolbar. From the menu we may open a Solution, as well as build and run the compiled program (discussed later). While developing our own software, we'll be spending most of your time using the Build and Debug menus, along with the keyboard shortcuts for each menu item.<\/p><p>The toolbar changes the actions that are available based on how we are currently using Visual Studio. The toolbar shown above is the standard one while editing a code file. Other toolbars appear while running a program from within Visual Studio.<\/p><h2>2. Solution Explorer<\/h2><p>The Solution Explorer provides a view into all of the files used by a Solution. If the Solution Explorer has accidentally been closed, we may open it by choosing Solution Explorer from the View menu. While working through the Exercises in this course we will be focusing on the C# code files. These files have a small C# icon beside the file name, and have a .cs extension. To open a C# file for editing, double click on its name within the Solution Explorer.<\/p><p>Larger code projects often have multiple C# files organized in various directory structures. For most of the Exercises in the course's Modules, we'll only need to work with a single C# with the same name as the Exercise itself.<\/p><h2>3. Code Editor<\/h2><p>The text, or code editor makes up the largest portion of the Visual Studio interface. This is where we write and modify the code for a program. It operates just like any text editor we've used before, with the addition of color highlighting of various key words. If we have multiple files open at once, each is presented in a tab at the top of the code editor.<\/p><p>While entering or editing code, we'll often see dynamic tooltips appear immediately below our typing. This is Visual Studio attempting to guess what our coding intention is, and provides useful hints. We may choose to safely ignore these hints as we type.<\/p><h2>4. Status Window Area<\/h2><p>At the bottom of the Visual Studio interface are a number of tabbed windows. The two we'll see the most of are the Output window and Error List window. When building and running our program, the Output window will show the current status of the build, and whether or not the build was successful.<\/p><p style=\"text-align: center;\">  <img class=\"aligncenter wp-image-4333 size-full\" src=\".\/images\/vs-primer-ref-output.png\" alt=\"Successful build\"\/>  <strong>Figure 7<\/strong>  <em>A successful build<\/em><\/p><p>If there were any issues in building your program, these are list under the Error List window. From this window we may double click the error to be taken to the line that has a problem.<\/p><p style=\"text-align: center;\">  <img class=\"aligncenter wp-image-4333 size-full\" src=\".\/images\/vs-primer-ref-error.png\" alt=\"A build error\"\/>  <strong>Figure 8<\/strong>  <em>A build error<\/em><\/p><p>If either of these windows is missing from the interface, we may open them from the View menu.<\/p><\/div>        <a class=\"dest\" id=\"vs-primer-5\"><\/a>&nbsp;<div class=\"accent\"><h1>Building (or Compiling) Code<\/h1><p>Before we can run our program, we need to turn our text-based C# code into something the computer understands (a binary format). This step is known as compiling the code. In the Visual Studio IDE, we build the solution to compile the code. This is done by selecting the Build Solution item under the Build menu. We may also use the keyboard shortcut, F7.<\/p><p style=\"text-align: center;\">  <img class=\"aligncenter wp-image-4333 size-full\" src=\".\/images\/vs-primer-ref-build.png\" alt=\"The build menu\"\/>  <strong>Figure 9<\/strong>  <em>Building a project from the Build menu<\/em><\/p><p>It will take some time for Visual Studio to compile the entire solution and produce the final program. During this time, the Output window will show each step that Visual Studio goes through. Once the compilation is complete, the Output window will show a success.<\/p><p style=\"text-align: center;\">  <img class=\"aligncenter wp-image-4333 size-full\" src=\".\/images\/vs-primer-ref-output.png\" alt=\"Successful build\"\/>  <strong>Figure 10<\/strong>  <em>A successful build<\/em><\/p><p>If there were any errors in the code, this will prevent Visual Studio from creating the final program. In this case, the Output window will indicate that an error has occurred, and the Error List window will present a list of errors within the code. Double clicking on an error in the Error List window will take you to the exact line of code that caused the compilation to fail.<\/p><p style=\"text-align: center;\">  <img class=\"aligncenter wp-image-4333 size-full\" src=\".\/images\/vs-primer-ref-outputerror.png\" alt=\"A build error in the output window\"\/>  <strong>Figure 11<\/strong>  <em>A build error in the Output window<\/em><\/p><p style=\"text-align: center;\">  <img class=\"aligncenter wp-image-4333 size-full\" src=\".\/images\/vs-primer-ref-error.png\" alt=\"A build error in the error window\"\/>  <strong>Figure 12<\/strong>  <em>A build error in the Error window<\/em><\/p><\/div>         <a class=\"dest\" id=\"vs-primer-6\"><\/a>&nbsp;<div class=\"accent\"><h1>Running Code<\/h1><p>Once our code has been compiled, we may run the program and see its results. From Visual Studio we may run our program by choosing the Start Debugging item under the Debug menu. We may also use the keyboard shortcut, F5.<\/p><p style=\"text-align: center;\">  <img class=\"aligncenter wp-image-4333 size-full\" src=\".\/images\/vs-primer-ref-run.png\" alt=\"Running code\"\/>  <strong>Figure 13<\/strong>  <em>Running code from the Debug menu<\/em><\/p><p>An alternative is to click the Start button on the toolbar.<\/p><p style=\"text-align: center;\">  <img class=\"aligncenter wp-image-4333 size-full\" src=\".\/images\/vs-primer-ref-start.png\" alt=\"Running code with Start button\"\/>  <strong>Figure 14<\/strong>  <em>Running code using the Start button<\/em><\/p><p>This will have our program run and open its window for us to see.<\/p><p style=\"text-align: center;\">  <img class=\"aligncenter wp-image-4333 size-full\" src=\".\/images\/vs-primer-ref-running.png\" alt=\"The program running\"\/>  <strong>Figure 15<\/strong>  <em>The program running in its window<\/em><\/p><p>Once we are done with our program, we may click on the window's Close button, just like any other Windows program.<\/p><p>We ran our program by going through the Debug menu but we haven't yet talked about what \"debugging\" is. Without going into the details at this time, debugging allows us to step through the code, line-by-line, while the program is running. By being able to inspect the internals of the program while it is running, we may fix issues in the program's logic that are not caught during the compiling process. We will go into more detail on the debugging process later in the course.<\/p><\/div>              <a class=\"dest\" id=\"vs-primer-7\"><\/a>&nbsp;<div class=\"accent\"><h1>Changing Code<\/h1><p>While writing or editing a program we'll need to make changes to the code. The Visual Studio code editor operates just like a normal text editor with some additional features such as keyword color highlighting, which makes it easy to jump right in.  (Keywords are covered in a future Module).<\/p><p style=\"text-align: center;\">  <img class=\"aligncenter wp-image-4333 size-full\" src=\".\/images\/vs-primer-ref-codeeditor.png\" alt=\"Code editor\"\/>  <strong>Figure 16<\/strong>  <em>The Visual Studio code editor<\/em><\/p><p>While entering or editing code within the editor, we'll often see dynamic tooltips appear immediately below our typing. This is Visual Studio attempting to guess what our coding intention is, and provides useful hints. We may choose to safely ignore these hints as we type.<\/p><p style=\"text-align: center;\">  <img class=\"aligncenter wp-image-4333 size-full\" src=\".\/images\/vs-primer-ref-intellisense.png\" alt=\"Code editor intellisense\"\/>  <strong>Figure 17<\/strong>  <em>Code editor dynamic tooltip in action while typing \"string\"<\/em><\/p><p>When working on a Module's Exercise in this course, the Exercise will point out areas within the C# code that need to be investigated or modified. These areas are known as Focus Areas, and are highlighted within the code with start and end tags like this:<\/p><p style=\"text-align: center;\">  <img class=\"aligncenter wp-image-4333 size-full\" src=\".\/images\/vs-primer-ref-focusarea.png\" alt=\"A focus area\"\/>  <strong>Figure 18<\/strong>  <em>An Exercise's focus area<\/em><\/p><p>The Exercise steps will point out what needs to be done within these focus areas in order to complete the Exercise.<\/p><\/div><a class=\"dest\" id=\"vs-primer-8\"><\/a> &nbsp; <div class=\"accent\"> <h1>Commenting Code<\/h1> <p>When writing code it is useful to include comments within the code. Comments may be used to describe what the intent of the code is to help others that read through our code. They are also useful when we come back to a block of code after having not looked at it for a while. All comments are ignored by the Visual Studio compiler and exist for us humans.<\/p> <p>In C# we mark text as a comment by preceding it with two slashes: \/\/ In the Visual Studio code editor, all comments are colored green so that they stand out. Here is an example of a comment above a line of code:<\/p> <p style=\"text-align: center;\">  <img class=\"aligncenter wp-image-4333 size-full\" src=\".\/images\/vs-primer-ref-comment1.png\" alt=\"Commented line\"\/>  <strong>Figure 19<\/strong>  <em>Two lines of comments<\/em><\/p><p>We may also include a comment to the right of a line of code. In this case, everything to the right of the double slashes is considered a comment and will not be compiled into the final program.<\/p> <p style=\"text-align: center;\">  <img class=\"aligncenter wp-image-4333 size-full\" src=\".\/images\/vs-primer-ref-comment2.png\" alt=\"Commented right of line\"\/>  <strong>Figure 20<\/strong>  <em>A comment to the right of code<\/em><\/p><p>As comments are ignored by the Visual Studio compiler, they are also useful to temporarily remove a line of code from the program. To do so, we just put the two slashes at the beginning of the line of code.<\/p> <p style=\"text-align: center;\">  <img class=\"aligncenter wp-image-4333 size-full\" src=\".\/images\/vs-primer-ref-comment3.png\" alt=\"Commented code\"\/>  <strong>Figure 21<\/strong>  <em>Two lines of code commented out<\/em><\/p><p>Sometimes an Exercise will ask us to uncomment a line of code. This means that you are to remove the two slashes at the beginning of the line of code so that it will once again be compiled into the program.<\/p> <\/div> <!--page:~~vs-primer-reference-text~~-->","title":"Reference Material"},{"bIsChecked":true,"exercise":".\/exercise\/vs-primer.zip","instructions":"<h1>Goal<\/h1><p>Throughout this course we will be working on Exercises using Visual Studio 2013. In this exercise we learn how to use Visual Studio 2013 to open an Exercise's solution file, compile the Exercise, and finally run it. At the end of this Exercise we will have a Bubble Popper game to play, and in a future Module we will customize it with our own content.<\/p><p style=\"text-align: center;\">  <img class=\"aligncenter wp-image-4333 size-full\" src=\".\/images\/vs-primer-exercise-running.png\" alt=\"Bubble Popper running\"\/>  <strong>Figure 1<\/strong>  <em>Bubble Popper game running in its window<\/em><\/p><h1>Steps<\/h1><ol><li>Download the Exercise files:<ol><li>At the top of this page, <strong>Right-Click<\/strong> on the Exercise button and click \"Save link as...\" or \"Save target as...\" (depending on the browser) to download the Exercise for this Module.<\/li>  <p style=\"text-align: center;\">    <img class=\"aligncenter wp-image-4333 size-full\" src=\".\/images\/vs-primer-ref-exercisebutton.png\" alt=\"Exercise button\"\/>    <strong>Figure 2<\/strong>    <em>The Exercise button<\/em>  <\/p><li>Choose the location given by your teacher or instructor to save the Exercise ZIP package. If your school allows it this could be the Desktop.<\/li><li>Extract the Visual Studio 2013 files from the Exercise's ZIP package by right clicking on it and choosing Extract. We may use the given location to save the files, or the one provided by your teacher.<\/li><li>Our Exercise files are now ready to be opened in Visual Studio 2013<\/li>  <p style=\"text-align: center;\">    <img class=\"aligncenter wp-image-4333 size-full\" src=\".\/images\/vs-primer-exercise-files.png\" alt=\"Exercise files\"\/>    <strong>Figure 3<\/strong>    <em>The Exercise's files<\/em>  <\/p><\/ol><\/li><li>Open the Exercise in Visual Studio 2013:<ol><li>Double click on the Exercise's solution file called <i>vs-primer.sln<\/i> to launch Visual Studio 2013 and automatically open the Exercise.<\/li>  <p style=\"text-align: center;\">    <img class=\"aligncenter wp-image-4333 size-full\" src=\".\/images\/vs-primer-exercise-solution.png\" alt=\"Exercise solution\"\/>    <strong>Figure 4<\/strong>    <em>The Exercise's solution file<\/em>  <\/p><li>Visual Studio 2013 will now open and the Exercise's file list will be displayed in the Solution Explorer.<\/li>  <p style=\"text-align: center;\">    <img class=\"aligncenter wp-image-4333 size-full\" src=\".\/images\/vs-primer-exercise-solutionexplorer.png\" alt=\"Exercise in Visual Studio\"\/>    <strong>Figure 5<\/strong>    <em>The Exercise opened in Visual Studio. The Exercise's files are shown in the Solution Explorer.<\/em>  <\/p><li>We may open one of the Exercise's C# code files in Visual Studio 2013's Code Editor. Double click on the the VSPrimerExercise.cs file at the bottom of the Solution Explorer to open it.<\/li>  <p style=\"text-align: center;\">    <img class=\"aligncenter wp-image-4333 size-full\" src=\".\/images\/vs-primer-exercise-code.png\" alt=\"VSPrimerExercise.cs opened\"\/>    <strong>Figure 6<\/strong>    <em>VSPrimerExercise.cs opened in Visual Studio's Code Editor<\/em>  <\/p><li>The Exercise is now ready to be compiled.<\/li><\/ol><\/li><li>Build (or compile) the Exercise in preparation of running it:<ol><li>Go to the Build menu and select <i>Build Solution<\/i> or press F7. This will start the build process that compiles the C# code into a binary format for the computer.<\/li>  <p style=\"text-align: center;\">    <img class=\"aligncenter wp-image-4333 size-full\" src=\".\/images\/vs-primer-exercise-build.png\" alt=\"Building the Exercise\"\/>    <strong>Figure 7<\/strong>    <em>Building the Exercise from the menu<\/em>  <\/p><li>The Output tabbed window at the bottom of the Visual Studio 2013 interface displays the progress of the build and tells us when it has succeeded. If the Output tabbed window is not present, go to the View menu and select the <i>Output<\/i> menu item.<\/li>  <p style=\"text-align: center;\">    <img class=\"aligncenter wp-image-4333 size-full\" src=\".\/images\/vs-primer-exercise-success.png\" alt=\"Successful build\"\/>    <strong>Figure 8<\/strong>    <em>Exercise successfully built<\/em>  <\/p><\/ol><\/li><li>Run the Exercise:<ol><li>To run the compiled project go to the Debug menu and select <i>Start Debugging<\/i> or press F5.<\/li>  <p style=\"text-align: center;\">    <img class=\"aligncenter wp-image-4333 size-full\" src=\".\/images\/vs-primer-exercise-run.png\" alt=\"Running the Exercise\"\/>    <strong>Figure 9<\/strong>    <em>Running the Exercise from the menu<\/em>  <\/p><li>After a moment the Bubble Popper game window will appear. If your game window doesn't appear, you might have a problem with the setup on your computer. Have your teacher search for a solution in our online support by logging into www.gginteractive.com.<\/li>  <p style=\"text-align: center;\">    <img class=\"aligncenter wp-image-4333 size-full\" src=\".\/images\/vs-primer-exercise-running.png\" alt=\"Bubble Popper running\"\/>    <strong>Figure 10<\/strong>    <em>Bubble Popper game running in its window<\/em>  <\/p><li>Play a few rounds of the game. When done, click on the window's Close button in the top right. Show your teacher that the game runs.<\/li><\/ol><\/li><\/ol><h1>Rubric<\/h1><ul><li>1 Point for extracting and opening the file in Visual Studio in step 2.b.<\/li><li>1 Point for compiling (step 3) and running the game in step 4.<\/li><\/ul><!--page:~~vs-primer-exercise~~-->","link":null,"mod":"vs-primer","movie":null,"name":"vs-primer","promptfile":null,"prompts":null,"reference":"","text":null,"title":"Exercise"}]},{"bIsChecked":true,"name":"exercise-example","title":"Exploring Visual Studio","topics":[{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"Exercises","movie":".\/video\/Course2-programming-basics-exercise-example-overview.mp4","name":"Overview","promptfile":null,"prompts":null,"reference":"exercise-example-1","text":null,"title":"Overview"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"focus-areas","mod":"Exercises","movie":".\/video\/Course2-programming-basics-exercise-example-focus-areas.mp4","name":"Focus Areas","promptfile":null,"prompts":null,"reference":"exercise-example-2","text":null,"title":"Focus Areas"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"comments","mod":"Exercises","movie":".\/video\/Course2-programming-basics-exercise-example-comments.mp4","name":"Comments","promptfile":null,"prompts":null,"reference":"exercise-example-3","text":null,"title":"Comments"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"regions-outlining","mod":"Exercises","movie":".\/video\/Course2-programming-basics-exercise-example-regions-outlining.mp4","name":"Regions\/Outlining","promptfile":null,"prompts":null,"reference":"exercise-example-4","text":null,"title":"Regions\/Outlining"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"line-numbers","mod":"Exercises","movie":".\/video\/Course2-programming-basics-exercise-example-line-numbers.mp4","name":"Line Numbers","promptfile":null,"prompts":null,"reference":"exercise-example-5","text":null,"title":"Line Numbers"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"bookmarks","mod":"Exercises","movie":".\/video\/Course2-programming-basics-exercise-example-bookmarks.mp4","name":"Bookmarks","promptfile":null,"prompts":null,"reference":"exercise-example-6","text":null,"title":"Bookmarks"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"find-replace","mod":"Exercises","movie":".\/video\/Course2-programming-basics-exercise-example-find-and-replace.mp4","name":"Find\/Replace","promptfile":null,"prompts":null,"reference":"exercise-example-7","text":null,"title":"Find\/Replace"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"reference","mod":"exercise-example","movie":null,"name":"Reference","promptfile":null,"prompts":null,"reference":null,"text":"<br \/>            <a class=\"dest\" id=\"exercise-example-1\"><\/a>                <div class=\"accent\">            <h1>Overview<\/h1>            <p>                Now that we've learned both how to run an existing project, this Module will cover what to expect from the Exercises throughout the rest of the curriculum. As we examine the characteristics of an Exercise, we will also learn about the important Topic of commenting and additional tips and tricks about working with the Code and Text Editor in Visual Studio.            <\/p>            <div style=\"text-align: center;\">                <ul class=\"anchorGroup\" style=\"text-align: left; display: inline-block;\">                    <li><a class=\"ankor\" href=\"#exercise-example-2\">Focus Areas<\/a><\/li>                    <li><a class=\"ankor\" href=\"#exercise-example-3\">Comments<\/a><\/li>                    <li><a class=\"ankor\" href=\"#exercise-example-4\">Regions\/Outlining<\/a><\/li>                    <li><a class=\"ankor\" href=\"#exercise-example-5\">Line Numbers<\/a><\/li>                    <li><a class=\"ankor\" href=\"#exercise-example-6\">Bookmarks<\/a><\/li>                    <li><a class=\"ankor\" href=\"#exercise-example-7\">Find\/Replace<\/a><\/li>                <\/ul>            <\/div>        <\/div>        <p>            <a class=\"dest\" id=\"exercise-example-2\"><\/a><br \/>        <\/p>        <div class=\"accent\">            <h1>Focus Areas<\/h1>            <p>                We learned how to download, extract, build, and run an Exercise in the Visual Studio Primer Module. Now we're going to cover the common contents of an Exercise and how we'll be working within the code.            <\/p>            <p>                Once opened in Visual Studio, each Exercise will contain one or more C# code files (indicated by the C# icon and .cs extension), which are listed in the Solution Explorer. There will typically be at least a 'Program.cs' file (which contains the main entry point where the application is run) and a file named by the convention '<em>Modulename<\/em>Exercise.cs' (which contains the primary Exercise code). Sometimes there will be more C# code files with additional supporting code for the Exercise.            <\/p>            <p style=\"text-align:center;\">                <img class=\"aligncenter wp-image-4558 size-full\" src=\".\/images\/exercise_example_figure1.png\" alt=\"Exercise Files in the Solution Explorer\" \/><br \/>                <strong>Figure 1<\/strong> <em>Exercise Files in the Solution Explorer<\/em>            <\/p>            <p>                In this and future Modules, the Exercise-specific code files will contain one or more special sections called <strong>Focus Areas<\/strong>.            <\/p>            <p style=\"text-align:center;\">                <img class=\"aligncenter wp-image-4558 size-full\" src=\".\/images\/exercise_example_figure2.png\" alt=\"Example Focus Area\" \/><br \/>                <strong>Figure 2<\/strong> <em>Example Focus Area<\/em>            <\/p>            <p>                As we can see in Figure 2 above, a Focus Area is indicated by the green text \"Begin Focus Area <em>#<\/em>\" and \"End Focus Area <em>#<\/em>,\" enclosed in forward slashes and asterisks. We will be directed to these Focus Areas in numerical order throughout the steps in future Exercises. Focus Areas will help to navigate through sometimes lengthy and more complex code to the specific locations where we'll be learning, adding, or editing code.            <\/p>        <\/div>        <p>            <a class=\"dest\" id=\"exercise-example-3\"><\/a><br \/>        <\/p>        <div class=\"accent\">            <h1>Comments<\/h1>            <p>                The Focus Areas discussed in the last Topic are formatted using a special kind of syntax called a <strong>Comment<\/strong>. A comment is additional text in code files that is not code itself. Comments are typically used to provide supporting information about the code nearby. Special syntax marks text as comments, and this tells the compiler to ignore those segments of text during a build. This reduces file size and removes pieces irrelevant to the computer when it runs the code.                There are two main types of comment syntax: inline and block. Inline comments are specified by two consecutive forward slashes. They are contained within a single line and are therefore ended by a new line. Inline comments are typically added above or to the right of the line of relevant code. Since inline comments are only a single line, they are often used for more minor comments (e.g. when variables are first declared).            <\/p>                <p style=\"text-align:center;\">                <img class=\"aligncenter wp-image-4558 size-full\" src=\".\/images\/exercise_example_figure3.png\" alt=\"Inline Comment Examples\" \/><br \/>                <strong>Figure 3<\/strong> <em>Inline Comment Examples<\/em>            <\/p>            <p>                Block comments are typically larger, multi-line sections of text, and are therefore used to support more significant pieces of code. They begin with a forward slash then asterisk (\/*) and end with an asterisk then forward slash (*\/).            <\/p>            <p style=\"text-align:center;\">                <img class=\"aligncenter wp-image-4558 size-full\" src=\".\/images\/exercise_example_figure4.png\" alt=\"Block Comment Example\" \/><br \/>                <strong>Figure 4<\/strong> <em>Block Comment Example<\/em>            <\/p>            <p>                     Comments may also be toggled from the Advanced sub-menu of the EDIT menu, or with the shortcuts listed there.            <\/p>            <p>                     Although comments are usually paired with existing code, they can also be used to temporarily remove, or \"comment out,\" existing code from compilation. Another common use is to mark incomplete areas of code as \"TODO\".            <\/p>            <p style=\"text-align:center;\">                <img class=\"aligncenter wp-image-4558 size-full\" src=\".\/images\/exercise_example_figure5.png\" alt=\"Commented Code and TODO Examples\" \/><br \/>                <strong>Figure 5<\/strong> <em>Commented Code and TODO Examples<\/em>            <\/p>            <p>                Comments can also be easily identified because they are usually colored green (using default setting in Visual Studio).            <\/p>            <p>                Comments are extremely important. While it is true that it is good practice to write code in a way that is as clean and self-explanatory as possible, comments are still essential. They can provide context, explanations, and additional information to those reading the code. The individual(s) reading the code may be using it with a need to know how to work with it, or may be building on top of or refactoring the code with a need to truly understand how it was intended to work originally. The individual who wrote the code may even return to it much later, and may benefit from thorough notes to remind him\/her of its history. There is also software that can automatically parse comments and output them into external documentation that supports the code, which is another critical piece of many software packages.            <\/p>            <p>                Commenting is an essential practice to make a good habit from the start. Commenting code before, during, and after its creation can aid in thinking through the programming process and can provide critical explanations for why things are coded the way they are. It should not be considered an extra, unimportant, or burdensome part of programming; <em>it is part of writing code<\/em>. Comments are just as important, if not more so, than the code itself.            <\/p>        <\/div>        <p>            <a class=\"dest\" id=\"exercise-example-4\"><\/a><br \/>        <\/p>        <div class=\"accent\">            <h1>Regions\/Outlining<\/h1>            <p>                As we work in Exercise C# files, we may also encounter <strong>Regions<\/strong>.             <\/p>            <p style=\"text-align:center;\">                <img class=\"aligncenter wp-image-4558 size-full\" src=\".\/images\/exercise_example_figure6.png\" alt=\"Region Example\" \/><br \/>                <strong>Figure 6<\/strong> <em>Region Example<\/em>            <\/p>            <p>                Regions are defined sections of text in a code file that are grouped for organizational purposes. The syntax for a region begins with \"#region\" and the desired name of the region on the same line, and ends with \"#endregion\".            <\/p>            <p>                Regions help group and organize code in a way that enhances readability. They also work in tandem with the Outlining system in Visual Studio. The Outlining functionality allows the user to collapse and expand sections of code while working with a file. The sections include multi-line comments, code between brackets, and regions. Individual sections may be expanded\/collapsed by clicking on the plus\/minus boxes to the left of the code. They may also be toggled within the Outlining sub-menu of the EDIT menu.            <\/p>        <\/div>        <p>            <a class=\"dest\" id=\"exercise-example-5\"><\/a><br \/>        <\/p>        <div class=\"accent\">            <h1>Line Numbers<\/h1>            <p>                Another really useful Code and Text Editor enhancement is <strong>Line Numbers<\/strong>. With  line numbers enabled, we see each line within the file labeled sequentially, from top to bottom, with a number on the left side. To enable line numbers, select 'Options...' from the TOOLS menu, and then select 'Text Editor,' 'All Languages,'  'General,' and finally check \"Line numbers.\"            <\/p>            <p style=\"text-align:center;\">                <img class=\"aligncenter wp-image-4558 size-full\" src=\".\/images\/exercise_example_figure7.png\" alt=\"Line Numbers Example\" \/><br \/>                <strong>Figure 7<\/strong> <em>Line Numbers Example<\/em>            <\/p>            <p>                Line numbers are useful for locating or communicating specific pieces of code, and are also shown in the Error List window to assist in finding where an error occurred.            <\/p>            <p>                Line numbers are a very useful tool, and we may refer to them in future Exercises, so enabling them is recommended.            <\/p>        <\/div>        <p>            <a class=\"dest\" id=\"exercise-example-6\"><\/a><br \/>        <\/p>        <div class=\"accent\">            <h1>Bookmarks<\/h1>            <p>                Although line numbers can be very helpful, it may not always be easy to remember all the specific lines we may want to jump back to as we work throughout code files. Visual Studio provides a <strong>Bookmarks<\/strong> feature to help. Bookmarks can be toggled to the far left of lines of code for easy browsing later. The bookmark functionality, including toggling bookmarks and jumping between the previous\/next bookmark, is located under EDIT and 'Bookmarks...' It can also be accessed from the toolbar.            <\/p>            <p style=\"text-align:center;\">                <img class=\"aligncenter wp-image-4558 size-full\" src=\".\/images\/exercise_example_figure8.png\" alt=\"Bookmarks Example\" \/><br \/>                <strong>Figure 8<\/strong> <em>Bookmarks Example<\/em>            <\/p>        <\/div>        <p>            <a class=\"dest\" id=\"exercise-example-7\"><\/a><br \/>        <\/p>        <div class=\"accent\">            <h1>Find\/Replace<\/h1>            <p>                One final tip to cover is find and replace functionality. This is used frequently when working with larger codebases. Press 'Ctrl+F' to search within the current document, or 'Ctrl+Shift+F' to search the entire solution. There are different dialog options about where (document, project, solution, etc.) and how (match case, match whole word, etc.) to search. Pressing 'Ctrl+H' will replace the given text with the specified replacement within the current document, while 'Ctrl+Shift+H' will allow for doing so throughout the entire solution. Be careful when replacing text, especially across multiple files, as failing to consider all the possible effects can often lead to compiler errors.             <\/p>            <p style=\"text-align:center;\">                <img class=\"aligncenter wp-image-4558 size-full\" src=\".\/images\/exercise_example_figure9.png\" alt=\"Find and Replace Dialog\" \/><br \/>                <strong>Figure 9<\/strong> <em>Find and Replace Dialog<\/em>            <\/p>        <\/div>        <!--page:~~exercise-example-reference-text~~-->","title":"Reference Material"},{"bIsChecked":true,"exercise":".\/exercise\/exercise-example.zip","instructions":"        <h1>Goal<\/h1>        <p>            In this Exercise, we will run through a small example of what to expect in future exercises. We will use Focus Areas to locate sections of code for review and editing. We will be making a small modification to the bubble popper game from the Visual Studio Basics Exercise in the first Module.        <\/p>        <img class=\"aligncenter size-full wp-image-701\" src=\".\/images\/exercise_example_exercise_final.png\" alt=\"exercise_example_exercise_final\" \/><p style=\"text-align: center;\">The final game should look similar to the one in this image, but with different words.<\/p>        <h1>Steps<\/h1>        <p>All work in this Exercise will be done in the <em>ExerciseExampleExercise.cs<\/em> file within the exercise-example project.<\/p>        <ol>            <li>Build and Run the Exercise.<\/li>\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009<li>You can click the Start button (green arrow) or press F5.<\/li>\u0009\u0009\u0009    <li>We should see the same bubble popper game from the Visual Studio Primer Module. (<a href='.\/simulation\/ExerciseExample_1\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li>            <li>Press Esc or click the 'X' to stop running the Exercise.<\/li>\u0009\u0009\u0009<\/ol>            <li>Now it's time to find our first Focus Area.<\/li> \u0009\u0009\u0009<ol>\u0009\u0009\u0009<li>In \"ExerciseExampleExercise.cs,\" locate <em>Focus Area 1<\/em>. It'll be the first comment near the top of the file (should begin at line 15). Don't worry too much about understanding the syntax and the full details of the code within the Focus Area; we'll learn more about the individual pieces in upcoming modules.<\/li>\u0009\u0009\u0009<li>\u0009\u0009\u0009However, we can read the supporting comment within the Focus Area to get a good sense of what the code does. This code tells the game what words to use in the bubbles.\u0009\u0009\u0009            <img class=\"aligncenter size-full wp-image-701\" src=\".\/images\/exercise_example_exercise_focusArea.png\" alt=\"exercise_example_exercise_focusArea\" \/><p style=\"text-align: center;\">Focus Area 1<\/p>\u0009\u0009\u0009            <li>Replace each of the words with a new word. Be careful to only change the words. Quotes and commas still need to be the same form.<\/li>\u0009\u0009\u0009<\/li>\u0009\u0009\u0009<\/ol>            <li>Build and Run the Exercise.<\/li>\u0009\u0009\u0009<ol>\u0009\u0009\u0009<li>We should now see the new words being used throughout the game. (<a href='.\/simulation\/ExerciseExample_2\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>). Share this with your teacher.<\/li>\u0009\u0009\u0009<\/ol>        <\/ol>        <h1>Challenge Tasks<\/h1>\u0009\u0009Congratulations. You successfully compiled a program and modified it. Try some of these challenge tasks.        <ol>\u0009\u0009<ol>            <li>Try experimenting with different word lengths to see the effect on the look and feel of the game.<\/li>            <li>Experiment with less and more words to see the effect on the level of challenge.<\/li>            <li>Tweak the different variables in <em>Focus Area 2<\/em> (line 23) and observe the changes in gameplay.<\/li>            <li>In \"GameTextures.cs,\" locate <em>Focus Area 3<\/em> (line 42) and replace the background with another image from the \"Graphics\" folder.(Hint: The Graphics folder is in the Content directory of the exercise you downloaded.)<\/li>        <\/ol>\u0009\u0009<\/ol>        <p><\/p>\u0009\u0009<h1>Rubric<\/h1><ul><li>2 Points for changing the words and compiling the game in step 2.c.<\/li><\/ul>        <!--page:~~exercise-example-exercise~~-->","link":null,"mod":"exercise-example","movie":null,"name":"exercise-example","promptfile":null,"prompts":null,"reference":"","text":null,"title":"Exercise"},{"bIsChecked":true,"exercise":".\/exercise\/physics_vs-primer.zip","instructions":"<h1>Goal<\/h1><p>In this open ended exercise, you will demonstrate your understanding of navigating and debugging in Visual Studio. Different shaped circles will fall from the top of the screen. They will assuredly knockdown the current puny structure of shapes that is set up by default. Your job is to create a sturdy structure that will not only survive the falling circles, but contain them.<\/p><p style=\"text-align: center;\"><img class=\"aligncenter size-full wp-image-701\" src=\".\/images\/vs-primer_image.png\" alt=\"vs-primer_image\"\/><br \/>This is what the game looks like to start. <\/p><h1>Steps<\/h1>Build and run the project. Circles will spawn from the top of the screen, and crush the poor structure below. We're going to figure out how to prevent that from happening, but first, lets look out how code executes.<ol><li>Check out the order of code execution by debugging <\/li><ol><li> It's important to understand the order in which code gets executed. We will explore this by debugging the code. <\/li><li> Let's go to Focus Area 1. I want to stop the execution of the code right as one of those pesky circles touches the ground. To do so, lets place a breakpoint. A breakpoint is a place in code that will stop execution once it is reached. It's easy to place. <\/li><li> Put your cursor on the word \"ShowMessage\" in the Focus Area 1, right click->Breakpoint->Insert Breakpoint. <br\/><img class=\"aligncenter size-full wp-image-701\" src=\".\/images\/example_exercise_focus_area01.png\" alt=\"vs-example_exercise_focus_area01\"\/><\/li><li>A little red dot will appear next to the line in the window. You can click that red dot to remove the breakpoint. You can also click that blank area of the code window to place a breakpoint without using the menu.<\/li><br\/><img class=\"aligncenter size-full wp-image-701\" src=\".\/images\/example_exercise_breakpoint.png\" alt=\"example_exercise_breakpoint\"\/><li> Now that the breakpoint is set, lets run in Debug mode. This is as simple as pressing F5. (Not Control + F5, that's the non-Debug version!) <\/li><li> It won't take long for one of the circles to crash through the structure and touch the ground. This will cause the code to stop executing and, well...\"break\". Now there will be an arrow next to the breakpoint. <\/li><li> Hover the cursor of the word ShowMessage. <br\/><img class=\"aligncenter size-full wp-image-701\" src=\".\/images\/example_exercise_breakpoint_hover.png\" alt=\"example_exercise_breakpoint_hover\"\/> <\/li><li> A pop up will show, displaying the value of ShowMessage. Now press F10. This will execute the next line of code, changing the value of ShowMessage. <\/li><li> Pressing F10 again and again will continue executing lines of code. Notice that it goes from the top to the bottom: that's the order that code executes in. Top to bottom. Remember that! <\/li><li> Pressing F5 will continue executing, but look for more instances of circles touching the ground. There will be more, so why not just press Shift + F5  for now to stop debugging. <\/li><\/ol><li> Prevent Circles from spawning <\/li><ol><li> Locate Focus Area 2 <\/li><li> In it, you should see the word \"SpawnCircles\". This text is creating all the circles and it's called a function. You will learn how to use functions in a later module. <\/li><br\/><img class=\"aligncenter size-full wp-image-701\" src=\".\/images\/example_exercise_focus_area02.png\" alt=\"example_exercise_focus_area02\"\/><li> Lets comment it out, which makes the complier ignore the code so that it won't run. Add two forward slashes right in front of the SpawnCircles. This should turn it Green. <\/li><br\/><img class=\"aligncenter size-full wp-image-701\" src=\".\/images\/example_exercise_focus_area02_commented_out.png\" alt=\"example_exercise_focus_area02_commented_out\"\/><li> Compile and run again (Just press Control + F5 to build then run automatically). No circles! <\/li><li> Well, not letting any circles spawn is kind of cheating. Remove the two slashes from in front of the SpawnCircles. Build and start. Are they back?<\/li><\/ol><li> Making a stronger structure <\/li><ol><li> In Focus Area 2 again, double click the word \"CreateStructure\". This will highlight the text. Now right click on it. The drop down menu should have an option that says \"Go To Definition\". Select that. <\/li><br\/><img class=\"aligncenter size-full wp-image-701\" src=\".\/images\/example_exercise_goto_definition.png\" alt=\"example_exercise_goto_definition\"\/><li> This takes us to the guts of CreateStructure. These two lines of code make up our noble yet weak T shaped structure we see at the beginning.<\/li><li> Each line that says physics.CreateBox will create a box. The numbers between the parentheses are all values that effect the size and shape of the box. <ul><li>The first number defines position left to right.<\/li><li>The second number defines position up and down.<\/li><li>The third number defines box width.<\/li><li>The fourth number defines box height.<\/li><\/ul><\/li><li> That's all fine, but we need to make a structure that can withstand the onslaught of the circles and also contain them. We're going to need more boxes. To do this, you can copy and paste either of this two lines of code. <\/li><li> To copy and paste, left click and drag to highlight an entire line of code, all the way to the semicolon. Now right click and select Copy. Move the mouse cursor after the semicolon and then Right Click and select Paste. This will create a copy of the line of code you highlighed and when you run, you will now have three boxes! The only problem is that one of your three boxes is an exact duplicate and is on top of the original. Change the values to move it.<\/li><li> Next, design your own combination of boxes and catch all of the falling circles. When you are done, show your teacher.<\/li><li> Still aren't sure what we are looking for? Well, take a look at one of our answers for inspiration.<img class=\"aligncenter size-full wp-image-701\" src=\".\/images\/Exploring-Visual-Studio-Tower-Fall-ExampleSolution.png\" alt=\"example_exercise_goto_definition\"\/> <\/li><\/ol><\/ol><h1>Rubric<\/h1><ul><li>1 point for demonstrating steps 1.g and 1.h (show breakpoint and use of F10)<\/li><li>1 point for using comments to remove the circles in step 2.d<\/li><li>1 point for demonstrating \"Go to Definition\" in step 3.a an d 3.b<\/li><li>1 point for catching all of the circles without the platform falling in step 3.g<\/li><\/ul><!--page:~~exercise-example-project~~-->","link":null,"mod":"exercise-example","movie":null,"name":"physics_vs-primer","promptfile":null,"prompts":null,"reference":"","text":null,"title":"Project: Tower Fall"}]},{"bIsChecked":true,"name":"variables","title":"Variables","topics":[{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":null,"movie":".\/video\/Course2-csharp-primer-arc-variables-overview.mp4","name":"Overview","promptfile":null,"prompts":null,"reference":"variables-1","text":null,"title":"Overview"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"declaration","mod":null,"movie":".\/video\/Course2-csharp-primer-arc-variables-declaration.mp4","name":"Declaration","promptfile":null,"prompts":null,"reference":"variables-3","text":null,"title":"Declaration"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"variable-manipulation","mod":null,"movie":".\/video\/Course2-csharp-primer-arc-variables-variableManipulation.mp4","name":"Variable Manipulation","promptfile":null,"prompts":null,"reference":"variables-4","text":null,"title":"Variable Manipulation"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"variable-refactoring","mod":null,"movie":".\/video\/Course2-csharp-primer-arc-variables-refactoring.mp4","name":"Code Re-factoring","promptfile":null,"prompts":null,"reference":"variables-41","text":null,"title":"Code Re-factoring"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"built-in-types","mod":null,"movie":".\/video\/Course2-csharp-primer-arc-variables-builtInTypes.mp4","name":"C# Built-In Types","promptfile":null,"prompts":null,"reference":"variables-5","text":null,"title":"C# Built-In Types"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"type-casting","mod":null,"movie":".\/video\/Course2-csharp-primer-arc-variables-casting.mp4","name":"Type Casting","promptfile":null,"prompts":null,"reference":"variables-6","text":null,"title":"Type Casting"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":null,"mod":null,"movie":null,"name":"Reference","promptfile":null,"prompts":null,"reference":null,"text":"<a class=\"dest\" id=\"variables-1\"><\/a><div class=\"accent\"><h1>Overview<\/h1><p>Put simply, a program is a set of instructions and the manipulation of data by those instructions; the starting point for using data in a program is the variable. The purpose of a variable is to provide a container for data so that we can store and retrieve data (typically called \"reading\" and \"writing\") for subsequent use. Game scores, text messages, player states, ammo counts, and time-remaining, are all common examples of variables you would expect to see in a game.<\/p><div style=\"text-align: center;\">    <ul class=\"anchorGroup\" style=\"text-align: left; display: inline-block;\">        <li><a class=\"ankor\" href=\"#variables-3\">Declaration<\/a><\/li>        <li><a class=\"ankor\" href=\"#variables-4\">Variable Manipulation<\/a><\/li>\u0009\u0009<li><a class=\"ankor\" href=\"#variables-41\">Code Re-factoring<\/a><\/li>        <li><a class=\"ankor\" href=\"#variables-5\">C# Built-In Types<\/a><\/li>        <li><a class=\"ankor\" href=\"#variables-6\">Type Casting<\/a><\/li>    <\/ul><\/div><\/div><a class=\"dest\" id=\"variables-2\"><\/a><br \/><a class=\"dest\" id=\"variables-3\"><\/a><div class=\"accent\"> <!-- Declaration --><h1>Declaration<\/h1><p>The first step toward using a variable is to declare it.  Let's look at some code.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ String<br\/>string myString = \"There is a fox.\";<br\/><br\/>\/\/ Whole number<br\/>int wholeNumber = 10;<br\/><\/pre><p><b>Use the code above to identify the parts of a variable declaration.<\/b><\/p><ul><li><p>The words in blue, are called types. The type tells the computer what rules are associated with the data stored in that variable. For example, the type \"string\", tells the computer to expect a list of letters (typically referred to as \"characters\" in programming). The type \"int\" is short for integer, which is a whole number like 1,2,3,etc. If you assigned a number like 10 to a string variable, it would cause an error.<\/p><\/li><li><p>The text following the type is the variable name. (i.e. myString, wholeNumber)<\/p><\/li><li><p>The text following the name is the assignment operator. Yes, what you think of as an equals sign, is actually called an assignment operator.<\/p><\/li><li><p>Next, we have the value. (i.e. \"There is a fox.\",10)<\/p><\/li><li><p>Finally, we have the semicolon which terminates or ends the statement.<\/p><\/li><\/ul><p>To state it in everyday terms, we can replace the equal sign with the word \"gets\" and read this line of code as: \"myString gets the text 'There is a fox'\". To talk like a programmer, you might say, \"the string variable 'myString' is assigned the string value 'There is a fox'\".<\/p><b><p>Another Example:<\/p><\/b><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Declare an integer for tracking player coins, initialize it with a value of 5<br\/>int playerCoins = 5;<br\/><\/pre><p>The name of the variable is <em>playerCoins<\/em> and it is an integer type. The initial value is set to five by using the assignment operator. The naming of the variable is completely up to the programmer, but it should make sense according to its purpose.<\/p><p>If we do not provide a value when declaring the variable, it will start with a default value for it's type. For integers, the default value is 0. We use the term \"initialization\" to describe the first time we set a value for a variable.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Declare an integer for tracking player coins. Default value will be 0.<br\/>int playerCoins;<br\/><\/pre><p>There are several rules we must follow when naming a variable.<\/p><ul><li>Variable names may not contain spaces<\/li><li>Variables can not share the name of a previously defined variable<\/li><li>Variable names may not start with a number<\/li><\/ul><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ This variable declaration is fine<br\/>int playerCoins = 3;<br\/><br\/>\/\/ This variable declaration will cause a compiler error. Variable names must be unique<br\/>int playerCoins = 4;<br\/><\/pre><p>Even though a variable must be one word, we can use numbers and some symbols to make them unique:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Declare a variable named playerCoins1, set value to 2<br\/>int playerCoins1 = 2;<br\/><br\/>\/\/ Declare a variable named playerCoins2, set value to 3<br\/>int playerCoins2 = 3;<br\/><br\/>\/\/ Declare a variable named _playerCoins, set value to 4<br\/>int _playerCoins = 4;<br\/><\/pre><br \/><p>The code above declares three separate integer variables, each with a unique name and its own value.<\/p> <p>Lastly, for brevity in writing code, we can also declare multiple variables of the same type on the same line, using the keyword for the type only once:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Declare an integer named x and initialize it to 10. Also declare an integer named y and initialize it to 20<br\/>int x = 10, y = 20;<br\/><\/pre><p>Rather than placing a semi-colon at the end of each declaration, we separate the variable declarations using a comma. We only need to use a semi-colon at the very end of the line.<\/p><p>Now that you've seen some examples of declaring a variable, let's manipulate variable values.<\/p><\/div><br \/><a class=\"dest\" id=\"variables-4\"><\/a><div class=\"accent\"> <!-- Variable Manipulation --><h1>Variable Manipulation<\/h1><p>As long as we know the name of the variable, we can typically read or write to it. For example, we can declare an integer for tracking the high score of a game. Once it's declared, we can manipulate its data:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Declare an integer named highScore. Value is 0.<br\/>int highScore;<br\/><br\/>\/\/ Set highScore to the value of 10<br\/>highScore = 10;<br\/><br\/>\/\/ Set highScore to the value of itself plus 10. Value should be 20.<br\/>highScore = highScore + 10;<br\/><\/pre><p>The above code shows a variable declaration and then changes the value of the variable twice. When changing the value of a variable, we do not need to state its type again and doing so would cause an error. Also note that the last line of code set the value of the <em>highScore<\/em> variable to itself plus another value. <\/p><p>We can also declare and set variables based on other variables: <\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">int x = 3;<br\/>int y = 2;<br\/><br\/>int result = x + y;<br\/><\/pre><p>The above code shows the declaration and setting of three separate variables. The first two (x and y) store values in integer form. The third (z) is the result of adding x and y together.<\/p><\/div><a class=\"dest\" id=\"variables-41\"><\/a><div class=\"accent\"> <!-- C# Types --><h1>Code Re-factoring<\/h1><p>Code refactoring is similar to factoring in math where we take an expression and reduce it to its simplest form. For an example, imagine we were using some code to calculate the result of the mathematical expression 4<sup>3<\/sup>.<\/p>Consider the following:<pre class=\"wp-code-highlight prettyprint linenums:1\">int base1 = 4;<br\/>int base2 = 4;<br\/>int base3 = 4;<br\/>int result = base1 * base2 * base3;<br\/><\/pre>This code will execute perfectly and will calculate an accurate result of 64. Now, let's pretend we want to change the base number from a 4 to a 7. To do this, we would need to change three instances of the number \"4\":<pre class=\"wp-code-highlight prettyprint linenums:1\">int base1 = 4;<br\/>int base2 = 4;<br\/>int base3 = 4;<br\/><\/pre><p>Is this the most efficient way of changing the code?<\/p><p>Well, we wouldn't be asking the question if the answer was “yes”, so let us explain a better way. Since the values of the variables are all the same, in this case a 7, let's switch from using three variables to only one. <\/p>Now the code looks like this:<pre class=\"wp-code-highlight prettyprint linenums:1\">int baseNum = 4;<br\/>int result = baseNum * baseNum * baseNum;<br\/><\/pre><p>You've done the work of four lines of code in only two. This is better programming because it increases code reuse, which in turn, can reduce the likelihood of typos since the code is more concise (less code, less opportunity for errors). Programmers are always looking for opportunities to refactor code.<\/p><p>In the refactored code above, we used the variable named “baseNum” multiple times (in this case, three times). Reuse of a variable is a very common practice and it's not unusual for a variable to be set at the start of a program, never changed again, and it's value used to calculate hundreds, thousands, or even millions of results. Programmers call a variable that is never intended to change a constant.<\/p><\/div><a class=\"dest\" id=\"variables-5\"><\/a><div class=\"accent\"> <!-- C# Types --><h1>C# Built-In Types<\/h1><p>C# shares many built-in types with other C-based languages, such as C and C++. Built-In types are provided as a standard part of the programming language.<\/p><p>In this topic we will cover the most common built-in types. As we mentioned earlier, types define the rules for how our computer, and more specifically our compiler, enforces rules about the use of data. And while errors sound like a negative concept, it's much better to catch an error while you are building the software than it is after the software has already shipped. Many error messages generated from a type give us a good hint about a problem we didn't want to occur. An ounce of prevention is worth a pound of cure, which is exactly what types help provide.<\/p><h2>int<\/h2><p>The keyword <em>int<\/em> is short for \"integer\" and is used to store whole numbers. All types will have some limits to how you can use them. For example, ints must be between -2,147,483,648 and 2,147,483,647. A few examples where an int would be an appropriate type include tracking game score, player lives, ammo count, and remaining time in a game.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Declare and increase the game score<br\/>int gameScore = 0;<br\/><br\/>int negativeNumber = -78;<br\/><br\/>\/\/ Add to the gameScore<br\/>gameScore = gameScore + 100;<br\/><\/pre><br \/><h2>float<\/h2><p>The keyword <em>float<\/em> is used to store floating-point values. A floating point number has a dot in it, such as 4.567. When specifying a value for a float we need to add a \"f\" after the number.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Store the value of 0.5 in a float named 'y'<br\/>float y = 0.5f;<br\/><br\/>float negativeNumber = -10000.5f;<br\/><br\/><\/pre><br \/><h2>string<\/h2><p>The keyword <em>string<\/em> is used to store to store multiple characters (e.g. letters). When assigning characters to a string in C#, we must use double quotation marks (\"\").<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">string myString = \"Hello\";<br\/><br\/>string myOtherString = \"World\";<br\/><\/pre><br \/><p>We can also combine multiple strings together using the plus operator (+), which is known as concatenation:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">string firstString = \"Hello\";<br\/>string secondString = \"World\";<br\/><br\/>\/\/ Concatenating firstString and secondString. Result will be \"HelloWorld\"<br\/>string thirdString = firstString + secondString;<br\/><br\/>\/\/ Replace the value of thirdString with firstString, the string literal of a space, the secondString, and the string literal of an exclamation point<br\/>\/\/ Result will be \"Hello World!\"<br\/>thirdString = firstString + \" \" + secondString + \"!\";<br\/><\/pre><br \/>Additionally, we can convert values of a non-string type to string data:<pre class=\"wp-code-highlight prettyprint linenums:1\">int myInteger = 42;<br\/><br\/>\/\/ convertedString will contain the value \"42\"<br\/>string convertedString = myInteger.ToString();<br\/><\/pre><br \/><h2>bool<\/h2><p>The <em>bool<\/em> keyword is used to represent Boolean values. A bool can only contain one of two values; true or false. In short, a bool can be used in programming to control which blocks of code will execute.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Declare a boolean named myBoolean<br\/>bool myBoolean = true;<br\/><\/pre><br \/><p>The value of a boolean can be changed at any time. The data is very useful when programming code that can toggle on and off. A real world example would be the state of a light switch.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">bool lightIsOn = true;<br\/><\/pre><br \/><h2>uint<\/h2><p>The keyword <em>uint<\/em> is short for \"unsigned integer\" and is used to store positive, whole numbers. Unsigned shorts have a range of 0 to 4,294,967,295. If we know we want data to always remain positive and increase in size up to a large value, a uint is a better choice than int. For example, a variable tracking the number of player lives should never be less than zero:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Store the value of 50 in an unsigned integer named 'ammo'<br\/>uint ammo = 50U;<br\/><br\/>\/\/ Change ammo's value to the result of its own value - 100. This will result in an error, since uint cannot be less than 0<br\/>ammo = ammo - 100U;<br\/><\/pre><br \/><h2>double<\/h2><p>The keyword <em>double<\/em> is like a float but larger. I bet you are wondering why there are floats and doubles? The reason is that doubles use more computer resources as a trade off for better accuracy.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Store the value of 0.5 in a double named 'x'<br\/>double x = 0.5;<br\/><\/pre><br \/><h2>Types & Negative Values<\/h2><p>When a type can have negative values, it is referred to as <strong>signed<\/strong>. If it can only contain positive values, it is <strong>unsigned<\/strong>.:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Signed int can be negative<br\/>int mySignedInt = -5;<br\/><br\/>\/\/ Unsigned cannot be negative. This code will cause a compile error.<br\/>uint myUnsignedInt = -10;<br\/><\/pre><br \/><h2>Suffixes - A Syntax Gotcha<\/h2><p>Be aware that sometimes you will need to use a suffix to help the compiler know what type you are trying to assign to a variable. Floats are the most common case where a suffix is required:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Create a double with a value of 0.5<br\/>double myDouble = 0.5;<br\/><br\/>\/\/ Create a decimal with a value of 0.5<br\/>decimal myDecimal = 0.5m;<br\/><br\/>\/\/ Create a float with a value of 0.5<br\/>float myFloat = 0.5f;<br\/><br\/>\/\/ The compiler thinks a double is trying to store in a float, which is a type error.<br\/>float otherFloat = 0.5;<br\/><\/pre><\/div><a class=\"dest\" id=\"variables-6\"><\/a><div class=\"accent\"> <!-- Type Casting --><h1>Type Casting<\/h1><p>Sometimes we need to convert a value from one type to another. For example, you may want to display the integer number \"2\" to display how many player lives remain. In that case, we would need to convert the \"2\" to a string. This is known as type casting. Each programming language has its own rules and features for type casting. In C#, type casting is either implicit or explicit. Let's take a look at an explicit cast.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Explicity type cast of a float to an integer.<br\/>float myFloat = 3.4f;<br\/>int myInt = (int)myFloat;\/\/myInt will truncate (i.e. remove values after the decimal point) to a value of 3;<br\/><\/pre><p>We wrap the type, in this case int, with parenthesis and place it to the left of the expression we want to cast.<\/p><p>let's look at an example of an implicit cast:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Store the maximum value of an int<br\/>int maxInt = 2147483647;<br\/><br\/>\/\/ Store the value of maxInt in a long, which is a larger version of an int<br\/>long myLong = maxInt;<br\/><\/pre><p>Notice how we don't need to include the type and parenthesis as we did in the previous example. The implicit cast occurred automatically since casting from an int to a long had no adverse effect, such as reducing the number's fidelity.<\/p><p>Let's look at another example of an explicit cast. A common example is converting between integer values and floating point values.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Store the floating point value of 3.4 in myFloat<br\/>float myFloat = 3.4f;<br\/><br\/>\/\/ Explicitly convert myFloat to the integer myInt. The value of myInt will be 3<br\/>int myInt = (int)myFloat;<br\/><\/pre><p>In the above code example, the syntax for explicit conversion required (int) before the assignment (=). Some fidelity is lost in this example since the numbers after the floating-point will be removed, or truncated by the cast.<\/p><p>Entire operations can be cast, if desired:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Take the integral sum of 3 + 4 + 5 + 6 (18) and store it in myFloat, resulting in 18.0f<br\/>float myFloat = (float)(3 + 4 + 5 + 6);<br\/><\/pre><p>Because of implicit casting, some seemingly different types can work together. An example is storing numeric values in a string. This can be done automatically using the plus symbol. This is useful for situations like printing a game's score to the screen with additional text:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Set an integer for high score to 100<br\/>int highScore = 100;<br\/><br\/>\/\/ Create a string to draw on screen that says \"High Score\" and concatenate the actual score<br\/>string highScoreText = \"High Score: \" + highScore;<br\/><\/pre><p>In the above code, we do not have to use any explicit casting. <em>highScoreText<\/em> will automatically convert the numeric value of the high score to a string.<\/p><\/div><!--page:~~variables-reference-text~~-->","title":"Reference Material"},{"bIsChecked":true,"exercise":".\/exercise\/variables.zip","instructions":"<h1>Goal<\/h1><p>In this exercise, we will declare and use strings, ints, floats, and boolean variables. Follow the steps below to get a very basic game scene rendering.<\/p><br \/><img class=\"aligncenter size-full wp-image-701\" src=\".\/images\/variables_exercise.png\" alt=\"variables_exercise\" width=\"800\" height=\"450\" \/><p style=\"text-align: center;\">The final scene should look similar to the one in this image.<\/p><br \/><h1>Steps<\/h1><ol>    <li>Background Image - Use a string variable to create a new background.<\/li>        <ol>            <li>First, let's see what the Exercise looks like without modification. Run the Exercise by clicking the Start button or pressing F5. The background is blue and the white text \"Total Bubbles:\" is in the top left corner.<\/li>            <li>Next, open the <em>variables.cs<\/em> source file and scroll down to <em>Focus Area 1<\/em>. Declare a new string variable named <code>_backgroundTexture<\/code> and give it an initial value of \"Graphics\\\\AsteroidBackground\". Don't forget these parts of a variable declaration:\u0009\u0009\u0009<ul>\u0009\u0009\u0009<li>Type<\/li>\u0009\u0009\u0009<li>Variable name<\/li>\u0009\u0009\u0009<li>Assignment operator<\/li>\u0009\u0009\u0009<li>Value<\/li>\u0009\u0009\u0009<li>Semicolon<\/li>\u0009\u0009\u0009<\/ul>\u0009\u0009\u0009<\/li>\u0009\u0009\u0009<li>Build your code (Reminder: Build is under the build menu option). If you did this step correctly, the final line of text in the Visual Studio output window of should include the text: \u0009\u0009\u0009<pre class=\"wp-code-highlight prettyprint linenums:1\">========== Build: 1 succeeded, 0 failed, 0 up-to-date, 0 skipped ==========<\/pre>\u0009\u0009\u0009If the output window doesn't end with this text, you likely made a mistake. Look at the code, try again, and select \"Build\". Did it work? Repeat as necessary.\u0009\u0009\u0009<\/li>\u0009\u0009<\/ol>\u0009<li>Great. Now that the variable is storing the string value of \"Graphics\\\\AsteroidBackground\", let's use the variable.<\/li>\u0009\u0009<ol>            <li>Scroll down to <em>Focus Area 2<\/em> and find this line of code:            <pre class=\"wp-code-highlight prettyprint linenums:1\">CreateBackground();<\/pre><\/li>            <li>We designed the code CreateBackground for you and it's ready to use your variable. To use your variable, write the variable name inside the parenthesis.<\/li>            <li>Run the Exercise by clicking the Start button or pressing F5. Instead of a solid color, we should now see a space background image.<\/li>        <\/ol>\u0009\u0009<img class=\"aligncenter size-full wp-image-701\" src=\".\/images\/Variables-Exercise-Spacebackground.png\"><\/img>    <li>Spawning Ships - Use an integer variable to set the number of ships the game should create.<\/li>        <ol>            <li>Scroll back up to <em>Focus Area 1<\/em>.<\/li>            <li>Declare a new integer variable named <code>_shipCount<\/code> and set its initial value to 10.<\/li>            <li>Scroll down to <em>Focus Area 2<\/em> and locate this line of code:            <pre class=\"wp-code-highlight prettyprint linenums:1\">CreateShips();<\/pre><\/li>            <li>We designed the code CreateShips and it's waiting for your variable. Type the name of the integer variable we just declared inside of the parenthesis.<\/li>            <li>Run the Exercise by clicking the Start button or pressing F5. We should see several spaceships flying across the screen. What do you think would happen if you set the value to 5? If you try, don't forget to set it back to 10.<\/li>        <\/ol>    <li>Changing Backgrounds - Let's try creating a different background. <\/li>        <ol>            <li>Scroll back up to <em>Focus Area 1<\/em>.<\/li>            <li>Change the value of <code>_backgroundTexture<\/code> to \"Graphics\\\\bubblePopper_BackGround\".<\/li>            <li>Run the Exercise by clicking the Start button or pressing F5. The background should be completely different. \u0009\u0009\u0009\u0009\u0009\u0009You just declared a variable, set its value, and use it. Great work.<\/li>        <\/ol>       <li>Spawning Bubbles & Update Counter - Use variables to switch the game from using ships to bubbles and then display the total bubble count.<\/li>        <ol>            <li>Scroll back up to <em>Focus Area 1<\/em>. Declare two new integers variables named <code>_bubbleCount<\/code> and <code>_totalBubbles<\/code> but don't set their initial values (we will update the variable in the next step).<\/li>            <li>Inside of <em>Focus Area 2<\/em> and on the line below the code <code>CreateBackground<\/code>, set the value of both of the new integer variables to 100. Remember, you only need the variable name, don't write the type again or it will cause an error.<\/li>            <li>Find the method <code>CreateBubbles();<\/code>. Inside of the parenthesis, type <code>_bubbleCount<\/code>.<\/li>            <li>Run the Exercise by clicking the Start button or pressing F5. Notice that we are still seeing ships and no bubbles. <\/li>            <li>Scroll back up to <em>Focus Area 1<\/em>. Declare a new boolean variable named <code>_isSpaceGame<\/code> and set its initial (i.e. initializing) value to false.<\/li>            <li>Scroll down to <em>Focus Area 2<\/em> and locate this line of code:            <code>if (true)<\/code>. Inside of the parentheses, replace <em>true<\/em> with the boolean variable we just declared.<\/li>            <li>Run the Exercise by clicking the Start button or pressing F5. We should now be seeing bubbles instead of ships, since the boolean variable is toggled to false.<\/li>        <\/ol>\u0009<li>Next, we need to update the total number of bubbles created. Scroll down to <em>Focus Area 3<\/em>.<\/li>\u0009    <ol>            <li>Set the value of <code>_totalBubbles<\/code> equal to itself plus <code>_bubbleCount<\/code> (see Variable Manipulation topic in the reference material for an example).<\/li>            <li>Scroll down to <em>Focus Area 4<\/em> and locate the counter which use this line of code:            <pre class=\"wp-code-highlight prettyprint linenums:1\">_spriteBatch.DrawString(Font, \"Total Bubbles: \", new Vector2(0.0f, 0.0f), Color.White);<\/pre><\/li>            <li>Directly after the double quotes in <code>\"Total Bubbles: \"<\/code>, type the plus symbol and the <code>_totalBubbles<\/code> variable. With this code, you are adding the integer value to the string \"Total Bubbles\".<\/li>            <li>Run the Exercise by clicking the Start button or pressing F5. The text on screen will display 100 as the total bubble count.<\/li>        <\/ol>    <li>Changing Bubbles - Change bubble size and count.<\/li>        <ol>            <li>The bubbles are currently too large and too few. Scroll back up to <em>Focus Area 1<\/em>.<\/li>            <li>Declare a new floating point variable named <code>_bubbleSize<\/code> and set its value to 2.5f.<\/li>            <li>Scroll back down to <em>Focus Area 2<\/em> and change the value of <code>_bubbleCount<\/code> to be larger, such as 200.<\/li>            <li>Locate this line of code:            <pre class=\"wp-code-highlight prettyprint linenums:1\">CreateBubbles(_bubbleCount);<\/pre><\/li>            <li>After <code>_bubbleCount<\/code>, add a comma and then <code>_bubbleSize<\/code>.<\/li>            <li>Run the Exercise by clicking the Start button or pressing F5. We should now see many smaller bubbles. Watch the total count update every time a new batch of bubbles appear. Can you figure out what line of code is making the total update with every batch.<\/li>        <\/ol><\/ol>You did it, but what exactly did you do? Let's review:<ul><li>You created string, int, bool, and float variables.<\/li><li>You changed values of variables and observed what happened on the screen.<\/li><li>You passed variables to other code.<\/li><li>You added variables together.<\/li><\/ul><h1>Rubric<\/h1><ul><li>1 point for demonstrating the changed background in step 2.c.<\/li><li>1 point for demonstrating flying ships in step 3.<\/li><li>1 point for switching background to the bubble popper in step 4.<\/li><li>1 point for spawning bubbles in step 5.<\/li><li>1 point for displaying total bubble count.<\/li><li>1 point for updating bubble size and count.<\/li><\/ul><!--page:~~variables-exercise~~-->","link":"exercise","mod":"variables","movie":null,"name":"variables","promptfile":null,"prompts":null,"reference":null,"text":null,"title":"Exercise"},{"bIsChecked":true,"exercise":".\/exercise\/physics_variables.zip","instructions":"<h1>Goal<\/h1><p>In this open ended exercise, you will demonstrate your understanding of declaring and using variables. You will modify the code to complete a mini-game of trying to knock down a target using a cannon ball.<\/p><br \/><img class=\"aligncenter size-full wp-image-701\" src=\".\/images\/variables_exercise_two.png\" alt=\"variables_exercise_two\" width=\"800\" height=\"468\" \/><p style=\"text-align: center;\">The final, working game should look similar to the one in this image.<\/p><br \/><h1>Steps<\/h1><ol>    <li>Perform a type cast on a variable.<\/li>        <ol>            <li>Run the Exercise by clicking the Start button or pressing F5. A dialog should popup notifying us there are errors. Click the dialog's <em>No<\/em> button.<\/li>            <li>Go to the <em>Error List<\/em> tab that should be at the bottom of your Visual Studio screen. If it is missing, go to the <em>View<\/em> menu and select <em>Error List<\/em>.<\/li>            <p style=\"text-align:center;\">              <img class=\"aligncenter wp-image-4558 size-full\" src=\".\/images\/variables_exercise_two_error.png\" alt=\"variables_exercise_two_error\" width=\"616\" height=\"192\" \/>              <br \/>              <strong>Figure 1<\/strong>              <em>Error List<\/em>            <\/p>            <li>The error states that there is an issues with the variable type. Double click on the error to jump to the line that has the issue, or find <em>Focus Area 1<\/em>.<\/li>            <li>Correct the error by performing a cast. In this example, you need to cast the variable <code>time.ElapsedGameTime.TotalSeconds<\/code> to a float. (Reminder: you can brush up on casts in the Reference Material or Playlist of this module.)<\/li>            <li>Run the Exercise again. It should now correctly start up showing the cannon on the left, and two moving barriers on the right. We can now finish off the rest of the game.<\/li>        <\/ol>        <li>Build the Target's variables.<\/li>        <ol>            <li>We will now add the target to the game so we have something to shoot at. Go to <em>Focus Area 2<\/em>. Declare a float variable named <em>TargetPositionX<\/em>, and assign it a value of 60.0f.<\/li>            <li>On the line below, declare a another float variable and name it <em>TargetPositionY<\/em>. Assign a value of -5.0f.<\/li>            <li>Go to <em>Focus Area 3<\/em>. Declare a float variable named <em>TargetSize<\/em>, and assign it a value of 5.0f.<\/li>            <li>Go to <em>Focus Area 4<\/em>. Enter the following code:            <pre class=\"wp-code-highlight prettyprint linenums:1\">Body physicsBody = CreateTarget(TargetPositionX, TargetPositionY, TargetSize, TargetColor);<br\/>physicsBody = Target;<\/pre>            <\/li>            <li>Run the Exercise again. There should now be a yellow target on the right. Try rotating the cannon and firing the cannon ball to see if you can hit the target. Control instructions are on the game.<\/li>        <\/ol>        <li>Adjusting the cannon ball's starting impulse force.<\/li>        <ol>            <li>After playing the game in the last step, you likely noticed that it was impossible for the cannon ball to reach the target.             It just wasn't being fired with enough force to clear the tops of the barriers. Let's adjust that.<\/li>            <li>Go to <em>Focus Area 5<\/em>. You'll see that the <em>CannonBallImpulse<\/em> variable is already being assign a value.<\/li>            <li>Increase the <em>CannonBallImpulse<\/em> variable's value and try running the Exercise again. Continue to iterate on the game by             increasing this variable's value until you feel you have enough force to reach the target. Increasing by a value of 50 each time             may help you to find the correct balance of too little vs. too much.<\/li>        <\/ol>        <li>Other things to try.<\/li>        <ol>            <li>Now that you can hit the target, try changing the target's size by modifying the <em>TargetSize<\/em> variable. Have you made             the game harder or easier?<\/li>            <li>Try changing both the cannon ball's impulse, and the target's size. How does this change the feel of the game?<\/li>            <li>Can you get your timing right to put the cannon ball between the moving barriers and hit the target?<\/li>        <\/ol>    <\/ol><h1>Rubric<\/h1><ul><li>2 points for fixing the cast error in step 1.<\/li><li>2 points for being able to launch a cannon ball in step 2.<\/li><li>2 points for being able to hit the target.<\/li><\/ul><br\/><h1>Optional Challenges<\/h1><ol><li>Change the target's color by modifying the values of the <em>TargetColor<\/em> variable.<\/li><li>Change how quickly the cannon is ready after firing a cannon ball. This variable is found under the <em>Cannon<\/em> region.<\/li><li>Change the speed and maximum distance of the barriers. These variables are found under the <em>Barriers<\/em> region.<\/li><li>Add more targets to knock down.<\/li><li>Add a counter on screen to track the number of cannon balls fired. Use this to see who can use the least number of balls to knock down the target.<\/li><\/ol><!--page:~~variables-project~~-->","link":"exercise","mod":"variables","movie":null,"name":"physics_variables","promptfile":null,"prompts":null,"reference":null,"text":null,"title":"Project: Trick Shot"}]},{"bIsChecked":true,"name":"usingobjects","title":"Using Objects","topics":[{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":null,"movie":".\/video\/using_objects_overview.mp4","name":"Object Basics","promptfile":null,"prompts":null,"reference":"usingobjects-1","text":null,"title":"Using Objects"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":null,"movie":".\/video\/using_objects_instances.mp4","name":"Creating an Instance","promptfile":null,"prompts":null,"reference":"usingobjects-2","text":null,"title":"Creating an Instance"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":null,"movie":".\/video\/using_objects_properties.mp4","name":"Object Properties","promptfile":null,"prompts":null,"reference":"usingobjects-3","text":null,"title":"Object Properties"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":null,"movie":".\/video\/using_objects_methods.mp4","name":"Object Methods","promptfile":null,"prompts":null,"reference":"usingobjects-4","text":null,"title":"Object Methods"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":null,"mod":null,"movie":null,"name":"Reference","promptfile":null,"prompts":null,"reference":null,"text":"<a class=\"dest\" id=\"usingobjects-1\"><\/a><div class=\"accent\"><h1>Object Basics<\/h1><p>In the last module, we learned how to create and use variables to store ints, floats, and bools. In this module, we will learn how to use basic objects.<\/p><p>Programmers combine built in types such as bools and ints to create containers of features called objects. Objects are one way we build complex things by breaking them down into simpler, reusable parts. For an example of how objects can makes something complex simpler, let us consider a microwave.<\/p><p>Microwaves have hundreds to thousands of parts, but when we warm up a hot dog, we do not need to know how all of those parts work. We hit a few buttons and everything inside of the microwave works for us. Microwave manufactures take thousands of parts and create an interface with a few, relatively easy to use buttons.<\/p><p>That is similar to how objects simplify code. They hide or abstract tens, or hundreds, or even thousands of lines of code in order to make a set of features easier to use. The idea of putting complex functionality inside of an easier to use container is what we call encapsulation.<\/p><div style=\"text-align: center;\">    <ul class=\"anchorGroup\" style=\"text-align: left; display: inline-block;\">        <li><a class=\"ankor\" href=\"#usingobjects-1\">Object Basics<\/a><\/li>        <li><a class=\"ankor\" href=\"#usingobjects-2\">Creating an Instance<\/a><\/li>\u0009\u0009<li><a class=\"ankor\" href=\"#usingobjects-3\">Object Properties<\/a><\/li>        <li><a class=\"ankor\" href=\"#usingobjects-4\">Object Methods<\/a><\/li>        <li><a class=\"ankor\" href=\"#usingobjects-5\">Properties & Methods Together<\/a><\/li>    <\/ul><\/div><\/div><a class=\"dest\" id=\"usingobjects-2\"><\/a><div class=\"accent\"> <!-- Declaration --><h1>Creating an Instance<\/h1><p>We will learn how to make our own customized objects later in this course; for now, we will learn a bit about using objects already created by other developers. Let's look at some code.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">Microwave myMicrowave = new Microwave();<\/pre><p>In looking at the code above for a virtual Microwave, we see some similarities to built-in type variables.<\/p> <p>The first text Microwave, is the object type. The second text, myMicrowave, is a variable name. On the other side of the assignment operator (the equals sign) is the keyword new and the text Microwave().The new operator tells the underlying software and hardware to allocate resources such as computer memory.<\/p><p>Microwave(), is a constructor. Together with the “new” operator, the constructor gives life to a new instance of the object. The assignment operator assigns that new Microwave instance to the variable myMicrowave so that we can use it. This new microwave is what we call an instance.<\/p><p>The microwave object stored in the variable will last as long as your program is running or until it is disposed of. Deleting an instance is something that we will not cover until after you practice creating and using objects.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">Microwave myMicrowave = new Microwave ();<br\/>Microwave myMicrowave2 = new Microwave ();<br\/><\/pre><p>In the code above, we created two instances of the type Microwave and assigned those instances to two different variables.<\/p><p>Once you have an object, you can use it to configure properties or make the object perform actions.<\/p><\/div><br \/><a class=\"dest\" id=\"usingobjects-3\"><\/a><div class=\"accent\"> <!-- Variable Manipulation --><h1>Object Properties<\/h1><p>It's very common for us to be able to configure a particular object instance. For example, let's say that the developer of the object Microwave wanted to give us the ability to configure the Microwave's power setting. Using the instance of our object above, it may look something like this:<pre class=\"wp-code-highlight prettyprint linenums:1\">myMicrowave.power = 10;<\/pre><\/p><p>The “power” property is an integer variable and we've assigned it a value of 10. The period between the variable and the property doesn't act like a period in a sentence, rather, it's used to notify the complier of an upcoming object subpart such as a property.<\/p><p>We could also use a property to assign the value of another variable.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">int power = myMicrowave.power;<\/pre><p>Properties can be any built in type or even another object. Let's take a look at setting a string property of our Microwave object.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">myMicrowave.name = “Heat Wave Dave”;<\/pre><p>The code above assigns the value of “Fred” to the string variable name. The subparts of an object can be many different types including other objects and Methods, which is the next topic.<\/p><\/div><a class=\"dest\" id=\"usingobjects-4\"><\/a><div class=\"accent\"> <!-- C# Types --><h1>Object Methods<\/h1><p>Setting properties is how we configure values of an object. Objects can also perform actions using a concept called a method. You will learn advanced features of methods later, but for now, let's look at a simple method we used by writing the text Start().<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">myMicrowave.Start();<\/pre><p>Take a look at the code above. Again, we see the period, but in this case, we didn't follow the period with a property. Instead, we called Start() which starts our virtual microwave.<\/p><\/div><a class=\"dest\" id=\"usingobjects-5\"><\/a><div class=\"accent\"> <!-- C# Types --><h1>Properties & Methods Together<\/h1><p>Objects and methods often work in harmony together. Consider the following code snippit.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>myMicrowave.Power = 1;<br\/>myMicrowave.timeSeconds = 30;<br\/>myMicrowave.Start();<br\/>myMicrowave.Power = 10;<br\/>myMicrowave.timeSeconds = 30;<br\/>myMicrowave.Start();<br\/><\/pre><p>In this example, read over the code in order from top to bottom. What is the story behind this code? Can you explain to another person what this code is doing and how it relates to real life?<\/p><\/div><!--page:~~usingobjects-reference-text~~-->","title":"Reference Material"},{"bIsChecked":true,"exercise":".\/exercise\/using-objects.zip","instructions":"<h1>Goal<\/h1><p>In this exercise, our goal is to add a horse to this simple platformer level. By meeting this goal, we will practice creating instances of an object and we will use objects to jump and move a character on the screen.<\/p><br \/><img class=\"aligncenter size-full wp-image-701\" src=\".\/images\/exercise_usingobjects_1.png\" alt=\"variables_exercise\"  \/><p style=\"text-align: center;\">The final scene should look similar to the one in this image. Art is a modified replication of lancelot_gao's <a href=\"https:\/\/creativecommons.org\/licenses\/by\/3.0\/\">creative commons<\/a> work.<\/p><br \/><h1>Steps<\/h1><ol>    <li>Create an Instance of a Horse<\/li>        <ol>            <li>First, let us see what the Exercise looks like without modification. Run the Exercise by clicking the Start button or pressing F5. You should see the scene, but no horse.\u0009\u0009\u0009<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<li>In the last module, we learned about built-in types such as int, float, and bool. In addition to these types, C# lets you create your own custom types. The developers of this exercise have created a custom type named Horse.<br\/><br\/>The next step will help you create an object instance of type Horse.\u0009\u0009\u0009<br\/><br\/>\u0009\u0009\u0009First, locate the file named “using-objects.cs”.  Next, locate Focus Area 1.\u0009\u0009   <\/li>\u0009\u0009\u0009<li>We have already written the type name <code>Horse<\/code> and the variable named <code>MyHorse<\/code> and assigned it the value of NULL. Replace the NULL assignment by creating and assigning an instance of the horse object using the keyword new and the object's constructor. Ignore <code>MyHorse2<\/code> for now.<br\/><br\/>Hint: The constructor looks like this: <code>Horse()<\/code>. Also, don't forget your semi-colon. As an example, imagine if we provided you with a Sheep object. The code would look like this: <pre class=\"wp-code-highlight prettyprint linenums:1\">Sheep mySheep = new Sheep();<\/pre><\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Compile and run your application. You should see a horse on the screen.<br\/><br\/> There were many additional steps required to render the horse to the screen but the developers of this exercise wrote the code for you inside of the object. Putting functionality inside an object is what we call encapsulation.<br\/><br\/>Next, let's add some movement based on keyboard inputs.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<\/ol>\u0009<li>Add Movement To The Horse<\/li>\u0009\u0009\u0009<ol>\u0009\u0009\u0009<li>Next, move down in the same file to Focus Area 2.  Take notice of the code just above the focus area. The code <code>keyboardState.IsKeyDown(Keys.Space)<\/code> determines if the Keyboard key is pressed (note: in a game, this code will run 30 to 60 times a second).<\/li>\u0009\u0009\u0009<li>Inside the focus area, type the variable name <code>MyHorse<\/code>. After the “e” in horse, type a period. You should see a small window open next to your new line of code. This box is Visual Studio's way of showing you the functionality of the <code>MyHorse<\/code> object.<img class=\"aligncenter size-full wp-image-701\" src=\".\/images\/exercise_usingobjects_2.png\" alt=\"variables_exercise\"  \/><\/li>\u0009\u0009\u0009<li>In the small scrolling window, select Jump from the list and take some time to observe other features. Jump is a feature of an object we call a method, the focus of a later module.<\/li>\u0009\u0009\u0009<li>In order to make your code compile, you will need to add open and closed parenthesis at the end of the method Jump. Use the following code example as a pattern.\u0009\u0009\u0009<br\/><br\/>\u0009\u0009\u0009<pre class=\"wp-code-highlight prettyprint linenums:1\">Object.Method();<\/pre>\u0009\u0009\u0009<\/li>\u0009\u0009\u0009<li>Next, do the same for focus area 3 and 4 except instead of jumping, call the method <code>MoveLeft<\/code> (in focus area 3) and <code>MoveRight<\/code> (focus area 4).<\/li>\u0009\u0009\u0009<li>Compile and run your game. Your horse should now move left and right with the arrows and jump with the spacebar.\u0009\u0009\u0009<\/li>\u0009\u0009<\/ol>\u0009<li>Configure Horse Jumping<\/li>        <ol>\u0009\u0009\u0009<li>In Focus Area 5, write MyHorse and the period in order to bring up the dialog box. This time, search for JumpSpeed. JumpSpeed is a property, and we can set its value. Assign the value of 6.5f to <code>JumpSpeed.<\/code> Compile and run the game. Your horse can now make it to the platform.<\/li>\u0009\u0009<\/ol>\u0009    <li>Add Another Horse<\/li>\u0009    <ol>\u0009\u0009<li>Add another horse to your scene named using the <code>MyHorse2<\/code> variable in step 1.c above. Follow steps above again but in step 2.e, make MyHorse2 move right and in Focus Area 4 make MyHorse2 move left. Run the game. You should see two horses that behave opposite in terms of left and right movements.<\/li>\u0009\u0009<\/ol><\/ol><hr\/><div ><h1>Rubric<\/h1><ul><li>1 point for adding an instance of the horse object in step 1.<\/li><li>2 points for making the horse jump and move in step 2.<\/li><li>1 point for making the horse jump high enough to reach the platform in step 3.<\/li><li>2 points for creating two horses as described in step 4.<\/li><\/ul><\/div><!--page:~~usingobjects-exercise~~-->","link":"exercise","mod":"usingobjects","movie":null,"name":"using-objects","promptfile":null,"prompts":null,"reference":null,"text":null,"title":"Exercise"},{"bIsChecked":true,"exercise":".\/exercise\/physics_objects.zip","instructions":"<h1>Goal<\/h1><p>In this exercise, you will build a simple physics game by using objects, setting values for properties, and calling methods. In this game, players will catch boxes and stack them until they achieve a winning number of stable boxes. You will be able to control many different properties including the speed of the platform, rate of box dropping, the spread of objects falling, and other properties.<\/p><p>To build this game, we will need to create two objects. One object is the platform used to catch the boxes; the other is the shape dropper which controls how new blocks drop into the scene.<\/p><br \/><img class=\"aligncenter size-full wp-image-701\" src=\".\/images\/usingobjects_project_one.png\" alt=\"usingobjects_project_one\"  \/><p style=\"text-align: center;\">The image above shows two different examples with small changes resulting in different game challenges.<\/p><br \/><div><p>It's common for programmers to build code that other programmers can use to interact with an application. When programmers do this, we call it an API (application programming interface). The documentation below is similar to professional API documentation and it will help you build your game.<\/p><h3>Objects<\/h3>\u0009<table border=1 class=\"api\">\u0009<tr><th>Name<\/th><th>Description<\/th><\/tr>\u0009<tr><td>Platform<\/td><td>The object on the bottom that players use to catch boxes.<\/td><\/tr>\u0009<tr><td>ShapeDropper<\/td><td>Drops boxes as determined by property settings.<\/td><\/tr>\u0009<\/table>\u0009<h3>Platform Properties<\/h3><table border=1 class=\"api\"><tr><th>Type<\/th><th>Name<\/th><th>Description<\/th><\/tr><tr><td>Float<\/td><td>Acceleration<\/td><td>Sets the speed of left and right movement of the platform. 0.5 is fairly slow and 3.0 is quite fast.<\/td><\/tr><\/table><h3>Shape Dropper Properties<\/h3><table border=1 class=\"api\"><tr><th>Type<\/th><th>Name<\/th><th>Description<\/th><\/tr><tr><td>Float<\/td><td>DropRate<\/td><td>Sets the rate in which blocks are dropped from the sky. 1.0 = 1 box per second.<\/td><\/tr><tr><td>Int<\/td><td>Variance<\/td><td>Defines how spread out the shapes drop. A value of 1 means the boxes will drop directly from center every drop. A value of 100 will almost spread across the entire screen.<\/td><\/tr><tr><td>Float<\/td><td>BoxSize<\/td><td>Description: Defines the size of a box. 1.0 makes tiny boxes and 10.0 makes giant boxes.<\/td><\/tr><tr><td>Int<\/td><td>NumStillBoxes<\/td><td>Defines how many boxes need to be still for 1.5 seconds in order to win the game.<\/td><\/tr><tr><td>Float<\/td><td>Gravity<\/td><td>Defines the gravity of the video game world. -32.2 is the acceleration of an earth like gravity (in feet). Moon gravity is -5.3.<\/td><\/tr><tr><td>Float<\/td><td>Bouncyness<\/td><td>Defines how much the boxes bounce off the paddle. A value of 0 will not bounce when it hits the paddle. The upper limit of how bouncy a box is depends on the box size. When using a value of 1.0 for Bouncyness, a box whose size is 1.0 will bounce very high while a box of size 10 will not.<\/td><\/tr><\/table><h3>Platform Methods<\/h3><table  border=1 class=\"api\"><tr><th>Name<\/th><th>Description<\/th><\/tr><tr><td>Platform()<\/td><td>The constructor for the Platform object.<\/td><\/tr><tr><td>CreatePlatform()<\/td><td>Creates a platform and makes it ready to be played in the games.<\/td><\/tr><\/table><h3>Shape Dropper Methods<\/h3><table  border=1 class=\"api\"><tr><th>Name<\/th><th>Description<\/th><\/tr><tr><td>Platform()<\/td><td>Description: The constructor for the ShapeDropper object.<\/td><\/tr><tr><td>StartDropper()<\/td><td> Tells the shape dropper to begin dropping boxes.<\/td><\/tr><\/table><\/div>\u0009<h1>Steps<\/h1><ol>    <li>Create Instances of the Platform & Shapedropper.<\/li>        <ol>            <li>Run the Project by clicking the Start button or pressing F5. The game should be a blank white canvas.<\/li>            <li>In focus area 1 in physics_object.cs, we have created two variables of Platform and ShapeDropper type. We have set them to a value of null which means we have not created an instance (null means nothing or empty). Create instances of these two objects by replacing null with the new keyword and the constructor for Platform and ShapeDropper respectively. Don't change the names of the variables because some other code relies on the name being the same as we provided for you.<\/li>            <li>Run the Exercise again. You should now see some text on the screen, but there are still no boxes or platform.<\/li>        <\/ol>        <li>Start the Platform & Boxes.<\/li>        <ol>            <li>In focus area 2, call the CreatePlatform and StartDropper methods for their respective variables you assigned in step 1.b above.<\/li>            <li>Run the game. The game will now run based on property values set when the constructor ran in the step above (i.e. We gave the properties a default value).<\/li>            <li>Still in focus area 2, change values of each property for both the platform and the Shapedropper (i.e assign the values) to modify this game. The properties you can change are listed in the documentation above.<\/li>\u0009\u0009\u0009<p>Hint: if you wanted to change gravity, you could write code such as this: _shapeDropper.Gravity = -20.0f;<\/p>        <\/ol>        <li>Test Your Game With Classmates<\/li>        <ol>            <li>Once you have designed a game you think is fun, let your classmates try it. Do they think it's fun? Make a guess of how many seconds you think it will take your classmates to finish the game. Test your guess to see if the game is easier or harder than you thought.<\/li>        <\/ol> <\/ol>   <h1>Rubric<\/h1><ul><li>1 point for creating an instance of the platform and shapedropper.<\/li><li>1 point for every two properties used.<\/li><li>1 point for modifying all properties.<\/li><li>3 points for testing the game with other students and giving a vocal report to the class on the results.<\/li><\/ul><!--page:~~usingobjects-project~~-->","link":"project","mod":"usingobjects","movie":null,"name":"physics_objects","promptfile":null,"prompts":null,"reference":null,"text":null,"title":"Project: Balancing Act"}]},{"bIsChecked":true,"name":"arrays","title":"Arrays","topics":[{"bIsChecked":true,"exercise":null,"instructions":null,"link":null,"mod":null,"movie":".\/video\/Course2-csharp-primer-arc-arrays-overview.mp4","name":"Overview","promptfile":null,"prompts":null,"reference":"arrays-1","text":null,"title":"Overview"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":null,"mod":null,"movie":".\/video\/Course2-csharp-primer-arc-arrays-basicSyntax.mp4","name":"Basic Syntax","promptfile":null,"prompts":null,"reference":"arrays-2","text":null,"title":"Basic Syntax"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":null,"mod":null,"movie":".\/video\/Course2-csharp-primer-arc-arrays-buildingAnArray.mp4","name":"Building Arrays","promptfile":null,"prompts":null,"reference":"arrays-3","text":null,"title":"Building Arrays"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":null,"mod":null,"movie":".\/video\/Course2-csharp-primer-arc-arrays-iterating.mp4","name":"Iterating","promptfile":null,"prompts":null,"reference":"arrays-4","text":null,"title":"Iterating"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":null,"mod":null,"movie":".\/video\/Course2-csharp-primer-arc-arrays-multiDimensional.mp4","name":"Array Variants","promptfile":null,"prompts":null,"reference":"arrays-5","text":null,"title":"Array Variants"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":null,"mod":null,"movie":null,"name":"Reference","promptfile":null,"prompts":null,"reference":"","text":"<a class=\"dest\" id=\"arrays-1\"><\/a><div class=\"accent\"><h1>Overview<\/h1><p>In the Variables Module, we learned how to declare variables by specifying a type and variable name. Imagine a scenario where we need to store 100 high-scores for a game. If we were to define 100 variables, that would be a lot of writing:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">int highScore1;<br\/>int highScore2;<br\/>int highScore3;<br\/>int highScore4;<br\/>...\/\/ insert variables 5 through 99<br\/>int highScore100;<br\/><\/pre><p>The above approach is inefficient, time consuming, and makes code difficult to read. Arrays solve this problem by providing the utility of a list of variables. Rather than declare 100 separate variables, we can use a single array object for storing data:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">int[] highScores = new int[100];<\/pre><p>Arrays can be used to store multiple variables of the same type in a single object.<\/p><div style=\"text-align: center;\"><ul class=\"anchorGroup\" style=\"text-align: left; display: inline-block;\"><li><a class=\"ankor\" href=\"#arrays-1\">Basic C# Syntax<\/a><\/li><li><a class=\"ankor\" href=\"#arrays-2\">Building Arrays<\/a><\/li><li><a class=\"ankor\" href=\"#arrays-3\">Iterating<\/a><\/li><li><a class=\"ankor\" href=\"#arrays-4\">Array Variants<\/a><\/li><\/ul><\/div><\/div><a class=\"dest\" id=\"arrays-1\"><\/a>&nbsp;<div class=\"accent\"><h1>Basic C# Syntax<\/h1><p>Arrays can be declared and initialized in a variety of ways, depending on several factors. What follows is a basic guide to array syntax:<\/p>Declaration should start with the type, followed by a left and right bracket.:<pre class=\"wp-code-highlight prettyprint linenums:1\">int[]<\/pre>After the type, we provide an array name:<pre class=\"wp-code-highlight prettyprint linenums:1\">int[] array;<\/pre>This tells our compiler that we want an array, but in order to actually allocate the memory needed for an array, we must ask for that resource. We do that with something called the \"new\" operator followed by the type and array size.<pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Instantiate using the \"new\" keyword.<br\/>int[] array = new int[3];<br\/><\/pre>The code above creates an array that holds three integer values. The size can be fixed as it is in this example or we could use a variable instead.<pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Array size is 3<br\/>\/\/ Array size is based on a variable<br\/>int arraySize = 5;<br\/>int[] anotherArray = new int[arraySize];<br\/><\/pre><p>After we create the array, we can fill it with values. But here in-lies a common trouble spot for beginners.<\/p>When we count to ten, we typically start at 1 and end at 10. When we count to ten for an array, we start at 0 and end at 9. In both cases, there are still 10 items. We can use any position within the array as a variable by using square brackets (\"[]\"). By using this operator, we can both set and get values.<pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>myIntegerArray[6] = 10;\/\/ Set the 7th item to a value of 1.<br\/><br\/>int seventhItem = myIntegerArray[6];\/\/ Get the value of the 7th item and assign it to the variable named seventhItem.<br\/><\/pre>Array access always starts at index 0 and cannot be larger than its boundaries:<pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Boundaries are 0 - 2<br\/>int[] array = new int[3];<br\/><br\/>\/\/ First index<br\/>int value = array[0];<br\/><br\/>\/\/ Second index<br\/>value = array[1];<br\/><br\/>\/\/ Out of bound access, CRASH!<br\/>value = array[-1];<br\/><br\/>\/\/ Out of bounds access, CRASH!<br\/>value = array[3];<br\/><\/pre>If you want to know how many items are in an array, you can type \".Length\" after the array name.:<pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>int length = intArray.Length;\/\/ Grab the array length and store it in a variable named length.\u0009<br\/><\/pre>This introduces a new operator. The '.' operator ( spoken as \"the dot operator\") gives us access to a value, essentially a variable, that accompanies the array itself. You will see these more and more as you begin to work with more sophisticated code examples.<\/div><a class=\"dest\" id=\"arrays-2\"><\/a><h1>Building Arrays<\/h1>Now that we have learned how instantiate an array, let's fill them with some data. The first option is to set the values directly using the square brackets. The square brackets use an integer variable we call an index. The index can be a number you type directly or an integer variable.<pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>int[] array = new int[4];<br\/>array[0] = 100;<br\/>array[1] = 243;<br\/>array[2] = 3234;<br\/>array[3] = -156;<br\/><br\/>int four = 4;<br\/>array[four] = 786;<br\/><\/pre>Alternatively, we can fill the values when we initialize the array using an initializer list. When we build an array this way, we don't need to define the array size since the initializer list implies a size.<pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>int[] array = new int[] { 7, 9, 5 };<br\/><\/pre><a class=\"dest\" id=\"arrays-3\"><\/a><div class=\"accent\"><h1>Iterating<\/h1><p>When learning arrays, it's hard to understand them without understanding loops. When learning loops, it's hard to understand them without learning arrays. You will learn loops in detail later, but for now, take a quick look.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">float[] myArray = new float[3] {1.5f, 5.4f, 2.3f};<br\/>for(int i = 0; i &lt; 3; i++)<br\/>{<br\/>myArray[i] = 7.0f;<br\/>}<br\/><\/pre><p>The code above will access item 0 through 2 and set the value of every array item to 7. This loop will run three times and set index 0,1, and 2 with a value of 7.0.<\/p><\/div><a class=\"dest\" id=\"arrays-4\"><\/a><a class=\"dest\" id=\"arrays-5\"><\/a><br \/><div class=\"accent\"><h1>Array Variants<\/h1><p>The most basic of arrays is a single-dimensional array, which we can visualize as a one-dimensional row of values:<\/p><img class=\"aligncenter img-responsive\" src=\".\/images\/1DArray.jpg\" alt=\"1DArray\" \/> <p style=\"text-align: center;\"><strong>Figure 1<\/strong> <em>One-Dimensional Array<\/em><\/p><br \/>We can also build a two dimensional array which is often referred to as a multi-dimensional array. We can visualize two-dimensional arrays as a grid with rows and columns.<img class=\"aligncenter img-responsive\" src=\".\/images\/2DArray.jpg\" alt=\"2DArray\" \/> <p style=\"text-align: center;\"><strong>Figure 2<\/strong> <em>Two-Dimensional Array<\/em><\/p><br \/><p>Declaring and initializing a two-dimensional array and accessing the data.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">int[,] array = new int[,] { {2,3,4}, {5,6,7} };\/\/with an initializer list<br\/>int[,] array = new int[2,3];\/\/ without an initializer list<br\/><br\/>int myValue = array[1,2];\/\/ access the 2nd row and 3rd column.<br\/><br\/>array[1,2] = 3;\/\/ set the 2nd row and 3rd column to the value of 3.<br\/><\/pre><p>Two-dimensional arrays would be a great choice to represent a checker board in a video game version of checkers. Can you think of any other real world examples wher having a grid would be helpful?<\/p><p>Lastly, the final type we will se is the Jagged Array. A multi-dimensional array has a fixed number or rows and columns. A jagged array is an array of arrays. A multi-dimensional array has a fixed number of rows and columns. A jagged array has a fixed number of arrays, but allows for a variable number of items in each array. We will guide you through the use of a jagged array in the roller coaster project.<\/p><\/div><br \/><!--page:~~arrays-reference-text~~-->","title":"Reference Material"},{"bIsChecked":true,"exercise":".\/exercise\/arrays.zip","instructions":"\u0009\u0009\u0009<h1>Goal<\/h1>\u0009\u0009\u0009<p>In this exercise, our goal is to instantiate and use arrays. We will create a single-dimensional array to determine the positions of two sprites. A two-dimensional array will be used to determine the size of the two sprites.<\/p>\u0009\u0009\u0009<h1>Steps<\/h1>\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009<li>First, let's see what the Exercise looks like without modification.<\/li>\u0009\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009\u0009<li>Run the Exercise by clicking the Start button or pressing F5. (<a href='.\/simulation\/ArraysExercise_1\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li>\u0009\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009\u0009<li>Create and use a one-dimensional array.<\/li>\u0009\u0009\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009\u0009\u0009<li>Our first task is to create a one-dimensional array of floating point values. Open \"ArraysExercise.cs\" and find <em>Focus Area 1<\/em>.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<li>Declare a float array named <code>spritePositions<\/code>. Initialize the array with the following values: 0.0f, -5.0f, 4.0f, and 9.0f. You can use an initializer list or four lines of code with square brackets and indicies.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<li>Scroll down to <em>Focus Area 2<\/em>. We can see two lines of commented out code that sets sprite positions:<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/_spriteOne.SetPosition(spritePositions[0], spritePositions[0]);<br\/>\/\/_spriteTwo.SetPosition(spritePositions[0], spritePositions[0]);<br\/><\/pre>\u0009\u0009\u0009\u0009\u0009\u0009<li>Uncomment those lines.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<li>Notice that every index used in these lines of code is 0. Change the indices so that they use 0, 1, 2, and 3. Use an index of 0 and 1 on the first line; 2 and 3 should be your indices on the second line. These lines of code set the position of the sprites on the screen using X and Y coordinates.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<li>Run the solution by clicking the Start button or pressing F5. (<a href='.\/simulation\/ArraysExercise_2\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<li>We should see a small star below and the left of a fishbowl (trust us, it's a fishbowl). Let's move on to the next step and increase their size.<\/li>\u0009\u0009\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009\u0009<li>Create and use a two-dimensional array<\/li>\u0009\u0009\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009\u0009\u0009<li>Next, we are going to create a two-dimensional array. Scroll down to <em>Focus Area 3<\/em>.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<li>Declare a new two-dimensional array of floats and name it <code>spriteSizes<\/code>.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<li>On the same line as the declaration, initialize the array to hold two rows and two columns of values (E.g. new spriteSizes[5,6]; would be 5 rows and 6 columns). Do not use an initializer list.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<li>On the lines after the initialization, set the values of each variable one line of code at a time using square brackets (note: a 2x2 array holds 4 values and you will use 4 lines of code):\u0009\u0009\u0009\u0009\u0009\u0009<ul>\u0009\u0009\u0009\u0009\u0009\u0009<li>In array index 0,0 set the value to 8.0f.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<li>In array index 0,1 set the value to 4.0f.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<li>In array index 1,0 set the value to 11.17f.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<li>In array index 1,1 set the value to 6.58f.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<\/ul>\u0009\u0009\u0009\u0009\u0009\u0009<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<li>Scroll down to <em>Focus Area 4<\/em>. We can see two lines of code commented that set sprite sizes:<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/_spriteOne.SetSize(spriteSizes[0, 0], spriteSizes[0, 0]);<br\/>\/\/_spriteTwo.SetSize(spriteSizes[0, 0], spriteSizes[0, 0]);<br\/><\/pre>\u0009\u0009\u0009\u0009\u0009\u0009<li>Uncomment those lines.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<li>Notice that every index used in these lines of code is 0. Change the indices used in <code>_spriteOne.SetSize<\/code> to be [0,0] and [0,1].<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<li>Change the indices used in <code>_spriteTwo.SetSize<\/code> to be [1,0] and [1,1].<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<li>Run the solution by clicking the Start button or pressing F5. (<a href='.\/simulation\/ArraysExercise_3\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<li>We should now see that the fishbowl and star are larger (but in the same position as before).<\/li>\u0009\u0009\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009<h1>Rubric<\/h1><ul><li>2 points for displaying the star fishbowl in step 2.<\/li><li>2 points for displaying the larger sized star and fishbowl in step 3.<\/li><\/ul>\u0009\u0009\u0009<br\/>\u0009           \u0009\u0009\u0009<!--page:~~arrays-exercise~~-->","link":"exercise","mod":"arrays","movie":null,"name":"arrays","promptfile":null,"prompts":null,"reference":null,"text":null,"title":"Exercise"},{"bIsChecked":true,"exercise":".\/exercise\/physics_arrays.zip","instructions":"\u0009\u0009<h1>Goal<\/h1>\u0009\u0009<p>In this open ended exercise, you will demonstrate your understanding of arrays by creating a track and carts to crash through some boxes:<\/p>\u0009\u0009<br\/><img class=\"aligncenter size-full wp-image-701\" src=\".\/images\/rollercoaster_in_action.gif\" alt=\"rollercoaster_in_action\"\/>\u0009\u0009<h1>Steps<\/h1>\u0009\u0009<ol>\u0009\u0009\u0009<li> Creating a Track <\/li>\u0009\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009\u0009<li> If we start by building and running the project, we won't see anything on the screen. We're going to add and modify 3 things: the track, the carts, and some blocks to crash through. Go to Focus Area 1, find the following line:<\/li><pre class=\"wp-code-highlight prettyprint linenums:1\">float [] coasterTrackHeights = new float[4];<br\/><\/pre>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li> We see that we're creating an array of floats called \"coasterTrackHeights\". Each value defines the height of the track. Currently, we aren't initializing any of the values...resulting in an array of four 0s. That's going to make a pretty flat track.<\/li> \u0009\u0009\u0009\u0009\u0009\u0009<pre class=\"wp-code-highlight prettyprint linenums:1\">float [] coasterTrackHeights = new float[]{ 0.0f, 0.0f, 0.0f, 0.0f };<\/pre>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li> Why don't we try initializing each element of the array to different values. Here's one example using an initializer list: <\/li>\u0009\u0009\u0009\u0009\u0009\u0009<pre class=\"wp-code-highlight prettyprint linenums:1\">float [] coasterTrackHeights = new float[]{ 25.0f, -25.0f, 25.0f, -25.0f };<br\/><\/pre>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li> Now try an alternative method without using an initializer list:<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<pre class=\"wp-code-highlight prettyprint linenums:1\">float [] coasterTrackHeights = new float[4];<br\/>coasterTrackHeights[0] = 25.0f;<br\/>coasterTrackHeights[1] = -25.0f;<br\/>coasterTrackHeights[2] = 25.0f;<br\/>coasterTrackHeights[3] = -25.0f;<br\/><\/pre>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li> Setting the values to 25 is a bit curvier, but why don't you experiment with the values and make something you find interesting?<\/li>\u0009\u0009\u0009\u0009\u0009<br\/>\u0009\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009\u0009<li>Create a Cart<\/li> \u0009\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009\u0009<li> We have a track, and hopefully it's now sufficiently crazy. Let's head to Focus Area 2, and start tweaking values to add to the cart. First we will see this:<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<pre class=\"wp-code-highlight prettyprint linenums:1\">Coaster = CreateCoaster(null);<br\/><\/pre>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li> We have designed CreateCoaster to accept an array of floats. Right now, we have nothing because we are passing in null! That's what \"null\" means: nothing.<\/li>\u0009\u0009\u0009\u0009\u0009<li> So let's start by declaring another array of floats. We can do any size array, and a cart will be created for each entry. Let's start with creating an array of 3:<\/li> \u0009\u0009\u0009\u0009\u0009\u0009<pre class=\"wp-code-highlight prettyprint linenums:1\">float[] coasterSizes = {1.0f, 1.0f, 1.0f};<br\/>Coaster = CreateCoaster(null);<br\/><\/pre>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>  Not bad. But let's set them up to actually be something. You can use any float value here, but between 0.5 - 1.5 will be the best values. <\/li>\u0009\u0009\u0009\u0009\u0009<li> Finally, go ahead and pass in the array into the function, instead of null. Build and run to see the results.<\/li> \u0009\u0009\u0009\u0009\u0009\u0009<pre class=\"wp-code-highlight prettyprint linenums:1\">float[] coasterSizes = {1.2f, 1.0f, 0.75f};<br\/>Coaster = CreateCoaster(coasterSizes);<br\/><\/pre>\u0009\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009<li> Let's place some boxes<\/li> \u0009\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009\u0009<li> Having a runaway roller coaster and a crazy track is pretty neat, but why stop there? Why not add something? Something like...boxes! Boxes to crash into!<\/li>\u0009\u0009\u0009\u0009\u0009<li> And we'll use a jagged array to add these boxes. Let's find Focus Area 3. Similar to focus area 2, we defined the call CreateBoxesArray to accept a jagged array, but it's currently being passed null.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<pre class=\"wp-code-highlight prettyprint linenums:1\">CreateBoxArrays(null);<br\/>Coaster = CreateCoaster(coasterSizes);<br\/><\/pre>\u0009\u0009\u0009\u0009\u0009<li>Next, declare a jagged array of floats.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<pre class=\"wp-code-highlight prettyprint linenums:1\">float[][] jaggedArray = new float[4][];<br\/>CreateBoxArrays(null);<br\/><\/pre>\u0009\u0009\u0009\u0009\u0009<li> The function \"CreateBoxArrays\" will create boxes for as many elements as there are in each array and use the value of the array to determine the size. Let's build a stack of boxes in the shape of some stairs:<\/li> \u0009\u0009\u0009\u0009\u0009\u0009<pre class=\"wp-code-highlight prettyprint linenums:1\">float [][] jaggedArray = new float [4][];<br\/>jaggedArray[0] = new float[] {7.0f};<br\/>jaggedArray[1] = new float[] {7.0f, 7.0f};<br\/>jaggedArray[2] = new float[] {7.0f, 7.0f, 7.0f};<br\/>jaggedArray[3] = new float[] {7.0f, 7.0f, 7.0f, 7.0f};<br\/><\/pre>\u0009\u0009\u0009\u0009\u0009<li> Don't forget to pass in the array to CreateBoxesArrays. You can make several different configurations of boxes, and mess with the values of each element to affect the size. Enjoy! Show off your creative experiences with your fellow students.<\/li>\u0009\u0009\u0009\u0009<\/ol>\u0009\u0009<\/ol>\u0009\u0009<h1>Rubric<\/h1><ul><li>2 points for building a curvy coaster in step 2.<\/li><li>2 points for displaying the roller coaster w\/ carts in step 2.<\/li><li>2 points for creating boxes in step 3.<\/li><li>1 point for clearing five boxes off the track with the carts.<\/li><\/ul><!--page:~~arrays-project~~-->","link":"exercise","mod":"arrays","movie":null,"name":"physics_arrays","promptfile":null,"prompts":null,"reference":null,"text":null,"title":"Project: Roller Coaster"}]},{"bIsChecked":true,"name":"functions","title":"Functions","topics":[{"bIsChecked":true,"exercise":null,"instructions":null,"link":null,"mod":null,"movie":".\/video\/Course2-csharp-primer-arc-functions-overview.mp4","name":"Overview","promptfile":null,"prompts":null,"reference":"functions-1","text":null,"title":"Overview"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":null,"mod":null,"movie":".\/video\/Course2-csharp-primer-arc-functions-basicSyntax.mp4","name":"Basic Syntax","promptfile":null,"prompts":null,"reference":"functions-3","text":null,"title":"Basic Syntax"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":null,"mod":null,"movie":".\/video\/Course2-csharp-primer-arc-functions-callbacks.mp4","name":"Delegates","promptfile":null,"prompts":null,"reference":"functions-6","text":null,"title":"Delegates"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":null,"mod":null,"movie":null,"name":"Reference","promptfile":null,"prompts":null,"reference":"","text":"<a class=\"dest\" id=\"functions-1\"><\/a><div class=\"accent\"><h1>Overview<\/h1><p>A function is a block of reusable code and is a common feature of all modern programming languages. Rather than re-writing code for a single task multiple times throughout your program, we can write one function and call it whenever we want to perform that task.<\/p><p>A method is a specific type of function that is the most frequently used in C#. From this point on, we will use the term \"method\" until we learn the difference between methods and functions.<\/p><p>And guess what, you may remember it, but in previous exercises you already used methods that we created for you. We will now guide you through the experience of creating your own method.<\/p><p>Look at the following code as an example:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">int result = 7 + 4;<br\/><\/pre><p>To make this code reusable, we can define it as a method using the code below:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Define a method<br\/>int AddTwoNumbers()<br\/>{<br\/>return 7 + 4;<br\/>}<br\/><\/pre>To use this method, we would call it this way:<pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Calling the method<br\/>int sevenPlusFour = AddTwoNumbers();<br\/><\/pre>Awesome! Now we can call <code>AddTwoNumbers();<\/code> any time we want to add 7 and 4, but how often do we need to add those particular numbers? Next, let's make the code even more reusable so that it can add any two integers.<pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/Defining the method with multiple parameters.<br\/>int AddTwoNumbers(int firstNumber, int secondNumber )<br\/>{<br\/>return firstNumber + secondNumber;<br\/>}<br\/><\/pre>Great! Now we can add any two integers. The varibles <code>firstNumber<\/code> and <code>secondNunmber<\/code> are called parameters. Now, let's call the method multiple times.<pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/Calling the method mulitple times with different arguments.<br\/>int result1 = AddTwoNumbers(7,4);<br\/>int result2 = AddTwoNumbers(3,9);<br\/>int result3 = AddTwoNumbers(-6,8);<br\/><\/pre>Remember, when using methods you first <b>define<\/b> it then you can <b>call and return<\/b> results as many times as you like. In the topics below, we will review what you just learned in this overview by looking in detail at the different parts of a method and some nifty ways to use them.<div style=\"text-align: center;\"><ul class=\"anchorGroup\" style=\"text-align: left; display: inline-block;\"><li><a class=\"ankor\" href=\"#functions-3\">Basic C# Syntax<\/a><\/li><li><a class=\"ankor\" href=\"#functions-4\">Return Type<\/a><\/li><li><a class=\"ankor\" href=\"#functions-5\">Parameters<\/a><\/li><li><a class=\"ankor\" href=\"#functions-6\">Delegates<\/a><\/li><\/ul><\/div><\/div><a class=\"dest\" id=\"functions-2\"><\/a>&nbsp;<a class=\"dest\" id=\"functions-3\"><\/a>&nbsp;<div class=\"accent\"><h1>Basic C# Syntax<\/h1><p>Let's look more closely at the parts of a method.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">void Foo()<br\/>{<br\/>}<br\/><\/pre><p>The first word, <strong>void<\/strong>, declares the method's return type. It tells someone who wants to use this code what variable type the method will return when it's done. The second word, <strong>Foo<\/strong>, is the name of the method. We use the method's name to call (i.e evoke) it. After the name, two parenthesis are used to define the parameter list. Parameters are a comma separated list of types and variable names. We use parameters to pass data into method.  In the example above, we have no parameters so it's just two parenthesis. Finally, we use two curly braces to define the beginning and end of the body of a method. The body of the method contains the code that uses the parameters as inputs.<\/p><p>After defining a method, we call it using the following syntax:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">Foo();<br\/><\/pre><p>Don't forget the semi-colon.<\/p><\/div>&nbsp;<a class=\"dest\" id=\"functions-4\"><\/a><div class=\"accent\"><h1>Return Type<\/h1><p>All methods must have a return type. This defines what the method will return to the code that called it. And although you must specify a return type, it is possible to write a method that does not return anything. In that case, we use the <strong>void<\/strong> keyword which bascially means no value will be returned. In addition to void, any variable type can be returned such as int, float, and even custom types (no, you haven't learned how to make these yet). You can only have one return type.<\/p><p>Take a look at a method that returns an int:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">int ReturnInteger()<br\/>{<br\/>return 3;<br\/>}<br\/><\/pre><p>When we call this method, we can store the returned value:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Store the return value, which is 3 in this case.<br\/>int returnValue = ReturnInteger();<br\/><\/pre><\/div><a class=\"dest\" id=\"functions-5\"><\/a>&nbsp;<div class=\"accent\"><h1>Parameters<\/h1><p>We use parameters to pass data into a method. This makes our methods even more reusable. Any parameters we specify must have a type, followed by a name. If more than one parameter is declared, a comma is used to separate each one.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Add two numbers together and return the result<br\/>int Add(int firstNumber, int secondNumber)<br\/>{   <br\/>return firstNumber + secondNumber;<br\/>}<br\/><\/pre><p>It is worth noting that whitespace does not affect the method signature or body. We can declare everything on a single line, if we wish. This might be ok for smaller methods, but the concept quickly becomes unreadable with a lot of code and parameters:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">int Add(int firstNumber, int secondNumber) { return firstNumber + secondNumber; }<br\/><\/pre><p>Once the method is defined, we can pass arguments into it when we call the method:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">int first = 1;<br\/>int second = 2;<br\/><br\/>result = Add(first, second);<br\/><\/pre><p>A neat feature of parameters is an optional parameter. Parameters at the end of the list can have a default value. Check this out:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">int Add(int firstNumber, int secondNumber, int thirdNumber=0)<br\/>{<br\/>return firstNumber + secondNumber + thirdNumber;<br\/>}<br\/><\/pre><p>By setting the third parameter <code>thirdNumber<\/code> to 0, it has a default value. This gives us the option to call the <code>Add<\/code> method with or without passing a third argument. If we choose not to, the default value of 0 will be used for the third parameter.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Leave 3rd argument as default. Result will be 3<br\/>int result = Add(1, 2);<br\/><br\/>\/\/ Use the 3rd argument. Result will be 6.<br\/>result = Add(1, 2, 3);<br\/><\/pre><\/div><a class=\"dest\" id=\"functions-6\"><\/a><div class=\"accent\"><h1>Public & Static<\/h1><p>Finally, in front of the return type, you will either need to define an access keyword, such as public, or the keyword static.<\/p> <p>Public is a keyword for related to a topic called access modifiers. Understanding access is a deeper topic that is part of a future module on Object Oriented Programming (i.e. how we define objects). As a primer, there are several access keywords used by methods including: public, protected, private, and internal. These keywords describe to the compiler who can use certain code under certain conditions. Since this is a topic of a later discussion, for now, simply put the keyword public in front of a method. This is the highest level of access to a method.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/A public method that woul be found inside of an object definition.<br\/>public int Add(int firstNumber, int secondNumber)<br\/>{<br\/>return firstNumber + secondNumber;<br\/>}<br\/><\/pre><p>If a method isn't part of an object, then it's actually not a method. It's called a function, which is very similar to a method (from a beginner's perspective you can think of them as the same). The difference is that methods are a sub-part of an object and a function exists outside of an object. We add the keyword static to indicate that the code is a function. Functions aren't part of best practices in C# but they can be helpful when learning how to write a method (especially in console applications).<pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/A static function that is not part of an object definition.<br\/>static int Add(int firstNumber, int secondNumber)<br\/>{<br\/>return firstNumber + secondNumber;<br\/>}<br\/><\/pre><\/p><\/div><!--page:~~functions-reference-text~~-->","title":"Reference Material"},{"bIsChecked":true,"exercise":".\/exercise\/functions.zip","instructions":"<h1>Goal<\/h1><p>In this exercise, we are going to write write multiple methods.<br\/><br\/>These methods will create the pig and move them on screen as in the image below. We are going to fill in a few existing methods and write three new methods.<\/p><p style=\"text-align: center;\"><img class=\"aligncenter size-full wp-image-701\" src=\".\/images\/functions_exercise_1.jpg\" alt=\"functions_exercise_1\" width=\"800\" height=\"450\" \/><br \/>The final scene should look similar to the one in this image.<\/p><h1>Steps<\/h1><ol>    <li>InitializeSprite    <ol>       <li>First, let's see what the Exercise looks like without modification. Run the Exercise by clicking the Start button or pressing F5. (<a href='.\/simulation\/Functions_1\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>). The screen is blank.<\/li>       <li>Next, let's write our first method. This method will initialize the scene. Scroll to <em>Focus Area 1<\/em> in FunctionsExercise.cs.<br\/><br\/>            Under the comment <code>\/\/  Write the InitializeSprite method here<\/code>, define a new method using the following criteria:           <br\/>           <ul><br\/>\u0009\u0009   <p><b>-<\/b>Name the method InitializeSprite<\/p>\u0009\u0009   <p><b>-<\/b>Leave the body (i.e. inside the curly braces) empty for now.<\/p>\u0009\u0009   <p><b>-<\/b>The InitializeSprite method should return a <code>Sprite<\/code> type<\/p>\u0009\u0009   <p><b>-<\/b>The method should have an integer (i.e. int) parameter named <code>layer<\/code>.<\/p>\u0009\u0009   <p><b>-<\/b>Make the parameter named layer be optional. Use the default value of 0.<\/p>\u0009\u0009   <\/ul>           <p>Hint: Take a look at the reference material topic Overview, Return Type, and Parameters for examples.<\/p>       <\/li>       <li>Let's fill the <code>InitializeSprite<\/code> method body by copying and pasting the following lines of code(i.e. inside the curly braces).\u0009   <pre class=\"wp-code-highlight prettyprint linenums:1\">Sprite sprite = new Sprite(layer);<br\/>_spriteManager.AddSprite(sprite);<\/pre>\u0009\u0009   This code creates a new sprite and adds it's to the _spriteManager. The _spriteManger contains code we designed to add the sprite to the scene.\u0009   <\/li>       <li>Finally, use the keyword <code>return<\/code> to return the variable <code>sprite<\/code>. This line of code is the last line in the method body.<br\/><br\/>As a quick test, you can compile your code and see if it compiles without errors.       <p>Now that you wrote a method, let's use it in the next step. Scroll down to <em>Focus Area 2<\/em>.<\/p>\u0009   <\/li>\u0009   <li>Call the <code>InitializeSprite<\/code> method you wrote earlier and pass the value of 3 for the layer parameter. Store the result of this method in a variable named <code>_pigOne<\/code>.<p> \u0009   <br\/><br\/>\u0009   Note: We already defined the variable <code>_pigOne<\/code> for you on line 10 in FunctionsExercise.cs.<\/p><\/li>       <li>On the next line, call the <code>InitializeSprite<\/code> method again, this time with no arguments. Store the return result of this method call in the <code>_pigTwo<\/code> variable we defined for you on line 11 in FunctionsExercise.cs.<br\/><br\/>\u0009   <p>Wondering if we've done this right? It may be hard to tell at this point. The first step is to make sure we don't have any compile errors. Press Start or hit F5 in Visual Studio. Are there any errors in the output window. If so, you may need to double check these steps. If not, we should be able to run your application, but it's still just a boring blue screen.\u0009   <\/p>\u0009   <\/li>    <\/ol>\u0009<\/li>    <li>SetSpriteProperties\u0009<p style=\"font-weight:normal;\">Now that we have created the Sprites named <code>_pigOne<\/code> and <code>_pigTwo<\/code>, let's set the position and size of these variables. <\/p>\u0009<ol>\u0009\u0009<li>Scroll back up to <em>Focus Area 1<\/em>. Create a new method named <code>SetSpriteProperties<\/code> under the comment <code>\/\/ Write the SetSpriteProperties method here.<\/code> It should not return anything (i.e. void). The first parameter of this method is a variable of type <code>Sprite<\/code>. Name it <code>piggie<\/code>. The next four parameters are of type float. Name them <code>positionX<\/code>, <code>positionY<\/code>, <code>width<\/code>, and <code>height<\/code>. To clarify, this method has five parameters.\u0009\u0009<\/li>\u0009\u0009<li>Now, inside the body of the method. The variable <code>piggie<\/code> has a method named SetPosition. We can call this method using a \".\" operator (e.g. <code>piggie.SetPosition<\/code>). Call <code>piggie.SetPosition<\/code> and provide the arguments <code>positionX<\/code> and <code>positionY<\/code>. That's right, we are taking the parameters from SetSpriteProperties and passing them as arguments to <code>piggie.SetPosition<\/code>.<\/li>\u0009\u0009<li>Next, we are going to use another method of piggie. That method is named SetSize. When you type <code>piggie.SetSize<\/code> you are accessing a method associated with piggie. Pass piggie.SetSize the parameters <code>width<\/code> and <code>height<\/code> as arguments. This is a good point to hit F5 to make sure your code compiles.<\/li>\u0009\u0009<li>Now that the <code>SetSpriteProperties<\/code> method is complete let's use it. Find <em>Focus Area 3<\/em>. Call <code>SetSpriteProperties<\/code> and pass the argument <code>_pigOne<\/code> followed by four floating point values. We want the pig in the center of the screen which means PostionX and PositionY are both 0. We also want the pig to be 10 units wide (i.e. width) and 5 units tall(i.e. size).\u0009\u0009<\/li>\u0009\u0009<li>On the next line, call the <code>SetSpriteProperties<\/code> method again. This time, use <code>_pigTwo<\/code> as the first argument. Instead of 0 for the next two parameters, set <code>_pigTwo<\/code> X value to 10 and Y value to 0. Its width is 10 and height should be 5.\u0009\u0009<\/li>\u0009\u0009<li>Next, run the game by clicking the Start Button or pressing F5. While we do have working methods, nothing is rendering yet. Let's fix that.<\/li>\u0009<\/ol>\u0009<li>Render\u0009\u0009<ol>\u0009\u0009<li>Now go to <em>Focus Area 5<\/em> and locate the <code>Render<\/code> method.<\/li>\u0009\u0009<li>Inside of the <code>Render<\/code> method. Copy and paste the following code:<\/li>\u0009\u0009<pre class=\"wp-code-highlight prettyprint linenums:1\">_spriteManager.RenderSprites(_graphicsDevice,DefaultCamera);<br\/><\/pre>\u0009\u0009<li>Next, run the game by clicking the Start Button or pressing F5. We should get a crash. Why? Because we haven't set a texture for the pigs.(<a href='.\/simulation\/Functions_2\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>). We will fix that in the next step.<\/li>\u0009<\/ol>\u0009<\/li>\u0009<li>InitializeTexture\u0009\u0009<ol>\u0009\u0009<li>Scroll back up to <em>Focus Area 1<\/em>. Create a new method named <code>InitializeTexture<\/code> under the comment <code>\/\/ Write the InitializeTexture method here <\/code>. Create two parameters, the first of type <code>String<\/code> named <code>texturePath<\/code> and the second of type <code>Sprite<\/code> named <code>sprite<\/code>. Finally, define a return type of <code>SpriteTexture<\/code>.<\/li>\u0009\u0009<li>Next, add the following code to the body of <code>InitializeTexture<\/code>\u0009\u0009<pre class=\"wp-code-highlight prettyprint linenums:1\">SpriteTexture texture = new SpriteTexture(texturePath);<br\/>texture.LoadContent(_contentManager);<br\/>sprite.SetSpriteTexture(texture);<br\/>return texture;<\/pre>\u0009\u0009<\/li>\u0009\u0009<li>Finally, scroll back down to the <code>LoadContent<\/code> method in <em>Focus Area 4<\/em>. Call the <code>InitializeTexture<\/code> method and pass <code>\"Graphics\\\\art_pig\"<\/code> and <code>_pigOne<\/code> as arguments. Store the result in the <code>_pigOneTexture<\/code> variable.<\/li>\u0009\u0009<li>On the next line, call the <code>InitializeTexture<\/code> method again. Pass in <code>\"Graphics\\\\art_pig\"<\/code> and <code>_pigTwo<\/code> as arguments. Store the result in the <code>_pigTwoTexture<\/code> variable.<\/li>\u0009\u0009<li>Run the game by clicking the Start Button or pressing F5. We should see our pig sprites rendering on screen. (<a href='.\/simulation\/Functions_3\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li>\u0009\u0009<\/ol>\u0009<\/li>\u0009<\/li><\/ol><h1>Rubric<\/h1><ul><li>6 points for demonstrating the two pigs on the screen in step 4.<\/li><\/ul><!--page:~~functions-exercise~~-->","link":"exercise","mod":"functions","movie":null,"name":"functions","promptfile":null,"prompts":null,"reference":null,"text":null,"title":"Exercise"},{"bIsChecked":true,"exercise":".\/exercise\/physics_functions.zip","instructions":"<h1>Goal<\/h1><p>You will use functions to modify a ramp so that a car can jump over a red wall.<\/p><p style=\"text-align: center;\"><img class=\"aligncenter size-full wp-image-701\" src=\".\/images\/functions_physics_1.jpg\" alt=\"functions_physics_1\" width=\"800\" height=\"450\" \/><br \/>This is what the game looks like to start. <\/p><p>In order to change the ramp, use the following method calls.<\/p><table class=\"api\" border=1 cellspacing=4><tr><th>Method<\/th><th>Description<\/th><\/tr><tr><td>Key GetKey()<\/td><td>Returns a key to the car.<\/td><\/tr><tr><td>void StartCar( Key keyIn )<\/td><td>Starts the car using a key.<\/td><\/tr><tr><td>void LL_Slide(float slideLeft = 1.0f)<\/td><td>Slides the lower left portion of the ramp to the left.<\/td><\/tr><tr><td>void LR_Slide(float slideRight = 1.0f)<\/td><td>Slides the lower right portion of the ramp to the right.<\/td><\/tr><tr><td>void UR_Adjust(float slideLeft,float growUp)<\/td><td>Slides the upper right portion of the ramp left and grows the upper right portion of the ramp up..<\/td><\/tr><tr><td>void SlideRamp( float slideRight )<\/td><td>Slides the entire ramp right.<\/td><\/tr><tr><td>void SetTireBounce( float addBounce )<\/td><td>Sets the bounciness of the tires. -.5 is no bounce +.5 is very bounce.<\/td><\/tr><\/table><h1>Steps<\/h1><ol>\u0009<li>In Focus Area 1, adjust the yellow ramp.\u0009\u0009<ol>\u0009\u0009\u0009<li>Use the methods in the table above in focus area 1 to adjust the ramp so that the car will jump over the red wall.<\/li>\u0009\u0009\u0009<li>Drive the car using the arrows. The car will not drive unless you start the car with a key.<\/li>\u0009\u0009\u0009<li>If your adjustments cause an edge of the ramp to intersect another edge of the ramp it will cause an error. Adjust your value to fix the error.<\/li>\u0009\u0009\u0009<li>Demonstrate your solution to your teacher.<\/li>\u0009\u0009<\/ol>\u0009<\/li><\/ol><h1>Rubric<\/h1><ul><li>1 point for making a car that is running (i.e. the car was started using the key) in step 1.b.<\/li><li>1 point for each method other than GetKey and StartCar.<\/li><li>1 point for reaching the goal area.<\/li><\/ul>   <!--page:~~functions-project~~-->","link":"exercise","mod":"functions","movie":null,"name":"physics_functions","promptfile":null,"prompts":null,"reference":null,"text":null,"title":"Project: Build a Car"}]},{"bIsChecked":true,"name":"loops","title":"Loops","topics":[{"bIsChecked":true,"exercise":null,"instructions":null,"link":null,"mod":null,"movie":".\/video\/Course2-csharp-primer-arc-loops-overview.mp4","name":"Overview","promptfile":null,"prompts":null,"reference":"loops-1","text":null,"title":"Overview"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":null,"mod":null,"movie":".\/video\/Course2-csharp-primer-arc-loops-forLoop.mp4","name":"For Loop","promptfile":null,"prompts":null,"reference":"loops-2","text":null,"title":"For Loop"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":null,"mod":null,"movie":".\/video\/Course2-csharp-primer-arc-loops-forEach.mp4","name":"For Each","promptfile":null,"prompts":null,"reference":"loops-3","text":null,"title":"For Each"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":null,"mod":null,"movie":".\/video\/Course2-csharp-primer-arc-loops-while.mp4","name":"While","promptfile":null,"prompts":null,"reference":"loops-4","text":null,"title":"While"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":null,"mod":null,"movie":".\/video\/Course2-csharp-primer-arc-loops-flowControl.mp4","name":"Break & Continue","promptfile":null,"prompts":null,"reference":"loops-5","text":null,"title":"Break & Continue"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":null,"mod":null,"movie":null,"name":"Reference","promptfile":null,"prompts":null,"reference":null,"text":"<a class=\"dest\" id=\"loops-1\"><\/a><div class=\"accent\"><h1>Overview<\/h1><p>Loops are statements that execute a statement or set of statements repeatedly until a specified condition is met. Loops consist of an iteration statement (defines how often the code repeats) and a body (set of instructions that will execute once per iteration). A loop's body may contain many statements or it may contain only one. If we aren't careful, we can accidentally cause a loop to never exit. To the user of the program, it looks like the program simply stopped working, but the programmer can recognize this as a condition called an infinite loop.<\/p><div style=\"text-align: center;\"><ul class=\"anchorGroup\" style=\"text-align: left; display: inline-block;\"><li><a class=\"ankor\" href=\"#loops-2\">for<\/a><\/li><li><a class=\"ankor\" href=\"#loops-3\">foreach<\/a><\/li><li><a class=\"ankor\" href=\"#loops-4\">while<\/a><\/li><li><a class=\"ankor\" href=\"#loops-5\">break and continue<\/a><\/li><\/ul><\/div><\/div><a class=\"dest\" id=\"loops-2\"><\/a>&nbsp;<div class=\"accent\"><h1>for<\/h1><p>The first loop keyword we'll explore is the most commonly used one known as the <code>for<\/code> loop. The <code>for<\/code> loop's iteration statement has three components: the initializer, the condition and the iterator.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>for(initializer; condition; iterator)<br\/>{<br\/>\/\/ body<br\/>}<br\/><\/pre><p>In the initializer, we set a variable to a starting value for the loop, typically this is zero which is usually how we start counting in programming languages. This variable is local only to this loop which means the code above or below the loop isn't able to use the variable, it's only \"visible\" to the code inside the loop.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>for(int i = 0; condition; iterator)<br\/>{<br\/>\/\/ body<br\/>}<br\/><\/pre><p>The condition defines how many times the loop should run by evaluating the condition at the beginning of each iteration of the loop, including the first one. This test determines whether the specified condition has been met. If the condition is false, the loop will not execute; if the condition is true, the loop will continue to repeat. In the example below we want the loop to run three times, thus we use the condition of i &lt; 3. Every time the loop runs, we increment i, as you will see in the next step.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>for(int i = 0; i &lt; 3; iterator)<br\/>{<br\/>\/\/ body<br\/>}<br\/><\/pre><p>The iterator is the section that advances the loop to its next iteration. After completing an iteration of the body the iterator section will execute. Since our condition is i &lt; 3 we will want to increase the value of i by one. There are multiple ways we can achieve this, but in this example we'll just have i increment itself using the short-cut i++ (i.e. i = i + 1).<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>for(int i = 0; i &lt; 3; i++)\/\/i++ is a short-cut for saying i = i+1<br\/>{<br\/>\/\/ body<br\/>}<br\/><\/pre><p>Now we have a complete for loop that will repeat 3 times and execute a set of statements in the body. Leaving out any of these sections or writing them incorrectly may produce an infinite loop which can result in \"locking up\" a game (well, it's not actually locked, it's doing the same thing over and over).<\/p><h2>Iterating Arrays and Lists<\/h2><p>A common use for a for loop is to use it to iterate through an array, a practice we saw earlier in the array module. We do this by looping on an integer as the index to access in the array. In the example below we have an array with three floats in it, but we're only interested in printing out numbers to the screen that are less than the second index. The same example has been done using a List, which is similar to an array except that it supports some additional features (one of which you will see shortly). Lists can be accessed in the same way as arrays.<\/p><p>Console.WriteLine is a function that writes text to the screen of a Console Application, a basic application with no input and output other than text. Console.WriteLine prints text to the screen and moves to the next line. We will be using this function to help you understand how loops work.<\/p><p>Note: You can create your own console applications in Visual Studio by selecting File->New->Project from the menu. Once the New Project dialog opens, select Templates->Visual C#->Windows from the panel on the left. You can now select Console Application in the middle column. This will open the console application and you can put your code inside of the function named Main.<\/p><p>First, as an array:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>float[] myArray = new float[3] {1.5f, 5.4f, 2.3f};<br\/>for(int i = 0; i &lt; 3; i++)<br\/>{<br\/>if(myArray[i] &lt; 2)<br\/>{<br\/>Console.WriteLine(i);<br\/>}   <br\/>}<br\/><\/pre><p>Output:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">1.5<br\/><\/pre><p>Now as a list:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>List&lt;float&gt; myList = new List&lt;float&gt;();<br\/>myList.Add(1.5f);<br\/>myList.Add(5.4f);<br\/>myList.Add(2.3f);<br\/>for(int i = 0; i &lt; 3; i++)<br\/>{<br\/>if(myList[i] &lt; 2)<br\/>{<br\/>Console.WriteLine(i);<br\/>}   <br\/>}<br\/><\/pre><p>Output:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">1.5<br\/><\/pre><p>That's right, the output is the same in both cases.<\/p><\/div><a class=\"dest\" id=\"loops-3\"><\/a>&nbsp;<div class=\"accent\"><h1>foreach<\/h1><p>The foreach statement is similar to a for loop except it automatically handles the number of iterations based on the size of a List (yes, there are other structures that a foreach can use, but for now, we will focus on the List). The foreach statement eliminates the need for the initializer, condition and iterator and replaces them with a local variable and the keyword \"in\". The example below shows the basic structure of a foreach loop.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>foreach(Type variable in myList)<br\/>{   <br\/>\/\/body   <br\/>}<br\/><\/pre><p>Now let's see what that loop looks like with the proper type and some actual values.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>List&lt;float&gt; myList = new List&lt;float&gt;();<br\/>myList.Add(1.5f);<br\/>myList.Add(5.4f);<br\/>myList.Add(2.3f);<br\/>foreach(float number in myList)<br\/>{<br\/>Console.WriteLine(number);   <br\/>}<br\/><\/pre><p>Output:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">1.5<br\/>5.4<br\/>2.3<br\/><\/pre><\/div><a class=\"dest\" id=\"loops-4\"><\/a>&nbsp;<div class=\"accent\"><h1>while<\/h1><p>Now to the last of the loop types in C#, the while loop. The while loop uses a condition to determine when it's done repeating, but it doesn't make use of an initializer or an iterator as it did in the for loop.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>while(condition)<br\/>{<br\/>\/\/ body<br\/>}<br\/><\/pre><p>To use a while loop like a for loop, we must handle parts of the for loop iterator statement in the loop body. The initializer would be declared and assigned prior to entering the loop body and the iterator must be manually incremented within the loop itself. In the code example below, we've taken our for loop example from the for topic and converted it into a while loop. Alternatively, and perhaps more commonly, is that the while loop's condition is dependent on changing a boolean variable inside the body.<\/p><p>A while loop iterating like a for loop.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>int i = 0;<br\/>while(i &lt; 3)<br\/>{<br\/>++i;<br\/>}<br\/><\/pre><p>A while loop testing a boolean variable for a false variable<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>boolean boolVar = true;<br\/>while( boolVar )<br\/>{<br\/>boolVar = exitLoop(); \/\/ exit loop is a function someone would need to write that returns a boolean. <br\/>}<br\/><\/pre><p>The while loop will continue to run as long as the condition remains true. This is what makes the while a potential troublemaker if not used correctly. If we forget to update the iterator inside the loop body, then it would never be incremented and the loop would run indefinitely (or at least until you close the program). However, it's this very feature that makes the while loop most useful for situations where a loop needs to run for an indeterminate amount of time. One example of this type of loop is a main game loop. This loop would make the calls to the update functions of the various subsystems of a game until a condition, such as the player issuing the command to quit the game, had been met. All of your game examples so far have been running inside a game loop but we've hidden it (for your protection...just kidding).<\/p><h2>do-while<\/h2><p>The do-while loop is similar the while loop but with one difference, it will always execute the first iteration of the loop. Every other loop statement we've discussed is capable of running the loop zero times due to checking the condition first before running an iteration of the loop. The do-while checks its condition at the end of the iteration. For this reason, the do-while is good for scenarios where at least one iteration of the loop needs to run no matter what. Still, a do-while can also be just as easily rewritten as a standard while loop. The do-while loop isn't really a very common loop although many languages support it.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>int i = 0;<br\/>do<br\/>{<br\/>Console.WriteLine(i);<br\/>++i;<br\/>}while(i &lt; 3);<br\/><\/pre><p>Output:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">0<br\/>1<br\/>2<br\/><\/pre><\/div><a class=\"dest\" id=\"loops-5\"><\/a>&nbsp;<div class=\"accent\"><h1>break and continue<\/h1><p>The flow of a loop can be controlled with the keywords break and continue. These keywords allow for the control of the program to be immediately transferred. These statements most often used in loops are break and continue.<\/p><p>The keyword break is used within an selection statement (the next module in this Arc) in a loop to terminate the loop prematurely. In the example below we have a for loop iterating 3 times and this time we've added an if statement to terminate the loop after 2 iterations.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>for(int i = 0; i &lt; 3; i++)<br\/>{<br\/>if(i > 1)<br\/>break;<br\/><br\/>Console.WriteLine(i);<br\/>}<br\/><br\/><\/pre><p>Output:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">0<br\/>1<br\/><\/pre><p>The keyword continue is used within an if statement to skip the remainder of an iteration of a loop and still continue on with the remaining iterations should any remain. In the example below we use the same for loop from the previous example only now we are skipping the second iteration and moving on to the third.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>for(int i = 0; i &lt; 3; i++)<br\/>{<br\/>if(i == 1)<br\/>continue;<br\/><br\/>Console.WriteLine(i);<br\/>}<br\/><br\/><\/pre><p>Output:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">0<br\/>2<br\/><\/pre><\/div><!--page:~~loops-reference-text~~-->","title":"Reference Material"},{"bIsChecked":true,"exercise":".\/exercise\/loops.zip","instructions":"<h1>Goal<\/h1><p>In this Exercise we will learn how to use for, foreach, and while loops.<\/p><img src=\".\/images\/LoopsResult.png\" alt=\"LoopsResult\" width=\"1276\" height=\"716\" class=\"img-responsive aligncenter size-full wp-image-2662\" \/><h1>Steps<\/h1><p>All work will be done with the <em>LoopsExercise<\/em> class<\/p><ol>\u0009<li>Build and run the Exercise. The Exercise should build successfully and display an empty game window with a blue background. (<a href='.\/simulation\/Loops_1\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)\u0009<ol>\u0009\u0009<li>Within <em>Focus Area 1<\/em>, create a while loop that will repeat while <code>nextShipPositionY<\/code> is less than 20.\u0009\u0009\u0009Use the following code as a template to help you:\u0009\u0009<pre class=\"wp-code-highlight prettyprint linenums:1\">while(true)\/\/this while loop will repeat forever because it's always true.<br\/>{<br\/>\/\/Empty Body<br\/>}<\/pre>\u0009\u0009<p>Copying and pasting this while loop won't solve all of your problems. Firstly, the body is empty so it's not really doing anything. Secondly, It will repeat forever because a condition that only says <code>(true)<\/code> which always evaluates to...well...true. If we want this loop to end, we need to find a way to make that condition false at precisely the right time. Let's add some code to the body and make the loop exit.<\/p>\u0009\u0009<\/li>\u0009\u0009<li>Next, replace the <code>true<\/code> with the condition we mentioned above (nextShipPositionY is less than 20).\u0009\u0009<\/li>\u0009\u0009<li>Next, replace the <code>\/\/Empty body<\/code> comment with the following code:\u0009\u0009<pre class=\"wp-code-highlight prettyprint linenums:1\">Sprite mySprite = new Sprite();<br\/>mySprite.SetSize(8, 4);<br\/>mySprite.SetPosition(nextShipPositionX, nextShipPositionY);<br\/>_spriteManager.AddSprite(mySprite);<br\/>_spriteList.Add(mySprite);<br\/><\/pre>\u0009\u0009\u0009\u0009This code creates a new sprite, sets it's size and postion, and then adds it to _spriteManager and _spriteList which will make the sprite render on the screen.\u0009\u0009Since there isn't any code to change the value of nextShipPositionY, this loop will still run forever because nextShipPositionY will never be greater than 20 while the loop repeats. Let's fix that!\u0009\u0009<\/li>\u0009\u0009<li>After the code you just pasted, write a line of code that decreases <code>nextShipPositionX<\/code> by 2.<\/li>\u0009\u0009<li>Next, write a line of code that increase <code>nextShipPositionY<\/code> by 3.5. This is the line that eventually makes the loop condition false. If you run the code now, this loop will work, but the program will crash (you will see a message titled NullReferenceException) when the ship should render because our sprites don't have textures. Let's add the missing texture next.\u0009\u0009<\/li>\u0009<\/ol>\u0009<\/li>\u0009<li>Within <em>Focus Area 2<\/em>, create a foreach that will loop through each Sprite in <code>_spriteList<\/code>. \u0009<ol>\u0009<li>The variable name in your for loop should be <code>mySprite<\/code> and the type is <code>Sprite<\/code>.<\/li>\u0009<li> After creating the for loop and empty body, add the following code to the foreach body:\u0009<pre class=\"wp-code-highlight prettyprint linenums:1\">SpriteTexture texture = new SpriteTexture(\"Graphics\\\\EnemyShip1\");\/\/ creates an instance of the texture<br\/>texture.LoadContent(_contentManager);\/\/ loads the texture from the hard drive<br\/>mySprite.SetSpriteTexture(texture);\/\/ sets the texture for mySprite<\/pre>\u0009<\/li>\u0009<li>Build and Run the Exercise. The Exercise should build successfully and display 6 ships stacked diagonally from the center of the screen toward the upper left of the window. (<a href='.\/simulation\/Loops_2\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><\/ol><\/li><li>Animate the ships using a for loop.\u0009<ol>\u0009\u0009<li>Within <em>Focus Area 3<\/em>, create a <code>for<\/code> loop to iterate through _spriteList. Use _spriteList.Count to define the number of iterations of the loop.<\/li>\u0009\u0009<li>Copy and paste the following code inside the body of the loop. Look over this code and practice reading code you may have never seen before.\u0009\u0009<pre class=\"wp-code-highlight prettyprint linenums:1\">Sprite mySprite = _spriteList[i];\/\/ Get a sprite variable at the index.<br\/><br\/>float x = mySprite.Position.X   + deltaSeconds * _spriteDirections[i];\/\/ Move value along x axis.<br\/>if( x&lt;-34 || x&gt;34 ) \/\/ This is a selection statement, an upcoming lesson.<br\/>{<br\/>_spriteDirections[i] *= -1;<br\/>}<br\/><br\/>mySprite.SetPosition(x, mySprite.Position.Y);\/\/ Update the position of the sprite.*\/<\/pre>\u0009\u0009<\/li>\u0009\u0009<li>Build and Run the Exercise. The Exercise should build successfully and display the 6 ships moving across the screen, and going backwards when they reach the edge of the window. (<a href='.\/simulation\/Loops_3\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li>\u0009<\/ol><\/li><\/ol><h1>Rubric<\/h1><ul><li>3 points for demonstrating six ships stacked diagonally in step 2.c.<\/li><li>1 points for demonstrating animated ships in step 3.<\/li><\/ul><!--page:~~loops-exercise~~-->","link":"exercise","mod":"loops","movie":null,"name":"loops","promptfile":null,"prompts":null,"reference":null,"text":null,"title":"Exercise"},{"bIsChecked":true,"exercise":".\/exercise\/physics_loops.zip","instructions":"<h1>Goal<\/h1><p>In this open ended exercise, you will demonstrate your understanding of various loops. You will modify the code to complete a mini-game of rolling a ball along platforms until the green target is reached.<\/p><br \/><img class=\"aligncenter size-full wp-image-701\" src=\".\/images\/loops_exercise_two.png\" alt=\"loops_exercise_two\" width=\"800\" height=\"468\" \/><p style=\"text-align: center;\">The final, working game should look similar to the one in this image.<\/p><br \/><h1>Steps<\/h1><ol>    <li>Build top bridges: The bridge we will build at the top of the screen is split into two by a red platform that sits in the middle. We need to decide on the width of bridge segments, and the number of segments we'll need, to span both sides and allow the ball to cross.        <ol>            <li>Find <em>Focus Area 1<\/em>, which currently builds out a single platform segment that is given a width based on the <code>segmentWidth<\/code> variable.<\/li>            <li>Now find <em>Focus Area 2<\/em>, which defines and initializes the <code>segmentWidth<\/code> variable.<\/li>            <li>Decide on a value for <code>segmentWidth<\/code> in <em>Focus Area 2<\/em>, and then wrap the code in <em>Focus Area 1<\/em> with a <code>for<\/code> loop such that two or more platform segments are built to cover the left bridge span. This should allow the ball to travel from the left of the screen and onto the red platform in the top middle.<\/li>            <li>Wrap the code in <em>Focus Area 3<\/em> to also build out the right bridge span. The ball should now be able to reach the first purple elevator on the right.<\/li>        <\/ol>    <\/li>    <li>Build middle angled bridges: We will now build the bridge in the middle of the screen, which is split into two angled spans that sit on either side of a red platform. We need to decide on the width of bridge segments, and the number of segments we'll need, to span both sides and allow the ball to cross.        <ol>            <li>Find <em>Focus Area 4<\/em>, which currently builds out a single platform segment that is given a width based on the <code>segmentWidth<\/code> variable.<\/li>            <li>Now find <em>Focus Area 5<\/em>, which defines and initializes the <code>segmentWidth<\/code> variable.<\/li>            <li>Decide on a value for <code>segmentWidth<\/code> in <em>Focus Area 5<\/em>, and then wrap the code in <em>Focus Area 4<\/em> with a <code>while<\/code> loop that evaluates the <code>i<\/code> variable, such that two or more platform segments are built to cover the left bridge span.<\/li>            <li>Wrap the code in <em>Focus Area 6<\/em> with a similar <code>while<\/code> loop to also build out the right bridge span. The ball should now be able to travel from the purple elevator on the right, over to the purple elevator on the left.<\/li>        <\/ol>    <\/li>    <li>Build bottom movable bridges: We will now build the bridge at the bottom of the screen.  This bridge is also split into two spans. We need to decide on the width of moving bridge segments, and the number of segments we'll need, to span both sides and allow the ball to cross.        <ol>            <li>Find <em>Focus Area 7<\/em>, which currently has commented code to build out a single platform segment that is given a width based on the <code>segmentWidth<\/code> variable.<\/li>            <li>Now find <em>Focus Area 8<\/em>, which defines and initializes the <code>segmentWidth<\/code> variable.<\/li>            <li>Decide on a value for <code>segmentWidth<\/code> in <em>Focus Area 8<\/em>, and then wrap the commented code in <em>Focus Area 7<\/em> with a <code>foreach<\/code> loop such that two or more platform segments are built to cover the left bridge span. The <code>foreach<\/code> loop will need to extact each <code>MovingPlatform<\/code> object type from the <code>_bottomLeftPlatforms<\/code> list, and place the result into a <code>platform<\/code> variable. Be sure to uncomment the code within the <code>foreach<\/code> loop once the loop has been created.<\/li>            <li>Wrap the commented code in <em>Focus Area 9<\/em> with a similar <code>foreach<\/code> loop to also build out the right bridge span. Be sure to uncomment the code once it is within the <code>foreach<\/code> loop.<\/li>        <\/ol>    <\/li>    <li>Play the game! Did your bridges close the gaps and allow you to reach the goal?    <\/li><\/ol><h1>Rubric<\/h1><ul><li>2 points for reaching the purple elevator in step 1.<\/li><li>2 points for building the two middle bridges in step 2.<\/li><li>2 points for building the bridge across the bottom in step 3.<\/li><\/ul><!--page:~~loops-project~~-->","link":"exercise","mod":"loops","movie":null,"name":"physics_loops","promptfile":null,"prompts":null,"reference":null,"text":null,"title":"Project: Bridges"}]},{"bIsChecked":true,"name":"selection-statements","title":"Selection Statements","topics":[{"bIsChecked":true,"exercise":null,"instructions":null,"link":null,"mod":null,"movie":".\/video\/Course2-csharp-primer-arc-selection-overview.mp4","name":"Overview","promptfile":null,"prompts":null,"reference":"selection-statements-1","text":null,"title":"Overview"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":null,"mod":null,"movie":".\/video\/Course2-csharp-primer-arc-selection-ifElse.mp4","name":"If Else","promptfile":null,"prompts":null,"reference":"selection-statements-2","text":null,"title":"ifElse"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":null,"mod":null,"movie":".\/video\/Course2-csharp-primer-arc-selection-switch.mp4","name":"Switch","promptfile":null,"prompts":null,"reference":"selection-statements-7","text":null,"title":"Switch"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":null,"mod":null,"movie":null,"name":"Reference","promptfile":null,"prompts":null,"reference":null,"text":"<a class=\"dest\" id=\"selection-statements-1\"><\/a><div class=\"accent\"><h1>Overview<\/h1><p>Game programming is filled with decisions. What action should we take when a player presses a key or clicks the mouse? What action should we take when a game object reaches the end of the screen? We use selection statements to control the flow of a program depending of if a given value evaluate to true or false, of if the given value matches a set of predetermined constant values.<\/p><p>In this module we'll explore how to use selection statements to modify which code our programs will execute.<\/p><div style=\"text-align: center;\"><ul class=\"anchorGroup\" style=\"text-align: left; display: inline-block;\"><li><a class=\"ankor\" href=\"#selection-statements-2\">If Statement<\/a><\/li><li><a class=\"ankor\" href=\"#selection-statements-3\">If-Else Statement<\/a><\/li><li><a class=\"ankor\" href=\"#selection-statements-4\">Nested If-Else Statements<\/a><\/li><li><a class=\"ankor\" href=\"#selection-statements-5\">If-Else If-Else Statements<\/a><\/li><li><a class=\"ankor\" href=\"#selection-statements-6\">Performance Considerations<\/a><\/li><li><a class=\"ankor\" href=\"#selection-statements-7\">Switch Statement<\/a><\/li><\/ul><\/div><\/div><a class=\"dest\" id=\"selection-statements-2\"><\/a>&nbsp;<div class=\"accent\"><h1>If Statement<\/h1><p>An <em>if<\/em> statement determines which block of code will be executed based on the result of a given Boolean expression. When the expression's result is true, the code block immediately following the <em>if<\/em> statement will be executed. If the given Boolean expression result is false then the adjacent code block will be skipped.<\/p><p>In the following example the block of code following the <em>if<\/em> statement will be executed because the expression has evaluated to true:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">bool expression = true;<br\/><br\/>if (expression)<br\/>{<br\/>Console.WriteLine(&quot;The expression evaluated to true.&quot;);<br\/>}<\/pre><p>When working with a single line of code following an <em>if<\/em> statement, the curly braces <em>{}<\/em> are optional. The above example could also be written as:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">bool expression = true;<br\/><br\/>if (expression)<br\/>Console.WriteLine(&quot;The expression evaluated to true.&quot;);<\/pre><p>However, if two or more lines of code need to be executed following an <em>if<\/em> statement then curly braces are required to designate the associated code block.<\/p><\/div><a class=\"dest\" id=\"selection-statements-3\"><\/a>&nbsp;<div class=\"accent\"><h1>If-Else Statement<\/h1><p><em>if<\/em> statements come in two forms. The first form we discussed above is when the given Boolean expression evaluates to true. The second form of the <em>if<\/em> statement allows for a block of code to execute when the evaluated Boolean expression is false, and is indicated using the <em>else<\/em> statement.<\/p><p>In the following example, only the block of code following the <em>else<\/em> statement will be executed because the expression passed to the <em>if<\/em> statement evaluates to false:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">bool expression = false;<br\/><br\/>if (expression)<br\/>{<br\/>Console.WriteLine(&quot;The expression evaluated to true.&quot;);<br\/>}<br\/>else<br\/>{<br\/>Console.WriteLine(&quot;The expression evaluated to false.&quot;);<br\/>}<\/pre><p>As with the <em>if<\/em> statement, the <em>if-else<\/em> statement may forego the curly braces if there is only a single line of code to execute. The above example may be reduced to:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">bool expression = false;<br\/><br\/>if (expression)<br\/>Console.WriteLine(&quot;The expression evaluated to true.&quot;);<br\/>else<br\/>Console.WriteLine(&quot;The expression evaluated to false.&quot;);<\/pre><\/div><a class=\"dest\" id=\"selection-statements-4\"><\/a>&nbsp;<div class=\"accent\"><h1>Nested If-Else Statements<\/h1><p>We may place any code within an <em>if<\/em> or <em>else<\/em> statement's code block, and that includes additional <em>if-else<\/em> statements. This allows us to nest additional conditions together. In the following example code inside the second <em>if<\/em> statement's code block will be the only code within the <em>else<\/em> that executes because expression1 evaluates to false and expression2 evaluates to true.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">bool expression1 = false;<br\/>bool expression2 = true;<br\/><br\/>if (expression1)<br\/>{<br\/>Console.WriteLine(&quot;Expression 1 evaluated to true.&quot;);<br\/>}<br\/>else<br\/>{<br\/>if (expression2)<br\/>{<br\/>Console.WriteLine(&quot;Expression 2 evaluated to true.&quot;);<br\/>}<br\/>else<br\/>{<br\/>Console.WriteLine(&quot;Both expressions evaluated to false.&quot;);<br\/>}<br\/>}<\/pre><p>As with the <em>if<\/em>, <em>if-else<\/em>, and <em>else-if<\/em> statements, nested statements may forego the curly braces if there is only a single line of code to execute. However, the statement that code will be nested within must use curly braces for the code block as there are now multiple lines within it. The above example may be reduced to:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">bool expression1 = false;<br\/>bool expression2 = true;<br\/><br\/>if (expression1)<br\/>Console.WriteLine(&quot;Expression 1 evaluated to true.&quot;);<br\/>else<br\/>{<br\/>if (expression2)<br\/>Console.WriteLine(&quot;Expression 2 evaluated to true.&quot;);<br\/>else<br\/>Console.WriteLine(&quot;Both expressions evaluated to false.&quot;);<br\/>}<\/pre><p>When chaining together multiple <em>if-else<\/em> statements the program will check the first <em>if<\/em> statement, followed by the second, then third, and so on until either an <em>if<\/em> statement's Boolean expression evaluates to true, or the last <em>else<\/em> statement is executed. Each of these Boolean expression evaluations takes time, which is something we wish to minimize to maintain our game's performance.<\/p><\/div><a class=\"dest\" id=\"selection-statements-5\"><\/a>&nbsp;<div class=\"accent\"><h1>If-Else If-Else Statements<\/h1><p>By placing another <em>if<\/em> statement within an <em>else<\/em> statement's code block we may check if another Boolean expression is true only if the first Boolean expression is false. For example:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">bool expression1 = false;<br\/>bool expression2 = true;<br\/><br\/>if (expression1)<br\/>{<br\/>Console.WriteLine(&quot;Expression 1 evaluated to true.&quot;);<br\/>}<br\/>else<br\/>{<br\/>if (expression2)<br\/>{<br\/>Console.WriteLine(&quot;Expression 2 evaluated to true.&quot;);<br\/>}<br\/>else<br\/>{<br\/>Console.WriteLine(&quot;Both expressions evaluated to false.&quot;);<br\/>}<br\/>}<\/pre><p>In this example the first <em>if<\/em> statement is passed over because its Boolean expression is false, so it's <em>else<\/em> statement's code block is executed. Within the <em>else<\/em> statement's code block is a second <em>if<\/em> with its own Boolean expression to check. In this example the second <em>if<\/em> statement's Boolean expression evaluates to true so its code block is executed. If its Boolean expression were instead to be false then the second <em>if<\/em> statement's <em>else<\/em> statement's code block would have been executed. Therefore, the second <em>else<\/em> statement's code block would only execute if both the first and second <em>if<\/em> statements are false.<\/p><p>As we have previously learned, we may drop the curly braces if there is only a single line of code following an <em>if<\/em> or <em>else<\/em> statement. Fortuantely, C# considers the <em>if-else<\/em> combination as a single statement which allows us to rewrite the above example as follows:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">bool expression1 = false;<br\/>bool expression2 = true;<br\/><br\/>if (expression1)<br\/>{<br\/>Console.WriteLine(&quot;Expression 1 evaluated to true.&quot;);<br\/>}<br\/>else if (expression2)<br\/>{<br\/>Console.WriteLine(&quot;Expression 2 evaluated to true.&quot;);<br\/>}<br\/>else<br\/>{<br\/>Console.WriteLine(&quot;Both expressions evaluated to false.&quot;);<br\/>}<\/pre><p>What we have done is drop the curly braces from the first <em>else<\/em> statement and moved directly into the second <em>if-else<\/em> statement. This both makes it easier to read, and prevents too much indentation of our code, especially as we chain together multiple <em>if-else<\/em> statements to test multiple expressions.<\/p><p>Here is an example of combining both <em>else-if<\/em> statements and nested statements:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">int a = 2;<br\/>int b = 10;<br\/>bool c = true;<br\/><br\/>if (a == 0)<br\/>{<br\/>\/\/ Some code is executed here<br\/><br\/>if (b != 0)<br\/>{<br\/>Console.WriteLine(&quot;a is 0 and b is not 0.&quot;);<br\/>}<br\/><br\/>\/\/ Some more code is executed here<br\/>}<br\/>else if (b &gt;= 10)<br\/>{<br\/>\/\/ Some code is executed here<br\/><br\/>if (c)<br\/>{<br\/>Console.WriteLine(&quot;a is not equal to 0, b is greater than or equal to 10, and c is true.&quot;);<br\/>}<br\/>else<br\/>{<br\/>Console.WriteLine(&quot;a is not equal to 0, b is greater than or equal to 10, and c is false.&quot;);<br\/>}<br\/><br\/>\/\/ Some more code is executed here<br\/>}<br\/>else<br\/>{<br\/>Console.WriteLine(&quot;a is not equal to zero, and b is less than 10.&quot;);<br\/>}<\/pre><p>In the above example, the line \"a is not equal to 0, b is greater than or equal to 10, and c is true.\" will be written to the C# console. Tracing through the code execution order, our first condition to check is <em>if (a == 0)<\/em>. As <em>a<\/em> has been given a value of 2, which is not 0, this <em>if<\/em> statement's Boolean expression is false so control moves to its corresponding <em>else<\/em> statement.<\/p><p>This <em>else<\/em> statement's code block is an <em>if<\/em> statement so its condition is now checked.  Here the test is <em>if (b >= 10)<\/em> which evaluates to true as <em>b<\/em> has been given a value of 10. The program then moves into this <em>if<\/em> statement's code block.<\/p><p>While moving through the current code block another <em>if<\/em> statement is executed. Here the test is <em>if (c)<\/em> which evaluates to true as <em>c<\/em> has been given a value of true. This <em>if<\/em> statement's code block is executed which writes a line to the C# console.<\/p><\/div><a class=\"dest\" id=\"selection-statements-6\"><\/a>&nbsp;<div class=\"accent\"><h1>Performance Considerations<\/h1><p>Where possible, in order to improve our game's performance, we want to put some thought into the order of our <em>if-else<\/em> statements. If we know that one <em>if<\/em> statement's expression will be true more often than the other <em>if<\/em> statements in the same chain, then we should place that <em>if<\/em> statement at the start of the chain. Doing this will cause it's code block to be executed right away and the remainder of the <em>if<\/em> statements in the chain will be skipped over.<\/p><\/div><a class=\"dest\" id=\"selection-statements-7\"><\/a>&nbsp;<div class=\"accent\"><h1>Switch Statement<\/h1><p>A <em>switch<\/em> statement determines which block of code will execute based on a given value and a series of predefined switch sections. Each switch section begins with the <em>case<\/em> which also defines the value it will execute for, and ends with a <em>break<\/em> statement. The following example illustrates the basics of the <em>switch<\/em> statement:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">int switchValue = 2;<br\/><br\/>switch(switchValue)<br\/>{<br\/>case 0:<br\/>Console.WriteLine(&quot;The passed in switch value is 0&quot;);<br\/>break;<br\/><br\/>case 1:<br\/>Console.WriteLine(&quot;The passed in switch value is 1&quot;);<br\/>break;<br\/><br\/>case 2:<br\/>Console.WriteLine(&quot;The passed in switch value is 2&quot;);<br\/>break;<br\/><br\/>case 3:<br\/>Console.WriteLine(&quot;The passed in switch value is 3&quot;);<br\/>break;<br\/>}<\/pre><p>In the above example, the passed in <em>switchValue<\/em> variable is checked against four possible constant values, each defined with the <em>case<\/em> statement. The <em>switch<\/em> looks up which <em>case<\/em> statement will handle the given value and executes the code between the appropriate <em>case<\/em> and <em>break<\/em> statements. In this specific example control will pass to the <em>case 2<\/em> code block.<\/p><p>If none of the available <em>case<\/em> statements match the given value (such as the switchValue above being equal to 4) then none of the code within the <em>switch<\/em> statement is executed and control continues to the code that follows the <em>switch<\/em> code block.<\/p><h2>Default Block<\/h2><p>To handle the case where none of the available <em>case<\/em> statements will handle the given <em>switch<\/em> value we may make use of the special <em>default<\/em> statement. All code that is between matching <em>default<\/em> and <em>break<\/em> statements will be executed when none of the given <em>case<\/em> statements will do. Expanding upon the above example:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">int switchValue = 4;<br\/><br\/>switch(switchValue)<br\/>{<br\/>case 0:<br\/>Console.WriteLine(&quot;The passed in switch value is 0&quot;);<br\/>break;<br\/><br\/>case 1:<br\/>Console.WriteLine(&quot;The passed in switch value is 1&quot;);<br\/>break;<br\/><br\/>case 2:<br\/>Console.WriteLine(&quot;The passed in switch value is 2&quot;);<br\/>break;<br\/><br\/>case 3:<br\/>Console.WriteLine(&quot;The passed in switch value is 3&quot;);<br\/>break;<br\/><br\/>default:<br\/>Console.WriteLine(&quot;None of the given case statements are able to handle the given value&quot;);<br\/>break;<br\/>}<\/pre><p>In the above example, the <em>default<\/em> code block will be executed as none of the defined <em>case<\/em> statements can handle the given value of 4.<\/p><h2>Strings<\/h2><p>In addition to working with numbers, a <em>switch<\/em> statement may operate on a given string.  For example:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">string color = &quot;green&quot;;<br\/><br\/>switch(color)<br\/>{<br\/>case &quot;red&quot;:<br\/>Console.WriteLine(&quot;The color red was chosen.&quot;);<br\/>break;<br\/><br\/>case &quot;green&quot;:<br\/>Console.WriteLine(&quot;The color green was chosen.&quot;);<br\/>break;<br\/><br\/>case &quot;blue&quot;:<br\/>Console.WriteLine(&quot;The color blue was chosen.&quot;);<br\/>break;<br\/><br\/>default:<br\/>Console.WriteLine(&quot;An unknown color was chosen.&quot;);<br\/>break;<br\/>}<\/pre><p>In the above example, the <em>case \"green\"<\/em> code block will be executed as it matches the passed in <em>switch<\/em> value.<\/p><\/div><!--page:~~selection-statements-reference-text~~-->","title":"Reference Material"},{"bIsChecked":true,"exercise":".\/exercise\/selection-statements.zip","instructions":"<h1>Goal<\/h1><p>In this Exercise, we'll be combining <em>switch<\/em>, <em>if<\/em>, <em>if-else<\/em>, <em>else-if<\/em> and nested <em>if-else<\/em> statements to create a command system for a ship. The available commands will be Patrol (the ship will slowly move vertically up and down), Cloak (the ship will stop moving and disappear, or reappear the next time the command is issued), and Engage (the ship will zip across the screen at warp speed).<\/p><p><img src=\".\/images\/SelectionStatementsPreview.jpg\" alt=\"SelectionStatementsPreview\" width=\"1275\" height=\"717\" class=\"img-responsive aligncenter size-full wp-image-2948\" \/><\/p><h1>Steps<\/h1><p>All work will be done within the SelectionStatementsExercise class.<\/p><ol><li>Build and Run the Exercise. The Exercise should build successfully and display a spaceship in the middle of the screen. (<a href='.\/simulation\/SelectionStatements_1\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><li>In <em>Focus Area 1<\/em>, create <em>if<\/em> statements that will check for certain keys being down. The keyboard state calls have been provided as comments in the Focus Area.<ol class=\"alpha\"><li>If the Key P is down, check if the Key P was up in the <code>_oldKeyboardState<\/code>. If it was, then check if the <code>_currentAction<\/code> is equal to \"Patrol.\" If it is, then set <code>_currentAction<\/code> to an empty string. If not, then set <code>_shipSpeed<\/code> to 10.0, set <code>_shipDirection<\/code> to <code>_shipSpeed<\/code>, and set the <code>_currentAction<\/code> to \"Patrol.\"<\/li><li>If the Key C is down, check if the Key C was up in the <code>_oldKeyboardState<\/code>. If it was, then set the <code>_currentAction<\/code> to \"Cloak.\"<\/li><li>If the Key E is down, check if the Key E was up in the <code>_oldKeyboardState<\/code>. If it was, then check if the <code>_currentAction<\/code> is \"Engage.\" If it is, then clear the <code>_currentAction<\/code>. If not, then set <code>_shipSpeed<\/code> to 100.0, set <code>_shipDirection<\/code> to <code>_shipSpeed<\/code> multiplied by -1.0, and set the <code>_currentAction<\/code> to \"Engage.\"<\/li><\/ol><\/li><li>This step is optional and allows us to verify our code is correct up to this point. Set Breakpoints inside each check for if a Key is down. Build and Run the Exercise. The Exercise should Build successfully and display a spaceship in the middle of the screen. (<a href=\".\/simulation\/SelectionStatements_2\/index.html\" target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<ol class=\"alpha\"><li>Pause the debug session and set a watch for <code>_currentAction<\/code>, then resume the debug session (see the Simulation for details on how to do this).<\/li><li>Step through the code and use the watch that we set to verify that <code>_currentAction<\/code> is set to \"Patrol\" when P is pressed, and set to \"\" when pressed a second time.<\/li><li>Step through the code and use the watch that we set to verify that <code>_currentAction<\/code> is set to \"Cloak\" when C is pressed.<\/li><li>Step through the code and use the watch that we set to verify that <code>_currentAction<\/code> is set to \"Engage\" when E is pressed, and set to \"\" when pressed a second time.<\/li><li>Stop the debug session.<\/li><\/ol><\/li><li>In <em>Focus Area 2<\/em>, create a switch statement for <code>_currentAction<\/code> and a case for each possible action.<ol class=\"alpha\"><li>The \"Patrol\" case should make the ship moving slowly up and down the Y axis. If <code>_ship.Position.Y<\/code> is greater than or equal to <code>_patrolArea<\/code>, then set <code>_shipDirection<\/code> to <code>_shipSpeed<\/code> multiplied by -1.0f. Otherwise, if <code>_ship.Position.Y<\/code> is less than or equal to <code>_patrolArea<\/code> multiplied by -1.0f, then set <code>_shipDirection<\/code> to <code>_shipSpeed<\/code>. Outside of the selection statement, set the ship's Y position using the formula: ship's current Y position + deltaSeconds * the ship's direction. <\/li><li>The \"Cloak\" case should make the ship disappear and reappear. If the ship is visible, then it should be made invisible and the current action cleared out. Otherwise, it should make the ship visible and the current action should be cleared out.<\/li><li>The \"Engage\" case should make the ship fly across the screen at warp speed and wrap back around from the other side when it goes off the screen. If <code>_ship.Position.X<\/code> is less than <code>_warpArea<\/code>, then change the ship's position back to the other side of the screen with <code>_ship.SetPosition(100.0f, _ship.Position.Y)<\/code>. Otherwise, the ship's X position should be determined using the formula: ship's current X position + deltaSeconds * the ship's direction. <\/li><\/ol><\/li><li>Build and Run the Exercise. The Exercise should Build successfully and display a spaceship in the middle of the screen. The following inputs should function as described: (<a href=\".\/simulation\/SelectionStatements_3\/index.html\" target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<ol class=\"alpha\"><li>Pressing the P key should make the ship move slowly up and down vertically within the window. Pressing the P key a second time should make it stop.<\/li><li>Pressing the C key should make the ship disappear. Pressing the C Key a second time should make it reappear.<\/li><li>Pressing the E key should make the ship fly across the screen quickly toward the left side of the window. When the ship moves off screen on the left side, it should return from the right side and continue on to the left. Pressing the E key a second time should make it stop.<\/li><\/ol><\/li><\/ol><h1>Rubric<\/h1><ul><li>3 points for demonstrating breakpoints for P, C, and E in step 3.<\/li><li>3 points for satisfying all conditions in step 5.<\/li><\/ul><h1>Code Help<\/h1>        <!--CodeHelp: SpriteTexture-->        <p><strong>SpriteTexture<\/strong> &#8211; This is a utility class responsible for managing the content and processing of a Sprite's texture.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Create a new SpriteTexture and load its content<br\/>SpriteTexture texture = new SpriteTexture(&quot;Graphics\\\\moon&quot;);<br\/>texture.LoadContent(_contentManager);<br\/><\/pre><p><\/p><!--CodeHelp: Sprite-->        <p><strong>Sprite<\/strong> &#8211; This is a utility class with several sub-systems which allow for simple image rendering. With only a few method calls, a Sprite can load a texture, render, and move around. <\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Create a new SpriteTexture and load its content<br\/>SpriteTexture texture = new SpriteTexture(&quot;Graphics\\\\moon&quot;);<br\/>texture.LoadContent(_contentManager);<br\/><br\/>\/\/ Declare a new Sprite on layer 1<br\/>Sprite mySprite = new Sprite(1);<br\/><br\/>\/\/ Set the size of the sprite to 10 by 10<br\/>mySprite.SetSize(10.0f, 10.0f);<br\/><br\/>\/\/ Set the Sprite&#039;s position to the center of the screen<br\/>mySprite.SetPosition(0.0f, 0.0f);<br\/><br\/>\/\/ Set the Sprite&#039;s rotation, in radians.<br\/>mySprite.SetRotation(3.14159f);<br\/><br\/>\/\/ Set the sprite texture<br\/>mySprite.SetSpriteTexture(texture);<br\/><br\/>\/\/ Set the color tint of the Sprite to red<br\/>mySprite.SetTint(Color.Red);<br\/><\/pre><p><\/p><!--CodeHelp: SpriteManager-->        <p><strong>SpriteManager<\/strong> &#8211; SpriteManager is a utility class which is responsible for sorting, updating, and rendering sprites.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Create a new Sprite<br\/>Sprite mySprite = new Sprite();<br\/><br\/>\/\/ In order for mySprite to render and update, it MUST be added to _spriteManager<br\/>_spriteManager.AddSprite(mySprite);<br\/><br\/>\/\/ Update the sprites. Takes in a GameTime as argument<br\/>_spriteManager.UpdateSprites(time);<br\/><br\/>\/\/ Render the sprites. Takes in a GraphicsDevice and Camera for arguments<br\/>_spriteManager.RenderSprites(_graphicsDevice, DefaultCamera);<br\/><\/pre><p><\/p><!--CodeHelp: Module--><p><strong>Module<\/strong> &#8211; Module is a custom class written for this course. It is wrapped in a dynamic-link library, so we do not have to worry about adding to it:<\/p><ul><li>_graphicsDevice – An XNA\/MonoGame GraphicsDevice. This is used in SpriteManager's rendering methods. It is already initialized for us and we simply need to know its name and where to use it.<\/li><li>_contentManager – An XNA\/MonoGame ContentManager. This is used in SpriteTexture's texture methods. It is already initialized for us and we simply need to know its name and where to use it.<\/li><li>DefautCamera – A simple Camera object which manages our game's projection and view. It is already initialized for us and we simply need to know its name and where to use it.<\/li><\/ul><p><\/p><!--page:~~selection-statements-exercise~~-->","link":"exercise","mod":"selection-statements","movie":null,"name":"selection-statements","promptfile":null,"prompts":null,"reference":null,"text":null,"title":"Exercise"}]}],"title":"Intro to Programming with C#"},{"bIsChecked":true,"description":"Continue to build your programming skills by exploring more complex commands.","image":"VSOpen-1024x544.png","modules":[{"bIsChecked":true,"name":"basic-logic","title":"Basic Logic","topics":[{"bIsChecked":true,"exercise":null,"instructions":null,"link":null,"mod":null,"movie":".\/video\/Course2-csharp-primer-arc-basic_logic-overview.mp4","name":"Overview","promptfile":null,"prompts":null,"reference":"basic-logic-1","text":null,"title":"Overview"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":null,"mod":null,"movie":".\/video\/Course2-csharp-primer-arc-basic_logic-complex-boolean-equations.mp4","name":"Boolean Equations","promptfile":null,"prompts":null,"reference":"basic-logic-2","text":null,"title":"Complex Boolean Equations"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":null,"mod":null,"movie":".\/video\/Course2-csharp-primer-arc-basic_logic-short_circuiting.mp4","name":"Short Circuiting","promptfile":null,"prompts":null,"reference":"basic-logic-3","text":null,"title":"Short Circuiting"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":null,"mod":null,"movie":null,"name":"Reference","promptfile":null,"prompts":null,"reference":null,"text":"<a class=\"dest\" id=\"basic-logic-1\"><\/a><div class=\"accent\"><h1>Overview<\/h1><p>A term that can be heard over and over again in the game industry is <em>game logic<\/em>, but what exactly is that? When a programmer refers to game logic they're referring to a section, or sections, of code that make decisions based on varying inputs that affect what happens in the game. Logic controls everything from clearing checkpoints in a game to controlling how NPCs behave. Writing logic consists of making use of several different operators and concepts, many of which we've already learned. Now that we're familiar with using selection statements and logical operators we'll throw a few more operators into the mix that allow us to create slightly more complex logic.<\/p><h2>Operators<\/h2><p>The first operator to add to our toolbox is the Conditional AND. This operator will only return true if both its left and right operands are true.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>bool a = true;<br\/>bool b = false;<br\/><br\/>if(a &amp;&amp; b)<br\/>{<br\/>Console.WriteLine(&quot;Both a and b are true!&quot;);<br\/>}<br\/><\/pre><p>In the case of the example above the message of \"Both a and b are true!\" would never be printed. First a would be checked if it was true and then b. Since b is false that means the condition fails and returns false. The same can be done with expressions as well, for example:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>int a = 5;<br\/>int b = 0;<br\/><br\/>if(a &lt; 6 &amp;&amp; b &gt; 1)<br\/>{<br\/>Console.WriteLine(&quot;a is less than 6 and b is greater than 1!&quot;);<br\/>}<br\/><\/pre><p>Again, first the expression on the left is tested followed by testing the expression on the right of the conditional AND operator. Due to the expression on the right being false still the message is not printed to the output tab in Visual Studio.<\/p><p>The next operator is very similar to the conditional AND, but allows for slightly different results. The conditional OR differs from the AND in that it will return true if at least one of the operands is true.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>bool a = false;<br\/>bool b = true;<br\/><br\/>if(a || b)<br\/>{<br\/>Console.WriteLine(&quot;Either a or b are true!&quot;);<br\/>}<br\/><\/pre><p>In this example we would see the the message \"Either a or b are true!\" printed to Visual Studio's output tab. When this if statement is executed the program first would check whether a was true or not. Since it was not true, this meant that the code execution could move on to the second operand and test it. This particular operand was true resulting in printing the message to the output tab. Just as with conditional AND, conditional OR can be used with expressions as well. In the example below we will again see the left expression failing while the right expression succeeds resulting in execution of the if statement's body.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>int a = 6;<br\/>int b = 1;<br\/><br\/>if(a &gt; 7 || b &lt; 4)<br\/>{<br\/>Console.WriteLine(&quot;Either a or b are true!&quot;);<br\/>}<br\/><\/pre><p>The final addition to our operator toolbox is the unary NOT operator. The unary NOT, also known as logical NOT, is useful in that it will return true if its operand is false and false if its operand is true. <\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>bool a = true;<br\/><br\/>if(!a)<br\/>{<br\/>Console.WriteLine(&quot;a is false!&quot;);<br\/>}<br\/><\/pre><p>In the above example we see the NOT being used resulting in a message once again not being printed to the output tab. The NOT can also be used as a handy way to toggle a bool on and off. All we have to do is assign the variable to NOT itself. For example:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>bool a = true;<br\/><br\/>a = !a;<br\/><br\/>if(!a)<br\/>{<br\/>Console.WriteLine(&quot;a is false!&quot;);<br\/>}<br\/><\/pre><p>In this instance the message \"a is false!\" would have been written to the output tab. These operators can be used alone or together along with other operators to create more complex logic statements and more impressive games.<\/p><div style=\"text-align: center;\"><ul class=\"anchorGroup\" style=\"text-align: left; display: inline-block;\"><li><a class=\"ankor\" href=\"#basic-logic-2\">Boolean Equations<\/a><\/li><li><a class=\"ankor\" href=\"#basic-logic-3\">Short Circuiting<\/a><\/li><\/ul><\/div><\/div><a class=\"dest\" id=\"basic-logic-2\"><\/a>&nbsp;<div class=\"accent\"><h1>Compound Boolean Expressions<\/h1><p>When we combine multiple expressions with conditional operators we get what is called Compound Boolean Expressions. These expressions are typically used to create gates that will prevent sections of code from being executed unless a very specific case is met. Here is an example of a compound boolean expression:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>bool a = true;<br\/>bool b = true;<br\/>bool c = false;<br\/><br\/>if(a &amp;&amp; b &amp;&amp; c)<br\/>{<br\/>Console.WriteLine(&quot;a, b, and c are true!&quot;);<br\/>}<br\/><\/pre><p>In the above example the code execution makes it all the way to c in the conditional before returning false and not printing a message to the screen. The same example could be done with the conditional OR but would get totally different results.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>bool a = true;<br\/>bool b = true;<br\/>bool c = false;<br\/><br\/>if(a || b || c)<br\/>{<br\/>Console.WriteLine(&quot;Either a, b, or c are true!&quot;);<br\/>}<br\/><\/pre><p>Here we've replaced the AND's with OR's. This particular code example would print it's message to the output tab in Visual Studio due to the first operand it encounters is true. With OR, once one expression evaluates to true the rest are irrelevant.<\/p><p>One of the most common uses of compound expressions is to prevent code from becoming difficult to read and to cut down on unnecessary execution of code. Take a look at this example of nested statements.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>if(a)<br\/>{<br\/>if(b)<br\/>{<br\/>if(c)<br\/>{<br\/>if(d)<br\/>{<br\/>Console.WriteLine(&quot;Deeply rooted message&quot;);<br\/>}<br\/>}<br\/>}<br\/>}<br\/><\/pre><p>It's a little messy to read, but we can plainly see that the message is only print if a, b, c, and d are all true. Now let's take a look at what that looks like as a compound expression.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>if(a &amp;&amp; b &amp;&amp; c &amp;&amp; d)<br\/>{<br\/>Console.WriteLine(&quot;Not deeply rooted message&quot;);<br\/>}<br\/><\/pre><p>That's a lot easier to read than the previous example. With a quick glance we can see that this message will only ever print out if all of these variables are true, otherwise nothing will happen. Not only does compound expressions make code more readable, but it also allows for more efficient code by giving us the ability to short circuit a selection statement by placing the most likely case to fail early in the expression.<\/p><\/div><a class=\"dest\" id=\"basic-logic-3\"><\/a>&nbsp;<div class=\"accent\"><h1>Short Circuiting<\/h1><p>When using compound Boolean expressions, C# introduces a short circuit optimization where it will check just enough of the expression to determine if it is true or false. In the example above, if <em>a<\/em> is found to be false then the whole expression will be considered false without needing to check <em>b<\/em> or <em>c<\/em>.<\/p><p>It is important to be aware of this optimization, especially if methods are called or other work is performed as part of the <em>if<\/em> statement. To demonstrate this, the following example calls three different methods as part of the <em>if<\/em> statement's Boolean expression, where each method is expected to return either true or false.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">if ( methodA() &amp;&amp; methodB() &amp;&amp; methodC() )<br\/>{<br\/>\/\/ Code block is only executed if methodA(), methodB(), and methodC() all return true.<br\/>}<\/pre><p>In this example, if <em>methodA()<\/em> were to return false then the C# short circuit optimization will not call <em>methodB()<\/em> or <em>methodC()<\/em> to check their returned values. If our code relies on those two methods always being called at this time then we will need to rewrite our code to take the short circuit optimization into account. One possible solution would be to first call all of the methods and then test their returned results:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">bool a = methodA();<br\/>bool b = methodB();<br\/>bool c = methodC();<br\/><br\/>if (a &amp;&amp; b &amp;&amp; c)<br\/>{<br\/>\/\/ Code block is only executed if a, b, and c are true.<br\/>}<\/pre><p>In this case all of the methods are first called, and then we check their results. This ensures that the code is executed as we require.<\/p><p>Let's take a look at another example of the short circuit optimization, this time combining the OR logical operator:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">if (a &amp;&amp; b || c)<br\/>{<br\/>\/\/ Code block is only executed if either a and b are true, or c is true.<br\/>}<\/pre><p>In this example, if <em>a<\/em> is found to be false then <em>b<\/em> is never checked. However, <em>c<\/em> will then be checked if it is true. Another possible example of how the compund Boolean expression is evaluated is if <em>a<\/em> is found to be true. In this case then <em>b<\/em> would be checked. If <em>b<\/em> were found to be false, then <em>c<\/em> would be checked. However, if <em>b<\/em> were found to be true then <em>c<\/em> would never be checked. It is important to understand how C# will short circuit compound Boolean expressions so that we know how our code will flow.<\/p><p>We can use this short circuiting to our advantage to skip executing costly methods when they are not necessary. For example, before checking if a text string contains certain words we may first check that the varible contains anything at all:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">if ( testString.Length &gt; 0 &amp;&amp; (testString.Contains(&quot;test&quot;) || testString.Contains(&quot;value&quot;)) )<br\/>{<br\/>\/\/ Code block is only executed if testString is one or more characters long, and contains<br\/>\/\/ either the text &quot;test&quot; or &quot;value&quot;.<br\/>}<\/pre><p>In the above example, if the variable <em>testString<\/em> is empty (it has a length of 0) then the rest of the checks for the two words are skipped. This saves on the time it takes to perform the actual checks when they are not necessary.<\/p><\/div><!--page:~~basic-logic-reference-text~~-->","title":"Reference Material"},{"bIsChecked":true,"exercise":".\/exercise\/basic-logic.zip","instructions":"<h1>Goal<\/h1><p>In this Exercise we will use Boolean operators to create compound expressions and re-factor some selection statements.<br \/><br\/><img src=\".\/images\/BasicLogicResult.jpg\" alt=\"BasicLogicResult\" width=\"1283\" height=\"716\" class=\"aligncenter img-responsive size-full wp-image-3245\" \/><\/p><h1>Steps<\/h1><p>All work for this Exercise will be done in the BasicLogicExercise class.<\/p><ol><li>Build and Run the Exercise without modification. Light up the control panel by pressing keys Q, W, E, R, T, A, S, D, F, G, Z, X, C, V, and B.  Then press the space bar to start the countdown clock. (<a href='.\/simulation\/BasicLogic_1\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><li>In <em>Focus Area 1<\/em> perform the following on each of the <code>\/\/ outer<\/code> selection statements:<ol><li>Convert the <code>\/\/ inner<\/code> selection statement into one line of code utilizing a single Boolean operation.<\/li><li>Combine the <code>\/\/ middle<\/code> and <code>\/\/ outer<\/code> selection statements into a single selection statement using the appropriate Boolean operator.<\/li><\/ol><\/li><li>In <em>Focus Area 2<\/em> condense all of the <code>\/\/ nested<\/code> selection statements using Boolean operators into to a single selection statement. The <code>\/\/ outer<\/code> selection statement doesn't need to change.<\/li><li>In <em>Focus Area 3<\/em> condense the <code>\/\/ outer <\/code>selection statement by combining it with the nested selection statement and the appropriate Boolean operator. (<a href='.\/simulation\/BasicLogic_2\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><li>Repeat step 1. Your control panel should operate the same way as it did before your modifications.<\/li><\/ol><h1>Rubric<\/h1><ul><li>6 points for demonstrating the control pannel operating as it did prior to the selection statement changes.<\/li><\/ul><h1>Code Help<\/h1>        <!--CodeHelp: SpriteTexture-->        <p><strong>SpriteTexture<\/strong> &#8211; This is a utility class responsible for managing the content and processing of a Sprite's texture.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Create a new SpriteTexture and load its content<br\/>SpriteTexture texture = new SpriteTexture(&quot;Graphics\\\\moon&quot;);<br\/>texture.LoadContent(_contentManager);<br\/><\/pre><p><\/p><!--CodeHelp: Sprite-->        <p><strong>Sprite<\/strong> &#8211; This is a utility class with several sub-systems which allow for simple image rendering. With only a few method calls, a Sprite can load a texture, render, and move around. <\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Create a new SpriteTexture and load its content<br\/>SpriteTexture texture = new SpriteTexture(&quot;Graphics\\\\moon&quot;);<br\/>texture.LoadContent(_contentManager);<br\/><br\/>\/\/ Declare a new Sprite on layer 1<br\/>Sprite mySprite = new Sprite(1);<br\/><br\/>\/\/ Set the size of the sprite to 10 by 10<br\/>mySprite.SetSize(10.0f, 10.0f);<br\/><br\/>\/\/ Set the Sprite&#039;s position to the center of the screen<br\/>mySprite.SetPosition(0.0f, 0.0f);<br\/><br\/>\/\/ Set the Sprite&#039;s rotation, in radians.<br\/>mySprite.SetRotation(3.14159f);<br\/><br\/>\/\/ Set the sprite texture<br\/>mySprite.SetSpriteTexture(texture);<br\/><br\/>\/\/ Set the color tint of the Sprite to red<br\/>mySprite.SetTint(Color.Red);<br\/><\/pre><p><\/p><!--CodeHelp: SpriteManager--><p><strong>SpriteManager<\/strong> &#8211; SpriteManager is a utility class which is responsible for sorting, updating, and rendering sprites.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Create a new Sprite<br\/>Sprite mySprite = new Sprite();<br\/><br\/>\/\/ In order for mySprite to render and update, it MUST be added to _spriteManager<br\/>_spriteManager.AddSprite(mySprite);<br\/><br\/>\/\/ Update the sprites. Takes in a GameTime as argument<br\/>_spriteManager.UpdateSprites(time);<br\/><br\/>\/\/ Render the sprites. Takes in a GraphicsDevice and Camera for arguments<br\/>_spriteManager.RenderSprites(_graphicsDevice, DefaultCamera);<br\/><\/pre><p><\/p><!--page:~~basic-logic-exercise~~-->","link":"exercise","mod":"basic-logic","movie":null,"name":"basic-logic","promptfile":null,"prompts":null,"reference":null,"text":null,"title":"Exercise"}]},{"bIsChecked":true,"name":"number-systems","title":"Number Systems","topics":[{"bIsChecked":true,"exercise":null,"instructions":null,"link":null,"mod":null,"movie":".\/video\/Course2-csharp-primer-arc-numberSystems-overview.mp4","name":"Overview","promptfile":null,"prompts":null,"reference":"number-systems-1","text":null,"title":"Overview"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":null,"mod":null,"movie":".\/video\/Course2-csharp-primer-arc-numberSystems-binary.mp4","name":"Binary Numbers","promptfile":null,"prompts":null,"reference":"number-systems-4","text":null,"title":"Binary Numbers"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":null,"mod":null,"movie":".\/video\/Course2-csharp-primer-arc-numberSystems-hexidecimal.mp4","name":"Hexadecimal Numbers","promptfile":null,"prompts":null,"reference":"number-systems-5","text":null,"title":"Hexadecimal Numbers"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":null,"mod":null,"movie":".\/video\/Course2-csharp-primer-arc-numberSystems-bitwiseOperators.mp4","name":"Bitwise Operators","promptfile":null,"prompts":null,"reference":"number-systems-6","text":null,"title":"Bitwise Operators"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":null,"mod":null,"movie":".\/video\/Course2-csharp-primer-arc-numberSystems-bitMasking.mp4","name":"Bit Masking","promptfile":null,"prompts":null,"reference":"number-systems-7","text":null,"title":"Bit Masking"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":null,"mod":null,"movie":null,"name":"Reference","promptfile":null,"prompts":null,"reference":null,"text":"<a class=\"dest\" id=\"number-systems-1\"><\/a><div class=\"accent\"><h1>Overview<\/h1><p>In this Module, we'll explore different systems of counting which are also known as number systems. In life, we are accustomed to counting using the Decimal System. This is how we've learned to count items in our world. We have 10 fingers and 10 toes. However, computers interpret these numbers and count differently than we do. At the very lowest level, a computer interprets everything using the Binary System. In binary, all values are represented as a series of 1's and 0's. While we look at the sequence of 10 and interpret initially as the value ten, a computer would see the same sequence and interpret it as the value two. If we were to actually write out the value of ten in binary form it would like this: 1010. Of course, this would cause difficulty in programming if we were to have to write everything in binary form. This is why we have high level languages like C# and compilers like Visual Studio, so that we can write code using the decimal system we are comfortable with and let the computer convert it under the hood.<\/p><p>While the majority of the time we would be using the decimal system when programming, there are occasionally cases in which we would want to use a different number system. This would often be due to a need to manipulate individual bits of a value as a method of storing certain information more efficiently. For this purpose, we have the Hexadecimal System, also known as Hex for short. Hex is a happy medium between decimal and binary. The way in which digits are added to a value when counting in hexadecimal are similar to binary, but the digits used are similar to decimal making for a number that is more human readable than binary. For example, our number sequence of 10 in hexadecimal would actually be the value of sixteen. The value of ten would actually be written as A in hex.<\/p><p>Understanding these systems can help us better understand how a computer works under the hood. Now we can dive into each system in more detail to learn the why and how of 10 being able to represent 10, 2, or 16.<\/p><div style=\"text-align: center;\"><ul class=\"anchorGroup\" style=\"text-align: left; display: inline-block;\"><li><a class=\"ankor\" href=\"#number-systems-2\">Terminology<\/a><\/li><li><a class=\"ankor\" href=\"#number-systems-3\">Decimal Number System<\/a><\/li><li><a class=\"ankor\" href=\"#number-systems-4\">Binary Number System<\/a><\/li><li><a class=\"ankor\" href=\"#number-systems-5\">Hexadecimal Number System<\/a><\/li><li><a class=\"ankor\" href=\"#number-systems-6\">Working With Bits<\/a><\/li><li><a class=\"ankor\" href=\"#number-systems-7\">Bit Masking<\/a><\/li><\/ul><\/div><\/div><a class=\"dest\" id=\"number-systems-2\"><\/a>&nbsp;<div class=\"accent\"><h1>Terminology<\/h1><p><strong>nth power<\/strong> - This typically refers to manipulating a number exponentially. Raising the number 4 to the 2 power (4<sup>2<\/sup>) equates to 4x4, which is 16. 4<sup>3<\/sup> equates to 4x4x4, which is 64. <em><sup>nth<\/sup><\/em> is used when a value is going to be raised to an undefined power. What's important to note is that any value raised to the power of 0 will always be one. A value raised to the power of one equals itself.<\/p><p><strong>base<\/strong> - Number systems are defined by their base. Binary is base-2, decimal is base-10, and hexadecimal is base-16. We will cover this in detail later.<\/p><p><strong>Digits<\/strong> - Symbols used in combination to represent a numerical value. The base value of a number system represents the number of digits it uses. Decimal is base-10, which requires 10 digits (0,1,2,3,4,5,6,7,8,9). We will cover this in more detail later in this Reference. When combined, the position of each digit represents a specific value. The first digit holds the 1<sup>st<\/sup> place value. The 2<sup>nd<\/sup> digit holds the 10<sup>th<\/sup> place value. This goes keeps going as numerical values get larger.<\/p><p><strong>Bit<\/strong> - The most basic unit of information a computer can use.<\/p><p><strong>Most significant bit<\/strong> - The left most bit in a binary value.<\/p><p><strong>Least significant bit<\/strong> - The right most bit in a binary value.<\/p><p><strong>Literal<\/strong> - A fixed value in source code. Some languages do not support literal notation for all types. The following is a C# example of literals:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ String literal<br\/>string stringLiteral = &quot;Literal&quot;;<br\/><br\/>\/\/ Decimal literal<br\/>int decimalLiteral = 10;<br\/><br\/>\/\/ Hex literal<br\/>int hexLiteral = 0x17;<br\/><br\/>\/\/ Binary string. There is no binary literal in C#<br\/>string binary = &quot;0101&quot;;<br\/><\/pre><\/div><a class=\"dest\" id=\"number-systems-3\"><\/a>&nbsp;<div class=\"accent\"><h1>Decimal Number System<\/h1><p>The decimal number system is what we most commonly recognize from everyday life; in other words, normal counting is base 10. Decimal numbers are represented via the value and a subscript of 10.  For example, when specifying base, the number 213 would like this: 213<sub>10<\/sub>. Of course since most numbers in the world are base 10, we simply omit it. As mentioned in the terminology, each position in a series of digits represents a value which can be multiplied by a number to find the total result.<\/p><p>For example, the number 213 can be factored by significance into the following addends:<\/p><img class=\"aligncenter img-responsive\" src=\".\/images\/decimal_breakdown.jpg\" alt=\"DecimalBreakdown\" \/> <p style=\"text-align: center;\"><strong>Figure 1<\/strong> <em>213 Broken Down by Decimal Digit<\/em><\/p><p>Just like the counting you learned as child, most programming uses base 10 numbers. The following is a C# representation of some decimal values and operations:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Basic addition<br\/>int firstInteger = 200;<br\/>int secondInteger = 10;<br\/>int thirdInteger = 3;<br\/>int sum = firstInteger + secondInteger + thirdInteger;<br\/><br\/>\/\/ Prints 213 to output window<br\/>Console.WriteLine(&quot;Sum of values is: &quot; sum);<br\/><br\/>\/\/ Basic substraction<br\/>float floatingValue = 9.5f - 2.3f;<br\/><br\/>\/\/ Prints 7.2 to the output window<br\/>Console.WriteLine(&quot;Different is: &quot; floatingValue);<br\/><\/pre><\/div><a class=\"dest\" id=\"number-systems-4\"><\/a>&nbsp;<div class=\"accent\"><h1>Binary Number System<\/h1><p>Base 10 numbers are what we as humans use natively, but computers count using only two digits: 0 and 1. This is because at the finest grain implementation of memory, a computer knows if a single unit of memory is on or off. Most of the time, we can work in base 10 numbers and let the underlying system handle the conversion; however, there are some instances where understanding the computers native counting base is useful.<\/p><p>To understand how binary works, let's look at how to count to the number four in binary.<\/p><p>Zero in binary = 0. This is the same as decimal.<\/p><p>One in binary = 1. This is the same as decimal.<\/p><p>Two in binary = 10.<\/p><p>While it's tempting to call this number ten, that's not correct. It's a binary two. Remember, we only have two digits to count, so instead of the number two, we move over one significant digit to the left and increment it by one the same way you would when you count from the number nine to ten.<\/p><p>Three in binary = 11.<\/p><p>To count to four, we have again run out of digits so we must add another significant digit. Four in binary = 100.<\/p><p>Since we only have two digits, numbers get long much more quickly than in decimal.  For  example, the number is 11001. So how do we get to 25? The following is a factoring similar to the decimal example above, but using a base of 2 rather than 10:<\/p><img class=\"aligncenter img-responsive\" src=\".\/images\/binary_breakdown.jpg\" alt=\"BinaryBreakdown\" \/> <p style=\"text-align: center;\"><strong>Figure 2<\/strong> <em>25 Broken Down by Binary Digit<\/em><\/p><p><\/p><p>Even though computers think in terms of zeroes and ones, most languages do not support binary numbers in literal form. The following code example shows how C# interprets a binary value in literal form:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ 27 is 11001 in binary form. Attempting to store that in a variable is actually interpreted as 11,011<br\/>int numericalValue = 011011;<br\/><br\/>\/\/ Printing numericalValue results in 11011. The zero is dropped and the value of 11011 is printed<br\/>Console.WriteLine(numericalValue);<br\/><\/pre><p><\/p><p>If we want to visualize 27 as a binary value in C#, we must convert an integer value using a specific base:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Store the decimal value<br\/>int decimalValue = 27;<br\/><br\/>\/\/ Use the Convert class&#039;s static method ToString.<br\/>\/\/ First parameter is the value to convert<br\/>\/\/ Second parameter is the base of the return value, which must be 2 for binary results<br\/>string binaryString = Convert.ToString(bigValue, 2);<br\/><br\/>\/\/ This will print &quot;11011&quot; to the output window.<br\/>Console.WriteLine(&quot;27 in binary form is: &quot; + binaryString);<br\/><\/pre><\/div><a class=\"dest\" id=\"number-systems-5\"><\/a>&nbsp;<div class=\"accent\"><h1>Hexadecimal Number System<\/h1><p>Binary is the foundation of computer counting; however, it's extremely error prone to write numbers in terms of zeroes and ones. As we mentioned above, typically we write code using base 10 numbers. Since computers ultimately work in terms of zeros and ones, there are some nifty and helpful computations we can do if we work in a counting system that is more similar to binary than decimal. Hexadecimal, which uses a base of sixteen numbers, is more similar to binary than decimal since sixteen is a base 2 number (16 = 2)<\/p><p>Hexadecimal, or just hex, is a base-16 number system. We do not see much hex used in everyday life and it can be considered more complex than decimal or binary number systems. The 16 different digits have a range of 0 – 9, followed by the letters A to F which represent the decimal values of 10 to 15. To list this out in order of ascending value: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. The common notation for a hex value is 0x__. For example, 0x9C.<\/p><p>Getting to a decimal number from hex is no different than other number systems. We simply rely on the base exponential of 16. For example, let's find the value of 0x1ED.<\/p><img class=\"aligncenter img-responsive\" src=\".\/images\/hex_breakdown.jpg\" alt=\"HexBreakdown\" \/> <p style=\"text-align: center;\"><strong>Figure 3<\/strong> <em>493 Broken Down by Hex Digit<\/em><\/p><p>Literal hex values tend to be well supported in multiple programming languages. C# can store literal hex values in variables, as well as conversion to other formats:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Store the value of 202 in hex form<br\/>byte hexValue = 0xCA;<br\/><br\/>\/\/ Store a decimal value<br\/>int decimal = 132;<br\/><br\/>\/\/ Convert 132 to a hex string<br\/>string hex = decimal.ToString(&quot;X&quot;);<br\/><br\/>\/\/ Convert the hex string back to decimal form<br\/>int newDecimal = int.Parse(hex, System.Globalization.NumberStyles.HexNumber);<br\/><\/pre><p>Common usage of the hex number system does not match the common usage of decimals. If we need to store the number of lives a player has, it makes far easier to read and use an integer as displayed in decimal form. In the end, a numerical value will not change based on the number system used. 10 in decimal form is equal to 1010 in binary form, which are both equal to 0xA in hex form. However, the reason to choose hex as the representation for a value of comes to light when we start considering security, memory, performance, and range.<\/p><p>Let's compare the numerical values for a string and how it can be represented:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Store a string<br\/>string myString = &quot;Hello World&quot;<br\/><br\/>string binaryString = &quot;&quot;;<br\/>string hexString = &quot;&quot;;<br\/><br\/>foreach (char ch in myString)<br\/>{<br\/>\/\/ Convert character to integer<br\/>int valueOfCh = (int)ch;<br\/><br\/>\/\/ Write the integer value of ch<br\/>Console.WriteLine(&quot;Value of &quot; + ch + &quot;: &quot; + valueOfCh);<br\/><br\/>\/\/ Convert the integer to base-10 (binary) and store it<br\/>result += Convert.ToString(valueOfCh, 2);<br\/><br\/>\/\/ Convert the integer to base-16 (hex) and store it<br\/>newResult += Convert.ToString(valueOfCh, 16);<br\/>}<br\/><br\/>Console.WriteLine(binaryString);<br\/>Console.WriteLine(hexString);<br\/><\/pre><p>The above code takes the string value of \"Hello World\" and prints out its values in the three separate number systems. The differences are quite dramatic:<\/p><p>Value of H: 72<br \/>Value of e: 101<br \/>Value of l: 108<br \/>Value of l: 108<br \/>Value of o: 111<br \/>Value of : 32<br \/>Value of W: 87<br \/>Value of o: 111<br \/>Value of r: 114<br \/>Value of l: 108<br \/>Value of d: 100<\/p><p>Binary version of string: 1001000110010111011001101100110111110000010101111101111111001011011001100100<\/p><p>Hex version of string: 48656c6c6f20576f726c64<\/p><p>As we can see, even a small string can contain a lot data depending on how it is used. Hex allows us to represent data in a more compact form, when compared to the other number systems.<\/p><p>When it comes to game development, though, the most common usage of hex is for bitmasks and bit manipulation. It is in this area that hex number systems really shine.<\/p><\/div><a class=\"dest\" id=\"number-systems-6\"><\/a>&nbsp;<div class=\"accent\"><h1>Working With Bits<\/h1><p>A bit is the smallest basic unit in computing, which can only have one of two values; 0 or 1. Suffice it to say, binary is the language of computers. We simply use higher level languages, such as C#, which are ultimately compiled down into machine code. In the end, everything operates on binary. We have heard of 16-bit consoles, 32 and 64 bit operating systems, etc. As an example, this is an eight bit value with all bits turned off: 00000000. If all of the bits were on, it would be 11111111.<\/p><p>How is this useful for us in game development? In programming, we can work with bits in such a way that our code is both small and fast. We can store values in hexadecimal form, then perform bitwise operators, bitshifting, and utilize bitmasks to get results.<\/p><p>To understand how bitwise operators function, we should quickly review what a numerical value looks like in the three main number systems. The value of 7 can be viewed as:<\/p><p>Decimal: 7<br \/>Hex: 0x7<br \/>Binary: 111<\/p><p>We are only interested in bits for these operators, so let's focus on binary. When we look at the binary representation of 7 (111), we can count three bits. However, in C# there are additional bits because of the primitivate data types. In code, we can store the value of 7 in an integer (int). Since an integer is actually 32 bits, there are additional bits: 00000000000000000000000000000111. Granted, all the bits not in use are zero, thus containing no value.<\/p><p>The first operator to cover is the bitwise NOT, expressed as ~. When applied to an integral value, this operator will flip all of the bits to their opposite value. All zeroes become ones and all ones become zeroes. In simple terms, ~ yields the opposite. Applying ~ to 7 results in an opposite value of -8 (-1000). <\/p><p>We would normally think the opposite of 7 is -7, but in the realm of bits it's actually -8. Remember, the Two's Complement format is obtained by negating each bit of the value, then adding 1 to the value. The NOT operator got to the -7 value, then \"added\" one more to the value to get -8. Let's see how that looks in code:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Store 7 in an integer<br\/>int intValue = 7;<br\/><br\/>\/\/ Convert the integer to a binary string<br\/>string result = Convert.ToString(intValue, 2);<br\/><br\/>\/\/ Print the result: 111<br\/>Console.WriteLine(result);<br\/><br\/>\/\/ NOT the original value<br\/>int newValue = ~-intValue;<br\/><br\/>\/\/ Convert the NOT value to binary string<br\/>result = Convert.ToString(newValue, 2);<br\/><br\/>\/\/ Print the integral value: -8<br\/>Console.WriteLine(newValue);<br\/><br\/>\/\/ Print the result: 11111111111111111111111111111000<br\/>Console.WriteLine(result);<br\/><\/pre><p><\/p><p>The bitwise AND operator, expressed as &#038;, takes two binary values of the same length and compares their bits. The result of the comparison will have a 1 in a position if the first and second bit had a value of 1. For example, 0101 &#038; 0011 = 0001. If we stack the binary values vertically, it will make more sense:<\/p><p>0101<br \/>0011<br \/>0001<\/p><p>Notice how neither of the values has a 1 in the same position until the smallest digit on the right. In C#, we can mix the number systems up and perform bitwise operations:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Store the value of 248 (11111000)<br\/>int firstValue = 0xf8;<br\/><br\/>\/\/ Store the value of 63 (00111111)<br\/>int secondValue = 0x3f;<br\/><br\/>\/\/ AND the two together<br\/>int result = firstValue &amp; secondValue;<br\/><br\/>\/\/ 11111000<br\/>\/\/ 00111111<br\/>\/\/    &amp;<br\/>\/\/ 00111000<br\/><br\/>\/\/ Print the result in hex format: 0x38<br\/>Console.WriteLine(&quot;0x{0:x}&quot;, result);<br\/><br\/>\/\/ Print the result in binary format<br\/>Console.WriteLine(Convert.ToString(result, 2));<br\/><\/pre><p>The bitwise OR operator, expressed as |, takes two binary values of the same length and compares their bits. The result of the comparison will be 1 in a position if either of the values had a 1. For example, 0101 | 0011 = 0111. Stacking the binary values vertically will make it easier:<\/p><p>0101<br \/>0011<br \/>0111<\/p><p>In the largest value position, furthest to the left, neither bit is 1. However, the rest of the bits have 1 in either or both of the binary values. Let's see it in C#:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Store the value of 248 (11111000)<br\/>int firstValue = 0xf8;<br\/><br\/>\/\/ Store the value of 63 (00111111)<br\/>int secondValue = 0x3f;<br\/><br\/>\/\/ OR the two together<br\/>int result = firstValue | secondValue;<br\/><br\/>\/\/ 11111000<br\/>\/\/ 00111111<br\/>\/\/    |<br\/>\/\/ 11111111<br\/><br\/>\/\/ Print the result in hex format: 0xff<br\/>Console.WriteLine(&quot;0x{0:x}&quot;, result);<br\/><br\/>\/\/ Print the result in binary format<br\/>Console.WriteLine(Convert.ToString(result, 2));<br\/><\/pre><p>Finally, we have the bitwise XOR operator, expressed as ^. This expression takes two binary values of the same length and compares their bits. The result of the comparison will be 1 in a position if one of the values has a 1. If compared bits both have 1 or 0, the resulting bit will be 0. For example, 0101 ^ 0011 = 0110. Let's see that vertically for comparison reasons<\/p><p>0101<br \/>0011<br \/>0110<\/p><p>The two middle bits of the result are 1 because only one of the compared bits had that value. Let's dive back into C# to see the result:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Store the value of 248 (11111000)<br\/>int firstValue = 0xf8;<br\/><br\/>\/\/ Store the value of 63 (00111111)<br\/>int secondValue = 0x3f;<br\/><br\/>\/\/ XOR the two together<br\/>int result = firstValue ^ secondValue;<br\/><br\/>\/\/ 11111000<br\/>\/\/ 00111111<br\/>\/\/    ^<br\/>\/\/ 11000111<br\/><br\/>\/\/ Print the result in hex format: 0xc7<br\/>Console.WriteLine(&quot;0x{0:x}&quot;, result);<br\/><br\/>\/\/ Print the result in binary format<br\/>Console.WriteLine(Convert.ToString(result, 2));<br\/><\/pre><\/div><a class=\"dest\" id=\"number-systems-7\"><\/a>&nbsp;<div class=\"accent\"><h1>Bit Masking<\/h1><p>With all these bits, conversions, operators, and printing, we have to wonder how this fits into game development. As mentioned previously, hex values tend to have a different purpose when compared to decimal usage. Let's say we want to debug our game's rendering. We want to toggle the ability to render joints, collision boxes, positions, and other metrics. We may want to toggle some, none, or all of them on. We also want to use unique values and easy to read identifiers. Enumerations with hex values are perfect for this:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">enum DebugOption<br\/>{<br\/>DEBUG_INVALID,<br\/>DEBUG_METRICS    = 0x1,<br\/>DEBUG_JOINTS     = 0x2,<br\/>DEBUG_COLLISION  = 0x4,<br\/>DEBUG_POSITION   = 0x8,<br\/>};<br\/><\/pre><p>With an enumeration, we can create a bitmask to track our current debug render state:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">DebugOption debugMask;<br\/><\/pre><p>During our game, we may want to enable joint and position rendering. However, we can't do this:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ This does not work<br\/>debugMask = debugMask + DebugOption.DEBUG_JOINTS + DebugOption.DEBUG_POSITION<br\/><\/pre><p>What we should use are bitwise operations. To enable joints and positions, we do the following:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Set the bitmask to match joints and position<br\/>debugMask = debugMask | DebugOption.DEBUG_JOINTS | DebugOption.DEBUG_POSITION;<br\/><\/pre><p>Now, anytime we need to check to see what kind of debugging is enabled, we can use simple if checks:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Set the mask<br\/>debugMask = debugMask | DebugOption.DEBUG_JOINTS | DebugOption.DEBUG_POSITION;<br\/><br\/>\/\/ THIS WILL NOT PASS<br\/>if ((debugMask &amp; DebugOption.METRICS) == DebugOption.METRICS)<br\/>{<br\/>RenderMetrics();<br\/>}<br\/><br\/>\/\/ THIS WILL PASS<br\/>if ((debugMask &amp; DebugOption.DEBUG_JOINTS) == DebugOption.DEBUG_JOINTS)<br\/>{<br\/>RenderJoints();<br\/>}<br\/><br\/>\/\/ THIS WILL PASS<br\/>if ((debugMask &amp; DebugOption.DEBUG_POSITION) == DebugOption.DEBUG_POSITION)<br\/>{<br\/>RenderPosition();<br\/>}<br\/><\/pre><p>If we need to turn off a an option we would negate it as in the following example:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>debugMask = debugMask &amp; ~DebugOption.DebugOption.METRICS; <br\/><\/pre><p>We can also toggle our different options on and off by perform the following operations:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/METRICS was turned off in the previous example, now toggle it back on<br\/>debugMask = debugMask ^ DebugOption.METRICS;<br\/><br\/>\/\/The METRICS bitmask has been toggled on and our check will now pass<br\/>if ((debugMask &amp; DebugOption.METRICS) == DebugOption.METRICS)<br\/>{<br\/>RenderMetrics();<br\/>}<br\/><br\/>\/\/Toggle our mask again to turn it back off<br\/>debugMask = debugMask ^ DebugOption.METRICS;<br\/><br\/>\/\/The METRICS bitmask has been toggled off and our check will now fail<br\/>if ((debugMask &amp; DebugOption.METRICS) == DebugOption.METRICS)<br\/>{<br\/>RenderMetrics();<br\/>}<br\/><\/pre><\/div><!--page:~~number-systems-reference-text~~-->","title":"Reference Material"},{"bIsChecked":true,"exercise":".\/exercise\/number-systems.zip","instructions":"<h1>Goal<\/h1><p>In this exercise, we are going to implement a very basic state system that controls a space ship. We will use all three number systems (decimal, binary, hex) to resize the sprites, turn the rendering, rotating, and moving of the ship on and off.<\/p><img class=\"aligncenter size-full wp-image-701\" src=\".\/images\/number_systems_exercise.jpg\" alt=\"number_systems_exercise_1\" width=\"800\" height=\"451\" \/><p style=\"text-align: center;\">The final scene should look similar to the one in this image.<\/p><h1>Steps<\/h1><ol><li>First, let's see what the Exercise looks like without modification. Run the Exercise by clicking the Start button or pressing F5. (<a href='.\/simulation\/NumberSystems_1\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><li>To control rendering and movement of our ship, we need a simple state system. For that, let's setup some constants for our states.<ol><li>In <em>Focus Area 1<\/em>. Declare constant integer variables (hint:<code>const int x = 0;<\/code>) with the following names:<ol><li>STATE_NONE<\/li><li>STATE_RENDERING<\/li><li>STATE_MOVING<\/li><li>STATE_ROTATING<\/li><\/ol><\/li><li>Next, we are going to provide hex values for the constants. Convert the following binary values to hex, then write them down on paper or as comments in the code:<ol><li>None: 0<\/li><li>Rendering: 10000010<\/li><li>Moving: 10100010<\/li><li>Rotating: 00011110<\/li><\/ol><\/li><li>Now, assign the constants to the hex results from the binary conversion.<\/li><li>Finally, declare a new int member variable just below the constants. Call it <code>_shipState<\/code> and set its initial value to STATE_NONE.<\/li><\/ol><\/li><li>Using the new <code>_shipState<\/code> member, we can control our ship's state.<ol><li>Scroll down to <em>Focus Area 2<\/em>. Check to see if the <code>_shipState<\/code> bit field contains the rendering flag. If it does, call <code>_ship.SetVisible(true)<\/code>. If it does not, call <code>_ship.SetVisible(false)<\/code>.<\/li><li>Scroll down to <em>Focus Area 3<\/em>. Wrap <code>_ship.RotateAmount<\/code> in an if statement. Check to see if the <code>_shipState<\/code> bit field contains the rotating flag.<\/li><li>Scroll down to <em>Focus Area 4<\/em>. Wrap <code>_ship.MoveAmount<\/code> in an if statement. Check to see if the <code>_shipState<\/code> bit field contains the moving flag.<\/li><\/ol><\/li><li>Our last step will use bitwise operators to turn the rendering, rotating, and moving of the ship on and off.<ol><li>Scroll down to <em>Focus Area 5<\/em>. In the first Keyboard check for Space, create a new if statement and check to see if <code>_shipState<\/code> bit field contains the rendering flag. If not, use the appropriate bitwise operator to set the <code>_shipState<\/code> bit field to contain the rendering flag, <strong>in addition to any flags it previously had<\/strong>.<\/li><li>Run the Exercise by clicking the Start button or pressing F5. Once the game is running, we can press the space bar key to start the ship rendering. (<a href='.\/simulation\/NumberSystems_2\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><li>Scroll down to <em>Focus Area 6<\/em>. In the second Keyboard check for Enter, create a new if statement and check to see if the <code>_shipState<\/code> bit field contains the rendering flag. If it does, negate the rendering flag.<\/li><li>Run the Exercise by clicking the Start button or pressing F5. Once the game is running, we can press the space bar key to show the ship. Then, we can press the enter key to stop rendering. We should be able to turn the rendering on and off repeatedly. (<a href='.\/simulation\/NumberSystems_3\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><li>Scroll down to <em>Focus Area 7<\/em>. In the third Keyboard check for Right, create a new if statement and check to see if the <code>_shipState<\/code> bit field contains the rotating flag. If not, use the appropriate bitwise operator to set the <code>_shipState<\/code> bit field to contain the rotating flag, <strong>in addition to any flags it previously had<\/strong>.<\/li><li>Run the Exercise by clicking the Start button or pressing F5. Once the game is running, we can press the space bar key to show the ship. Then, we can press the right arrow key to make it rotate. (<a href='.\/simulation\/NumberSystems_4\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><li>Scroll down to <em>Focus Area 8<\/em>. In the fourth Keyboard check for Left, create a new if statement and check to see if the <code>_shipState<\/code> bit field contains the moving flag. If not, use the appropriate bitwise operator to set the <code>_shipState<\/code> bit field to contain the moving flag, <strong>in addition to any flags it previously had<\/strong>.<\/li><li>Run the Exercise by clicking the Start button or pressing F5. Once the game is running, we can press the space bar key to show the ship. Then, we can press the left arrow key to make it move. If we also press the right arrow key, it should rotate while moving and rendering. (<a href='.\/simulation\/NumberSystems_5\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><\/ol><\/li><\/ol><h1>Rubric<\/h1><ul><li>2 points for demonstrating rendering ships when hitting spacebar in step 3.b.<\/li><li>1 point for being able to turn the ship off and on in step 3.d.<\/li><li>1 point for being able to rotate a ship in step 3.f.<\/li><li>1 point for being able to move the ship in step 3.h.<\/li><\/ul><p><\/p><h1>Code Help<\/h1>        <!--CodeHelp: Vector2-->        <p><strong>Vector2<\/strong> &#8211; A vector data structure containing two components (X, Y). The values can represent UV texture coordinates, 2D object positioning, and several other forms of data. When creating a new Vector2, we can pass in two float values:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Example X\/Y floats. Values are arbitrary<br\/>float x = 1.0f;<br\/>float y = 2.0f;<br\/><br\/>\/\/ Create a new Vector2<br\/>Vector2 myVector = new Vector2(x, y);<br\/><br\/>\/\/ Create a zeroed out Vector2<br\/>Vector2 zeroedVector = Vector2.Zero;<br\/><\/pre><p><\/p><!--CodeHelp: Vector3-->        <p><strong>Vector3<\/strong> &#8211;  A vector data structure containing 3 components (X, Y, Z). When creating a new Vector3, we can pass in three float values:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Example X\/Y\/Z floats. Values are arbitrary<br\/>float x = 1.0f;<br\/>float y = 2.0f;<br\/>float z = 3.0f;<br\/><br\/>\/\/ Create a new Vector3<br\/>Vector3 vectorA = new Vector3(x, y, z);<br\/>Vector3 vectorB = new Vector3(4.0f, 5.0f, 6.0f);<br\/><br\/>\/\/ Values of vectorC will be 5.0f, 7.0f, 9.0f for X, Y, and Z respectively<br\/>Vector3 vectorC = vectorA + vectorB;<br\/><br\/>\/\/ Create a Vector3 by transforming a Matrix <br\/>Vector3 distance = new Vector3(1.0f, 2.0f, 3.0f);<br\/>Vector3 transformedVector = Vector3.Transform(distance, Matrix.CreateRotationY(MathHelper.ToRadians(45.0f)));<br\/><br\/>\/\/ Create a Vector3 from Vector2 values<br\/>Vector2 vectorTwo = new Vector2(10.0f, 5.0f);<br\/>Vector3 vectorThree = new Vector3(vectorTwo.X, vectorTwo.Y, 0.0f);<br\/><\/pre><p><\/p><!--CodeHelp: SpriteTexture-->        <p><strong>SpriteTexture<\/strong> &#8211; This is a utility class responsible for managing the content and processing of a Sprite's texture.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Create a new SpriteTexture and load its content<br\/>SpriteTexture texture = new SpriteTexture(&quot;Graphics\\\\moon&quot;);<br\/>texture.LoadContent(_contentManager);<br\/><\/pre><p><\/p><!--CodeHelp: Sprite-->        <p><strong>Sprite<\/strong> &#8211; This is a utility class with several sub-systems which allow for simple image rendering. With only a few method calls, a Sprite can load a texture, render, and move around. <\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Create a new SpriteTexture and load its content<br\/>SpriteTexture texture = new SpriteTexture(&quot;Graphics\\\\moon&quot;);<br\/>texture.LoadContent(_contentManager);<br\/><br\/>\/\/ Declare a new Sprite on layer 1<br\/>Sprite mySprite = new Sprite(1);<br\/><br\/>\/\/ Set the size of the sprite to 10 by 10<br\/>mySprite.SetSize(10.0f, 10.0f);<br\/><br\/>\/\/ Set the Sprite&#039;s position to the center of the screen<br\/>mySprite.SetPosition(0.0f, 0.0f);<br\/><br\/>\/\/ Set the Sprite&#039;s rotation, in radians.<br\/>mySprite.SetRotation(3.14159f);<br\/><br\/>\/\/ Set the sprite texture<br\/>mySprite.SetSpriteTexture(texture);<br\/><br\/>\/\/ Set the color tint of the Sprite to red<br\/>mySprite.SetTint(Color.Red);<br\/><\/pre><p><\/p><!--CodeHelp: SpriteManager--><p><strong>SpriteManager<\/strong> &#8211; SpriteManager is a utility class which is responsible for sorting, updating, and rendering sprites.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Create a new Sprite<br\/>Sprite mySprite = new Sprite();<br\/><br\/>\/\/ In order for mySprite to render and update, it MUST be added to _spriteManager<br\/>_spriteManager.AddSprite(mySprite);<br\/><br\/>\/\/ Update the sprites. Takes in a GameTime as argument<br\/>_spriteManager.UpdateSprites(time);<br\/><br\/>\/\/ Render the sprites. Takes in a GraphicsDevice and Camera for arguments<br\/>_spriteManager.RenderSprites(_graphicsDevice, DefaultCamera);<br\/><\/pre><p><\/p><!--page:~~number-systems-exercise~~-->","link":"exercise","mod":"number-systems","movie":null,"name":"number-systems","promptfile":null,"prompts":null,"reference":null,"text":null,"title":"Exercise"}]},{"bIsChecked":true,"name":"order-of-operations","title":"Order of Operations","topics":[{"bIsChecked":true,"exercise":null,"instructions":null,"link":null,"mod":null,"movie":".\/video\/Course2-csharp-primer-arc-order_of_operations-overview.mp4","name":"Overview","promptfile":null,"prompts":null,"reference":"order-of-operations-1","text":null,"title":"Overview"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":null,"mod":null,"movie":".\/video\/Course2-csharp-primer-arc-order_of_operations-operatorPrecedence.mp4","name":"Operator Precedence","promptfile":null,"prompts":null,"reference":"order-of-operations-2","text":null,"title":"Operator Precedence"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":null,"mod":null,"movie":".\/video\/Course2-csharp-primer-arc-order_of_operations-associative_parentheses.mp4","name":"Associative Order & Parentheses","promptfile":null,"prompts":null,"reference":"order-of-operations-3","text":null,"title":"Associative Order & Parentheses"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":null,"mod":null,"movie":null,"name":"Reference","promptfile":null,"prompts":null,"reference":null,"text":"<a class=\"dest\" id=\"order-of-operations-1\"><\/a><div class=\"accent\"><h1>Overview<\/h1><p>Much like mathematics, computer programming has an order of operations. When the compiler encounters a Statement in code, which could be a single line of code or multiple lines within a set of braces {}, it breaks the statement down into Expressions. Expressions are defined by an Operator, such as a +, and one or more operands. Operands are the input of the Expression. These can range from being explicitly stated values to objects or even other methods.<\/p><div style=\"text-align: center;\"><ul class=\"anchorGroup\" style=\"text-align: left; display: inline-block;\"><li><a class=\"ankor\" href=\"#order-of-operations-2\">Operator Precedence<\/a><\/li><li><a class=\"ankor\" href=\"#order-of-operations-3\">Associative Order &#038; Parentheses<\/a><\/li><li><a class=\"ankor\" href=\"#order-of-operations-4\">Precedence Order Reference<\/a><\/li><\/ul><\/div><\/div><a class=\"dest\" id=\"order-of-operations-2\"><\/a>&nbsp;<div class=\"accent\"><h1>Operator Precedence<\/h1><p>Every operator falls into a category of one or more operators. The order of these categories dictates how an Expression is evaluated. The categories in order are Primary; Unary; Multiplicative; Additive; Shift; Relational and Type Testing; Equality; Logical AND; Logical XOR; Logical OR; Conditional AND; Conditional OR; Conditional; Assignment.<\/p><p>Let's take a look at an example.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>x = 3 + 5 * 8;<br\/><\/pre><p>While we would read this normally from left to right, the precedence of the three operators requires us to jump around a little bit in the evaluation of it. The first operator we come to is Assignment Operator (=). This belongs to the Assignment category and is the very last category in order of precedence. The next operator is the Addition Operator (+). This is a member of the Additive category and has a higher precedence than the Assignment. We could begin evaluating the expression of 3 + 5, however there is another operator in the statement with a higher precedence. The Multiplication Operator (*). This operator is a member of the Multiplicative category and has a higher precedence than Addition, so we have to start with the expression of 5 * 8. This results in 40 which is in turn used as the new operand in place of the 5 in the next expression with highest precedence of 3 + 40. Again, this result, which is 43, is used as the operand in the final remaining expression, x = 43. This assigns the value of 43 to x and the compiler moves on to the next statement in the code.<\/p><\/div><a class=\"dest\" id=\"order-of-operations-3\"><\/a>&nbsp;<div class=\"accent\"><h1>Associative Order &#038; Parentheses<\/h1><p>So we've discussed the precedence order of operators, but every operator also has a second order that must be followed. This is the Associative Order. The Associative Order of an operator dictates the order in which expressions are evaluated when there are multiple operators of the same category in the expression. If an expression were to have multiple Additive Operators for instance, the compiler would start from the left of the expression and evaluate it to the right.<\/p><p>Almost all operators have the Associative Order of left to right. There are only two categories that do not have the same order which are Assignment, and Conditional. All Assignment operators and the Conditional Operator have the Associative order of right to left.<br \/>For example:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>x = y = z;<br\/><\/pre><p>When evaluating this statement the compiler would first start with y = z. The value of y would be assigned to the value of z and then x = y would be evaluated assigning the newly set value of y to x. This is often a shortcut used by programmers when declaring and initializing multiple variables that all start out with the same initial value.<\/p><h2>Parentheses<\/h2><p>Precedence in an expression can be controlled through the use of parentheses. Parentheses allow us to dictate which expressions should be evaluated first before the rest of the statement. Take the expression this expression for example:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>i = x + y + z;<br\/><\/pre><p>Without parentheses the compiler would evaluate this as adding z to the result of x + y and setting i to that value.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>x = 8 * 2 - 1;<br\/><\/pre><p>The example above would result in x = 15 as the answer. The compiler would start with 8 * 2 and then subtract 1 from that result. This leaves us with 15 as the value being assigned to x.<\/p><p>Now let's take a look at that same example, but with some parentheses in place to control how it is evaluated.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>x = 8 * (2 - 1);<br\/><\/pre><p>The result is much different than our previous example. Here the paranthesses override the precedence of the multiplication operator and evaluate the expression of 2 &#8211; 1 first. The result of that, which is 1, is then used as the operand to complete the remaining expression of 8 * 1 resulting in x being assigned the value of 8.<\/p><\/div><a class=\"dest\" id=\"order-of-operations-4\"><\/a>&nbsp;<div class=\"accent\"><h1>Precedence Order Reference<\/h1><h2>Primary<\/h2><table><tr><td>Primary Operators<\/td><td>Name<\/td><td>Functionality<\/td><\/tr><tr><td>x.y<\/td><td>Member Access<\/td><td>Allows access to members of an object<\/td><\/tr><tr><td>f(x)<\/td><td>Parantheses<\/td><td>Isolates expressions in order to control precedence of other operators<\/td><\/tr><tr><td>x++<\/td><td>Post-Increment<\/td><td>Increments the current value of the variable by 1, the new value takes effect the next time the variable is used<\/td><\/tr><tr><td>x--<\/td><td>Post-Decrement<\/td><td>Increments the current value of the variable by 1, the new value takes effect the next time the variable is used<\/td><\/tr><tr><td>new<\/td><td>new Operator<\/td><td>Creates objects and invokes constructors of a class<\/td><\/tr><tr><td>typeof<\/td><td>typeof Operator<\/td><td>Obtains the System.Type object of a type<\/td><\/tr><\/table><h2>Unary<\/h2><table><tr><td>Unary Operators<\/td><td>Name<\/td><td>Functionality<\/td><\/tr><tr><td>+x<\/td><td>Unary Plus<\/td><td>Returns the value of the operand<\/td><\/tr><tr><td>-x<\/td><td>Unary Minus<\/td><td>Returns the value of the operand with its sign inverted<\/td><\/tr><tr><td>!x<\/td><td>Logical Negation (aka Logical Not)<\/td><td>Computes the logical negation of the operand, true becomes false, false becomes true<\/td><\/tr><tr><td>~x<\/td><td>Bitwise Complement (aka Bitwise Not)<\/td><td>Performs a logical negation on each bit of the operand resulting in the bitwise opposite or complement<\/td><\/tr><tr><td>++x<\/td><td>Pre-Increment<\/td><td>Increments the current value of the operand by 1, the new value takes effect immediately<\/td><\/tr><tr><td>--x<\/td><td>Pre-Decrement<\/td><td>Decrements the current value of the operand by 1, the new value takes effect immediately<\/td><\/tr><tr><td>(T)x<\/td><td>Cast<\/td><td>Converts an expression to the specified type<\/td><\/tr><\/table><h2>Multiplicative<\/h2><table><tr><td>Multiplicative Operators<\/td><td>Name<\/td><td>Functionality<\/td><\/tr><tr><td>x*y<\/td><td>Multiplication<\/td><td>Multiplys two operands together and returns the result<\/td><\/tr><tr><td>x\/y<\/td><td>Division<\/td><td>Divides one operand by another and returns the result<\/td><\/tr><tr><td>x%y<\/td><td>Modulo (aka Modulos or Remainder)<\/td><td>Divides one operand by another and returns the remainder value<\/td><\/tr><\/table><h2>Additive<\/h2><table><tr><td>Additive Operators<\/td><td>Name<\/td><td>Functionality<\/td><\/tr><tr><td>x+y<\/td><td>Addition<\/td><td>Adds two operands together and returns the result<\/td><\/tr><tr><td>x-y<\/td><td>Subtraction<\/td><td>Subtracts one operand from another and returns the result<\/td><\/tr><\/table><h2>Shift<\/h2><table><tr><td>Shift Operators<\/td><td>Name<\/td><td>Functionality<\/td><\/tr><tr><td>x&lt;&lt;count<\/td><td>Shift Left<\/td><td>Shifts the bits of an operand to the left by the specified number of bits and returns the result<\/td><\/tr><tr><td>x&gt;&gt;y<\/td><td>Shift Right<\/td><td>Shifts the bits of an operand to the right by the specified number of bits and returns the result<\/td><\/tr><\/table><h2>Relational and type-testing<\/h2><table><tr><td>Relational and type-testing Operators<\/td><td>Name<\/td><td>Functionality<\/td><\/tr><tr><td>x &lt; y<\/td><td>Less than<\/td><td>Returns true if x is less than y, false otherwise<\/td><\/tr><tr><td>x &gt; y<\/td><td>Greater than<\/td><td>Returns true if x is greater than y, false otherwise<\/td><\/tr><tr><td>x &lt;= y<\/td><td>Less than or Equal to<\/td><td>Returns true if x is less than or equal to y<\/td><\/tr><tr><td>x &gt;= y<\/td><td>Greater than or Equal to<\/td><td>Returns true if x is greater than or equal to y<\/td><\/tr><tr><td>x is T<\/td><td>is Operator<\/td><td>Returns true if x can be Cast as the specified Type T<\/td><\/tr><tr><td>x as T<\/td><td>as Operator<\/td><td>Returns the operand Cast as the specified Type if it can be Cast as that type, returns null otherwise<\/td><\/tr><\/table><h2>Equality<\/h2><table><tr><td>Equality Operators<\/td><td>Name<\/td><td>Functionality<\/td><\/tr><tr><td>x == y<\/td><td>Is Equal to<\/td><td>Returns true if x is equal to y, false otherwise<\/td><\/tr><tr><td>x != y<\/td><td>Not Equal to<\/td><td>Returns true if x is not equal to y, false otherwise<\/td><\/tr><\/table><h2>Logical AND<\/h2><table><tr><td>Logical AND Operators<\/td><td>Name<\/td><td>Functionality<\/td><\/tr><tr><td>x &amp; y<\/td><td>Logical AND<\/td><td>Performs a bitwise AND on the operands<\/td><\/tr><\/table><h2>Logical XOR<\/h2><table><tr><td>Logical XOR Operators<\/td><td>Name<\/td><td>Functionality<\/td><\/tr><tr><td>x ^ y<\/td><td>Logical XOR<\/td><td>Performs a bitwise XOR on the operands<\/td><\/tr><\/table><h2>Logical OR<\/h2><table><tr><td>Logical OR Operators<\/td><td>Name<\/td><td>Functionality<\/td><\/tr><tr><td>x | y<\/td><td>Logical OR<\/td><td>Performs a bitwise OR on the operands<\/td><\/tr><\/table><h2>Conditional AND<\/h2><table><tr><td>Conditional AND Operators<\/td><td>Name<\/td><td>Functionality<\/td><\/tr><tr><td>x &amp;&amp; y<\/td><td>Conditional AND<\/td><td>Tests if expression x is true, if true it then tests expression y, if both are true it returns true, false otherwise<\/td><\/tr><\/table><h2>Conditional OR<\/h2><table><tr><td>Conditional OR Operators<\/td><td>Name<\/td><td>Functionality<\/td><\/tr><tr><td>x || y<\/td><td>Conditional OR<\/td><td>Tests if expression x is ture, if it is it returns true, if not it will test if expression y is true, if it is it returns true, false otherwise<\/td><\/tr><\/table><h2>Conditional<\/h2><table><tr><td>Conditional Operators<\/td><td>Name<\/td><td>Functionality<\/td><\/tr><tr><td>b ? x : y<\/td><td>Conditional Operator (aka Ternary, sometimes mistakenly referred to as Trinary)<\/td><td>If b is true then expression x is evaluated and returned as the result, otherwise expression y is evaluated and returned as the result<\/td><\/tr><\/table><h2>Assignment<\/h2><table><tr><td>Assignment Operators<\/td><td>Name<\/td><td>Functionality<\/td><\/tr><tr><td>x = y<\/td><td>Equals<\/td><td>Set the x's value to the value of y<\/td><\/tr><tr><td>x += y<\/td><td>Plus-Equals<\/td><td>Adds the value of x and y together and then sets the value of x to that value<\/td><\/tr><tr><td>x -= y<\/td><td>Minus-Equals<\/td><td>Subtracts the of y from x and then sets the value of x to that value<\/td><\/tr><tr><td>x *= y<\/td><td>Multiply-Equals<\/td><td>Multiplies the value of x and y together and then sets the value of x to that value<\/td><\/tr><tr><td>x \/= y<\/td><td>Divide-Equals<\/td><td>Divides the value of x by y and then sets the value of x to that value<\/td><\/tr><tr><td>x %= y<\/td><td>Modulo-Equals<\/td><td>Divides the value of x by y and then sets the value of x to the remainder from that operation<\/td><\/tr><tr><td>x &amp;= y<\/td><td>AND-Equals<\/td><td>Performs a bitwise Logical AND on the operands and sets the value of x to the result<\/td><\/tr><tr><td>x |= y<\/td><td>AND-Equals<\/td><td>Performs a bitwise Logical OR on the operands and sets the value of x to the result<\/td><\/tr><tr><td>x ^= y<\/td><td>AND-Equals<\/td><td>Performs a bitwise Logical XOR on the operands and sets the value of x to the result<\/td><\/tr><tr><td>x&lt;&lt;=y<\/td><td>Shift Left<\/td><td>Shifts the bits of an operand to the left by the specified number of bits and sets the value of x to the result<\/td><\/tr><tr><td>x&gt;&gt;=y<\/td><td>Shift Right<\/td><td>Shifts the bits of an operand to the right by the specified number of bits and sets the value of x to the result<\/td><\/tr><\/table><\/div><!--page:~~order-of-operations-reference-text~~-->","title":"Reference Material"},{"bIsChecked":true,"exercise":"","instructions":"<h1>Goal<\/h1><p>In this Exercise we will evaluate snippets of code on paper according the precedence of the operators used in the expressions.<\/p><h1>Exercise Problems<\/h1><p>On a separate piece of paper solve for x in each code snippet.<\/p><ol><li><pre class=\"wp-code-highlight prettyprint linenums:1\">x=3*(5+1)-6;<\/pre><\/li><li><pre class=\"wp-code-highlight prettyprint linenums:1\">x=(int)0.5*100;<\/pre><\/li><li><pre class=\"wp-code-highlight prettyprint linenums:1\">x=4;<br\/>y=2;<br\/>x*=((x++ * (y-=x) + x) % y);<br\/><\/pre><\/li><li><pre class=\"wp-code-highlight prettyprint linenums:1\">x=(2 * 3 &lt; 12 &amp;&amp; 5 % 2 &lt; 3 + 4);<\/pre><\/li><li><pre class=\"wp-code-highlight prettyprint linenums:1\">x = 1;<br\/>for(int i = 0; i < 6; ++i) <br\/>{<br\/>if(x > i % x)<br\/>{<br\/>x += 3;<br\/>}<br\/>else<br\/>{<br\/>x += 2;<br\/>} <br\/>}<br\/><\/pre><\/li><li><pre class=\"wp-code-highlight prettyprint linenums:1\">x=2;<br\/>x=(x * (x*=3));<br\/><\/pre><\/li><\/ol><h1>Rubric<\/h1><ul><li>1 point for each correct answer.<\/li><\/ul><!--page:~~order-of-operations-exercise~~-->","link":"exercise","mod":"order-of-operations","movie":null,"name":"order-of-operations","promptfile":null,"prompts":null,"reference":null,"text":null,"title":"Exercise"},{"bIsChecked":true,"exercise":".\/exercise\/physics-order-of-operations.zip","instructions":"\u0009\u0009<h1>Goal<\/h1>\u0009\u0009<p>In this open ended exercise, you will demonstrate your understanding of order of operations by creating a wrecking ball and smashing through some boxes:<\/p>\u0009\u0009<br\/>\u0009\u0009<img class=\"aligncenter size-full wp-image-701\" src=\".\/images\/wrecking_ball_in_action.gif\" alt=\"wrecking_ball_in_action\"\/>\u0009\u0009<h1>Steps<\/h1>\u0009\u0009<ol>\u0009\u0009\u0009<li> Extending the chain\u0009\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009\u0009<li> If we start by building and running the project, we'll see a quite sad looking wrecking ball that is too small and too short. \u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<br\/>\u0009\u0009\u0009\u0009\u0009\u0009<img class=\"aligncenter size-full wp-image-701\" src=\".\/images\/wrecking_ball_begin.png\" alt=\"screenshot\"\/>\u0009\u0009\u0009\u0009\u0009\u0009<p style=\"text-align: center;\">This is what the exercise should look like once you have it open.<\/p>\u0009\u0009\u0009\u0009\u0009<\/li>\u0009\u0009\u0009\u0009\u0009<li>Go to Focus Area 1, find the following line:<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>segments = X + Z * Y \/ Y * X + Z \/ Y - X * Y;<br\/><\/pre>\u0009\u0009\u0009\u0009\u0009<li> That's a crazy overcomplicated equation, just to assign the value of the number of segments! Usually, we'd do something much simpler, but we're exploring how order of operations affects values... <\/li>\u0009\u0009\u0009\u0009\u0009<li> First, what does that equation result in? Solve it first, and run the game to see how many links there are. <\/li>\u0009\u0009\u0009\u0009\u0009<li> Now, lets increase the number of chain links by ONLY placing parentheses in the equation. Try this: <\/li>\u0009\u0009\u0009\u0009\u0009<pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>segments = X + Z * Y \/ Y * X + Z \/ (Y - X) * Y;<br\/><\/pre>\u0009\u0009\u0009\u0009\u0009<li> Run the game again. Whoa, quite a difference! See how many segments you can get by only adding and moving around parentheses. <\/li>\u0009\u0009\u0009\u0009\u0009<li> Just a note: All results from these equations will be considered absolute values. So if we get a negative number, it will be positive.<\/li>\u0009\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009 <\/li>\u0009\u0009\u0009<li>Making a bigger ball\u0009\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009\u0009<li> So hopefully we now have a longer chain. Now we need to scale up that ball so that it actually wreck a building.<\/li>\u0009\u0009\u0009\u0009\u0009<li> Let's navigate to Focus Area 2, and look for this line of code:<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>wreckingBallSize = a - b + b * c - a - b;<br\/><\/pre>\u0009\u0009\u0009\u0009\u0009<li> It's another unnecessarily complicated equation! What value does it result in? Solve it and see if your answer matches what is shown when you run the game (Size will be displayed via text)<\/li>\u0009\u0009\u0009\u0009\u0009<li> Well, whatever it is, it's much too small. Adjust the equation to make it bigger. Again, the challenge is to ONLY add parentheses. <\/li>\u0009\u0009\u0009\u0009\u0009<li> Move the parentheses around and experiment to see how it affects the size of the ball. How big can you make the ball?<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009<\/li>\u0009\u0009\u0009<li> Let's place some boxes \u0009\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009\u0009<li> We've got a decent size wrecking ball with a long chain on it now. But what's a wrecking ball without anything to wreck?<\/li>\u0009\u0009\u0009\u0009\u0009<li> Let's stack some boxes up on the ground, high enough to crash through with the wrecking ball.<\/li>\u0009\u0009\u0009\u0009\u0009<li> Let's go to Focus Area 03, and find these lines of code:<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>rows = X + Y * X + Y - Y - Z;<br\/>cols = Z + Y \/ Z - Y + Y;<br\/><\/pre>\u0009\u0009\u0009\u0009\u0009<li> Rows represents the rows of boxes that will be stacked, and cols represents the columns. Experiment with the placement of parentheses to see how many boxes you can have stacked. <\/li>\u0009\u0009\u0009\u0009\u0009<li> Try and stack them nice and high, to look like a building! <\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009<\/li>\u0009\u0009<\/ol>\u0009\u0009<h1>Rubric<\/h1><ul><li>2 points for using parenthesis to increase chain length in step 1.f.<\/li><li>2 points for making the ball bigger using only paranthesis in step 2.d.<\/li><li>2 points for stacking the boxes in step 3.d.<\/li><\/ul><!--page:~~order-of-operations-project~~-->","link":"exercise","mod":"order-of-operations","movie":null,"name":"physics-order-of-operations","promptfile":null,"prompts":null,"reference":null,"text":null,"title":"Project: Wrecking Ball"}]},{"bIsChecked":true,"name":"input-output","title":"Input\/Output","topics":[{"bIsChecked":true,"exercise":null,"instructions":null,"link":null,"mod":null,"movie":".\/video\/Course2-csharp-primer-arc-input_output-overview.mp4","name":"Overview","promptfile":null,"prompts":null,"reference":"input-output-1","text":null,"title":"Overview"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":null,"mod":null,"movie":".\/video\/Course2-csharp-primer-arc-input_output-deviceInput.mp4","name":"Device Input","promptfile":null,"prompts":null,"reference":"input-output-2","text":null,"title":"Device Input"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":null,"mod":null,"movie":".\/video\/Course2-csharp-primer-arc-input_output-file.mp4","name":"File I\/O","promptfile":null,"prompts":null,"reference":"input-output-3","text":null,"title":"File I\/O"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":null,"mod":null,"movie":null,"name":"Reference","promptfile":null,"prompts":null,"reference":null,"text":"<a class=\"dest\" id=\"input-output-1\"><\/a><div class=\"accent\"><h1>Overview<\/h1><p>In this module we'll explore the different types of Input and Output, or more commonly referred to as I\/O. Generally, Input falls into three different categories: device input, file input, and network input. We will focus on network input at a later date. The key distinction between device input and file input is that the first is a method for the end user to interact with the game and the latter is a method for the game to interact with the mass storage system.<\/p><p>We see examples of device input in our daily interactions with computers such as the keyboard, the mouse and even more special case hardware such as joysticks, gamepads, and motion tracking cameras. These are all used as methods for the player to interact with the game, control their avatar, and perform any actions available to them in the game.<br \/>File I\/O is all about the game or program interacting with the system by reading from and writing to files on the system disk or even files stored in a remote location. This is typically used for configuration files that store different settings defined by the user or developer that will control how a game launches or behaves. Every time we change the settings of a game we're manipulating memory and typically a file that stores those settings for us. Without persistent data like storing options to the hard drive, we would have to change settings to match our preferences every time, or even worse, we would have to start a 90+ hour game over from the beginning every time we play without game saves.<\/p><div style=\"text-align: center;\"><ul class=\"anchorGroup\" style=\"text-align: left; display: inline-block;\"><li><a class=\"ankor\" href=\"#input-output-2\">Device Input<\/a><\/li><li><a class=\"ankor\" href=\"#input-output-3\">File I\/O<\/a><\/li><\/ul><\/div><\/div><a class=\"dest\" id=\"input-output-2\"><\/a>&nbsp;<div class=\"accent\"><h1>Device Input<\/h1><p>Device input covers a wide array of hardware used for interacting with a PC. These devices can range from a keyboard to a joystick, from a camera to a light sensor. For our purposes we'll focus on the basics needed for game development, input from a keyboard and mouse.<\/p><h2>Keyboard Input<\/h2><p>To detect keys being pressed on the keyboard we will first need to obtain the current state of the keyboard.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>KeyboardState keyboardState = Keyboard.GetState();<br\/><\/pre><p>While the keyboard's state can be fetched at any time, in practice we would only do this once every frame. In our exercises this step is already performed for us and the state is passed to the UpdateInput Method.<\/p><p>All keys on a keyboard have two states, up and down. To determine which state a key is in there are two methods we can make use of. The first method is IsKeyDown and the second is IsKeyUp. Both methods take in an entry from the Keys enum to specify the key to check. If the key was in the state being tested for the method will return true, otherwise it will return false.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>KeyboardState keyboardState = Keyboard.GetState();<br\/><br\/>if(keyboardState.IsKeyDown(Keys.Up))<br\/>{<br\/>MovePlayerForward();<br\/>}<br\/><\/pre><p>In the above example we check to see if the Up Arrow Key was down and if it was then we move the player forward. This snippet of course would result in the player moving forward as long as the Up Arrow Key was being held down. When the key is released the player would stop.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>KeyboardState keyboardState = Keyboard.GetState();<br\/><br\/>if(keyboardState.IsKeyDown(Keys.Up))<br\/>{<br\/>MovePlayerForward();<br\/>}<br\/><br\/>if(keyboardState.IsKeyDown(Keys.Space) &amp;&amp; oldKeyboardState.IsKeyUp(Keys.Space))<br\/>{<br\/>FireProjectile();<br\/>}<br\/><br\/>oldKeyboardState = keyboardState;<br\/><\/pre><p>In the above example we store the current keyboard state so that we can use to test in the next update. In this case we're using it to make sure that a projectile is fired only once every time the space bar is pressed. To do this we add checking to see if the key was in the up state in the previous keyboard state to the conditional that determines whether to fire the projectile. Without this additional check the player would fire a projectile every update interval for as long as the space bar was held down.<\/p><h2>Mouse Input<\/h2><p>Mouse input is much the same as keyboard input but with a few key differences. As with keyboard input, the state of the mouse must be fetched to get any information from the mouse.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>Vector2 mousePosition = new Vector2(0,0);<br\/><br\/>MouseState mouseState = Mouse.GetState();<br\/><br\/>mousePosition.X = mouseState.X;<br\/>mousePosition.Y = mouseState.Y;<br\/><\/pre><p>The above example shows how we can determine the position of the mouse cursor<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>Vector2 mousePosition = new Vector2(0,0);<br\/><br\/>MouseState mouseState = Mouse.GetState();<br\/><br\/>mousePosition.X = mouseState.X;<br\/>mousePosition.Y = mouseState.Y;<br\/><br\/>if(mouseState.LeftButton == ButtonState.Pressed &amp;&amp; oldMouseState.LeftButton == ButtonState.Released)<br\/>{<br\/>FireProjectile();<br\/>}<br\/><br\/>oldMouseState = mouseState;<br\/><\/pre><\/div><a class=\"dest\" id=\"input-output-3\"><\/a>&nbsp;<div class=\"accent\"><h1>File I\/O<\/h1><p>As we mentioned previously, File I\/O is an interaction between the game and the mass storage system where the game reads or writes a file to or from the system disk. This is typically done by opening the file and reading its data into a stream, parsing that data and sorting out the data that is required. Everything, including character models, colors, environment, and audio are read from the hard drive using similar methods. There are multiple methods for doing this in C#. Examples we see in the future or in material external to this course may use a class known as FileStream. This class is commonly used in C# for accessing files.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>using System.IO;<br\/><br\/>FileStream myFile = File.Open(&quot;C:\\myFile.txt&quot;, FileMode.Open);<br\/><\/pre><p>In the above example, we're opening a file named \"myFile.txt\" and storing a handle to it in a FileStream object named <em>myFile<\/em>. With this stream, we can now access the file and read it in or write to it. It is worth noting that the fully qualified path was provided in the above code example. That includes the drive and folder (path), file name, and extension. Filenames and paths can be either absolute like our above example which means it will always look in that single particular spot for the file, or it can be relative. A relative path will be for the path and filename specified relative to the working directory (where the exe launched from).<br \/>For example, if we were to remove the directory:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>using System.IO;<br\/><br\/>FileStream myFile = File.Open(&quot;myFile.dat&quot;, FileMode.Open);<br\/><\/pre><p>The program would now expect myFile.dat to be present in the program's working directory, or more commonly, the directory from which the program was launched. If we know what the folder structure will be like we can even specify places for it to look relative to the working directory.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>using System.IO;<br\/><br\/>FileStream myFile = File.Open(&quot;..\/..\/storage\/myFile.dat&quot;, FileMode.Open);<br\/><\/pre><p>In this example we see that the program is now looking for myFile.dat in a directory relative to its own working directory. This example will go up two folders in the folder heirarchry from the folder it was launched from and look for myFile.dat in a folder called storage from that location.<br \/>Now that we have a file open in a stream we need to start reading data from it. While the FileStream class itself has Read and Write Methods available to it, we're going to use BinaryReader for reading and BinaryWriter  for writing instead. This is due to BinaryReader and BinaryWriter being more versatile overall than  FileStream. BinaryReader can read in the entire file a byte at a time just as FileStream can, but it can also directly read in primitive types. This is extremely useful in game development for settings and config files. In the following example we know beforehand what the expected contents of our file is (my name as a string followed by my age as an int) and we can read its data directly into variables that we can use.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>using System.IO;<br\/><br\/>FileStream myFile = File.Open(&quot;..\/..\/storage\/myFile.dat&quot;, FileMode.Open);<br\/><br\/>BinaryReader reader = new BinaryReader(myFile);<br\/><br\/>string myName = reader.ReadString();<br\/><br\/>int myAge = reader.ReadInt32();<br\/><br\/>reader.Close();<br\/><br\/>Console.WriteLine(&quot;My Name is &quot; + myName + &quot; and I&#039;m &quot; + myAge + &quot; years old.&quot;);<br\/><\/pre><p>Note that call to the BinaryReader's Close Method at the end. This is a call that must be made after we're finished reading or writing to a file. This let's the system know that we're finished with the file and it can be released back to the system.<br \/>Writing to a file is very similar to reading from it in terms of process. We still need to open the file into a Filestream, but this time we'll be using to initialize a BinaryWriter instead of BinaryReader.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>using System.IO;<br\/><br\/>string myName = &quot;John Smith&quot;;<br\/>int myAge = 900;<br\/><br\/>FileStream myFile = File.Open(&quot;..\/..\/storage\/myFile.dat&quot;, FileMode.Open);<br\/><br\/>BinaryWriter writer = new BinaryWriter(myFile);<br\/><br\/>writer.Write(myName);<br\/><br\/>writer.Write(myAge);<br\/><br\/>writer.Close();<br\/><\/pre><p>This works great when the file exists before running the code, but what if we want our program to generate this file during its first run using default or user specified values? What if we only want to attempt to manipulate a file if it exists at all? Fortunately the File class provides Methods for these cases. To check if a file exists before attempting to open it we need only make a call to File.Exists(). The Method takes in a path and filename and will return true if the file does exist on the system disk. This is an important piece of error checking as attempting to open a file that does not exist will produce a run time exception leading to our game crashing unexpectedly if not handled.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>using System.IO;<br\/><br\/>string myName = &quot;John Smith&quot;;<br\/>int myAge = 900;<br\/><br\/>if(File.Exists(&quot;..\/..\/storage\/myFile.dat&quot;)<br\/>{<br\/>FileStream myFile = File.Open(&quot;..\/..\/storage\/myFile.dat&quot;, FileMode.Open);<br\/><br\/>BinaryReader reader = new BinaryReader(myFile);<br\/><br\/>myName = reader.ReadString();<br\/><br\/>myAge = reader.ReadInt32();<br\/><br\/>reader.Close();   <br\/>}<br\/><br\/>Console.WriteLine(&quot;My Name is &quot; + myName + &quot; and I&#039;m &quot; + myAge + &quot; years old.&quot;);<br\/><\/pre><p>The above example shows variables with default values being overridden by those saved in a file if it exists. Now we need to be able to create that file if it doesn't exist so that our user can change the values to what they want them to be and still be using those values the next time they launch the program. To do that we'll use the File.Create() Method.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>using System.IO;<br\/><br\/>string myName = &quot;John Smith&quot;;<br\/>int myAge = 900;<br\/><br\/>if(File.Exists(&quot;..\/..\/storage\/myFile.dat&quot;)<br\/>{<br\/>FileStream myFile = File.Open(&quot;..\/..\/storage\/myFile.dat&quot;, FileMode.Open);<br\/><br\/>BinaryReader reader = new BinaryReader(myFile);<br\/><br\/>myName = reader.ReadString();<br\/><br\/>myAge = reader.ReadInt32();<br\/><br\/>reader.Close();   <br\/>}<br\/>else<br\/>{<br\/>FileStream myFile = File.Create(&quot;..\/..\/storage\/myFile.dat&quot;);<br\/><br\/>BinaryWriter writer = new BinaryWriter(myFile);<br\/><br\/>writer.Write(myName);<br\/><br\/>writer.Write(myAge);<br\/><br\/>writer.Close();<br\/>}<br\/><br\/>Console.WriteLine(&quot;My Name is &quot; + myName + &quot; and I&#039;m &quot; + myAge + &quot; years old.&quot;);<br\/><\/pre><p>Now we have a complete setup for creating a default config file that the user can override later in the program with their own values.<\/p><\/div><!--page:~~input-output-reference-text~~-->","title":"Reference Material"},{"bIsChecked":true,"exercise":".\/exercise\/input-output.zip","instructions":"<h1>Goal<\/h1><p>In this Exercise we'll learn how to detect input from the keyboard and mouse to select and place towers in the game world as well as save persistent data using File I\/O. Reference for unfamiliar functions has been provided in the <a class=\"ankor\" href=\"#input-output-exercise-1\">Code Help<\/a> section.<\/p><img src=\".\/images\/InputOutputResult.jpg\" alt=\"InputOutputResult\" width=\"1279\" height=\"722\" class=\"img-responsive aligncenter size-full wp-image-3376\" \/><h1>Steps<\/h1><p>All work will take place in the InputOutputExercise Class.<\/p><ol><li>Build and Run the Exercise without modification. We should see a dirt background with a Tower in the center of the window rendering. There should also be text in the top left corner reading Total Resources Used: 0. Close the game. (<a href='.\/simulation\/InputOutput_1\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><li>In <em>Focus Area 1<\/em> declare the following variables:<ol><li>A KeyboardState to store the old keyboard state<\/li><li>A MouseState to store the old mouse state<\/li><li>A string named <code>_statsFilename<\/code> with the value of \"resourceUsage.dat\"<\/li><\/ol><\/li><li>In <em>Focus Area 2<\/em> we're going to open the file we're using to save the player's stats. To do so we need to write an if statement that achieves the following:<ol><li>First, use the <code>File.Exists<\/code> method to see if the <code>_statsFilename<\/code> exists.<\/li><li>If the file exists, open it with the FileMode of <code>Open<\/code> using a <code>BinaryReader<\/code>.<\/li><li>The file contains a string at the very beginning, which represents a statistic. Reads in the name of the stat as a string.<\/li><li>If the name of the stat is \"totalResourcesUsed\" then we read in the Int32 and store it in <code>_totalResourcesUsed<\/code><\/li><li>Don't forget to close the file<\/li><\/ol><\/li><li>Now we need to make sure this file is being created and\/or written to when we close our game. Scroll down to <em>Focus Area 3<\/em> in the Destroy method. Write an if-else statement that achieves the following:<ol><li>If the file exists, opens the stats file using a BinaryWriter. When opening with the <em>File<\/em> class, use the <code>Open<\/code> flag for the <code>FileMode<\/code>.<\/li><li>Write the text <em>\"totalResourcesUsed\"<\/em> and <code>_totalResourcesUsed<\/code> to the file, then close the file.<\/li><li>Otherwise, create the file using a BinaryWriter. When opening with the <em>File<\/em> class, use the <code>Create<\/code> flag.<\/li><li>Write the text \"totalResourcesUsed\" and <code>_totalResourcesUsed<\/code> to the file, then close the file.<\/li><\/ol><\/li><li>Build and Run the game. It should build successfully and we should see the same scene as we did in Step 1. Close the game. The game should close successfully without error and write the file resourceUsage.dat in the same folder as our game executable. (<a href='.\/simulation\/InputOutput_2\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><li>Now we need to wire up the mouse to visualize where we'll place our towers. Scroll up to <em>Focus Area 4<\/em> in the UpdateInput method. Here we need to perform the following operations:<ol><li>Store the <em>mouseState's<\/em> X and Y positions in <code>_mousePosition<\/code><\/li><li>Calculate the mouse's world space position by passing <code>_mousePosition<\/code> to <code>CalculateWorldSpacePosition<\/code> and storing its result in <code>_worldSpaceMousePosition<\/code><\/li><\/ol><\/li><li>Build and Run the game. It should build successfully. Moving the mouse within the game window should now have the Tower rendering at its position. Close the game. (<a href='.\/simulation\/InputOutput_3\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><li>In <em>Focus Area 5<\/em> store the <code>keyboardState<\/code> and <code>mouseState<\/code> as the old states to be referenced in the next update<\/li><li>In <em>Focus Area 6<\/em> write an if statement that achieves the following:<ol><li>Detect if the 1 key (<code>Keys.D1<\/code>) was down in the current keyboard state<\/li><li>Detect if the 1 key (<code>Keys.D1<\/code>) was up in the previous keyboard state<\/li><li>If the key is down and was up previously then set the SpriteTexture of <code>_currentTower<\/code> to <code>_towerTextures[0]<\/code><\/li><\/ol><\/li><li>In <em>Focus Area 7<\/em> write an if statement that achieves the following:<ol><li>Detect if the 2 key (<code>Keys.D2<\/code>) was down in the current keyboard state<\/li><li>Detect if the 2 key (<code>Keys.D2<\/code>) was up in the previous keyboard state<\/li><li>If the key has been pressed and was up previously then set the SpriteTexture of <code>_currentTower<\/code> to <code>_towerTextures[1]<\/code><\/li><\/ol><\/li><li>In <em>Focus Area 8<\/em> write an if statement that achieves the following:<ol><li>Detect if the 3 key (<code>Keys.D3<\/code>) was down in the current keyboard state<\/li><li>Detect if the 3 key (<code>Keys.D3<\/code>) was up in the previous keyboard state<\/li><li>If the key is down and was up previously then set the SpriteTexture of <code>_currentTower<\/code> to <code>_towerTextures[2]<\/code><\/li><\/ol><\/li><li>In <em>Focus Area 9<\/em> write an if statement that achieves the following:<ol><li>Detect if the 4 key (<code>Keys.D4<\/code>) was down in the current keyboard state<\/li><li>Detect if the 4 key (<code>Keys.D4<\/code>) was up in the previous keyboard state<\/li><li>If the key is down and was up previously then set the SpriteTexture of <code>_currentTower<\/code> to <code>_towerTextures[3]<\/code><\/li><\/ol><\/li><li>Build and Run the game. It should build successfully. In addition to moving the current tower using the mouse, our current tower should also change textures based on the number keys that are pressed. Pressing 2 should change it to the Tower2. Pressing 3 should change it to the Tower3. Pressing 4 should change it to the Tower4. Pressing 1 should change it to Tower1. Close the game. (<a href='.\/simulation\/InputOutput_4\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><li>In <em>Focus Area 10<\/em> write an if statement that achieves the following:<ol><li>Detects if the Left Mouse Button has been Pressed<\/li><li>Detects if the Left Mouse Button was Released in the previous mouse state<\/li><li>Creates a tower using the <code>CreateTower<\/code> helper function passing in the current tower's SpriteTexture and the world space mouse position<\/li><li>Adds the created tower to the <code>_towers<\/code> List<\/li><li>Increments the total resources used by 1<\/li><\/ol><\/li><li>Build and Run the game. It should build successfully. In addition to moving the current tower using the mouse and the current tower's texture changing based on the number keys that are pressed, we should be able to place a new tower at the location of the current tower when pressing the Left Mouse Button. The Total Resources Used should also go up by one for every tower placed. The Total Resources Used should be persistent through multiple run-throughs and continue to increase. Close the game. (<a href='.\/simulation\/InputOutput_5\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><\/ol><h1>Rubric<\/h1><ul><li>2 points for finding and showing the 1kb .dat file to your teacher after finishing step 4.<\/li><li>2 points for demonstrating the tower moving with the mouse.<\/li><li>1 point for demonstrating tower changes by pressing keys.<\/li><li>1 point for placing towers on mouse clicks.<\/li><\/ul><a id=\"input-output-exercise-1\"><\/a>&nbsp;<h1>Code Help<\/h1>        <!--CodeHelp: Vector2-->        <p><strong>Vector2<\/strong> &#8211; A vector data structure containing two components (X, Y). The values can represent UV texture coordinates, 2D object positioning, and several other forms of data. When creating a new Vector2, we can pass in two float values:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Example X\/Y floats. Values are arbitrary<br\/>float x = 1.0f;<br\/>float y = 2.0f;<br\/><br\/>\/\/ Create a new Vector2<br\/>Vector2 myVector = new Vector2(x, y);<br\/><br\/>\/\/ Create a zeroed out Vector2<br\/>Vector2 zeroedVector = Vector2.Zero;<br\/><\/pre><p><\/p><!--CodeHelp: SpriteTexture-->        <p><strong>SpriteTexture<\/strong> &#8211; This is a utility class responsible for managing the content and processing of a Sprite's texture.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Create a new SpriteTexture and load its content<br\/>SpriteTexture texture = new SpriteTexture(&quot;Graphics\\\\moon&quot;);<br\/>texture.LoadContent(_contentManager);<br\/><\/pre><p><\/p><!--CodeHelp: Sprite-->        <p><strong>Sprite<\/strong> &#8211; This is a utility class with several sub-systems which allow for simple image rendering. With only a few method calls, a Sprite can load a texture, render, and move around. <\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Create a new SpriteTexture and load its content<br\/>SpriteTexture texture = new SpriteTexture(&quot;Graphics\\\\moon&quot;);<br\/>texture.LoadContent(_contentManager);<br\/><br\/>\/\/ Declare a new Sprite on layer 1<br\/>Sprite mySprite = new Sprite(1);<br\/><br\/>\/\/ Set the size of the sprite to 10 by 10<br\/>mySprite.SetSize(10.0f, 10.0f);<br\/><br\/>\/\/ Set the Sprite&#039;s position to the center of the screen<br\/>mySprite.SetPosition(0.0f, 0.0f);<br\/><br\/>\/\/ Set the Sprite&#039;s rotation, in radians.<br\/>mySprite.SetRotation(3.14159f);<br\/><br\/>\/\/ Set the sprite texture<br\/>mySprite.SetSpriteTexture(texture);<br\/><br\/>\/\/ Set the color tint of the Sprite to red<br\/>mySprite.SetTint(Color.Red);<br\/><\/pre><p><\/p><!--CodeHelp: SpriteManager-->        <p><strong>SpriteManager<\/strong> &#8211; SpriteManager is a utility class which is responsible for sorting, updating, and rendering sprites.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Create a new Sprite<br\/>Sprite mySprite = new Sprite();<br\/><br\/>\/\/ In order for mySprite to render and update, it MUST be added to _spriteManager<br\/>_spriteManager.AddSprite(mySprite);<br\/><br\/>\/\/ Update the sprites. Takes in a GameTime as argument<br\/>_spriteManager.UpdateSprites(time);<br\/><br\/>\/\/ Render the sprites. Takes in a GraphicsDevice and Camera for arguments<br\/>_spriteManager.RenderSprites(_graphicsDevice, DefaultCamera);<br\/><\/pre><p><\/p><!--CodeHelp: Module--><p><strong>Module<\/strong> &#8211; Module is a custom class written for this course. It is wrapped in a dynamic-link library, so we do not have to worry about adding to it:<\/p><ul><li>_graphicsDevice – An XNA\/MonoGame GraphicsDevice. This is used in SpriteManager's rendering methods. It is already initialized for us and we simply need to know its name and where to use it.<\/li><li>_contentManager – An XNA\/MonoGame ContentManager. This is used in SpriteTexture's texture methods. It is already initialized for us and we simply need to know its name and where to use it.<\/li><li>DefautCamera – A simple Camera object which manages our game's projection and view. It is already initialized for us and we simply need to know its name and where to use it.<\/li><\/ul><p><\/p><!--page:~~input-output-exercise~~-->","link":"exercise","mod":"input-output","movie":null,"name":"input-output","promptfile":null,"prompts":null,"reference":null,"text":null,"title":"Exercise"}]},{"bIsChecked":true,"name":"convert-math-into-code","title":"Convert Math into Code","topics":[{"bIsChecked":true,"exercise":null,"instructions":null,"link":null,"mod":null,"movie":".\/video\/Course2-csharp-primer-arc-convertMathToCode-overview.mp4","name":"Overview","promptfile":null,"prompts":null,"reference":"convert-math-into-code-1","text":null,"title":"Overview"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":null,"mod":null,"movie":".\/video\/Course2-csharp-primer-arc-convertMathToCode-arithmetic.mp4","name":"Arithmetic and Algebra","promptfile":null,"prompts":null,"reference":"convert-math-into-code-3","text":null,"title":"Arithmetic and Algebra"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":null,"mod":null,"movie":".\/video\/Course2-csharp-primer-arc-convertMathToCode-geometry.mp4","name":"Geometry","promptfile":null,"prompts":null,"reference":"convert-math-into-code-4","text":null,"title":"Geometry"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":null,"mod":null,"movie":".\/video\/Course2-csharp-primer-arc-convertMathToCode-trig.mp4","name":"Trigonometry","promptfile":null,"prompts":null,"reference":"convert-math-into-code-5","text":null,"title":"Trigonometry"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":null,"mod":null,"movie":null,"name":"Reference","promptfile":null,"prompts":null,"reference":null,"text":"<a id=\"convert-math-into-code-1\"><\/a><div class=\"accent\"><h1>Overview<\/h1><p>Becoming successful game developers requires a strong understanding of mathematics and computational thinking. Solving math problems and writing code in the world of game programming is both fun and rewarding. If there was ever a point in past courses where one would wonder \"When would I ever use this knowledge?\", game programming, which utilized a wide breath of knowledge, is one possible answer.<\/p><p>Arithmetic, geometry, trigonometry, linear algebra, and very basic physics are all most programmers need to write basic games. In this Module, we are going to review arithmetic, learn how to convert geometric formulas to code, and demonstrate applications of trigonometry in a game.<\/p><div style=\"text-align: center;\"><ul class=\"anchorGroup\" style=\"text-align: left; display: inline-block;\"><li><a class=\"ankor\" href=\"#convert-math-into-code-2\">Terminology<\/a><\/li><li><a class=\"ankor\" href=\"#convert-math-into-code-3\">Arithmetic and Algebra<\/a><\/li><li><a class=\"ankor\" href=\"#convert-math-into-code-4\">Geometry<\/a><\/li><li><a class=\"ankor\" href=\"#convert-math-into-code-5\">Trigonometry<\/a><\/li><\/ul><\/div><\/div><a class=\"dest\" id=\"convert-math-into-code-2\"><\/a>&nbsp;<div class=\"accent\"><h1>Terminology<\/h1><p><strong>Library<\/strong> - In programming, a library is a prebuilt package of functionality which developers can use instead of writing the code themselves. For example, Box2D is a 2D physics library which provides solutions for collision, joints, and rigid body. Programmers can integrate libraries into their own games to speed up development.<\/p><p><strong>Operator<\/strong> - Symbols which operate on one or more values or variables. Operators are typically separated in categories: arithmetic, incremental\/decremental, assignment, relational, logical, conditional, bitwise, and language. They are used for a variety of operations, including math, selection statements, access, and so on.<\/p><p><strong>Operand<\/strong> - An object or value used in an operation, manipulated by an operator. For example, \"1 + 2\" contains three elements. 1 and 2 are operands. + is an operator. \"1 + 2 - 3\" has 3 operands (1, 2, 3) and two operators (+, -).<\/p><p><strong>Formula<\/strong> - A way to express mathematical information in a concise visual representation. Formulas typically consist of one or more expressions.<\/p><p><strong>Expression<\/strong> - The visual explanation of a formula. These range from simple arithmetic examples, such as \"0 + 0\" to more complex formulas<\/p><p style=\"text-align: center;\"><img class=\"aligncenter img-responsive\" src=\".\/images\/distance_formula1.jpg\" alt=\"Expression1\" \/> <strong>Figure 1<\/strong> <em>Distance Formula Expression<\/em><\/p><p><strong>Algorithm<\/strong> - A procedure broken down into several steps to find a solution to a calculation or process. An algorithm starts at the high level with verbal descriptions and placeholder variables. Once the algorithm is proven, it can be converted to code.<\/p><\/div><a class=\"dest\" id=\"convert-math-into-code-3\"><\/a>&nbsp;<div class=\"accent\"><h1>Arithmetic<\/h1><p>We have already touched on basic arithmetic operators in previous Modules. This branch of mathematics is the most basic and acts as the foundation for conversion of math to code.<\/p><p><strong>Addition<\/strong> - The sum of two values. The operator is a plus (+) and the two operands called augend + addend.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Adding 1 (augend) and 2 (addend) together results in the sum of 3.<br\/>int x = 1 + 2;<br\/><br\/>\/\/ Adding 3 (augend) to -7 (addend) results in the sum of -4<br\/>int y = -7;<br\/>int z = 3;<br\/>int sum = y + z;<br\/><\/pre>&nbsp;<p><strong>Subtraction<\/strong> - The difference between two values. The operator is a minus (-) and the two operands are called minuend - subtrahend:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Subtracting 3 (subtrahend) from 6 (minuend) results in the difference of 3<br\/>int x = 6 - 3;<br\/><br\/>\/\/ Subtracting -4 (subtrahend) from -3 (minuend) results in the difference of -1<br\/>int y = -3;<br\/>int z = -4;<br\/>int difference = y - z;<br\/><\/pre>&nbsp;<p><strong>Multiplication<\/strong> - The product of crossing two values. The operator is an asterix (*) and the two operands are called multiplicand * multiplier:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ 3 (multiplicand) crossed with 4 (multiplier) results in the product of 12<br\/>int x = 3 * 4;<br\/><br\/>\/\/ -2 (multiplicand) crossed with -4 (multiplier) results in the product of 8<br\/>int y = -2;<br\/>int z = -4;<br\/>int product = y * z;<br\/><\/pre>&nbsp;<p><strong>Division<\/strong> - The opposite of multiplication, this is the quotient of two values. The operator is a slash (\/) and the two operands are called dividend \/ divisor. When dividing an integer by an integer, the result will be the quotient and the remainder is disregarded:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ 4 (dividend) divided by 2 (divisor) results in the quotient of 2<br\/>int x = 4 \/ 2;<br\/><br\/>\/\/ 8 (dividend) divided by 3 (divisor) results in the quotient of 2<br\/>int y = 8;<br\/>int z = 3;<br\/><br\/>int quotient = y \/ z;<br\/><\/pre>&nbsp;<p><strong>Modulation<\/strong> - The remainder of two values divided. The operator is a modulo (%) and the two operands are called dividend % divisor:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ 10 (dividend) divided by 3 (divisor) results in a remainder of 1<br\/>int x = 10 % 3;<br\/><br\/>\/\/ 8 (dividend) divided by 2 (divisor) results in a remainder of 0<br\/>int y = 8;<br\/>int z = 2;<br\/>int remainder = y % z;<br\/><\/pre><\/div>&nbsp;<a class=\"dest\" id=\"convert-math-into-code-4\"><\/a>&nbsp;<div class=\"accent\"><h1>Geometry<\/h1><p>Understanding geometry is crucial to nearly ever facet of game programming, including graphics programming, collision detection, object placement, and so on. As we may already know, geometry has a lot to do with shapes. However, there's more to this branch of math than just circles and squares. Almost all applications of geometry in games focus on use the Cartesian Coordinate System. We might recognize the following diagram, which shows three axes (X Y Z) in a Cartesian coordinate system:<\/p><img class=\"aligncenter img-responsive\" src=\".\/images\/cartesian.png\" alt=\"Cartesian\" \/> <p style=\"text-align: center;\"><strong>Figure 2<\/strong> <em>Cartesian coordinate system showing X, Y, Z axes<\/em><\/p>&nbsp;<p>Whenever we need to calculate position, rotation, or size in a game, we specify values using X, Y, Z. For example, a player may be located at (0,0,0), which means 0 on the X-axis, 0 on the Y-axis, and 0 on the Z-axis. If the player moves forward, the location might change to (10, 0, 15).<\/p><p>Points on a coordinate system are only the first step. When more points and data are added, we can generate shapes. In game development, we can't form a triangle without three points, or a rectangle without four points. These shapes can be used for rendering multiple polygons together to form complex objects or represent collision parameters:<\/p><img class=\"aligncenter\" src=\".\/images\/image_CoordinateData-300x204.png\" alt=\"image_CoordinateData\" width=\"300\" height=\"204\" \/><p style=\"text-align: center;\"><strong>Figure 3<\/strong> <em>Shapes in a coordinate system using multiple points and data.<\/em><\/p>&nbsp;<p>So how are coordinates, points, and data applicable? Let's consider a common game mechanic involving powerups and a player. If the player is within distance of the powerup, he\/she will pick it up and receive some kind of benefit, like gaining health or replenishing ammo. This is not something that can be achieved through graphics or guessing. We absolutely have to use geometry to determine distance.<\/p><p>Our starting point is to know the distance formula:<\/p><img class=\"aligncenter img-responsive\" src=\".\/images\/distance1.png\" alt=\"Distance1\" \/> <p style=\"text-align: center;\"><strong>Figure 4<\/strong> <em>Distance Formula<\/em><\/p>&nbsp;<p>The above formula contains symbols, letters, and numbers that may not make sense at first, so let's break down each symbol in the to understand it.<\/p><ul><li>\"d\" is simply an abbreviation. In formulas, letters are typically abbreviations for longer words. In this case, \"d\" stands for distance. Not all formulas use the same letters.<\/li><li>= is the symbol for equals or result.<\/li><li>The large \"check mark\" looking symbol which covers the rest of the symbols stands for a \"square root\".<\/li><li>The () are parenthesis.<\/li><li>The \"triangle\" is the symbol for Delta, which is a Greek symbol that represents the difference between two values.<\/li><li>\"x\" is another abbreviation, which stands for X-coordinates from one or more points.<\/li><li>\"y\" is another abbreviation, which stands for Y-coordinates from one or more points.<\/li><li>The 2 slightly above the other symbols is a notation for raising a value exponentially. In this case, we are squaring the result in the parenthesis.<\/li><\/ul><p>If we were to write out all of the above symbols in English, we can say distance is equal to the square root of the sum of Delta X raised to the power of 2 and Delta Y raised to the power of 2. This formula also tells us quite a bit about the order we should perform each step. Any symbols inside of parenthesis must be calculated before any other operations can occur. That means before we can add, raise, or square root any values, we must know Delta X and Delta Y first.<\/p><p>Additionally, we can replace the Delta symbol with easier to use values. Delta X stands for one X value minus another X value. Delta Y stands for one Y value minus another Y value. The new formula will be easier to convert to code:<\/p><img class=\"aligncenter img-responsive\" src=\".\/images\/distance2.png\" alt=\"Distance2\" \/><p style=\"text-align: center;\"><strong>Figure 5<\/strong> <em>Distance Formula Without Delta<\/em><\/p>&nbsp;<p>Let's go ahead and start converting this to code. In our game example, the positions for the player and powerup are presented as points on an xy plane.<\/p><img class=\"aligncenter\" src=\".\/images\/image_PlayerPowerupPosition.png\" alt=\"image_PlayerPowerupPosition\" width=\"506\" height=\"506\" \/><p style=\"text-align: center;\"><strong>Figure 6<\/strong> <em>Player and Powerup Positions<\/em><\/p>&nbsp;<p>There are several ways to represent these values, but we will use floating point numbers for now:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Player&#039;s X position is 0<br\/>float playerX = 0.0f;<br\/><br\/>\/\/ Player&#039;s Y position is 0<br\/>float playerY = 0.0f;<br\/><br\/>\/\/ Powerup&#039;s X position is 5<br\/>float powerX = 5.0f;<br\/><br\/>\/\/ Powerup&#039;s Y position is 10<br\/>float powerY = 10.0f;<br\/><\/pre><p>&nbsp;<\/p><p>According to our formula, we need to know Delta X and Delta Y. This simply means we need to know the difference between each X and each Y value. We can adjust our formula to use full words instead of abbreviations:<\/p><img class=\"aligncenter\" src=\".\/images\/image_exercise_math.png\" alt=\"image_exercise_math\" width=\"347\" height=\"34\" \/><p style=\"text-align: center;\"><strong>Figure 7<\/strong> <em>Distance Formula Using Game Names<\/em><\/p>&nbsp;<p>In code, we can obtain the delta using simple subtraction:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Player&#039;s X position is 0<br\/>float playerX = 0.0f;<br\/><br\/>\/\/ Player&#039;s Y position is 0<br\/>float playerY = 0.0f;<br\/><br\/>\/\/ Powerup&#039;s X position is 5<br\/>float powerX = 5.0f;<br\/><br\/>\/\/ Powerup&#039;s Y position is 10<br\/>float powerY = 10.0f;<br\/><br\/>\/\/ Delta X<br\/>float deltaX = powerX - playerX;<br\/><br\/>\/\/ Delta Y<br\/>float deltaY = powerY - playerY;<br\/><\/pre>&nbsp;<p>Before any addition takes place, we are supposed to raise the Delta X and Delta Y to the power of two. Another term for this is \"squaring\", which simply means multiplying a value by itself:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Player&#039;s X position is 0<br\/>float playerX = 0.0f;<br\/><br\/>\/\/ Player&#039;s Y position is 0<br\/>float playerY = 0.0f;<br\/><br\/>\/\/ Powerup&#039;s X position is 5<br\/>float powerX = 5.0f;<br\/><br\/>\/\/ Powerup&#039;s Y position is 10<br\/>float powerY = 10.0f;<br\/><br\/>\/\/ Delta X<br\/>float deltaX = powerX - playerX;<br\/><br\/>\/\/ Delta Y<br\/>float deltaY = powerY - playerY;<br\/><br\/>\/\/ Delta X squared<br\/>float squaredDeltaX = deltaX * deltaX;<br\/><br\/>\/\/ Delta Y squared<br\/>float squaredDeltaY = deltaY * deltaY;<br\/><\/pre>&nbsp;<p>The next step in our formula is to add the squared Delta X and Delta Y values together:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Player&#039;s X position is 0<br\/>float playerX = 0.0f;<br\/><br\/>\/\/ Player&#039;s Y position is 0<br\/>float playerY = 0.0f;<br\/><br\/>\/\/ Powerup&#039;s X position is 5<br\/>float powerX = 5.0f;<br\/><br\/>\/\/ Powerup&#039;s Y position is 10<br\/>float powerY = 10.0f;<br\/><br\/>\/\/ Delta X<br\/>float deltaX = powerX - playerX;<br\/><br\/>\/\/ Delta Y<br\/>float deltaY = powerY - playerY;<br\/><br\/>\/\/ Delta X squared<br\/>float squaredDeltaX = deltaX * deltaX;<br\/><br\/>\/\/ Delta Y squared<br\/>float squaredDeltaY = deltaY * deltaY;<br\/><br\/>\/\/ Add the two squared deltas together<br\/>float finalDelta = squaredDeltaX + squaredDeltaY;<br\/><\/pre>&nbsp;<p>Finally, we can find the square root of the final delta. Finding the square root is the opposite of squaring a number. Say we need to find the square root of 16. What number times itself equals 16? There are actually two answers; 4 and -4. In C#, we can use the <em>Sqrt<\/em> method to find the square root:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Player&#039;s X position is 0<br\/>float playerX = 0.0f;<br\/><br\/>\/\/ Player&#039;s Y position is 0<br\/>float playerY = 0.0f;<br\/><br\/>\/\/ Powerup&#039;s X position is 5<br\/>float powerX = 5.0f;<br\/><br\/>\/\/ Powerup&#039;s Y position is 10<br\/>float powerY = 10.0f;<br\/><br\/>\/\/ Delta X<br\/>float deltaX = powerX - playerX;<br\/><br\/>\/\/ Delta Y<br\/>float deltaY = powerY - playerY;<br\/><br\/>\/\/ Delta X squared<br\/>float squaredDeltaX = deltaX * deltaX;<br\/><br\/>\/\/ Delta Y squared<br\/>float squaredDeltaY = deltaY * deltaY;<br\/><br\/>\/\/ Add the two squared deltas together<br\/>float finalDelta = squaredDeltaX + squaredDeltaY;<br\/><br\/>\/\/ Get the square root of finalDelta<br\/>float distance = Math.Sqrt(finalDelta);<br\/><\/pre>&nbsp;<p>We now have our distance. Let's say our game requires the player to be within 10 units of the powerup. We can use a simple <em>if<\/em> statement to determine whether the player gets the powerup or not:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Player&#039;s X position is 0<br\/>float playerX = 0.0f;<br\/><br\/>\/\/ Player&#039;s Y position is 0<br\/>float playerY = 0.0f;<br\/><br\/>\/\/ Powerup&#039;s X position is 5<br\/>float powerX = 5.0f;<br\/><br\/>\/\/ Powerup&#039;s Y position is 10<br\/>float powerY = 10.0f;<br\/><br\/>\/\/ Delta X<br\/>float deltaX = powerX - playerX;<br\/><br\/>\/\/ Delta Y<br\/>float deltaY = powerY - playerY;<br\/><br\/>\/\/ Delta X squared<br\/>float squaredDeltaX = deltaX * deltaX;<br\/><br\/>\/\/ Delta Y squared<br\/>float squaredDeltaY = deltaY * deltaY;<br\/><br\/>\/\/ Add the two squared deltas together<br\/>float finalDelta = squaredDeltaX + squaredDeltaY;<br\/><br\/>\/\/ Get the square root of finalDelta<br\/>float distance = Math.Sqrt(finalDelta);<br\/><br\/>\/\/ If the distance is less than or equal to 10 units, player is close enough to get the powerup<br\/>if (distance &amp;lt;= 10.0f)<br\/>PowerUp();<br\/><\/pre><\/div><a class=\"dest\" id=\"convert-math-into-code-5\"><\/a>&nbsp;<div class=\"accent\"><h1>Trigonometry<\/h1><p>At its core, trigonometry is all about triangles. While a triangle is a shape, trigonometry differs from geometry by focusing on the relationship between the points and angles that make up a triangle. When applying trigonometry to game code, we are mainly interested in forming the sides and angles of a triangle, not position and area (geometric concepts). That begs the question, how do we use trigonometry in game programming if we aren't using it to draw triangles?<\/p><p>Let's look at a practical example. We are developing a space game where a ship can rotate and move in the direction its facing. In the same game, there is an object that is always facing the ship. The game might look like this:<\/p><p style=\"text-align: center;\"><img class=\"aligncenter wp-image-4213 size-full\" src=\".\/images\/image_SimpleSpaceGame.png\" alt=\"image_SimpleSpaceGame\" width=\"531\" height=\"362\" \/> <strong>Figure 8<\/strong> <em>Simple Space Game<\/em><\/p>&nbsp;<p>Believe it or not, we can find a triangle in the above Figure and discover a lot of data that can be used for game play. Remember, all objects in a game have geometric points in space. If we draw a line from the center of one object to the center of another object, we have one side and two points of a triangle:<\/p><img class=\"aligncenter\" src=\".\/images\/image_ConnectingPoints.png\" alt=\"image_ConnectingPoints\" width=\"531\" height=\"362\" \/><p style=\"text-align: center;\"><strong>Figure 9<\/strong> <em>Connecting Two Points<\/em><\/p>&nbsp;<p>If we then draw a line vertically from one object, then a horizontal line from the other object, their intersection will make our triangle:<\/p><img class=\"aligncenter\" src=\".\/images\/image_CompleteTriangle.png\" alt=\"image_CompleteTriangle\" width=\"531\" height=\"362\" \/><p style=\"text-align: center;\"><strong>Figure 10<\/strong> <em>Complete Triangle<\/em><\/p>&nbsp;<p>In fact, this is special triangle because it has a specific angle that is the foundation of trigonometry. This is called a right triangle, since one if its angles is exactly 90 degrees. This is important to note, since the three angles of a triangle always add up to 180 degrees. Once we know where the right angle is located, we can name the each side and angle of the rest of the triangle:<\/p><img class=\"aligncenter\" src=\".\/images\/image_SidesAndAngles.png\" alt=\"image_SidesAndAngles\" width=\"531\" height=\"362\" \/><p style=\"text-align: center;\"><strong>Figure 11<\/strong> <em>Sides and Angles of a Triangle<\/em><\/p>&nbsp;<ul><li>Adjacent - The side next to the angle we are solving for.<\/li><li>Hypotenuse - Longest side of a triangle.<\/li><li>Opposite - The side opposite of the angle we are solving for.<\/li><\/ul><p>Knowing one or more of the components of a triangle provides enough detail for us to find the remaining values. We are able to do so using the three core trig functions all programmers and mathematicians should know:<\/p><ul><li>Sine - The result of Opposite divided by the Hypotenuse<\/li><li>Cosine - The result of Adjacent divided by the Hypotenuse<\/li><li>Tangent - The result of Opposite divided by the Adjacent<\/li><\/ul><p>Many math libraries, engines, and SDKs provide these functions for us. For example, we can access these functions from MonoGame using the following calls:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Store a 90 degree angle<br\/>double degrees = 90;<br\/><br\/>\/\/ Convert degrees to radians (1.57)<br\/>double angle = Math.PI * degrees \/ 180.0;<br\/><br\/>\/\/ Get the sine of angle<br\/>double sinAngle = Math.sin(angle);<br\/><br\/>\/\/ Get the cosine of angle<br\/>double cosAngle = Math.cos(angle);<br\/><br\/>\/\/ Get the tangent of angle<br\/>double tanAngle = Math.tan(angle);<br\/><\/pre>&nbsp;<p>Each trigonometric function also has an inverse derivative. These are known as arcsine, arccosine, and arctangent. An inverse is completely different from an opposite. Think of inverse trig functions like putting our car in reverse. For example, the tangent of 30 degrees is 0.577. If we know the tangent is 0.577, then we can use arctangent to find the angle in degrees.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ 30 degrees<br\/>float angle = 30.0f;<br\/><br\/>\/\/ 0.523 radians<br\/>float angleInRadians = MathHelper.ToRadians(angle);<br\/><br\/>\/\/ Get the tangent of the angle (0.577)<br\/>double tangent = Math.Tan(angleInRadians);<br\/><br\/>\/\/ Get the arctangent (0.523)<br\/>double arcTan = Math.Atan(tangent);<br\/><br\/>\/\/ Convert the result of the arctangent to degrees (30)<br\/>float angleInDegrees = MathHelper.ToDegrees((float)arcTan);<br\/><\/pre><p>When it comes to game development, there is a specialized trig function known as Atan2. This function was created to account for any adjacent sides of a triangle that have a length of zero. Since the tangent of an angle is opposite divided by adjacent, we could encounter a divide by zero catastrophe. Rather than taking a single parameter, Atan2 takes both the X and Y points of a triangle and provides the correct value.<\/p><p>So we know how to visualize a triangle in a game, the names of a triangle's components, and some basic functions that make it easy to perform our calculations. What we haven't seen is how to manipulate a game object using trig. In our example game, we have an object that constantly faces the ship. This means both objects have an X position, Y position, and angle:<\/p><img class=\"aligncenter\" src=\".\/images\/image_ShipsProperties.png\" alt=\"image_ShipsProperties\" width=\"531\" height=\"362\" \/><p style=\"text-align: center;\"><strong>Figure 12<\/strong> <em>Ship Properties Assigned to a Triangle<\/em><\/p>&nbsp;<p>In Figure 10, we can see the position of the ship, the position of the enemy, and the angle of the enemy. The enemy currently has an angle of zero degrees. This value needs to change so that it can face the ship. For this, we use Atan2:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Ship sits at the coordinates 5,1<br\/>float shipXPosition = 5.0f;<br\/>float shipYPosition = 1.0f;<br\/><br\/>\/\/ Enemy sits at the coordinates 0,6<br\/>float enemyXPosition = 0.0f;<br\/>float enemyYPosition = 6.0f;<br\/><br\/>\/\/ Get the distance of X (adjacent) and Y (opposite)<br\/>float xDistance = shipXPosition - enemyXPosition;<br\/>float yDistance = shipYPosition - enemyYPosition;<br\/><br\/>\/\/ Get the angle the angle the enemy will use to face the ship (in radians)<br\/>float enemyAngle = (float)Math.Atan2(yDistance, xDistance);<br\/><\/pre><\/div><!--page:~~convert-math-into-code-reference-text~~-->","title":"Reference Material"},{"bIsChecked":true,"exercise":".\/exercise\/convert-math-into-code.zip","instructions":"\u0009\u0009\u0009<h1>Goal<\/h1>\u0009\u0009\u0009<p>In this Exercise, our goal is to get two balls colliding using simple circle collision detection. We will make use of simple arithmetic, squaring a value, and utilizing the Pythagorean Theorem to check for overlapping circles.<\/p>\u0009\u0009\u0009<img class=\"aligncenter size-full wp-image-701\" src=\".\/images\/math_exercise_1.jpg\" alt=\"math_exercise_1\" width=\"800\" height=\"450\" \/><p style=\"text-align: center;\">The final scene should look similar to the one in this image.<\/p>\u0009\u0009\u0009<h1>Steps<\/h1>\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009<li>Circle Setup\u0009\u0009\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009\u0009\u0009<li>Let's see what the Exercise looks like without modification. Run the Exercise by clicking the Start button or pressing F5. We should see two balls on a blue background. (<a href='.\/simulation\/ConvertMath_1\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<li>First, we need to complete the <em>Circle class<\/em>. Locate <em>Focus Area 1<\/em> toward the top of the <em>ConvertMathExercise<\/em> class.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<li>Inside of the Circle class, add three public float properties to represent the X-Position, Y-Position, and Radius.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<li>Add two new Circle member variables to the <em>ConvertMathExercise<\/em> class, named <code>_ballOneCircle<\/code> and <code>_ballTwoCircle<\/code>. We can allocate memory for these new circles on the same lines as they are declared.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<li>Now that we have two circles, we need to set their properties. Scroll down to <em>Focus Area 2<\/em> in the <code>LoadContent<\/code> method.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<li><code>_ballOneCircle<\/code> will represent the collision circle for the <code>_ballOne<\/code> Sprite. With that in mind, set the X and Y position properties for <code>_ballOneCircle<\/code> to match the position of the <code>_ballOne<\/code> Sprite.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<li>Set <code>_ballOneCircle<\/code>'s radius to half of <code>_ballOne<\/code>'s width (Size property's X axis).<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<li>Repeat this process with <code>_ballTwoCircle<\/code> and <code>_ballTwo<\/code> Sprite.<\/li>\u0009\u0009\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009\u0009<\/li>\u0009\u0009\u0009\u0009<li>Movement\u0009\u0009\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009\u0009\u0009<li>Currently, the two balls are separated. To check for collision, we should have them move toward each other. Scroll down to <em>Focus Area 3<\/em> in the Update method.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<li>We are only going to move the two balls horizontally. Start by setting <code>_ballOne<\/code>'s position to a new value. The new X-Coordinate should be its old value in addition to a small offset, such as 0.03f. The Y-Coordinate should remain the same.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<li>Next, we need to update <code>_ballTwo<\/code>'s position. The new X-Coordinate should be its old value minus a small offset, such as 0.03f. The Y-Coordinate should remain the same.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<li>Run the game by clicking the Start Button or pressing F5. <code>_ballOne<\/code> and <code>_ballTwo<\/code> should now be moving horizontally toward each other. (<a href='.\/simulation\/ConvertMath_2\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<li>Now that the ball Sprites are moving, we need to update their circles. Set the positions for <code>_ballOneCircle<\/code> and <code>_ballTwoCircle<\/code> to the positions of <code>_ballOne<\/code> and <code>_ballTwo<\/code>, respectively.<\/li>\u0009\u0009\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009\u0009<\/li>\u0009\u0009\u0009\u0009<li>Overlap Setup\u0009\u0009\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009\u0009\u0009<li>With the two balls in motion, we can check for the circles overlapping. Scroll down to <em>Focus Area 4<\/em>.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<li>Write a new method named <code>CheckCircleOverlap<\/code>. It should take two separate Circles as parameters and return a bool.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<li>For now, the body of the method should simply return false.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<li>Let's go ahead and use the new method. Scroll up to <em>Focus Area 5<\/em>.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<li>Write a new if\/else selection statement. If <code>CheckCircleOverlap<\/code> with <code>_ballOneCircle<\/code> and <code>_ballTwoCircle<\/code> is successful, change the tints of <code>_ballOne<\/code> and <code>_ballTwo<\/code> to red.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<li>If <code>CheckCircleOverlap<\/code> with <code>_ballOneCircle<\/code> and <code>_ballTwoCircle<\/code> is not successful, set the tints for <code>_ballOne<\/code> and <code>_ballTwo<\/code> to white.<\/li>\u0009\u0009\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009\u0009<\/li>\u0009\u0009\u0009\u0009<li>Overlap Formula\u0009\u0009\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009\u0009\u0009<li>Two circles overlap if the distance between their centers is less than their combined radii.<br \/>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<img class=\"aligncenter size-full wp-image-701\" src=\".\/images\/distance_formula1.jpg\" alt=\"distance_formula1\" width=\"160\" height=\"48\" \/><br \/>\u0009\u0009\u0009\u0009\u0009\u0009\u0009Written out, the distance between two points is calculated by subtracting the two points and applying the Pythagorean Theorem. In this exercise, the X and Y values directly correlate to our Circle class's X-Position and Y-Position.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<li>In <em>Focus Area 4<\/em>, create a new method named Distance. It should take in four floats representing the x1, x2, y1, and y2 components of the formula. The return value should be a float representing the calculated distance.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<li>Inside of the Distance method, convert the distance formula to C# code. It may be easier for us to break out each section of the formula into their own lines of code. Calculate the X distance on one line, the Y distance on a second line, then the total distance on a third line.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<li>Make use of the <code>Math.Sqrt<\/code> method and return the total distance when finished.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<li>Jump back into the <code>CheckCircleOverlap<\/code> method. Call the Distance method, passing the X Positions and Y Positions for each Circle parameter that were passed in. Store the result in a variable named <code>distance<\/code>.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<li>Finally, write a new if selection statement. Check to see if <code>distance<\/code> is less than the combined value of each Circle's radius. If it is less, return true. Otherwise, return false.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<li>Run the game by clicking the Start Button or pressing F5. Both ball sprites should be rendering with their default color tint. Once they begin to overlap, they should change colors until they are no longer overlapping. (<a href='.\/simulation\/ConvertMath_3\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li>\u0009\u0009\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009\u0009<\/li>\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009<h1>Rubric<\/h1><ul><li>1 point for setting up the circles in step 1.<\/li><li>2 point for demonstrating the balls are moving towards each other in step 2.<\/li><li>3 points for demonstrating that the balls turn red when overlapping.<\/li><\/ul>\u0009\u0009\u0009<h1>Code Help<\/h1>            <!--CodeHelp: Sprite-->            <p><strong>Sprite<\/strong> &#8211; This is a utility class with several sub-systems which allow for simple image rendering. With only a few method calls, a Sprite can load a texture, render, and move around. <\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Create a new SpriteTexture and load its content<br\/>SpriteTexture texture = new SpriteTexture(&quot;Graphics\\\\moon&quot;);<br\/>texture.LoadContent(_contentManager);<br\/><br\/>\/\/ Declare a new Sprite on layer 1<br\/>Sprite mySprite = new Sprite(1);<br\/><br\/>\/\/ Set the size of the sprite to 10 by 10<br\/>mySprite.SetSize(10.0f, 10.0f);<br\/><br\/>\/\/ Set the Sprite&#039;s position to the center of the screen<br\/>mySprite.SetPosition(0.0f, 0.0f);<br\/><br\/>\/\/ Set the Sprite&#039;s rotation, in radians.<br\/>mySprite.SetRotation(3.14159f);<br\/><br\/>\/\/ Set the sprite texture<br\/>mySprite.SetSpriteTexture(texture);<br\/><br\/>\/\/ Set the color tint of the Sprite to red<br\/>mySprite.SetTint(Color.Red);<br\/><\/pre><p><\/p><!--CodeHelp: Math-->\u0009\u0009\u0009<p><strong>Math <\/strong> &#8211; This is a class built into C#. It provides constants and static methods for performing common math calculations.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Get the absolute value of -60. Result should be 60<br\/>float absoluteValue = Math.Abs(-60);<br\/><br\/>\/\/ Get the square root of 16 (should be 4)<br\/>float squareRoot = (float)Math.Sqrt(16);<br\/><br\/>\/\/ Get the sine, cosine, tangent, inverse tangent, and inverse cosine of the angle (must be in radians)<br\/>float cosine = Math.Cos(0.5f);<br\/>float sine = Math.Sin(0.5f);<br\/>float tangent = Math.Tan(0.5f);<br\/>float inverseCosine = Math.Acos(0.5f);<br\/>float inverseTangent = Math.Atan(0.5f);<br\/><\/pre><p><\/p><!--page:~~convert-math-into-code-exercise~~-->","link":"exercise","mod":"convert-math-into-code","movie":null,"name":"convert-math-into-code","promptfile":null,"prompts":null,"reference":null,"text":null,"title":"Exercise"}]},{"bIsChecked":true,"name":"basic-oop","title":"Basic OOP","topics":[{"bIsChecked":true,"exercise":null,"instructions":null,"link":null,"mod":null,"movie":".\/video\/Course2-csharp-primer-arc-oop-overview.mp4","name":"Overview","promptfile":null,"prompts":null,"reference":"basic-oop-1","text":null,"title":"Overview"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":null,"mod":null,"movie":".\/video\/Course2-csharp-primer-arc-oop-declaring_instancing.mp4","name":"Declaring & Instantiating","promptfile":null,"prompts":null,"reference":"basic-oop-3","text":null,"title":"Declaring & Instantiating"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":null,"mod":null,"movie":".\/video\/Course2-csharp-primer-arc-oop-fields_properties.mp4","name":"Fields & Properties","promptfile":null,"prompts":null,"reference":"basic-oop-4","text":null,"title":"Fields & Properties"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":null,"mod":null,"movie":".\/video\/Course2-csharp-primer-arc-oop-methods.mp4","name":"Methods","promptfile":null,"prompts":null,"reference":"basic-oop-5","text":null,"title":"Methods"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":null,"mod":null,"movie":".\/video\/Course2-csharp-primer-arc-oop-inheritance.mp4","name":"Inheritance","promptfile":null,"prompts":null,"reference":"basic-oop-6","text":null,"title":"Inheritance"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":null,"mod":null,"movie":".\/video\/Course2-csharp-primer-arc-oop-polymorphism.mp4","name":"Overriding & Polymorphism","promptfile":null,"prompts":null,"reference":"basic-oop-7","text":null,"title":"Overriding & Polymorhpism"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":null,"mod":null,"movie":null,"name":"Reference","promptfile":null,"prompts":null,"reference":null,"text":"<a class=\"dest\" id=\"basic-oop-1\"><\/a><div class=\"accent\"><h1>Overview<\/h1><p>The term \"OOP\" is an acronym for \"Object-Oriented Programming,\" which is an approach to writing code in a way that data and functions are encapsulated in objects. Adopting this paradigm allows us to create modular, clean code instead of writing many stand alone functions and variables. Let's take a look at non-OOP code example.<\/p><p>The following code prints the status of two different moving birds: a sparrow and an ostrich. If a bird is light enough, it can move and print its movement message to the output window. The code is completely functional and achieves its objective.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Return true if the bird&#039;s weight is less than the max weight. Otherwise, return false if it is too heavy.<br\/>static bool CanBirdFly(int weight, int maxWeight)<br\/>{<br\/>if (weight &amp;lt;= maxWeight)<br\/>return true;<br\/>else<br\/>return false;<br\/>}<br\/><br\/>\/\/ Move an animal and print its message<br\/>static string BirdFly(int weight, int maxWeight, string species, string moveMessage)<br\/>{<br\/>if (CanBirdFly(weight, maxWeight))<br\/>{<br\/>Console.WriteLine(species + &quot; has started moving.&quot;);<br\/>Console.WriteLine(moveMessage);<br\/>}<br\/>else<br\/>{<br\/>Console.WriteLine(species + &quot; is too heavy to move.&quot;);<br\/>}<br\/>}<br\/><br\/>\/\/ Main function<br\/>static void Main(string[] args)<br\/>{<br\/>string firstBirdSpecies = &quot;Sparrow&quot;;<br\/>int firstBirdWeight = 1;<br\/>int firstMaxWeight = 5;<br\/>string firstBirdMove = &quot;Sparrow is now flying.&quot;;<br\/><br\/>string secondBirdSpecies = &quot;Ostrich&quot;;<br\/>int secondBirdWeight = 40;<br\/>int secondMaxWeight = 100;<br\/>string secondBirdMove = &quot;Ostrich is now running.&quot;;<br\/><br\/>BirdFly(firstBirdWeight, firstMaxWeight, firstBirdSpecies, firstBirdMove);<br\/>BirdFly(secondBirdWeight, secondMaxWeight, secondBirdSpecies, secondBirdMove);<br\/>}<br\/><\/pre>&nbsp;<p>The above code is short and functional, however it is flawed. Notice we have four variables per bird and two stand-alone functions. Additionally, the only way to guarantee an ostrich doesn't fly is if we make it too heavy. Imagine if we were writing a zoo game and had hundreds of bird species. What if some birds could fly, but we had additional checks for injury or weather conditions. The code will quickly become bloated, difficult to follow, and ultimately fall apart over time.<\/p><p>The solution to this problem is OOP. While there are many facets to OOP, especially when multiple languages are considered, there are three core concepts of the paradigm we will focus on for this Module. These concepts are encapsulation, inheritance, and polymorphism.<\/p><p>Encapsulation is what makes up the \"object\" in \"Object-Oriented Programming\". Looking at the previous code example, we have separate birds with weight, species, and movement. We can encapsulate that into a single, reusable object:<\/p><p style=\"text-align: center;\"><img class=\"aligncenter wp-image-4333 size-full\" src=\".\/images\/image_01.png\" alt=\"image_01\" width=\"665\" height=\"352\" \/><strong>Figure 1<\/strong> <em>OOP Encapsulation<\/em><\/p><p>All birds have a species, weight, and way of moving. If we were to create an object for multiple bird species, duplicating the same data each time would be wasteful. Inheritance allows us to create a parent object containing the shared data, which is then passed down to its children. If a bird object has a weight, species, and movement, an ostrich object will inherit these attributes as well.<\/p><p style=\"text-align: center;\"><img class=\"aligncenter wp-image-4334 size-full\" src=\".\/images\/image_02.png\" alt=\"image_02\" width=\"611\" height=\"432\" \/><strong>Figure 2<\/strong> <em>OOP Inheritance<\/em><\/p><p>Let's say we are creating an aviary management game which would have a collection of multiple species of birds. Rather than creating a collection of sparrows, ostriches, and so on, we can have a single collection of bird objects. If we had a collection of sparrows, it could not include ostriches because their species do not match. Because an ostrich is a bird and a sparrow is a bird, we could populate an array of bird objects without any conflict.<\/p><p style=\"text-align: center;\"><img class=\"aligncenter wp-image-4335 size-full\" src=\".\/images\/image_03.png\" alt=\"image_03\" width=\"611\" height=\"432\" \/><strong>Figure 3<\/strong> <em>OOP Polymorphism<\/em><\/p><p>The most popular implementation of OOP is defining and using classes. The remaining sections in this reference will cover creating and using a classes in C# and utilizing OOP features.<\/p>&nbsp;<div style=\"text-align: center;\"><ul class=\"anchorGroup\" style=\"text-align: left; display: inline-block;\"><li><a class=\"ankor\" href=\"#basic-oop-2\">Terminology<\/a><\/li><li><a class=\"ankor\" href=\"#basic-oop-3\">Classes: Declaring and Instantiating<\/a><\/li><li><a class=\"ankor\" href=\"#basic-oop-4\">Classes: Fields and Properties<\/a><\/li><li><a class=\"ankor\" href=\"#basic-oop-5\">Classes: Methods<\/a><\/li><li><a class=\"ankor\" href=\"#basic-oop-6\">Classes: Inheritance<\/a><\/li><li><a class=\"ankor\" href=\"#basic-oop-7\">Classes: Overriding and Polymorphism<\/a><\/li><\/ul><\/div><\/div><a class=\"dest\" id=\"basic-oop-2\"><\/a>&nbsp;<div class=\"accent\"><h1>Terminology<\/h1><p>Before proceeding with this reference, we should know some key terms.<\/p><p><strong>Member<\/strong> - A field, property, or method belonging to a class.<\/p><p><strong>Access level<\/strong> - Determines the restriction of class members from outside objects or functions.<\/p><p><strong>Modifier<\/strong> - Additional keywords that manipulate the behavior of a class member.<\/p><p><strong>Contract(s)<\/strong> - Rule(s) that enforce how objects or their members are used.<\/p><\/div><a class=\"dest\" id=\"basic-oop-3\"><\/a>&nbsp;<div class=\"accent\"><h1>Classes: Declaring and Instantiating<\/h1><p>We have used several classes in past modules, such as Sprite and Module. Creating our own class starts with basic declaration, which consists of the keyword <em>class<\/em> and the name of our class:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ A basic bird class<br\/>class Bird<br\/>{<br\/>}<br\/><\/pre>&nbsp;<p>The above code is the very bare minimum for creating a class. It has no member variables, methods, or objects. It is essentially an empty container, but still a valid class declaration. All contents of the class will go inside of the two brackets ({}).<\/p><p>Once the class has been defined, it can be instantiated in another portion of code. This is similar to declaring a variable of a primitive data type, with a few extra symbols:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Instantiate a new object of the type &quot;Bird&quot;<br\/>Bird birdObject = new Bird();<br\/><\/pre>&nbsp;<p>In the above code, we create a new object of the type <em>Bird<\/em> and name it <em>birdObject<\/em>. On the same line we assign it to a new instantiation of the bird class. All objects require the parenthesis after the class name, which is reserved for the constructor. We will cover that shortly.<\/p><\/div><a class=\"dest\" id=\"basic-oop-4\"><\/a>&nbsp;<div class=\"accent\"><h1>Classes: Fields and Properties<\/h1><p>An empty class is not interesting or useful. As mentioned earlier, a main feature of OOP is encapsulation. In our example, we are creating a bird object which contains certain features like species, weight, and movement abilities. We can store some of that data as fields in the Bird class. Fields can be primitive data types or other objects. It's as simple as declaring a new variable inside of the class:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ A basic bird class<br\/>class Bird<br\/>{<br\/>\/\/ Describes the Bird species, like &quot;chicken&quot; or &quot;duck&quot;<br\/>string species;<br\/>}<br\/><\/pre>&nbsp;<p>In the above code, we have added a string field named \"species\". We can even initialize the starting value on the same line:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ A basic bird class<br\/>class Bird<br\/>{<br\/>\/\/ Describes the Bird species, like &quot;chicken&quot; or &quot;duck&quot;<br\/>string species = &quot;bird&quot;;<br\/>}<br\/><\/pre>&nbsp;<p>Now that <em>Bird<\/em> contains the <em>species<\/em> field, we can try to access it on a newly instantiated instance using the dot operator (.):<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Instantiate a new object of the type &quot;Bird&quot;<br\/>Bird myBird = new Bird();<br\/><br\/>\/\/ Try to access the Bird&#039;s species. This will cause a compiler error<br\/>myBird.species = &quot;duck&quot;;<br\/><\/pre>&nbsp;<p>In the above code, there is a comment stating the compiler will complain about trying to access <em>species<\/em> from <em>myBird<\/em>. This is because <em>species<\/em> is set to private by default. Any private members are inaccessible outside of a class. While we may be able to access the field in the Bird class, nothing outside of the class can know its value or change it.<\/p><p style=\"text-align: center;\"><img class=\"aligncenter wp-image-4337 size-full\" src=\".\/images\/image_04.png\" alt=\"image_04\" width=\"611\" height=\"432\" \/><strong>Figure 4<\/strong> <em>Private Access Denied<\/em><\/p><p>Access level can be explicitly stated through modifiers. When no modifier is provided, the access level defaults to private, which is the same as typing the following:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ A basic bird class<br\/>class Bird<br\/>{<br\/>\/\/ Describes the Bird species, like &quot;chicken&quot; or &quot;duck&quot;<br\/>private string species = &quot;bird&quot;;<br\/>}<br\/><\/pre>&nbsp;<p>When we wish to make members available, we can use the <em>public<\/em> keyword. These public fields allow for reading, writing, and manipulation of values. Observe the following code:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ A basic bird class<br\/>class Bird<br\/>{<br\/>\/\/ Private backing field for Bird species<br\/>string _species = &quot;bird&quot;;<br\/><br\/>\/\/ Property &quot;Species&quot;<br\/>public string Species;<br\/>}<br\/><\/pre>&nbsp;<p>The private field <em>species<\/em> has been renamed to <em>_species<\/em>. A public string fields named <em>Species<\/em> has been added. Since <em>Species<\/em> is public, it can be accessed from the instantiated object at any time:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Instantiate a new object of the type &quot;Bird&quot;<br\/>Bird myBird = new Bird();<br\/><br\/>\/\/ Set the Species property<br\/>myBird.Species = &quot;duck&quot;;<br\/><br\/>\/\/ Access the Species property<br\/>string birdSpecies = myBird.Species;<br\/><\/pre>&nbsp;<p>C# allows for additional functionality, such as determining how and what values are used by a property. We can even use them to protect private fields from direct manipulation, restrict write access, and even apply logic to values before they are fully accessed. For example:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ A basic bird class<br\/>class Bird<br\/>{<br\/>\/\/ Private backing field for Bird species<br\/>string _species = &quot;bird&quot;;<br\/><br\/>\/\/ Property &quot;Species&quot;, which accesses the private _species field<br\/>public string Species<br\/>{<br\/>get<br\/>{<br\/>return _species;<br\/>}<br\/>set<br\/>{<br\/>_species = value;<br\/>}<br\/>}<br\/>}<br\/><\/pre>&nbsp;<p>After the name, two brackets are required to encapsulate functionality in <em>Species<\/em>. The <em>get<\/em> keyword defines an accessor for the property to retrieve values. If nothing is provided, the direct value of <em>Species<\/em> is returned. Alternatively, we can define what is accessed, such as returning <em>_species<\/em>. The <em>set<\/em> keyword defines an accessor for assigning the value of the property. In the above code, the private field <em>_species<\/em> is set to whatever value is passed when <em>Species<\/em> is assigned something.<\/p><p>Essentially, the <em>Species<\/em> property is simply an accessor for the private <em>_species<\/em> field:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Instantiate a new object of the type &quot;Bird&quot;<br\/>Bird myBird = new Bird();<br\/><br\/>\/\/ Set the Species property (which sets the value of _species)<br\/>myBird.Species = &quot;duck&quot;;<br\/><br\/>\/\/ Access the Species property (which gets the value of _species)<br\/>string birdSpecies = myBird.Species;<br\/><\/pre>&nbsp;<p>So why not make all members public and have a single property? Well, there are times when it is illogical for everything to have read\/write access to all class members. Think of it like this, what would happen if we could toggle the species of a bird in real life at any time:<\/p><p style=\"text-align: center;\"><img class=\"aligncenter wp-image-4338 size-full\" src=\".\/images\/image_05.png\" alt=\"image_05\" width=\"611\" height=\"432\" \/><strong>Figure 5<\/strong> <em>Full Public Access of Species<\/em><\/p><p>In the real world, we can't do that. When a bird is born, its species is already determined. It can't be changed later. We can apply that same logic to our <em>Bird<\/em> class. While we cannot change the species, we still want to know what it is. To do this, we simply remove the <em>set<\/em> portion from the <em>Species<\/em> property:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ A basic bird class<br\/>class Bird<br\/>{<br\/>\/\/ Private backing field for Bird species<br\/>string _species = &quot;bird&quot;;<br\/><br\/>\/\/ Public getter for _species, no setter. This makes it read-only<br\/>public string Species<br\/>{<br\/>get<br\/>{<br\/>return _species;<br\/>}\u0009\u0009<br\/>}<br\/>}<br\/><\/pre>&nbsp;<p>The above code reduces the permissions for <em>Bird<\/em>&#8216;s <em>Species<\/em> property, thus protecting the real data assigned to <em>_species<\/em>. Think of it like one way flow of knowledge in the real world. We see a bird, know its an ostrich, but cannot change the fact it is an ostrich. A one way path:<\/p><p style=\"text-align: center;\"><img class=\"aligncenter wp-image-4339 size-full\" src=\".\/images\/image_06.png\" alt=\"image_06\" width=\"611\" height=\"432\" \/><strong>Figure 6<\/strong> <em>Read-Only Access to Species<\/em><\/p><p>In code, we can access the <em>Species<\/em> property to discover its value, but we cannot change it:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Instantiate a new object of the type &quot;Bird&quot;<br\/>Bird myBird = new Bird();<br\/><br\/>\/\/ Access the Species property (which gets the value of _species)<br\/>string birdSpecies = myBird.Species;<br\/><br\/>\/\/ Attempt to set the Species property (which sets the value of _species). This should cause a compiler error<br\/>myBird.Species = &quot;duck&quot;;<br\/><\/pre>&nbsp;<p>A bird also has weight. This is as simple as adding a new member to the <em>Bird<\/em> class. Unlike species, it is possible to manipulate the weight of a bird. We can simply declare an auto-property:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ A basic bird class<br\/>class Bird<br\/>{\u0009<br\/>\/\/ Auto-Property for Bird Weight<br\/>public int Weight { get; set; }<br\/><br\/>\/\/...previously written code hidden for brevity<br\/>}<br\/><\/pre>&nbsp;<p>In the above code, we have added a new integer property named <em>Weight<\/em>. It has public access and no special manipulation of its value. This means we can access and modify it as much as we want outside of the class:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Instantiate a new object of the type &quot;Bird&quot;<br\/>Bird myBird = new Bird();<br\/><br\/>\/\/ Access the Weight property<br\/>int weight = myBird.Weight;<br\/><br\/>\/\/ Set the Weight property<br\/>myBird.Weight = 10;<br\/><\/pre>&nbsp;<p>Let's get back into the real world. While there is no standard weight for all birds, there are values we know are not possible. No bird of any species can have zero or negative weight. We should apply that logic to our <em>Bird<\/em> class. Like the species field and property, we can start a <em>Bird<\/em> with a default weight and control access:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ A basic bird class<br\/>class Bird<br\/>{<br\/>\/\/ Private backing field for Bird weight<br\/>int _weight = 1;<br\/><br\/>\/\/ Weight property. If 0 or less is passed in, _weight defaults to 1<br\/>public int Weight <br\/>{\u0009\u0009<br\/>get<br\/>{<br\/>return _weight;<br\/>}<br\/>set<br\/>{<br\/>\/\/ Any value at or below 0 is invalid. If 0 is passed, round up to 1<br\/>if (value &amp;lt;= 0)<br\/>value = 1;<br\/><br\/>\/\/ value is guaranteed to be 1, so set _weight<br\/>_weight = value;<br\/>}<br\/>}<br\/><br\/>\/\/...previously written code hidden for brevity<br\/>}<br\/><\/pre>&nbsp;<p>The above code has added a new private field named <em>_weight<\/em> and a public property named <em>Weight<\/em>. In the <em>get<\/em> accessor, we simply return <em>_weight<\/em>. However, the <em>set<\/em> accessor has additional logic to make sure valid data has been sent in. The <em>value<\/em> keyword is unique to the <em>set<\/em> accessor. This is the equivalent of a parameter in a function, except we cannot change its name. In the above code, we check to see if the <em>value<\/em> passed in is less than or equal to zero. If it is, we immediately set it to valid data. From there, we then go on to setting the private backing field (<em>_weight<\/em>) to <em>value<\/em>.<\/p><p>At this point, we can visualize our <em>Bird<\/em> class, its members, and the access levels:<\/p><img class=\"aligncenter\" src=\".\/images\/image_07.png\" alt=\"image_07\" width=\"395\" height=\"401\" \/><p style=\"text-align: center;\"><strong>Figure 7<\/strong> <em>Bird Class With Properties<\/em><\/p><p>We can now declare a new <em>Bird<\/em>, find out its species, and set its weight without worrying about bad data being passed in:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Instantiate a new object of the type &quot;Bird&quot;<br\/>Bird myBird = new Bird();<br\/><br\/>\/\/ Access the Weight property<br\/>int weight = myBird.Weight;<br\/><br\/>\/\/ Set the Weight property. Because it&#039;s less than 0, it will be rounded up to 1 internally<br\/>myBird.Weight = -5;<br\/><\/pre><\/div><a class=\"dest\" id=\"basic-oop-5\"><\/a>&nbsp;<div class=\"accent\"><h1>Classes: Methods<\/h1><p>Fields and properties in a class represent encapsulated data for the object. Class methods are used to add action and functionality. Class methods are very similar to stand-alone functions, with only a few slight differences. Back to our example, we are creating a bird object that can move around. The most well known movement style of birds is flying. Let's add a flying method to our <em>Bird<\/em> class:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ A basic bird class<br\/>class Bird<br\/>{\u0009<br\/>\/\/\/ <br\/>\/\/\/ Make the Bird fly<br\/>\/\/\/ <br\/>public void Fly()<br\/>{<br\/>Console.WriteLine(&quot;Bird has started flying.&quot;);\u0009\u0009<br\/>}<br\/><br\/>\/\/...previously written code hidden for brevity<br\/>}<br\/><\/pre>&nbsp;<p>The above code is placed in the same class we've been building up, but the previously written fields and properties are hidden so we can focus on methods. <em>Bird<\/em> objects now have a public method named <em>Fly<\/em>, which means it can be called from any instantiated version of <em>Bird<\/em>. Even though it's not a data type, like <em>Species<\/em> or <em>_weight<\/em>, the <em>Fly<\/em> method still counts as a class member. We can visualize it the same way we see other members:<\/p><img class=\"aligncenter\" src=\".\/images\/image_081.png\" alt=\"image_08\" width=\"369\" height=\"418\" \/><p style=\"text-align: center;\"><strong>Figure 8<\/strong> <em>Bird public Fly method<\/em><\/p><p><em>Fly()<\/em>, <em>Weight<\/em>, and <em>Species<\/em> are all public and accessible outside of the class.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Instantiate a new object of the type &quot;Bird&quot;<br\/>Bird myBird = new Bird();<br\/><br\/>\/\/ Access the Weight property<br\/>int weight = myBird.Weight;<br\/><br\/>\/\/ Set the Weight property<br\/>myBird.Weight = 10;<br\/><br\/>\/\/ Call Bird&#039;s Move method to start motion<br\/>\/\/ We should see &quot;Bird has started flying.&quot; in the console output<br\/>myBird.Fly();<br\/><\/pre>&nbsp;<p>Like fields, there are situations where we determine some methods are not suitable for public use. For example, some birds cannot fly or can only fly under certain circumstances. This is similar to how species works in real life. If a bird cannot fly, there is typically a reason for that and it should not be open to manipulation. This is the perfect scenario for a <em>private<\/em> method. By adding the <em>private<\/em> keyword modifier to a method, only the class can call it.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ A basic bird class<br\/>class Bird<br\/>{<br\/>\/\/\/ <br\/>\/\/\/ Check to see if the Bird can move<br\/>\/\/\/ <br\/>\/\/\/ Return true if Bird is light enough, false otherwise<br\/>private bool CanFly()<br\/>{<br\/>if (_weight &amp;lt; 100)<br\/>return true;<br\/>else<br\/>return false;<br\/>}<br\/><br\/>\/\/\/ <br\/>\/\/\/ Move the Bird<br\/>\/\/\/ <br\/>public void Fly()<br\/>{<br\/>if (CanFly())<br\/>Console.WriteLine(&quot;Bird has started flying.&quot;);<br\/>else<br\/>Console.WriteLine(&quot;Bird is too heavy to fly.&quot;);<br\/>}<br\/><br\/>\/\/...previously written code hidden for brevity<br\/>}<br\/><\/pre>&nbsp;<p>The above code has added a private method named <em>CanFly()<\/em>. While in real life there are several factors that determine whether a bird can fly, our <em>Bird<\/em> class on cares about the <em>Weight<\/em> of the object. If a <em>Bird<\/em> object is too heavy (100), it cannot fly. Because the method is private, it can only be called inside of the <em>Bird<\/em> class. In the example code from above, <em>CanFly<\/em> is called inside of the <em>Fly<\/em> method. Like fields, we can visualize a private method based on its access level:<\/p><img class=\"aligncenter\" src=\".\/images\/image_091.png\" alt=\"image_09\" width=\"369\" height=\"418\" \/><p style=\"text-align: center;\"><strong>Figure 9<\/strong> <em>Bird private CanFly method<\/em><\/p><p>Since <em>Fly<\/em> is public, we can still call it outside of the <em>Bird<\/em> class. When that method is invoked, <em>CanFly<\/em> will be called internally:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Instantiate a new object of the type &quot;Bird&quot;<br\/>Bird myBird = new Bird();<br\/><br\/>\/\/ Access the Weight property<br\/>int weight = myBird.Weight;<br\/><br\/>\/\/ Set the Weight property<br\/>myBird.Weight = 200;<br\/><br\/>\/\/ Call Bird&#039;s Move method to start motion<br\/>\/\/ Because it is 200 lbs, we will see &quot;Bird is too heavy to fly.&quot; in the console output<br\/>myBird.Fly();<br\/><\/pre>&nbsp;<p>When a <em>Bird<\/em> object is instantiated, nothing special is happening aside from memory allocation. However, there will be instances where we need a <em>Bird<\/em> to immediately initialize members or call internal methods. For this, we must add a constructor, which is a special method all classes can optionally implement.<\/p><p>The syntax for a class constructor is similar to standard function declaration, except the return type is preset to the class itself. A default constructor does not take any parameters:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ A basic bird class<br\/>class Bird<br\/>{<br\/>private string _species;<br\/><br\/>\/\/\/ <br\/>\/\/\/ Default constructor for Bird<br\/>\/\/\/ <br\/>public Bird()<br\/>{<br\/>_species = &quot;bird&quot;;<br\/>Weight = 1;<br\/>}<br\/><br\/>\/\/...previously written code hidden for brevity<br\/>}<br\/><\/pre>&nbsp;<p>In the above code, <em>_species<\/em> no longer starts with a value of \"bird\" when it is declared. It still has a default value of \"\". The default constructor for <em>Bird<\/em> sets the value to \"bird\" as soon as it is instantiated:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Instantiate a new object of the type &quot;Bird&quot;. Private memeber _species is set to &quot;bird&quot; in the constructor<br\/>Bird myBird = new Bird();<br\/><br\/>\/\/ Call Bird&#039;s Move method to start motion<br\/>myBird.Fly();<br\/><\/pre>&nbsp;<p>We can define multiple constructors for a class and have more control over how it will be built upon instantiation. We can keep the default constructor for the <em>Bird<\/em> class for cases where we do not need to determine the species or weight initially. Defining a non-default constructor changes the syntax only by adding parameters:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ A basic bird class<br\/>class Bird<br\/>{<br\/>\/\/\/ <br\/>\/\/\/ Default constructor for Bird<br\/>\/\/\/ <br\/>public Bird()<br\/>{<br\/>_species = &quot;bird&quot;;<br\/>Weight = 1;<br\/>}<br\/><br\/>\/\/\/ <br\/>\/\/\/ Constructor for Bird (with arguments)<br\/>\/\/\/ <br\/>\/\/\/Permanently sets the _species for the Bird<br\/>\/\/\/Determines how heavy the Bird is<br\/>public Bird(string species, int weight)<br\/>{<br\/>_species = species;<br\/>Weight = weight;<br\/>}<br\/><br\/>\/\/...previously written code hidden for brevity<br\/>}<br\/><\/pre>&nbsp;<p>In the above code, we have added the ability to initialize the weight and species of a newly instantiated <em>Bird<\/em> object. Invoking the non-default constructor still requires the use of the <em>new<\/em> keyword and the class name. After that syntax, we simply pass in arguments to the constructor's parameter list:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Instantiate a new object of the type &quot;Bird&quot;<br\/>Bird myBird = new Bird(&quot;duck&quot;, 100);<br\/><br\/>\/\/ Call Bird&#039;s Move method to start motion<br\/>myBird.Fly();<br\/><\/pre>&nbsp;<p>Another special method classes support is called the destructor. A destructor's main purpose is to free up resources, perform clean-up, and run diagnostics when a class is freed from memory. In languages where memory is automatically managed, like C#, destructors are rare and generally not required. Programming languages like C++, where there is no automatic memory management, a class destructor almost always exist to make sure the class and its members are completely freed up before final deletion. This prevent any memory leaks. For the sake of knowledge, the following syntax implements a destructor:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/\/ <br\/>\/\/\/ Destructor for Bird<br\/>\/\/\/ <br\/>~Bird()<br\/>{<br\/>_species = &quot;&quot;;<br\/>_weight = -1;<br\/>Console.WriteLine(&quot;Bird class is being destructed.&quot;);<br\/>}<br\/><\/pre><p>The <em>Bird<\/em> destructor simply sets its species to a default value and its weight to an invalid value. A diagnostic console printout is then called. This kind of functionality is superfluous in C#, especially for the <em>Bird<\/em> class, so it will be omitted for the rest of this reference.<\/p><\/div><a class=\"dest\" id=\"basic-oop-6\"><\/a>&nbsp;<div class=\"accent\"><h1>Classes: Inheritance<\/h1><p>The <em>Bird<\/em> class has showcased the encapsulation feature of basic OOP. Let's review its members visually:<\/p><img class=\"aligncenter\" src=\".\/images\/image_101.png\" alt=\"image_10\" width=\"371\" height=\"515\" \/><p style=\"text-align: center;\"><strong>Figure 10<\/strong> <em>Complete Bird Class<\/em><\/p><p>So far, we have a class with fields, properties, functions, and varying levels of access. While we could add more features and functionality to <em>Bird<\/em>, we will call it complete for now. The next big feature of OOP we will cover is inheritance. In real life, when a child is born it inherits genetic traits from his\/her parents. This is exactly how inheritance works for classes. <em>Bird<\/em> will be the parent class, sometimes called the base class. We will create two new classes named <em>Ostrich<\/em> and <em>Sparrow<\/em>. These are the child classes, sometimes called derived classes.<\/p><p>The syntax for declaring a child class is similar to creating a parent class, with a couple of additions. We will use the <em>class<\/em> keyword and a class name, then follow it with a colon and the parent class name:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">class Ostrich : Bird<br\/>{<br\/>}<br\/><br\/>class Sparrow : Bird<br\/>{<br\/>}<br\/><\/pre>&nbsp;<p>The above code creates two new classes, both of which inherit from <em>Bird<\/em>. We now have what is known as a class hierarchy, which is easy to visualize like a family tree:<\/p><img class=\"aligncenter\" src=\".\/images\/image_111.png\" alt=\"image_11\" width=\"621\" height=\"928\" \/><p style=\"text-align: center;\"><strong>Figure 11<\/strong> <em>Bird, Ostrich, and Sparrow Inheritance<\/em><\/p><p>When a child is derived, it inherits all member variables and methods from a parent class. Even if no new members are added to the <em>Sparrow<\/em> class, it still has the same fields, properties, and methods as <em>Bird<\/em>. If visualized, it would look almost identical to <em>Bird<\/em>, except the constructor names:<\/p><img class=\"aligncenter\" src=\".\/images\/image_121.png\" alt=\"image_12\" width=\"381\" height=\"512\" \/><p style=\"text-align: center;\"><strong>Figure 12<\/strong> <em>Inherited Bird Members<\/em><\/p><p>What makes inheritance great? Well, why write the same code three times when inheritance allows us to write it once? Inheritance is very much about relationships between classes. An ostrich is a bird. A sparrow is a bird. They share the same traits as other birds, like weight, species, and movement. Encapsulating that functionality in a base class results in us only declaring a weight or species property once. All children of <em>Bird<\/em> will essentially \"be birds.\"<\/p><p>When we instantiate and use our new child classes, we can utilize them the same way we were using the base <em>Bird<\/em> class.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Instantiate a new Ostrich object<br\/>Ostrich myOstrich = new Ostrich();<br\/><br\/>\/\/ Access methods and properties inherited from Bird<br\/>myOstrich.Weight = 200;<br\/>myOstrich.Fly();<br\/><br\/>\/\/ Instantiate a new Sparrow object<br\/>Sparrow mySparrow = new Sparrow();<br\/><br\/>\/\/ Access methods and properties inherited from Bird<br\/>mySparrow.Weight = 4;<br\/>mySparrow.Fly();<br\/><\/pre>&nbsp;<p>Not all birds have the same characteristics. An ostrich can run, but it cannot fly. Sparrows can chirp and fly. This leads to the other point of inheritance. Derived classes can have their own unique members. Rather than creating a single, huge class full of every possible bird trait, we can maintain smaller classes via inheritance and achieve unique derivatives.<\/p><p>For example, we can add run method to the <em>Ostrich<\/em> class and a chirp method to the <em>Sparrow<\/em> class:<\/p><img class=\"aligncenter\" src=\".\/images\/image_131.png\" alt=\"image_13\" width=\"790\" height=\"564\" \/><p style=\"text-align: center;\"><strong>Figure 13<\/strong> <em>Unique Child Class Methods<\/em><\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">class Ostrich : Bird<br\/>{<br\/>\/\/\/ <br\/>\/\/\/ Unique Run method for Ostrich<br\/>\/\/\/ <br\/>public void Run()<br\/>{\u0009\u0009<br\/>Console.WriteLine(&quot;Ostrich is running.&quot;);<br\/>}<br\/>}<br\/><br\/>class Sparrow : Bird<br\/>{<br\/>\/\/\/ <br\/>\/\/\/ Unique Chirp method for Sparrow<br\/>\/\/\/ <br\/>public void Chirp()<br\/>{\u0009\u0009<br\/>Console.WriteLine(&quot;Sparrow chirps.&quot;);<br\/>}<br\/>}<br\/><\/pre>&nbsp;<p>Even if they have the same parent, <em>Sparrow<\/em> objects cannot run and <em>Ostrich<\/em> objects cannot chirp. They are still <em>Bird<\/em> objects, but their species changes their abilities. With that in mind, we can give each child class its own unique constructor and reduce the complexity of their instantiation. Remember, <em>Bird<\/em>&#8216;s constructor takes two arguments for weight and species. <em>Species<\/em> should be set immediately and become unchangeable. Observe the following code:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">class Ostrich : Bird<br\/>{<br\/>public Ostrich(int weight)<br\/>{<br\/>Weight = weight;<br\/>_species = &quot;Ostrich&quot;;<br\/>}<br\/><br\/>\/\/...previously written code hidden for brevity<br\/>}<br\/><br\/>class Sparrow : Bird<br\/>{<br\/>public Sparrow(int weight)<br\/>{<br\/>Weight = weight;<br\/>_species = &quot;Sparrow&quot;;<br\/>}<br\/><br\/>\/\/...previously written code hidden for brevity<br\/>}<br\/><\/pre>&nbsp;<p>Now, we can instantiate an <em>Ostrich<\/em> or <em>Sparrow<\/em> and only pass in a weight value. Their <em>_species<\/em> is automatically set based on their class type. However, the above code will not compile. If we recall, <em>_species<\/em> is a private field. This field cannot be accessed outside of its class, even by children.<\/p><p>Along with <em>private<\/em> and <em>public<\/em>, another keyword can be used to control the level of access on class members. The <em>protected<\/em> keyword is a modifier that allows a class and its children to access members:<\/p><img class=\"aligncenter\" src=\".\/images\/image_141.png\" alt=\"image_14\" width=\"384\" height=\"421\" \/><p style=\"text-align: center;\"><strong>Figure 14<\/strong> <em>Making _species Protected<\/em><\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ A basic bird class<br\/>class Bird<br\/>{<br\/>\/\/ Protected backing field for Bird species<br\/>protected string _species;<br\/><br\/>\/\/...previously written code hidden for brevity<br\/>}<br\/><\/pre>&nbsp;<p>Now we can instantiate our children classes, pass in an intitial weight, and call their unique child methods:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Instantiate a new Ostrich object and make it run<br\/>Ostrich myOstrich = new Ostrich(30);                       <br\/>myOstrich.Run();<br\/><br\/>\/\/ Instantiate a new Sparrow object and make it chirp and fly<br\/>Sparrow mySparrow = new Sparrow(4);                        <br\/>mySparrow.Chirp();<br\/>mySparrow.Fly();<br\/><\/pre><\/div><a class=\"dest\" id=\"basic-oop-7\"><\/a>&nbsp;<div class=\"accent\"><h1>Overriding and Polymorphism<\/h1><p>The third aspect of basic OOP we will learn about is polymorphism. Polymorphism, like inheritance, places heavy emphasis on relationships. Derived classes can be treated as their parent class in several scenarios. For example, an ostrich and a sparrow are both birds. In our code, an instantiated <em>Sparrow<\/em> object is a <em>Bird<\/em> object. The same goes for an <em>Ostrich<\/em> object.<\/p><img class=\"aligncenter wp-image-4335 size-full\" src=\".\/images\/image_03.png\" alt=\"image_03\" width=\"611\" height=\"432\" \/><p style=\"text-align: center;\"><strong>Figure 15<\/strong> <em>OOP Polymorphism<\/em><\/p><p>Another technical aspect of polymorphism is a child class overriding methods implemented in a base class. For that, we need to use the <em>virtual<\/em> and <em>override<\/em> keywords. We are going to rename the <em>Fly<\/em> method to to something more generic and make it virtual:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ A basic bird class<br\/>class Bird<br\/>{<br\/>\/\/\/ <br\/>\/\/\/ Move the Bird<br\/>\/\/\/ <br\/>public virtual void Move()<br\/>{<br\/>Console.WriteLine(&quot;Base Bird is moving.&quot;);<br\/>}<br\/><br\/>\/\/...previously written code hidden for brevity<br\/>}<br\/><\/pre>&nbsp;<p>The above code has replaced <em>Fly<\/em> with the virtual <em>Move<\/em> method. Note that the method is also blank, since each child class of <em>Bird<\/em> will implement their own <em>Move<\/em> method. Ostriches run and sparrows fly, so we will override the <em>Move<\/em> method to reflect that behavior:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">class Ostrich : Bird<br\/>{<br\/>\/\/\/ <br\/>\/\/\/ Override Bird&#039;s Move method to make an Ostrich run<br\/>\/\/\/ <br\/>public override void Move()<br\/>{<br\/>if (Weight &amp;lt;= 200)<br\/>Console.WriteLine(&quot;Ostrich has started running.&quot;);<br\/>else<br\/>Console.WriteLine(&quot;Ostrich is too heavy to move.&quot;);<br\/>}<br\/><br\/>\/\/...previously written code hidden for brevity<br\/>}<br\/><br\/>class Sparrow : Bird<br\/>{<br\/>\/\/\/ <br\/>\/\/\/ Override Bird&#039;s Move method to make a Sparrow fly<br\/>\/\/\/ <br\/>public override void Move()<br\/>{\u0009\u0009<br\/>Chirp();<br\/><br\/>if (Weight &amp;lt;= 5)<br\/>Console.WriteLine(&quot;Sparrow has started flying.&quot;);<br\/>else<br\/>Console.WriteLine(&quot;Sparrow is too heavy to fly.&quot;);<br\/>}<br\/><br\/>\/\/...previously written code hidden for brevity<br\/>}<br\/><\/pre>&nbsp;<p>The function signature for the children's <em>Move<\/em> method must be identical to what their parent class uses. Notice we no longer need a <em>CanMove<\/em> method, since each child class determines its own limitations of movement.<\/p><p>Now, we can declare a collection of <em>Bird<\/em> objects, populate it with derivative classes, and call a single <em>Move<\/em> method without having to worry about the class type:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">Bird[] birds = new Bird[3];<br\/><br\/>birds[0] = new Sparrow(3);<br\/>birds[1] = new Sparrow(500);<br\/>birds[2] = new Ostrich(50);<br\/><br\/>foreach(Bird bird in birds)<br\/>{<br\/>bird.Move();<br\/>Console.WriteLine(&quot;&quot;);<br\/>}<br\/><\/pre><p>Sparrow chirps.<br \/>Sparrow has started flying.<\/p><p>Sparrow chirps.<br \/>Sparrow is too heavy to fly.<\/p><p>Ostrich Ostrich has started running.<\/p><\/div><!--page:~~basic-oop-reference-text~~-->","title":"Reference Material"},{"bIsChecked":true,"exercise":".\/exercise\/basic-oop.zip","instructions":"<h1>Goal<\/h1><p>In this Exercise, we are going to finish an asteroid shooting game. Much of the code has been written for us, but there are still some gaps in the code to fill in. We must build a parent class that most of the game objects will derive from, as well as put the remainder of the game together using these classes.<\/p><img class=\"aligncenter size-full wp-image-701\" src=\".\/images\/oop_exercise.jpg\" alt=\"oop_exercise\" width=\"800\" height=\"450\" \/><p style=\"text-align: center;\">The final scene should look similar to the one in this image.<\/p><h1>Steps<\/h1><ol><li>GameObject Class<ol><li>First, let's see what the Exercise looks like without modification. Run the Exercise by clicking the Start button or pressing F5. The game will not run, since the compiler is showing multiple errors in the Error List window. (<a href='.\/simulation\/BasicOOP_1\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><li>The main source of the error is that three existing classes (Ship, Asteroid, Projectile) are trying to derive from a class that doesn't exist yet (<em>GameObject<\/em>). First, we need to declare the class. Open GameObject.cs and go to <em>Focus Area 1<\/em>.<\/li><li>Start by declaring a <em>GameObject<\/em> class. It should inherit from <em>Sprite<\/em>.<\/li><li>Next, we are going to define <em>GameObject<\/em>'s member variables. The first four are public auto-properties of the type <em>float<\/em>. Name the properties exactly as the following: Acceleration, Friction, Radius, and Angle (which will be in degrees). These four properties will be used for controlling the movement of all <em>GameObject<\/em> objects.<\/li><li><em>GameObject<\/em> also needs a public field named <em>Velocity<\/em> of the type <em>Vector2<\/em>. Set its access such that it is accessible everywhere.<\/li><li>A <em>GameObject<\/em> must have a form of basic collision for interacting with other game objects. We are going to use pre-existing collision objects provided by XNA. Declare a protected <em>BoundingSphere<\/em> field named <code>gameObjectBoundingSphere<\/code>.<\/li><li>Next, declare a protected <em>BoundingBox<\/em> field named <code>gameObjectBoundingBox<\/code>.<\/li><li>In this game, we want the ability to quickly and easily toggle collision detection types without modifying every class. This is a perfect case for delegates. Start by declaring a new delegate named <code>CollisionDelegate<\/code>. It should have public access and a boolean return type. A single argument of type <em>GameObject<\/em> should be used.<\/li><li>With our <em>CollisionDelegate<\/em> declared, declare a new public field of that type named <em>GameObjectCollisionDelegate<\/em>.<li><em>GameObject<\/em> and its children have all the properties they will need. Next, we need a constructor. Define <em>GameObject<\/em>'s constructor. It should take four arguments: a <em>Vector3<\/em> (startingPosition), a <em>Vector2<\/em>(startingVelocity), a second <em>Vector2<\/em> (size), and a <em>float<\/em> (angle).<\/li><li>Inside of <em>GameObject<\/em>'s constructor, we need to call three of its parent class's (<em>Sprite<\/em>) methods. Start by calling <code>SetPosition<\/code>, which takes in a float for the X-coordinate position and another float for the Y-Coordinate position. Use the <code>startingPosition<\/code> X and Y components for these values.<\/li><li>Next, call <code>SetSize<\/code>, which takes in two floats for width and height. Use the X and Y components from the <code>size<\/code> parameter.<\/li><li>The third <em>Sprite<\/em> method to call is <code>SetLayer<\/code>, which simply needs a value of 1 or greater as the argument.<\/li><li>Next, initialize the <code>Velocity<\/code> and <code>Angle<\/code> properties to the appropriate arguments passed into the constructor, based on name.<\/li><li>Next, we need to set the <code>Radius<\/code> property in case a circle collision detection delegate is used. When the <code>size<\/code> is passed in, the value represents the full size of a box from end-to-end. The size can also be equated to a circle's diameter, which is always twice the value of a circle's radius. Set the <code>Radius<\/code> property value to half of the <code>size<\/code>.<\/li><li>The last two properties to initialize in the constructor are the collision structures. Start by allocating a new <code>BoundingBox<\/code> for <code>gameObjectBoundingBox<\/code>. Its constructor takes two arguments, both <em>Vector3<\/em>. These represent the corners of the box. The first argument, <code>min<\/code>, is the bottom-left corner. This is equivalent to the <em>GameObject<\/em>'s <code>Position<\/code>.<\/li><li>The second argument, <code>max<\/code>, is the top-right corner of the box. This equates to the <em>GameObject<\/em>'s <code>Position<\/code> in addition to its <code>Size<\/code>. Pass in a new <em>Vector3<\/em> that adds the X and Y elements of the <code>Size<\/code> and <code>Position<\/code> properties, leaving the Z argument as 0. See the Code Help at the bottom of this exercise for more information.<\/li><li>The gameObjectBoundingSphere is much simpler to set up. Allocate a new BoundingSphere and assign it to gameObjectBoundingSphere. The BoundingSphere constructor takes in a <code>Vector3<\/code> for its center point and a float for its radius. Use the <em>GameObject<\/em> <code>Position<\/code> and <code>Radius<\/code> for the arguments.<\/li><li>Every <em>GameObject<\/em> will have custom updating, but they do share common functionality. A <em>GameObject<\/em> will update its position, its bounding structures, and stay on screen at all times. With that in mind, we can create a virtual update method. This will allow the base <em>GameObject<\/em> class to perform the common routines and the children classes to override for class specific updating. In <em>GameObject<\/em>, declare a new method named <code>UpdateGameObject<\/code>. It should be public and virtual, with no return type. It will take a <code>GameTime<\/code> as a single parameter. Name that parameter <code>gameTime<\/code>.<\/li><li>Inside of our new <code>UpdateGameObject<\/code> method, we must first update the position of the <em>GameObject<\/em>. Since <em>GameObject<\/em>'s parent is <code>Sprite<\/code>, a method for this already exists. We can call <code>SetPosition<\/code>, which takes in two floats for the new position. The values we need are the X and Y components of the <code>Position<\/code> added with the <code>Velocity<\/code>.<\/li><li>The final operation we need to perform in <code>UpdateGameObject<\/code> is to make sure it always stays on screen. If the <em>GameObject<\/em> leaves the right side, it will automatically teleport to the left. If it leaves the bottom of the screen, it will automatically teleport to the top. The opposite is true for exiting the left and top portions of the screen. In this Exercise, the following extents are available:<ol><li>Right: 39.0f<\/li><li>Left: -39.0f<\/li><li>Top: 21.93f<\/li><li>Bottom: -21.93f<\/li><\/ol><\/li>We need to create two pairs of <em>if\/else<\/em> checks. The first two will check the <code>GameObject Position.X<\/code>. If the X value is greater than the right of the screen, set it to the negative value. Otherwise, if the X value is less than the left of the screen, set it to the positive value. The second <em>if\/else<\/em> statements will check the <code>GameObject Position.Y<\/code>. If the Y value is greater than the top of the screen, set it to the negative value. Otherwise, if the Y value is less than the bottom of the screen, set it to the positive value.<\/li><li>Next, we need to update the <code>gameObjectBoundingBox<\/code>. Each update, the <code>min<\/code> and <code>max<\/code> properties need to be set. The <code>min.X<\/code> and <code>min.Y<\/code> are the <em>GameObject<\/em>'s position. The <code>max.X<\/code> and <code>max.Y<\/code> are the <em>GameObject<\/em>'s position in addition to its size. Set the <code>gameObjectBoundingBox<\/code> properties based on that information.<\/li><li>The <code>gameObjectBoundingSphere<\/code> also needs updating. Since the radius is already set, we simply need to update the <code>gameObjectBoundingSphere<\/code>'s Center to match the <em>GameObject Position<\/em>.<\/li><li>We are now done with the UpdateGameObject method. Earlier, we created a declaration for the <code>CollisionDelegate<\/code>. Now, we can define two delegate functions. Declare one method named <code>CheckBoxCollision<\/code>, making sure it has the same method signature as <code>CollisionDelegate<\/code>.<\/li><li>Define another method named <code>CheckCircleCollision<\/code> with the same signature.<\/li><li>Inside of the new <code>CheckBoxCollision<\/code> method, we will need to test this <em>GameObject<\/em>'s <code>gameObjectBoundingBox<\/code> with the bounding box belonging to the <em>GameObject<\/em> parameter that is passed in. Call the <code>Intersects<\/code> method from one of the bounding boxes. Pass in the other object's bounding box as an argument. Return the result of the method call. See the Code Help at the bottom of this exercise for more details.<\/li><li>Inside of the new <code>CheckCircleCollision<\/code> method, we will need to test this <em>GameObject<\/em>'s <code>gameObjectBoundingSphere<\/code> with the bounding sphere belonging to the <em>GameObject<\/em> parameter that is passed in. Call the <code>Intersects<\/code> method from one of the bounding spheres. Pass in the other object's bounding sphere as an argument. Return the result of the method call. See the Code Help at the bottom of this exercise for more details.<\/li><li>Finally, we need to set up a method for collision reaction. Each child <em>GameObject<\/em> will handle getting hit differently. Since there is no common code, but there is a required method, we can simply create an empty virtual method. Declare a new method named <code>Hit<\/code>. It should be virtual, have public access, and have no return value or parameters.<\/li><li>At this point, if we completed the <em>GameObject<\/em> class and named everything properly, the project should fully compile. Select \"Build Solution\" from the Build menu or press F7 to compile. If there are any compiler errors, we can debug by associating the missing member to the sub-class throwing the error. (<a href='.\/simulation\/BasicOOP_2\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><\/ol><\/li><li>Instantiating Game Objects<ol><li>Now that <em>GameObject<\/em> and its children are fully functional, we can build the game. Open basic_oop.cs and scroll down to <em>Focus Area 2<\/em>, which should be inside of the <code>Create<\/code> method. A <em>Ship<\/em> object named <code>_ship<\/code> is already declared as a field, but it has not been allocated yet. Allocate a new <em>Ship<\/em> and assign it to <code>_ship<\/code>. The constructor for <em>Ship<\/em> is identical to its parent class, <em>GameObject<\/em>. The first <em>Vector3<\/em> argument represents the starting position, which should be set to 0,0,0. The second argument represents the starting velocity, which also should be set to 0,0. The third <em>Vector2<\/em> is for the ship's size. In this game, a width of 5.4 and height of 4.0 should scale the ship appropriately. The final argument is for the ship's angle, which can be left at zero for now.<\/li><li>Next, we need to set the ship's collision delegate. Assign the ship's collision delegate to the box variant we wrote in the <em>GameObject<\/em> class earlier. <\/li><li>Finally, add the ship to the sprite manager (<code>_spriteManager<\/code>). Even though our ship is of the type <em>Ship<\/em>, it is also a <em>Sprite<\/em> because of inheritance. See the Code Help section for more details.<\/li><li>In this game, the player will avoid and shoot some asteroids. Scroll down to <em>Focus Area 3<\/em>.<\/li><li>Allocate a new array of five Asteroid class types and assign it to <code>_asteroids<\/code>.<\/li><li>Create a new loop that will iterate enough times to go through the entire asteroids array.<\/li><li>In each iteration instantiate a new <em>Asteroid<\/em> object. The <em>Asteroid<\/em> constructor's signature is identical to that of <em>GameObject<\/em>. The first argument is a Vector3, which represents the position. We want to start the asteroid far off screen, so use -50,-50,0 for the position. Its starting velocity should be zero in the X and zero in the Y. A size of 5,5 should be large enough. For the rotation, choose a random value between 0 and 360. Do this by calling <code>rand.Next(360)<\/code>.<\/li><li>Set the newly allocated asteroid's collision delegate to match what the ship is using.<\/li><li>Finally, add the new asteroid to the <code>_asteroids<\/code> array and <code>_spriteManager<\/code>.<\/li><\/ol><\/li><li>Updating Game Objects<ol><li>Now all of our entities need updating. Scroll down to <em>Focus Area 4<\/em>.<\/li><li>Next, create another loop to iterate through all of our asteroids. In each iteration, call <code>UpdateGameObject<\/code> and pass in the game time.<\/li><li>Scroll down to <em>Focus Area 5<\/em> and update the ship as well.<\/li><li>Next, run the game by clicking the Start Button or pressing F5. Everything should be rendering and updating, but we do not have any control over the gameplay. (<a href='.\/simulation\/BasicOOP_3\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><\/ol><\/li><li>Input<ol><li>Let's add some interaction now. Scroll down to <em>Focus area 6<\/em> inside of the <code>UpdateInput<\/code> method.<\/li><li>This game will be driven entirely by keyboard. Create four checks to see if the <code>keyboardState<\/code> is detecting any key-down presses. The four keys we are going to detect are A, D, Space, and W. A will rotate the ship counter-clockwise. D will rotate the ship clockwise. Space will fire a projectile. W will move the ship in the direction it is facing.<\/li><li>In the check for the A key, increase the ship's angle by one degree. After that, set the ship's rotation by the angle using the appropriate Sprite class method. We must convert the angle from degrees to radians using the MathHelper as the Sprite class method is expecting radians. See the Code Help section at the bottom of this Exercise for more details.<\/li><li>In the check for the D key, decrease the ship's angle by one degree. After that, set the ship's rotation by the angle using the appropriate Sprite class method. We must convert the angle from degrees to radians using the MathHelper as the Sprite class method is expecting radians. See the Code Help section at the bottom of this Exercise for more details.<\/li><li>In the check for the Space key, simply call the ship's <code>Shoot<\/code> method to fire a projectile.<\/li><li>We need to write code inside of the W key check to make the ship move. Declare two new floating-point variables named <code>newX<\/code> and <code>newY<\/code>. To get their values, convert the following math formulas to code:<br \/>\u0009\u0009\u0009<img class=\"aligncenter size-full wp-image-701\" src=\".\/images\/oop_formula1.png\" alt=\"oop_formula1\" width=\"358\" height=\"283\" \/><\/li><li>Next, call <code>SetSpeed<\/code> on the ship and pass in the new X and Y values.<\/li><li>Run the game by clicking the Start Button or pressing F5. We should be able to move the ship around using the W, A, and D keys. (<a href='.\/simulation\/BasicOOP_4\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><li>While all the game objects should be colliding, the box-to-box collisions are not super accurate. The corners of each box can greatly extend past the actual visible pixels of the <code>GameObject<\/code> textures. Go back to <em>Focus Area 2<\/em> and <em>Focus Area  3<\/em>. Replace the <code>GameObjectCollisionDelegate<\/code> for the ship and asteroids to use the circle variant instead. There should be a noticeable difference in collision accuracy.<\/li><\/ol><\/li><li>Output<ol><li>Now that our game has input, we need to finish it off by adding some output. In this game, we are going to load and save the highest score. Start by scrolling to <em>Focus Area 7<\/em>. Declare a new method named <code>LoadHighScores<\/code>. It will not have a return value, but it will take in a single string named <code>highScoreFilePath<\/code>.<\/li><li>Using the <em>File<\/em> class, check to see if the high score file path exists. See the Code Help section at the bottom of this exercise for more details on <em>File<\/em>.<\/li><li>If the file does exist, read in the contents of the file as an integer using <em>BinaryReader<\/em>. Store this value in <code>_highScore<\/code>. See the Code Help section at the bottom of this exercise for more details on <em>BinaryReader<\/em>.<\/li><li>If the file does not exist, create a new high score file in the same path using <em>BinaryWriter<\/em>. Write out a default score of 100 and set the <code>_highScore<\/code> field to the same value. See the Code Help section at the bottom of this exercise for more details on <em>BinaryWriter<\/em>.<\/li><li>In <em>Focus Area 8<\/em> declare a new method named <code>SaveHighScore<\/code>. It should not return anything, but it will take in a string named <code>highScoreFilePath<\/code>.<\/li><li>Inside of <code>SaveHighScore<\/code>, use the <em>BinaryWriter<\/em> to save the <code>_highScore<\/code> to the high score file path. See the Code Help section at the bottom of this exercise for more details on <em>BinaryWriter<\/em>.<\/li><li>Scroll down to <em>Focus Area 9<\/em> and call our new method which loads high scores from file. Use the file path \".\/highScore.dat.\"<\/li><li>Finally, scroll down to <em>Focus Area 10<\/em>. Call the <code>SaveHighScore<\/code> method, using the same file path from the previous directive.<\/li><li>Run the game by clicking the Start Button or pressing F5. The game should be fully playable at this point. The ship can move and shoot. All game objects are warping on the edges of the screen. If an asteroid collides with a projectile or the ship, the score should increase. (<a href='.\/simulation\/BasicOOP_5\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><\/ol><\/li><\/ol><h1>Rubric<\/h1><ul><li>2 points when the code compiles and step ag) is completed.<\/li><li>2 points when the new objects update as described in step 3.<\/li><li>2 points when the ship moves via W,A,D keys in step 4.i.<\/li><li>2 points for a fully playable game in step 5.<\/li><\/ul><h1>Code Help<\/h1>        <!--CodeHelp: Vector2-->        <p><strong>Vector2<\/strong> &#8211; A vector data structure containing two components (X, Y). The values can represent UV texture coordinates, 2D object positioning, and several other forms of data. When creating a new Vector2, we can pass in two float values:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Example X\/Y floats. Values are arbitrary<br\/>float x = 1.0f;<br\/>float y = 2.0f;<br\/><br\/>\/\/ Create a new Vector2<br\/>Vector2 myVector = new Vector2(x, y);<br\/><br\/>\/\/ Create a zeroed out Vector2<br\/>Vector2 zeroedVector = Vector2.Zero;<br\/><\/pre><p><\/p><!--CodeHelp: Vector3-->        <p><strong>Vector3<\/strong> &#8211;  A vector data structure containing 3 components (X, Y, Z). When creating a new Vector3, we can pass in three float values:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Example X\/Y\/Z floats. Values are arbitrary<br\/>float x = 1.0f;<br\/>float y = 2.0f;<br\/>float z = 3.0f;<br\/><br\/>\/\/ Create a new Vector3<br\/>Vector3 vectorA = new Vector3(x, y, z);<br\/>Vector3 vectorB = new Vector3(4.0f, 5.0f, 6.0f);<br\/><br\/>\/\/ Values of vectorC will be 5.0f, 7.0f, 9.0f for X, Y, and Z respectively<br\/>Vector3 vectorC = vectorA + vectorB;<br\/><br\/>\/\/ Create a Vector3 by transforming a Matrix <br\/>Vector3 distance = new Vector3(1.0f, 2.0f, 3.0f);<br\/>Vector3 transformedVector = Vector3.Transform(distance, Matrix.CreateRotationY(MathHelper.ToRadians(45.0f)));<br\/><br\/>\/\/ Create a Vector3 from Vector2 values<br\/>Vector2 vectorTwo = new Vector2(10.0f, 5.0f);<br\/>Vector3 vectorThree = new Vector3(vectorTwo.X, vectorTwo.Y, 0.0f);<br\/><\/pre><p><\/p><!--CodeHelp: SpriteTexture-->        <p><strong>SpriteTexture<\/strong> &#8211; This is a utility class responsible for managing the content and processing of a Sprite's texture.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Create a new SpriteTexture and load its content<br\/>SpriteTexture texture = new SpriteTexture(&quot;Graphics\\\\moon&quot;);<br\/>texture.LoadContent(_contentManager);<br\/><\/pre><p><\/p><!--CodeHelp: Sprite-->        <p><strong>Sprite<\/strong> &#8211; This is a utility class with several sub-systems which allow for simple image rendering. With only a few method calls, a Sprite can load a texture, render, and move around. <\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Create a new SpriteTexture and load its content<br\/>SpriteTexture texture = new SpriteTexture(&quot;Graphics\\\\moon&quot;);<br\/>texture.LoadContent(_contentManager);<br\/><br\/>\/\/ Declare a new Sprite on layer 1<br\/>Sprite mySprite = new Sprite(1);<br\/><br\/>\/\/ Set the size of the sprite to 10 by 10<br\/>mySprite.SetSize(10.0f, 10.0f);<br\/><br\/>\/\/ Set the Sprite&#039;s position to the center of the screen<br\/>mySprite.SetPosition(0.0f, 0.0f);<br\/><br\/>\/\/ Set the Sprite&#039;s rotation, in radians.<br\/>mySprite.SetRotation(3.14159f);<br\/><br\/>\/\/ Set the sprite texture<br\/>mySprite.SetSpriteTexture(texture);<br\/><br\/>\/\/ Set the color tint of the Sprite to red<br\/>mySprite.SetTint(Color.Red);<br\/><\/pre><p><\/p><!--CodeHelp: SpriteManager-->        <p><strong>SpriteManager<\/strong> &#8211; SpriteManager is a utility class which is responsible for sorting, updating, and rendering sprites.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Create a new Sprite<br\/>Sprite mySprite = new Sprite();<br\/><br\/>\/\/ In order for mySprite to render and update, it MUST be added to _spriteManager<br\/>_spriteManager.AddSprite(mySprite);<br\/><br\/>\/\/ Update the sprites. Takes in a GameTime as argument<br\/>_spriteManager.UpdateSprites(time);<br\/><br\/>\/\/ Render the sprites. Takes in a GraphicsDevice and Camera for arguments<br\/>_spriteManager.RenderSprites(_graphicsDevice, DefaultCamera);<br\/><\/pre><p><\/p><!--CodeHelp: Math-->        <p><strong>Math <\/strong> &#8211; This is a class built into C#. It provides constants and static methods for performing common math calculations.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Get the absolute value of -60. Result should be 60<br\/>float absoluteValue = Math.Abs(-60);<br\/><br\/>\/\/ Get the square root of 16 (should be 4)<br\/>float squareRoot = (float)Math.Sqrt(16);<br\/><br\/>\/\/ Get the sine, cosine, tangent, inverse tangent, and inverse cosine of the angle (must be in radians)<br\/>float cosine = Math.Cos(0.5f);<br\/>float sine = Math.Sin(0.5f);<br\/>float tangent = Math.Tan(0.5f);<br\/>float inverseCosine = Math.Acos(0.5f);<br\/>float inverseTangent = Math.Atan(0.5f);<br\/><\/pre><p><\/p><!--CodeHelp: MathHelper-->        <p><strong>MathHelper<\/strong> &#8211; A static class containing common values used in math operations.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Convert 90 degrees to radians<br\/>float angleRads = MathHelper.ToRadians(90.0f)<br\/><br\/>\/\/ Get the value of PI<br\/>float pi = MathHelper.Pi;<br\/><br\/>\/\/ Get the value of tau<br\/>float tau = MathHelper.TwoPi;<br\/><\/pre><p><\/p><!--CodeHelp: BoundingBox-->        <p><strong>BoundingBox <\/strong> &#8211; This is an XNA structure used to define a 3D box in a game and check for collision.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Instantiate a new BoundingBox in the center of the scene, with a size of 5 in the X, 10 in the Y, and 0 in the Z<br\/>Vector2 firstBoxSize = new Vector2(5.0f, 10.0f);<br\/>BoundingBox firstBox = new BoundingBox(new Vector3(0.0f, 0.0f, 0.0f), new Vector3(firstBoxSize.X, firstBoxSize.Y, 0.0f));<br\/><br\/>\/\/ Instantiate a second BoundingBox<br\/>Vector2 secondBoxSize = new Vector2(3.0f, 5.0f);<br\/>BoundingBox secondBox = new BoundingBox(new Vector3(5.0f, 3.0f, 0.0f), new Vector3(secondBoxSize.X, secondBoxSize.Y, 0.0f));<br\/><br\/>\/\/ Check to see if the two bounding boxes intersect<br\/>bool didIntersect = firstBox.Intersects(secondBox);<br\/><\/pre><p><\/p><!--CodeHelp: BoundingSphere-->        <p><strong>BoundingSphere<\/strong> &#8211; This is an XNA structure used to define a 3D sphere in a game and check for collision.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Instantiate a new BoundingSphere in the center of the scene, with a radius of 20<br\/>float radius = 20.0f;<br\/>BoundingSphere firstSphere = new BoundingSphere(new Vector3(0.0f, 0.0f, 0.0f), radius);<br\/><br\/>\/\/ Instantiate a second BoundingSphere<br\/>float secondRadius = 40.0f;<br\/>BoundingSphere secondSphere = new BoundingSphere(new Vector3(5.0f, 3.0f, 0.0f), secondRadius);<br\/><br\/>\/\/ Check to see if the two bounding spheres intersect<br\/>bool didIntersect = firstSphere.Intersects(secondSphere);<br\/><\/pre><p><\/p><!--CodeHelp: BinaryReadWrite--><p><strong>BinaryReader and BinaryWriter<\/strong> &#8211; These classes are used for reading and writing primitive data types to the hard drive.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Define the file path for writing\/reading<br\/>string filePath = &quot;C:\\testFile.txt&quot;;<br\/><br\/>\/\/ We will write out a person&#039;s name and age<br\/>string name = &quot;Susan&quot;;<br\/>int age = 32;<br\/><br\/>\/\/ Instantiate a new BinaryWriter using filePath and Open mode<br\/>BinaryWriter fileWriter = new BinaryWriter(File.Open(filePath, FileMode.Open));<br\/><br\/>\/\/ Write out the name and age<br\/>fileWriter.Write(name);<br\/>fileWriter.Write(age);<br\/><br\/>\/\/ Always close the stream<br\/>fileWriter.Close();<br\/><br\/>\/\/ Instantiate a new BinaryReader using filePath and Open mode<br\/>BinaryReader fileReader = new BinaryReader(File.Open(filePath, FileMode.Open));<br\/><br\/>\/\/ Read in the name and age<br\/>string newName = fileReader.ReadString();<br\/>int newAge = fileReader.ReadInt32();<br\/><br\/>\/\/ Always close the stream<br\/>fileReader.Close();<br\/><\/pre><p><\/p><!--page:~~basic-oop-exercise~~-->","link":"exercise","mod":"basic-oop","movie":null,"name":"basic-oop","promptfile":null,"prompts":null,"reference":null,"text":null,"title":"Exercise"}]}],"title":"Programming Basics"},{"bIsChecked":true,"description":"Use quads, textures, vectors, matrices, translation, rotation and scale to develop an animated scene.","image":"animated_scene_exercise_1.png","modules":[{"bIsChecked":true,"name":"quad","title":"Quads","topics":[{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"quads","movie":".\/video\/Course2-animated-scene-arc-quad-overview.mp4","name":"Overview","promptfile":null,"prompts":null,"reference":"quad-1","text":null,"title":"Overview"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"role-building","mod":"quads","movie":".\/video\/Course2-animated-scene-arc-quad-building-a-quad.mp4","name":"Building Quads","promptfile":null,"prompts":null,"reference":"quad-3","text":null,"title":"Building Quads"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"sprite-rasterizing","mod":"quads","movie":".\/video\/Course2-animated-scene-arc-quad-basic-graphics-pipeline.mp4","name":"Rasterizing Quads","promptfile":null,"prompts":null,"reference":"quad-4","text":null,"title":"Rasterizing Quads"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"Alpha Test","mod":"quads","movie":".\/video\/Course2-animated-scene-arc-quad-alpha.mp4","name":"Alpha Test","promptfile":null,"prompts":null,"reference":"quad-5","text":null,"title":"Alpha Test"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"reference","mod":"quads","movie":null,"name":"Reference","promptfile":null,"prompts":null,"reference":null,"text":"<a id=\"quad-1\"><\/a><div class=\"accent\"><h1>Overview<\/h1><p>A \"quad\" is short for a quadrilateral primitive. It is typically built using four vertices and additional rendering information, such as colors or textures.<\/p><img class=\"img-responsive aligncenter\" src=\".\/images\/Image_Quads.png\" alt=\"Image_Quads\" width=\"824\" height=\"260\" \/><p style=\"text-align: center;\"><strong>Figure 1<\/strong> Quad Outline, Colored Quad, Textured Quad<\/p>&nbsp;<div style=\"text-align: center;\"><ul class=\"anchorGroup\" style=\"text-align: left; display: inline-block;\"><li><a class=\"ankor\" href=\"#quad-2\">Terminology<\/a><\/li><li><a class=\"ankor\" href=\"#quad-3\">Building A Quad<\/a><\/li><li><a class=\"ankor\" href=\"#quad-4\">Rasterization<\/a><\/li><li><a class=\"ankor\" href=\"#quad-5\">Alpha<\/a><\/li><\/ul><\/div><\/div><a class=\"dest\" id=\"quad-2\"><\/a>&nbsp;<div class=\"accent\"><h1>Terminology<\/h1><p>To fully understand how a quad is built, we should know the following basic terminology:<\/p><p><strong>Coordinates<\/strong> - You might recognize the following diagram, which shows three axes (X Y Z) in a Cartesian coordinate system:<\/p><img class=\"aligncenter img-responsive\" src=\".\/images\/cartesian.png\" alt=\"Cartesian\" \/><p style=\"text-align: center;\"><strong>Figure 2<\/strong> <em>Cartesian coordinate system showing X, Y, Z axes<\/em><\/p><p>Whenever we need to calculate position in a game, we specify a point using X, Y, Z. This works for positioning an object in a game, texture coordinates, and even individual vertices. Storage of coordinates varies from tech to tech. In MonoGame and XNA, we can use Vectors:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Store the following values in a vector: X = 0, Y = 1, Z = 2<br\/>Vector3 myVector = new Vector3(0.0f, 1.0f, 2.0f);<br\/><\/pre><p>Note: We will be discussing vectors in a later module to describe a mathematical construct with a magnitude and a direction. Game Engines will often use the vector object as a container for storing three values representing a point in space. We will cover other uses of vectors in a later module.<\/p><p><strong>Vertex<\/strong> - A representation of a point in space, typically used for building geometry. In addition to X, Y, Z information, a vertex can have additional attributes depending on the tech. In MonoGame, one type of vertex uses positioning and color information:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Make a colored triangle using a built-in data structure for vertices.<br\/>VertexPositionColor[] vertices = new VertexPositionColor[3];<br\/><br\/>\/\/ Set the color and position of the vertices<br\/>vertices[0].Position = new Vector3(0, 0, 0);<br\/>vertices[0].Color = Color.Red;<br\/><br\/>vertices[1].Position = new Vector3(1, 1, 0);<br\/>vertices[1].Color = Color.Green;<br\/><br\/>vertices[2].Position = new Vector3(1, 0, 0);<br\/>vertices[2].Color = Color.Blue;<br\/><\/pre>&nbsp;<p><strong>Polygon<\/strong> - A two-dimensional shape, such as a rectangle, triangle, etc.<\/p><p><strong>Primitive<\/strong> - The simplest geometric representation a game can render. 2D primitive shapes usually include points, lines, planes, triangles, etc. 3D primitive shapes include cubes, cylinders, circles, and quadrilaterals.<\/p><p><strong>Billboards<\/strong> - A flat geometric shape, usually with a texture, which always faces the camera regardless of where the character or camera may be.<\/p><p><strong>Backbuffer<\/strong> - The render target presented to the graphics card for drawing.<\/p><p><strong>Depth Buffer<\/strong> - Also known as the Z-buffer, A render target used for data which determines which pixels to show and which pixels to keep, depending on their distance to the camera.<\/p><p><strong>Z-Buffering<\/strong> - Also known as depth buffering, this is an algorithm used in 3D graphics development. The purpose is to make sure rendered objects properly overlap based on their distance from the camera. In other words, the object closest to the view will obscure any objects behind it.<\/p><p><strong>Normal<\/strong> - Short for a normalized vector. This vector is perpendicular to the surface of a polygon. We will cover vectors in more detail in a later module.<\/p><\/div><a class=\"dest\" id=\"quad-3\"><\/a>&nbsp;<div class=\"accent\"><h1>Building a Quad<\/h1><p>For a basic quad, we need four vertices. Each vertex will need a position, then special attributes based on the quad rendering (color, texture, and\/or normal). We are going to assume the center of the screen is 0,0. If we want a quad to have a width of 30 and a height of 30, the vertices need to be situated at those limits:<\/p><img class=\"aligncenter\" src=\".\/images\/image_quadcoordinates.png\" alt=\"image_quadcoordinates\" width=\"506\" height=\"506\" \/><p style=\"text-align: center;\"><strong>Figure 3<\/strong> <em>Quad Corner Coordinates<\/em><\/p><p>So the data is represented as: Top Left: -15, 15 Top Right: 15, 15 Bottom Left: -15, -15 Bottom Right: 15, -15 The following is an example of hard-coding a quad in MonoGame, using a CustomVertex structure:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">CustomVertex verts = new CustomVertex[4];<br\/><br\/>\/\/ Bottom left<br\/>verts[0].Position = new Vector3(-15, -15, 0);<br\/><br\/>\/\/ Upper left<br\/>verts[1].Position = new Vector3(-15, 15, 0);<br\/><br\/>\/\/ Lower right<br\/>verts[2].Position = new Vector3(15, -15, 0);<br\/><br\/>\/\/ Upper right<br\/>verts[3].Position = new Vector3(15, 15, 0);<br\/><\/pre><\/div><a class=\"dest\" id=\"quad-4\"><\/a>&nbsp;<div class=\"accent\"><h1>Rasterization<\/h1><p>Also known as scan conversion, rasterization is the process of converting vertex information (position, color, texture) and rendering it to a 2D surface. A scene of 3D objects is essentially made up of vertices and triangles, which are remapped to 2D vertices\/surfaces. A rasterizer is responsible for these conversions and presentation, as well as clipping geometry so any part of the scene not in camera view is not rendered.<\/p><img class=\"img-responsive aligncenter\" src=\".\/images\/raster.gif\" alt=\"raster\" width=\"718\" height=\"504\" \/><p style=\"text-align: center;\"><strong>Figure 4<\/strong> <em>Rasterizing Polygon to 2D Surface<\/em><\/p><p>Additional responsibility varies from tech to tech. For example, MonoGame's rasterizer state controls winding order for triangles, toggles the fill state of primitives, enables scissor testing, etc.<\/p><\/div><a class=\"dest\" id=\"quad-5\"><\/a>&nbsp;<div class=\"accent\"><h1>Alpha Testing<\/h1><p>Alpha (A.k.a. alpha channel) is used to make objects translucent or transparent. There are several different uses of the term Alpha in regards to transparency; in this topic we are referring to transparency of a quad and how it interacts with the world in front and behind it.<\/p><p>Rendering tree billboards is one example of how alpha can be applied to an object in a scene. We may want some trees to cluster and stagger in distance from the camera. One of the first problems we might run into is shown below:<\/p><img class=\"img-responsive aligncenter wp-image-625 size-full\" src=\".\/images\/renderstates1.jpg\" alt=\"renderstates1\" width=\"778\" height=\"410\" \/><p style=\"text-align: center;\"><strong>Figure 5<\/strong> <em>Trees Mysteriously Cut Off<\/em><\/p><p>What's happening in the above image is a common problem caused by improper rendering of translucent or transparent pixels with a non-zero alpha channel. We can see the terrain behind the transparent portions of the trees which means that an alpha value is being considered when the tree renders to the backbuffer, an array of memory where rendering occurs before it is presented to the user's screen.<\/p><p>The first tree to render is in the one in the front. At the time of rendering, there were no trees behind it and therefore the color of the terrain was stored in the backbuffer in the areas of transparency. When the subsequent trees rendered, the trees behind the existing colored pixel were occluded by the former tree. The artifact that results gives the appearance of a missing area of the later trees. This method of accumulating color pixels is known as alpha blending since the former and later pixel may blend together (in the picture they aren't blending because the former tree is completely transparent).<\/p><p>One solution is to render these objects from back to front. The color values will accumulate correctly in the backbuffer as the rendering moves from the back of the scene to the front. When sorted correctly, the later pixel will never occlude a former.<\/p><p>Another solution is to use alpha testing. AlphaTestEffect is an effect in MonoGame that utilizes alpha testing. Alpha testing differs from alpha blending because the test provides an earlier chance to exit the rendering pipeline. If the pixel is wholly transparent then there is no need to blend it with others and the pixel can be rejected before going through the blending process. If a pixel passes the alpha test then it will be blended with the other pixels normally.<\/p><p>There are two important properties on this effect: first is the AlphaFunction, which describes how to compare the alpha, and second is the ReferenceAlpha, which is what each pixel's alpha component is compared to (using the AlphaFunction).<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Initialize the alpha test effect<br\/>AlphaTestEffect alphaTest = new AlphaTestEffect(GraphicsDevice);<br\/><br\/>\/\/ Set the reference alpha to 0 (target all pixels with an alpha value of 0)<br\/>alphaTest.ReferenceAlpha = 0;<br\/><br\/>\/\/ Use the Equal to comparison function. If the pixel alpha is 0, reject it<br\/>alphaTest.AlphaFunction = CompareFunction.Equal;<br\/><br\/>\/\/ Apply the effect before rendering<br\/>alphaTest.CurrentTechnique = _effect.Techniques[&quot;Technique1&quot;];<br\/>alphaTest.CurrentTechnique.Passes[0].Apply();<\/pre><\/div><!--page:~~quad-reference-text~~-->","title":"Reference"},{"bIsChecked":true,"exercise":".\/exercise\/quad.zip","instructions":"<h1>Goal<\/h1><p>The goal of this Exercise is to create a basic quad and render it to the screen. We will calculate the values for vertices and colors to show a single multi-colored quad in the scene.<\/p><img class=\"aligncenter\" src=\".\/images\/quad_exercise_1.jpg\" alt=\"quad_exercise_1\" width=\"800\" height=\"450\" \/><p style=\"text-align: center;\">The final scene should look similar to the one in this image.<\/p><h1>Steps<\/h1><ol><li>First, let's see what the Exercise looks like without modification. Run the Exercise by clicking the Start button or pressing F5. (<a href='.\/simulation\/QuadExercise_1\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><li>In <em>Focus Area 1<\/em>, we need to calculate the half-width and half-height of the quad. This will make sure everything is drawn from the center. <code>halfWidth<\/code> and <code>halfHeight<\/code> are already provided. Simply halve the <code>_width<\/code> and <code>_height<\/code> variables to get the result.<\/li><li>In <em>Focus Area 2<\/em>, calculate the corners of the quad. Set the <code>_upperLeft, _upperRight, _lowerLeft,<\/code> and <code>_lowerRight<\/code> vectors to represent vertices in a \"quad\". We will need to allocate the memory for the Vector3s, then use the <code>halfWidth<\/code> and <code>halfHeight<\/code> variables. The 3rd parameter for Vector3 should be 0.<\/li><li>In <em>Focus Area 3<\/em>, initialize the <code>_vertices<\/code> property with enough memory to represent 4 vertices.<\/li><li>In <em>Focus Area 4<\/em>, set the position and color for each index in <code>_vertices<\/code>. Use 4 different colors and assign the previously modified Vector3 variables accordingly (lower left, upper left, lower right, upper right).<\/li><li>Uncomment <code>DrawIndexedPrimitive(_vertices, _indices, _basicEffect);<\/code> in the Render function (<em>Focus Area 5<\/em>) to see if our quad is rendering.<\/li><li>To see the rendering, run the Exercise by clicking the Start button or pressing F5. (<a href='.\/simulation\/QuadExercise_2\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><li>Go back to <em>Focus Area 1<\/em> and make the quad larger by changing its width and height. Run the Exercise by clicking the Start button or pressing F5. (<a href='.\/simulation\/QuadExercise_3\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><\/ol><h1>Rubric<\/h1><ul><li>5 points for rendering the quad in step 6.<\/li><li>1 point for increasing the quad size in step 8.<\/li><\/ul><h1>Code Help<\/h1>        <!--CodeHelp: Vector3-->        <p><strong>Vector3<\/strong> &#8211;  A vector data structure containing 3 components (X, Y, Z). When creating a new Vector3, we can pass in three float values:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Example X\/Y\/Z floats. Values are arbitrary<br\/>float x = 1.0f;<br\/>float y = 2.0f;<br\/>float z = 3.0f;<br\/><br\/>\/\/ Create a new Vector3<br\/>Vector3 vectorA = new Vector3(x, y, z);<br\/>Vector3 vectorB = new Vector3(4.0f, 5.0f, 6.0f);<br\/><br\/>\/\/ Values of vectorC will be 5.0f, 7.0f, 9.0f for X, Y, and Z respectively<br\/>Vector3 vectorC = vectorA + vectorB;<br\/><br\/>\/\/ Create a Vector3 by transforming a Matrix <br\/>Vector3 distance = new Vector3(1.0f, 2.0f, 3.0f);<br\/>Vector3 transformedVector = Vector3.Transform(distance, Matrix.CreateRotationY(MathHelper.ToRadians(45.0f)));<br\/><br\/>\/\/ Create a Vector3 from Vector2 values<br\/>Vector2 vectorTwo = new Vector2(10.0f, 5.0f);<br\/>Vector3 vectorThree = new Vector3(vectorTwo.X, vectorTwo.Y, 0.0f);<br\/><\/pre><p><\/p><!--CodeHelp: VertexPositionColor-->        <p><strong>VertexPositionColor <\/strong> &#8211; Describes a custom vertex format structure that contains position and color information. We mainly need to know how to create an array of the structs and set their primary values:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Declare an array of 2 vertices<br\/>VertexPositionColor[2] vertices;<br\/><br\/>\/\/ Allocate the memory<br\/>vertices = new VertexPositionColor[2];<br\/><br\/>vertices[0].Position = new Vector3(1.0f, 2.0f, 3.0f);<br\/>vertices[0].Color = Color.White;<br\/><br\/>vertices[1].Position = new Vector3(4.0f, 5.0f, 6.0f);<br\/>vertices[1].Color = Color.Black;<br\/><\/pre>      <p><\/p>    <!--CodeHelp: DrawIndexedPrimitive-->        <p><strong>DrawIndexedPrimitive <\/strong> &#8211; This function will draw a quad to the screen:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>VertexPositionColor[2] vertices = new VertexPositionColor[2];<br\/>short[4] indices = new short[4];<br\/>BasicEffect basiceffect = new BasicEffect(_graphicsDevice);<br\/><br\/>DrawIndexedPrimitive(vertices, indices, basiceffect);<br\/><\/pre><p><\/p><!--CodeHelp: Color-->        <p><strong>Color<\/strong> &#8211; Color is an XNA structure which stores RGB (red, blue, green) values. A Color struct can be used through instantiation or static, preset fields.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Create a new all red Color using float values (0.0 - 1.0)<br\/>Color redColor = new Color(1.0f, 0.0f, 0.0f);<br\/><br\/>\/\/ Create another all red Color using byte values (0 - 255)<br\/>Color otherRedColor = new Color(255, 0, 0);<br\/><br\/>\/\/ Create a red Color using static field<br\/>Color finalRedColor = Color.Red;<br\/><\/pre><p><\/p><!--CodeHelp: Module--><p><strong>Module<\/strong> &#8211; Module is a custom class written for this course. It is wrapped in a dynamic-link library, so we do not have to worry about adding to it:<\/p><ul><li>_graphicsDevice – An XNA\/MonoGame GraphicsDevice. This is used in SpriteManager's rendering methods. It is already initialized for us and we simply need to know its name and where to use it.<\/li><li>_contentManager – An XNA\/MonoGame ContentManager. This is used in SpriteTexture's texture methods. It is already initialized for us and we simply need to know its name and where to use it.<\/li><li>DefautCamera – A simple Camera object which manages our game's projection and view. It is already initialized for us and we simply need to know its name and where to use it.<\/li><\/ul><p><\/p><!--page:~~quad-exercise~~-->","link":"exercise","mod":"quad","movie":null,"name":"quad","promptfile":null,"prompts":null,"reference":null,"text":null,"title":"Exercise"}]},{"bIsChecked":true,"name":"texture","title":"Texture","topics":[{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"texture","movie":".\/video\/Course2-animated-scene-arc-texture-overview.mp4","name":"Overview","promptfile":null,"prompts":null,"reference":"texture-1","text":null,"title":"Overview"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"texture-coordinates","mod":"texture","movie":".\/video\/Course2-animated-scene-arc-texture-texture-coordinates.mp4","name":"Texture Coordinates","promptfile":null,"prompts":null,"reference":"texture-4","text":null,"title":"Texture Coordinates"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"loading-texture","mod":"texture","movie":".\/video\/Course2-animated-scene-arc-texture-loading-a-texture.mp4","name":"Loading Texture","promptfile":null,"prompts":null,"reference":"texture-5","text":null,"title":"Loading a Texture"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"texture-compression","mod":"texture","movie":".\/video\/Course2-animated-scene-arc-texture-compression.mp4","name":"Texture Compression","promptfile":null,"prompts":null,"reference":"texture-6","text":null,"title":"Texture Compression"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"graphics-pipeline","mod":"texture","movie":".\/video\/Course2-animated-scene-arc-texture-graphics-pipeline.mp4","name":"Graphics Pipeline","promptfile":null,"prompts":null,"reference":"texture-7","text":null,"title":"Role in the Graphics Pipeline"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"reference","mod":"texture","movie":null,"name":"Reference","promptfile":null,"prompts":null,"reference":null,"text":"<a id=\"texture-1\"><\/a><div class=\"accent\"><h1>Overview<\/h1><p>A short and technical description of a texture is a grid of texels rendered to the screen on a flat surface. In layman's terms, texturing is the process of loading a graphics file, processing it, and applying it to geometry, which is then drawn to the screen.<\/p><img class=\"aligncenter\" src=\".\/images\/textured_cube.png\" alt=\"textured_cube\" width=\"505\" height=\"415\" \/><p style=\"text-align: center;\"><strong>Figure 1<\/strong> <em>A Texture-Mapped Cube<\/em><\/p><div style=\"text-align: center;\"><ul class=\"anchorGroup\" style=\"text-align: left; display: inline-block;\"><li><a class=\"ankor\" href=\"#texture-2\">Terminology<\/a><\/li><li><a class=\"ankor\" href=\"#texture-3\">Texture Formats<\/a><\/li><li><a class=\"ankor\" href=\"#texture-4\">Texture Coordinates<\/a><\/li><li><a class=\"ankor\" href=\"#texture-5\">Loading<\/a><\/li><li><a class=\"ankor\" href=\"#texture-6\">Compression<\/a><\/li><li><a class=\"ankor\" href=\"#texture-7\">Graphics Pipeline<\/a><\/li><\/ul><\/div><\/div><a class=\"dest\" id=\"texture-2\"><\/a>&nbsp;<div class=\"accent\"><h1>Terminology<\/h1><p>There are several steps in the process of creating and rendering a texture. We should know a few basic terms before proceeding with the lesson.<\/p><p><strong>Pixel<\/strong> - The smallest unit in an image. If an image is 512x512, then it has 262,144 pixels.<\/p><p><strong>Texel<\/strong> - The smallest unit of a texture. A texture can present only a portion of the original image. Even if the source image is 512x512 pixels, a texel might only be 4x4 in size.<\/p><p><strong>Texture Space<\/strong> - Coordinate system for a texture which ranges between 0.0 and 1.0 in both axes.<\/p><p><strong>Content Processor<\/strong> - In terms of textures, a content processor is a system\/tool that will manipulate and convert raw image data into a structure\/format that is used by the rendering system.<\/p><p><strong>Texture Mapping<\/strong> - Also known as UV mapping, this is the coordinate system used in applying image textures to a surface. The letters \"U\" and \"V\" represent the axes for the texture. U represents the horizontal position in the texture, whereas V represents the vertical position. The reason \"UV\" exists is because \"XYZ\" are already reserved for coordinates in object placement on screen.<\/p><\/div><a class=\"dest\" id=\"texture-3\"><\/a>&nbsp;<div class=\"accent\"><h1>Texture Formats<\/h1><p>There are many different formats for textures depending on the use. For example, the format we use to use in a web page is different from the format used to render to the screen in a game. Additionally, games engines won't always use the same format. For example, let's say we are using this image for a 2D pig:<\/p><img class=\"aligncenter\" src=\".\/images\/art_pig.png\" alt=\"art_pig\" width=\"190\" height=\"112\" \/><p style=\"text-align: center;\"><strong>Figure 2<\/strong> <em>2D Pig PNG<\/em><\/p><p>The above figure is a PNG image file. The data that makes up the image file which is optimal for web browsers and transferring is not necessarily optimal for graphics cards and video games.<\/p><p>MonoGame, for example, uses a file format called \"XNB,\" which can be used for images (as well as other assets including: 3D models, audio, and fonts). The data in the XNB format dictates what kind of asset it is. If we were to open up the PNG and XNB files for the same pig in a text editor, then compare them side by side, we can see the differences immediately:<\/p><img class=\"aligncenter\" src=\".\/images\/PNG_Format-300x109.jpg\" alt=\"PNG_Format\" width=\"300\" height=\"109\" \/><p style=\"text-align: center;\"><strong>Figure 3<\/strong> <em>PNG File Data<\/em><\/p><img class=\"aligncenter\" src=\".\/images\/XNB_Format-300x109.jpg\" alt=\"XNB_Format\" width=\"300\" height=\"109\" \/><p style=\"text-align: center;\"><strong>Figure 4<\/strong> <em>XNB File Data<\/em><\/p><p>Even though different formats may appear as the same image when viewed by their endemic tools, the data may be subtlety different in appearance and vastly different in how the data is organized. An image processed into a texture for a game will typically be optimized for performance.<\/p><\/div><a class=\"dest\" id=\"texture-4\"><\/a>&nbsp;<div class=\"accent\"><h1>Texture Coordinates<\/h1><p>As mentioned above, a texture is an image mapped to geometry. For now, we are going to focus on the example of applying a texture to a simple quad. As mentioned in the Quad Module, a \"quad\" is short for a quadrilateral primitive. It is typically built using four sets of vertices and additional rendering information, such as colors or textures. All points are co-planer and often used for 2D parts of games:<\/p><img class=\"aligncenter\" src=\".\/images\/texture_outline.jpg\" alt=\"\" \/><p style=\"text-align: center;\"><strong>Figure 5<\/strong> <em>Quad Outline<\/em><\/p><p>If we were to apply a single texture to the entirety of a quad, it would look similar to the following:<\/p><img class=\"aligncenter\" src=\".\/images\/texture_coordinates.jpg\" alt=\"texture_coordinates\" width=\"390\" height=\"326\" \/><p style=\"text-align: center;\"><strong>Figure 6<\/strong> <em>Texture Coordinates 1<\/em><\/p><p>The image in Figure 6 has six dots and a set of numbers associated with them. These numbers represent UV coordinates in texture space. As a file, that image might have pixel dimensions of 128x128. When applied to geometry, textures use a range of 0.0 to 1.0, rather than the pixel values of the image. The coordinates for the top left are 0 for the U, 0 for the V. Moving halfway to the right, upper corner will increase the U value to 0.5, but the V value will remain the same since there has not been any vertical change.<\/p><p>The following code sample uses MonoGame types to store texture coordinates. Notice how there are 4 sets, one for each corner of the texture:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Create coordinates for displaying the full texture<br\/>Vector2 textureUpperLeft = new Vector2(0.0f, 0.0f);<br\/>Vector2 textureLowerLeft = new Vector2(0.0f, 1.0f);<br\/>Vector2 textureUpperRight = new Vector2(1.0f, 0.0f);<br\/>Vector2 textureLowerRight = new Vector2(1.0f, 1.0f);<br\/><br\/>\/\/ Use VertexPositionTexture to draw the geometry and texture<br\/>VertexPositionTexture[] vertices = new VertexPositionTexture[4];<br\/><br\/>\/\/ Start the first texture coordinate in the lower left<br\/>vertices[0].TextureCoordinate = textureLowerLeft;<br\/><br\/>\/\/ Connect the lower left to the upper left<br\/>vertices[1].TextureCoordinate = textureUpperLeft;<br\/><br\/>\/\/ Connect the lower right to the upper left (makes first triangle)<br\/>vertices[2].TextureCoordinate = textureLowerRight;<br\/><br\/>\/\/ Connect the lower right to the upper right (makes the second triangle)<br\/>vertices[3].TextureCoordinate = textureUpperRight;<br\/><\/pre><p>With that in mind, the range for UV coordinates goes from 0,0 (top left), to 1,1 (bottom right). Any values within that range can be used for pulling out smaller portions of a texture. If we want to use a sprite sheet with smaller, packed images, lower values will be needed.<\/p><img class=\"aligncenter\" src=\".\/images\/texture_coordinates2.jpg\" alt=\"\" \/><p style=\"text-align: center;\"><strong>Figure 7<\/strong> <em>Texture Coordinates 2<\/em><\/p><p>Figure 7 shows the UV coordinate values that would render the top left crate portion from a texture. Notice the values, particularly the 0.25 extremes. If there are four separate images in each row, then the U coordinate will increase by 0.25 four times until the range value \"1\" is met.<\/p><\/div><a class=\"dest\" id=\"texture-5\"><\/a>&nbsp;<div class=\"accent\"><h1>Loading<\/h1><p>The following three examples show basic syntax for loading a texture:<\/p><p><strong>C# Image Approach<\/strong><\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Load a raw image file from a file location using standard C# file I\/O<br\/>Image tempImage = Image.FromFile(&quot;C:\/testImage.png&quot;);<br\/><\/pre><p>The above example is basic C# that loads an image file (testImage.png) and stores it in an Image object (tempImage). This object contains the raw image data, which is not suitable for an optimized game. This would be useful for image processing, but it's missing information that would be necessary for texture mapping.<\/p><p><strong>MonoGame ContentManager Approach<\/strong><\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Load a processed texture from the XNA content pipeline<br\/>Texture2D skyTexture = _contentManager.Load(&quot;Graphics\\\\skyBackground&quot;);<br\/><\/pre><p>The MonoGame example is loading content which is processed and ready to render as a texture. The skyBackground file was generated using the XNA Content Processor system, which the ContentManager object can load and store as a Texture2D.<\/p><img class=\"aligncenter\" src=\".\/images\/tiles_preprocess-178x300.jpg\" alt=\"tiles_preprocess\" width=\"178\" height=\"300\" \/><p style=\"text-align: center;\"><strong>Figure 8<\/strong> <em>Image File Before Processing<\/em><\/p><img class=\"aligncenter\" src=\".\/images\/tiles_postprocess-178x300.jpg\" alt=\"tiles_postprocess\" width=\"178\" height=\"300\" \/><p style=\"text-align: center;\"><strong>Figure 9<\/strong> <em>XNA Processed Texture<\/em><\/p><p><strong>Torque 2D ImageAsset Approach<\/strong><\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Stored in an image asset file<br\/>%asset = new ImageAsset()<br\/>{\u0009 \u0009 <br\/>AssetName=&quot;skyBackground&quot;\u0009 \u0009 <br\/>ImageFile=&quot;skyBackground.png&quot;<br\/>};<br\/><br\/>\/\/ ImageAsset loaded during runtime<br\/>%sprite = new Sprite();<br\/>%sprite.setImage(&quot;skyBackground&quot;);<br\/><\/pre><p>The last example is taken from Torque 2D, a powerful and advanced game engine dedicated to making 2D games. An ImageAsset object will load the raw image file data (skyBackground.png) and process it before it is used by a Sprite.<\/p><p>There are several other ways of loading and processing textures, but they are typically tech specific and too numerous to cover in this reference. Like Monogame, XNA, and Torque 2D, solid game engines will have a content pipeline that is optimized for texture management and application.<\/p><\/div><a class=\"dest\" id=\"texture-6\"><\/a>&nbsp;<div class=\"accent\"><h1>Compression<\/h1><p>Texture compression is the process of further optimizing content. The main reasons for compressing textures can be summed up by the following:<\/p><ul><li>Saves hard disk space<\/li><li>Consumes less memory in game<\/li><li>Speeds up rendering<\/li><\/ul><p>Compressed textures are usually smaller than their uncompressed counterparts. They will contain fewer bits of data, reducing the file size and the amount of information that needs to be fetched by a graphics card.<\/p><p>The downside to compression is there will be a loss of image quality. The following images shows how texture compression affects the quality:<\/p><img class=\"aligncenter\" src=\".\/images\/dxt_test-300x170.png\" alt=\"dxt_test\" width=\"300\" height=\"170\" \/><p style=\"text-align: center;\"><strong>Figure 10<\/strong> <i>We see the artifacts from texture compression on the right side.<\/i><\/p><img class=\"aligncenter\" src=\".\/images\/smooth_gradient.png\" alt=\"smooth_gradient\" width=\"306\" height=\"188\" \/><p style=\"text-align: center;\"><strong>Figure 11<\/strong> <em>Smooth Gradient, no compression<\/em><\/p><img class=\"aligncenter\" src=\".\/images\/banded_gradient.png\" alt=\"banded_gradient\" width=\"306\" height=\"188\" \/><p style=\"text-align: center;\"><strong>Figure 12<\/strong> <em>Banded Gradient, compression used<\/em><\/p><p>The optimization, quality, format, and techniques for texture compression vary based on platform and technology. S3 Texture Compression, also referred to as DXT, is used in many games and supported by many graphics cards. There are five variations of the algorithm (DXT1 to DXT5). Essentially, all forms of DXT compression will convert 4x4 blocks of pixels to 64 or 128-bit quantity. This results in a 6:1 compression ratio.<\/p><p>For iOS games, PVRTC and PVRTC2 are the preferred texture compression formats. This form of compression differs slightly from DXT. Instead, an image is compressed into two lower resolution versions, which are scaled and blended according to pixel-weight rules to create new texels.<\/p><p>Knowing when to use compression and which algorithm greatly depends on the needs of our game, current performance, and targeted platform.<\/p><\/div><a class=\"dest\" id=\"texture-7\"><\/a>&nbsp;<div class=\"accent\"><h1>Graphics Pipeline<\/h1><p>In the Quad Module, we learned about basic rasterization. To recap, the process of rasterization is converting vertex information to pixels on screen. Textured shapes contain vertices with texture information, ie the texture coordinates. All of the vertex information (position, color, texture) will be rasterized and passed to a pixel shader. The shader will determine what pixels on screen need to be colored based on that information. The shader will use the colors from the texture to fill out the pixels and present to the frame buffer, which is where the remainder of the rendering occurs. The following diagram is a visual representation of this process:<\/p><img class=\"aligncenter\" src=\".\/images\/Graphics_pipeline.jpg\" alt=\"Graphics_pipeline\" width=\"634\" height=\"830\" \/><p style=\"text-align: center;\"><strong>Figure 13<\/strong> <em>Texture in the graphics pipeline<\/em><\/p><\/div><!--page:~~texture-reference-text~~-->","title":"Reference Material"},{"bIsChecked":true,"exercise":".\/exercise\/texture.zip","instructions":"<h1>Goal<\/h1><p>In this Exercise, we will load textures and manipulate how they are rendered on screen. In the end, we should be rendering three textured quads to the screen. The Exercise contains a working example of rendering a texture on a quad, filling the entire screen. Use this as an example to complete the following steps. There are only seven focus areas in the code, so search for them when tackling a step.<\/p><img class=\"aligncenter\" src=\".\/images\/texture_exercise_1.jpg\" alt=\"texture_exercise_1\" width=\"800\" height=\"450\" \/><p style=\"text-align: center;\">The final scene should look similar to the one in this image.<\/p><h1>Steps<\/h1><ol><li>Add enough properties to render three new textured quads on screen<ol><li>First, let's see what the Exercise looks like without modification. Run the Exercise by clicking the Start button or pressing F5. (<a href='.\/simulation\/TextureExercise_1\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><li>In <em>Focus Area 1<\/em>, we will add three new Quad member variables. Name them <em>_tilesQuad, _tilesQuad2,<\/em> and <em>_tilesQuad3<\/em>.<\/li><li>In <em>Focus Area 2<\/em>, add three new Texture2D member variables. Name them <em>_tilesTexture, _tilesTexture2,<\/em> and <em>_tilesTexture3.<\/em><\/li><li>In <em>Focus Area 3<\/em>, add four new Vector2 member variables. These will be used for the tile quad's texture coordinates. Name them <em>_tilesUpperLeft, _tilesUpperRight, _tilesLowerLeft<\/em>, and <em>_tilesLowerRight.<\/em> For now, set their values to match the <em>_textureUpperLeft, _textureUpperRight, _textureLowerLeft,<\/em> and <em>_textureLowerRight<\/em>.<\/li><\/ol><\/li><li>Initialize new quads, vectors, and textures.<ol><li><em>In Focus Area 4<\/em>, allocate memory and set the properties for the new tile quad's. The first should sit at 0,0,0, the second at 20,0,0, and the third at -20,0,0. Each quad should be 15x15 in size.<\/li><li>In <em>Focus Area 5<\/em>, fill the vertices for each of the new quads. Follow the <em>_backgroundQuad<\/em> example, but use <em>_tilesUpperLeft, _tilesUpperRight, _tilesLowerLeft,<\/em> and <em>_tilesLowerRight<\/em>.<\/li><li>In <em>Focus Area 6<\/em>, we need to load the textures and assign them to appropriate quads. Follow the example shown by the <em>_backgroundTexture<\/em> and <em>_backgroundQuad<\/em>, pairing the new tiles member variables:<ol><li>_tilesQuad : _tilesTexture : \"Graphics\\\\tiles\"<\/li><li>_tilesQuad2 : _tilesTexture2 : \"Graphics\\\\tiles_compressed_png\"<\/li><li>_tilesQuad3 : _tilesTexture3 : \"Graphics\\\\tiles_compressed_jpg\"<\/li><\/ol><\/li><\/ol><\/li><li>Render the quads to screen<ol><li>Inside of the Render function we will find <em>Focus Area 7<\/em>. Notice that _backgroundQuad is already rendering. Add three more calls to DrawTexturedQuad for <em>_tilesQuad, _tilesQuad2,<\/em> and <em>_tilesQuad3<\/em>. Set the second DrawTexturedQuad() parameter to Matrix.Identity. We will cover setting a different transformation matrix in another module.<\/li><li>Run the game by clicking the Start button or pressing F5. All three quads should now be rendering on screen. (<a href='.\/simulation\/TextureExercise_2\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><li><strong>Important<\/strong> - Notice that there are visual differences between <em>_tilesQuad, _tilesQuad2,<\/em> and <em>_tilesQuad3<\/em>. In <em>Focus Area 6<\/em>, three different textures were loaded. All three use the same visual, but they are using different texture compression.<ol><li>Graphics\\\\tiles uses no compression.<\/li><li>Graphics\\\\tiles_compressed_png is using DXT5.<\/li><li>Graphics\\\\tiles_compressed_jpg is using DXT1.<\/li><\/ol><\/li><\/ol><\/li><li>Changing texture coordinates for tiles<ol><li>Go back to <em>Focus Area 3<\/em>. If we copied the values from <em>_textureUpperLeft, _textureUpperRight, _textureLowerLeft, and _textureLowerRight<\/em>, the new tile quads will be rendering their full texture.<\/li><li>Change the values for the upper left to 0.5 and 0<\/li><li>Change the values for the upper right to 1 and 0<\/li><li>Change the values for lower left to 0.5 and 0.5<\/li><li>Change the values for lower right to 1 and 0.5<\/li><li>Run the game again using F5 or the Start button. If we used the correct texture coordinates, the quads should only render a small section of their textures. (<a href='.\/simulation\/TextureExercise_3\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><\/ol><\/li><\/ol><h1>Rubric<\/h1><ul><li>3 points for rendering all three quads to the screen.<\/li><li>3 points for offsetting the texture coordinates.<\/li><\/ul><h1>Code Help<\/h1>        <!--CodeHelp: Vector2-->        <p><strong>Vector2<\/strong> &#8211; A vector data structure containing two components (X, Y). The values can represent UV texture coordinates, 2D object positioning, and several other forms of data. When creating a new Vector2, we can pass in two float values:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Example X\/Y floats. Values are arbitrary<br\/>float x = 1.0f;<br\/>float y = 2.0f;<br\/><br\/>\/\/ Create a new Vector2<br\/>Vector2 myVector = new Vector2(x, y);<br\/><br\/>\/\/ Create a zeroed out Vector2<br\/>Vector2 zeroedVector = Vector2.Zero;<br\/><\/pre><p><\/p><!--CodeHelp: Vector3-->        <p><strong>Vector3<\/strong> &#8211;  A vector data structure containing 3 components (X, Y, Z). When creating a new Vector3, we can pass in three float values:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Example X\/Y\/Z floats. Values are arbitrary<br\/>float x = 1.0f;<br\/>float y = 2.0f;<br\/>float z = 3.0f;<br\/><br\/>\/\/ Create a new Vector3<br\/>Vector3 vectorA = new Vector3(x, y, z);<br\/>Vector3 vectorB = new Vector3(4.0f, 5.0f, 6.0f);<br\/><br\/>\/\/ Values of vectorC will be 5.0f, 7.0f, 9.0f for X, Y, and Z respectively<br\/>Vector3 vectorC = vectorA + vectorB;<br\/><br\/>\/\/ Create a Vector3 by transforming a Matrix <br\/>Vector3 distance = new Vector3(1.0f, 2.0f, 3.0f);<br\/>Vector3 transformedVector = Vector3.Transform(distance, Matrix.CreateRotationY(MathHelper.ToRadians(45.0f)));<br\/><br\/>\/\/ Create a Vector3 from Vector2 values<br\/>Vector2 vectorTwo = new Vector2(10.0f, 5.0f);<br\/>Vector3 vectorThree = new Vector3(vectorTwo.X, vectorTwo.Y, 0.0f);<br\/><\/pre><p><\/p><!--CodeHelp: Matrix-->        <p><strong>Matrix<\/strong> &#8211; An XNA structure that represents a matrix. Matrices use a row vector layout in the XNA Framework. It is essentially a two-dimensional array of numbers.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Returns an instance of the identity matrix.<br\/>Matrix identityMatrix = Matrix.Identity;<br\/><br\/>\/\/ Create a translation matrix<br\/>Matrix translateMatrix = Matrix.CreateTranslation(new Vector3(2.0f, 2.0f, 2.0f);<br\/><br\/>\/\/ Create a rotation matrix at 45 degrees about the Z axis<br\/>Matrix rotateMatrix = Matrix.CreateRotationZ(MathHelper.ToRadians(45.0f));<br\/><br\/>\/\/ Create a complex transform from multiple operations<br\/>Matrix complexMatrix = Matrix.CreateRotationZ(MathHelper.ToRadians(45.0f)) * Matrix.CreateTranslation(new Vector3(2.0f, 2.0f, 2.0f);<br\/><\/pre><p><\/p><!--CodeHelp: Quad-->        <p><strong>Quad<\/strong> &#8211; Quad is a custom class written for this course. The code is stored in a dynamic-link library, so we do not have to worry about writing the low-level members. This is a basic class, primarily used for rendering a texture to the screen:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Create a new quad. It should be in the center of the screen and be 60x60 in size<br\/>\/\/ The first parameter represents its origin <br\/>\/\/ The second parameter is the width. <br\/>\/\/ The third parameter is the height.<br\/>Quad backgroundQuad = new Quad(new Vector3(0.0f, 0.0f, 0.0f), 60f, 60f);<br\/><br\/>\/\/ Declare vectors that represent the texture coordinates<br\/>Vector2 _textureUpperLeft = new Vector2(0.0f, 0.0f);<br\/>Vector2 _textureUpperRight = new Vector2(1.0f, 0.0f);<br\/>Vector2 _textureLowerLeft = new Vector2(0.0f, 1.0f);<br\/>Vector2 _textureLowerRight = new Vector2(1.0f, 1.0f);<br\/><br\/>\/\/  Set the Quad&#039;s texture coordinates by calling FillVertices<br\/>backgroundQuad.FillVertices(_textureUpperLeft, _textureUpperRight, _textureLowerLeft, _textureLowerRight);<br\/><\/pre><p><\/p><!--CodeHelp: Texture2D-->        <p><strong>Texture2D<\/strong> &#8211; This is a stock XNA\/MonoGame object which represents a 2D grid of texels.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Load the texture from file<br\/>Texture2D backgroundTexture = _contentManager.Load&lt;Texture2D&gt;(&quot;Graphics\\\\background&quot;);<br\/><br\/>\/\/ Get the width<br\/>int textureWidth = backgroundTexture.Width;<br\/><br\/>\/\/ Get the height<br\/>int textureHeight = backgroundTexture.Height;<br\/><\/pre><p><\/p><!--CodeHelp: ContentManager-->        <p><strong>ContentManager<\/strong> &#8211; The ContentManager is an XNA\/MonoGame run-time component which loads managed objects from the binary files produced by the design time content pipeline:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Load a texture from file and store it in a Texture2D<br\/>Texture2D texture = _contentManager.Load&lt;Texture2D&gt;(&quot;Graphics\\\\skyBackground&quot;);<br\/><br\/>\/\/ Load a font file and store it in a SpriteFont<br\/>SpriteFont font = _contentManager.Load&lt;SpriteFont&gt;(&quot;Fonts\\\\SegoeUIMono&quot;);<br\/><\/pre><p><\/p><!--CodeHelp: DrawTexturedQuad-->        <p><strong>DrawTexturedQuad<\/strong> &#8211; This function is provided for us and wrapped in a dynamic-link library. It will draw a textured quad to the screen:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ The first parameter is the textured quad, set up earlier<br\/>\/\/ The second parameter is its transform.<br\/>DrawTexturedQuad(_backgroundQuad, Matrix.Identity);<br\/><\/pre><p><\/p><!--CodeHelp: Module--><p><strong>Module<\/strong> &#8211; Module is a custom class written for this course. It is wrapped in a dynamic-link library, so we do not have to worry about adding to it:<\/p><ul><li>_graphicsDevice – An XNA\/MonoGame GraphicsDevice. This is used in SpriteManager's rendering methods. It is already initialized for us and we simply need to know its name and where to use it.<\/li><li>_contentManager – An XNA\/MonoGame ContentManager. This is used in SpriteTexture's texture methods. It is already initialized for us and we simply need to know its name and where to use it.<\/li><li>DefautCamera – A simple Camera object which manages our game's projection and view. It is already initialized for us and we simply need to know its name and where to use it.<\/li><\/ul><p><\/p><!--page:~~texture-exercise~~-->","link":"exercise","mod":"texture","movie":null,"name":"texture","promptfile":null,"prompts":null,"reference":null,"text":null,"title":"Exercise"}]},{"bIsChecked":true,"name":"vector","title":"Vectors","topics":[{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"vectors","movie":".\/video\/Course2-animated-scene-arc-vectors-overview.mp4","name":"Overview","promptfile":null,"prompts":null,"reference":"vector-1","text":null,"title":"Overview"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"unit-vectors","mod":"vectors","movie":".\/video\/Course2-animated-scene-arc-vectors-vectors-in-games.mp4","name":"Vectors In Games","promptfile":null,"prompts":null,"reference":"vector-2","text":null,"title":"Vectors In Games"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"direction-vectors","mod":"vectors","movie":".\/video\/Course2-animated-scene-arc-vectors-displacement.mp4","name":"Displacement","promptfile":null,"prompts":null,"reference":"vector-3","text":null,"title":"Displacement"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"normalize-vectors","mod":"vectors","movie":".\/video\/Course2-animated-scene-arc-vectors-normalized.mp4","name":"Normalized Vectors","promptfile":null,"prompts":null,"reference":"vector-4","text":null,"title":"Normalized Vectors"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"cross-product","mod":"vectors","movie":".\/video\/Course2-animated-scene-arc-vectors-cross-dot-intro.mp4","name":"Cross and Dot Product","promptfile":null,"prompts":null,"reference":"vector-5","text":null,"title":"Cross and Dot Product"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"reference","mod":"vector","movie":null,"name":"Reference","promptfile":null,"prompts":null,"reference":null,"text":"<a id=\"vector-1\"><\/a><div class=\"accent\"><h1>Overview<\/h1><p>Vectors are mathematical constructs that define direction and magnitude. Vectors can be more than three dimensions, but in games, we typically use either 2D or 3D vectors.<\/p><p>In MonoGame, the following code is an example of a 2D vector and its usage of an X and a Y to represent each element:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">Vector2 vec = new Vector2(0, 0);<br\/>vec.X = 0;<br\/>vec.Y = 1;<br\/><\/pre>&nbsp;<p>In MonoGame, the following code is an example of a 3D vector and its usage of an X, Y, and Z to represent each element:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">Vector3 vec = new Vector3(0, 0, 0);<br\/>vec.X = 0;<br\/>vec.Y = 1;<br\/>vec.Z = 0;<br\/><\/pre><p>For a conceptual example of a 2D vector, let's consider a car driving one mile on a perfectly straight road. The magnitude is one mile and the direction is defined by evaluating the points where the car started and ended. To simplify, let's picture the car on a 2D plane starting at point (0, 0). If the car travels one mile on the y axis, the vector would be (0, 1).<\/p><img class=\"aligncenter\" src=\".\/images\/vector_basic_1.png\" alt=\"vector_basic_1\" \/><p style=\"text-align: center;\"><strong>Figure 1<\/strong> <em>The vector (0, 1) direction is up and its magnitude is 1<\/em><\/p><p>A 3D vector is useful to define the magnitude and direction of a rocket. In a 3D coordinate system, a rocket traveling one mile into space might be written as (0, 1, 0) if it is traveling straight up.<\/p><p>We use the Pythagorean Thereom to calculate the length of a vector. For example, consider a vector of (1, 1). What is its length?<\/p><img class=\"aligncenter\" src=\".\/images\/vector_basic_21.png\" alt=\"vector_basic_2\" \/><p style=\"text-align: center;\"><strong>Figure 2<\/strong> <em>Vector length formula<\/em><\/p><p>Most Vector classes in game engines provide common functions such as length. For example, in MonoGame, we can create a vector using the following syntax:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">Vector3 myVec3 = new Vector3(0, 1, 0);<\/pre><p>Then, we access the length using a method:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">float length = myVec3.Length();<\/pre><div style=\"text-align: center;\"><ul class=\"anchorGroup\" style=\"text-align: left; display: inline-block;\"><li><a class=\"ankor\" href=\"#vector-2\">Vectors in Games<\/a><\/li><li><a class=\"ankor\" href=\"#vector-3\">Displacement<\/a><\/li><li><a class=\"ankor\" href=\"#vector-4\">Normalized Vectors<\/a><\/li><li><a class=\"ankor\" href=\"#vector-5\">Other Important Operations<\/a><\/li><\/ul><\/div><\/div><a class=\"dest\" id=\"vector-2\"><\/a>&nbsp;<div class=\"accent\"><h1>Vectors in Games<\/h1><p>Vectors are used extensively throughout mathematics and physics; game development primarily uses two and three-dimensional vectors whereas mathematics ventures into dimensions beyond 3D.<\/p><p>In certain cases, game engines will also use a four-dimensional vector; however, the use of this structure is not because we are working in a four-dimensional world. Rather, it's a means for simplifying structures that game developers use to represent 3D worlds (described in more detail in the Matrix Module).<\/p><p>Vectors are used in many different ways in both 2D and 3D games. Here are a few examples:<\/p><ul><li><strong>Direction Vector<\/strong> - Defines a meaningful direction. A player character may have a direction vector that defines which way he\/she is looking. Light direction is also typically defined as a vector.<\/li><li><strong>Displacement<\/strong> - Defines an offset between two points or objects. In our Exercise, we will use a vector to perform a displacement between a point and a quad.<\/li><li><strong>Velocity<\/strong> - Most game engines use a vector to describe the rate at which an object changes its position.<\/li><li><strong>Forces <\/strong>-<strong> <\/strong>Physical forces, such as gravity or an explosion, are often represented and manipulated as one or more vectors.<\/li><li><strong>Surface Normal<\/strong> - A vector perpendicular to a surface such as a plane is called a surface normal.<\/li><li><strong>Advanced Math <\/strong>– Vectors are commonly used in advanced math such as optimizations on intersection math in collision algorithms (and many other algorithms as well).<\/li><\/ul><\/div><a class=\"dest\" id=\"vector-3\"><\/a>&nbsp;<div class=\"accent\"><h1>Displacement<\/h1><p>In the Exercise at the end of this Module, we will use a vector to displace a quad from the center of a 3D world. Let's take a look at the following scenario below:<\/p><img class=\"img-responsive aligncenter\" src=\".\/images\/vector_basic_4.png\" alt=\"vector_basic_4\" width=\"850\" height=\"418\" \/><p style=\"text-align: center;\"><strong>Figure 3<\/strong> <em>Quad displacement<\/em><\/p><p>In Scene A, we have a quad and a world coordinate system. The quad is centered at the origin of the world.<\/p><p>In Scene B, we introduce a vector.<\/p><p>In Scene C, we offset or displace the center of the quad by the vector.<\/p><p>Displacement, as in this example, is not uncommon. As we will learn in the Matrix Module, what we are doing here is a simplified version of an operation called a translation. A translation is a sub-set of a larger set of processes called transformations which are commonly used to move, rotate, scale, or skew 2D or 3D objects. The matrix is a fundamental structure in game development and mastering the use of one is essential.<\/p><\/div><a class=\"dest\" id=\"vector-4\"><\/a>&nbsp;<div class=\"accent\"><h1>Normalized Vectors<\/h1><p>A normalized vector, often referred to as a 'unit' vector, is a special type of vector where the length is one unit. These types of vectors are useful because they can provide a means for defining direction in a standard way.<\/p><p>Normalizing a vector is easy. Simply divide every number by the length of the vector:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">float len = vec3.Length();<br\/>vec3.X = vec3.X\/len;<br\/>vec3.Y = vec3.Y\/len;<br\/>vec3.Z = vec3.Z\/len;<br\/><\/pre><p>Similar to the length function, vectors in game engines typically have a member function that normalizes the vector for us. In MonoGame, we could simply call Normalize() since it does the same as the four lines above:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">vec3.Normalize();<\/pre><p>Lighting or shading algorithms often require us to provide input with a normalized vector.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Runs once every 33 milliseconds<br\/>public void BigLoop()<br\/>{<br\/>Vector3 lightDirection(0,-2,0);<br\/><br\/>\/\/*********** Begin Focus Area 1 **************\/\/ <br\/><br\/>lightDirection.Normalize();<br\/><br\/>\/\/*********** EndFocus Area 1 **************\/\/      <br\/><br\/>for (int i = 0; i &lt; 100000; i++)<br\/>{<br\/>MediumLoop(lightDirection);<br\/>}<br\/>}<br\/><br\/>\/\/ Runs 100,000 times every 33 milliseconds<br\/>public void MediumLoop(Vector3 lightDirection) <br\/>{<br\/>for (int i = 0; i &lt; 100; i++)<br\/>{<br\/>LightPixel(lightDirection);<br\/>}<br\/>}<br\/><br\/>\/\/ Runs 10,000,000 times every 33 milliseconds<br\/>public void LightPixel(Vector3 lightDirection) <br\/>{<br\/>\/\/*********** Begin Focus Area 2 **************\/\/ <br\/><br\/>lightDirection.Normalize();<br\/><br\/>\/\/*********** End Focus Area 2 **************\/\/ <br\/><br\/>Vector3.Dot(surfaceNormal, lightDirection);<br\/>}<br\/><\/pre><p>In this very simplified example of a rendering pipeline, the lightDirection vector is defined once per frame and it's not a normalized vector (since its length is two). Every time the big loop is called, lightDirection vector is passed to the medium loop 100,000 times. Every time the medium loop runs, it calls the LightPixel function 100 times. If the developer normalizes the vector in <em>Focus Area 1<\/em>, the vector calculation happens once per 33 milliseconds. If the vector is normalized in <em>Focus Area 2<\/em>, the calculation happens 10,000,000 times.<\/p><p>Instead of accounting for the developer's passing of a non-normalized vector and performing the normalization millions of times, it's much more efficient to ask the developer (via documentation) to pass in a normalized vector.<\/p><\/div><a class=\"dest\" id=\"vector-5\"><\/a>&nbsp;<div class=\"accent\"><h1>Other Important Operations<\/h1><p>There are two other operations that are used very often in game development. We will only mention them briefly here and cover them in more detail in a later Module.<\/p><p>The first is called a dot product. When we perform the dot product, two vectors are multiplied and their individual elements are summed in specific order into a single floating point number. This number can be used along with an inverse cosine (commonly known as the arccos) to determine the angle between two vectors. We may want to know the angle between two vectors for building artificial intelligence or collision algorithms.<\/p><img class=\"aligncenter\" src=\".\/images\/vector_basic_6-300x246.png\" alt=\"vector_basic_6\" width=\"300\" height=\"246\" \/><p style=\"text-align: center;\"><strong>Figure 4<\/strong> <em>Illustration of the dot product and how it relates to the angle between two vectors<\/em><\/p><p>The second is called the cross product. The cross product uses two vectors as input. A series of computations generates a third vector that is perpendicular to the plane of the two vectors. Developers use this calculation to build axes for rotation or to determine the direction that a surface, defined by two coplanar vectors, is pointing.<\/p><img class=\"aligncenter\" src=\".\/images\/vector_basic_7-300x246.png\" alt=\"vector_basic_7\" width=\"300\" height=\"246\" \/><p style=\"text-align: center;\"><strong>Figure 5<\/strong> <em>Illustration of the cross product and the resulting vector C<\/em><\/p><p>The following code example demonstrates a dot product and a cross product using the Vector class in MonoGame:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">Vector3 vec1 = new Vector3(0, 1, 0);<br\/>Vector3 vec2 = new Vector3(0, 1, 0);<br\/>float dot = Vector3.Dot(vec1, vec2);<br\/>Vector3 cross = Vector3.Cross(vec1, vec2);<br\/><\/pre><\/div><!--page:~~vector-reference-text~~-->","title":"Reference Material"},{"bIsChecked":true,"exercise":".\/exercise\/vector.zip","instructions":"<h1>Goal<\/h1><p>In this exercise, we will accomplish two sub-goals. The first will be to draw an arrow to represent a vector and print its basic information to the screen. The second goal is to use basic vector math to make a sprite face the mouse, which is a a common game mechanic.<\/p><img class=\"aligncenter\" src=\".\/images\/vector_exercise_1.jpg\" alt=\"vector_exercise_1\" width=\"800\" height=\"45\" \/><p style=\"text-align: center;\">The final scene should look similar to the one in this image.<\/p><h1>Steps<\/h1><p>All work will be done within the <em>VectorExercise<\/em> class.<\/p><ol><li>Let's see what the Exercise looks like without modification. Run the Exercise by clicking the Start button or pressing F5. (<a href='.\/simulation\/VectorExercise_1\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><li>In <em>Focus Area 1<\/em>, call the <code>DrawVector<\/code> to render the <code>_vector<\/code> object. Use 0,0,0 for the origin (first parameter), <code>_vector<\/code> for the data (second parameter), and <code>Color.Purple<\/code> for its color (third parameter).<\/li><li>Run the solution by clicking the Start button or Pressing F5. We should see the vector rotating on the graph. (<a href='.\/simulation\/VectorExercise_2\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><li>Notice the Dot and Angle values are always zero. Scroll down to <em>Focus Area 2<\/em>, where the <code>dot<\/code> and <code>angle<\/code> variables are set to 0.0.<\/li><li>Calculate the dot product of <code>_vector<\/code> (normalized) and an up vector of type <em>Vector3<\/em> (hint: an up vector uses the values 0,1,0 which is a vector that points up along the y axis ). Store the result in the <code>dot<\/code> variable.<\/li><li>Set the <code>angle<\/code> variables to the inverse cosine (hint:inverse cosine is also known as arcos ) of the dot product we just calculated.<\/li><li>Run the solution by clicking the Start button or Pressing F5. The Dot and Angle values should now be updating as the vector rotates. (<a href='.\/simulation\/VectorExercise_3\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><li>Now we are going to use vectors in common game situation. First, let's replace the simple graph rendering with something more interesting. In <em>Focus Area 3<\/em>, comment out <code>RenderPrimitives<\/code> and uncomment <code>RenderSprite<\/code>.<\/li><li>Run the solution by clicking the Start button or Pressing F5. We should now see a space background, ship, and red reticle (i.e. crosshair). The reticle should follow the mouse cursor. (<a href='.\/simulation\/VectorExercise_4\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><li>We want to update the ship's orientation to always face the mouse position. Scroll down to <em>Focus Area 4<\/em>. First, calculate the difference between the ship's position and the reticle by subtracting the two vectors. Normalize the result and store in a variable of type Vector3 named <code>difference<\/code>.<\/li><li>Next, calculate the angle of rotation using the inverse tangent method (<code>Math.Atan2<\/code>) using <em>difference<\/em>'s Y and X properties as parameters (order of parameters matters in Atan). Store the result in a variable of type float named <code>shipAngle<\/code>.<\/li><li>Finally, set <code>_ship<\/code> rotation to <code>shipAngle<\/code>.<\/li><li>Run the solution by clicking the Start button or pressing F5. The ship should now rotate to always face the reticle, which is controlled by the mouse. (<a href='.\/simulation\/VectorExercise_5\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><\/ol><h1>Rubric<\/h1><ul><li>1 point for displaying the purple vector in step 3.<\/li><li>2 points for updating the dot and angle values in step 7.<\/li><li>3 points when the ship rotates to always face he reticle in step 13.<\/li><\/ul><h1>Code Help<\/h1>        <!--CodeHelp: Vector3-->\u0009\u0009<p><strong>Vector3<\/strong> &#8211;  A vector data structure containing 3 components (X, Y, Z). When creating a new Vector3, we can pass in three float values:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Example X\/Y\/Z floats. Values are arbitrary<br\/>float x = 1.0f;<br\/>float y = 2.0f;<br\/>float z = 3.0f;<br\/><br\/>\/\/ Create a new Vector3<br\/>Vector3 vectorA = new Vector3(x, y, z);<br\/>Vector3 vectorB = new Vector3(4.0f, 5.0f, 6.0f);<br\/><br\/>\/\/ Values of vectorC will be 5.0f, 7.0f, 9.0f for X, Y, and Z respectively<br\/>Vector3 vectorC = vectorA + vectorB;<br\/><br\/>\/\/ Create a Vector3 by transforming a Matrix <br\/>Vector3 distance = new Vector3(1.0f, 2.0f, 3.0f);<br\/>Vector3 transformedVector = Vector3.Transform(distance, Matrix.CreateRotationY(MathHelper.ToRadians(45.0f)));<br\/><br\/>\/\/ Create a Vector3 from Vector2 values<br\/>Vector2 vectorTwo = new Vector2(10.0f, 5.0f);<br\/>Vector3 vectorThree = new Vector3(vectorTwo.X, vectorTwo.Y, 0.0f);<br\/><\/pre><p><\/p><!--CodeHelp: Vector3.Dot-->\u0009\u0009      <p>        <strong>Vector3.Dot<\/strong> &#8211; Calculates the dot product of two vectors. If the two vectors are unit vectors, the dot product returns a floating point value between -1 and 1 that represents the cosine of the angle between the two vectors.      <\/p>      <pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Declare an array of 2 vertices<br\/>Vector3 vectorA = Vector3.UnitX;<br\/>Vector3 vectorB = Vector3.UnitY;<br\/><br\/>float dot = Vector3.Dot(vectorA, vectorB);<br\/>float angle = (float)Math.Acos(dot);<br\/><\/pre>  <!--CodeHelp: Math-->\u0009\u0009<p><strong>Math <\/strong> &#8211; This is a class built into C#. It provides constants and static methods for performing common math calculations.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Get the absolute value of -60. Result should be 60<br\/>float absoluteValue = Math.Abs(-60);<br\/><br\/>\/\/ Get the square root of 16 (should be 4)<br\/>float squareRoot = (float)Math.Sqrt(16);<br\/><br\/>\/\/ Get the sine, cosine, tangent, inverse tangent, and inverse cosine of the angle (must be in radians)<br\/>float cosine = Math.Cos(0.5f);<br\/>float sine = Math.Sin(0.5f);<br\/>float tangent = Math.Tan(0.5f);<br\/>float inverseCosine = Math.Acos(0.5f);<br\/>float inverseTangent = Math.Atan(0.5f);<br\/><\/pre><p><\/p><!--CodeHelp: Color-->\u0009\u0009<p><strong>Color<\/strong> &#8211; Color is an XNA structure which stores RGB (red, blue, green) values. A Color struct can be used through instantiation or static, preset fields.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Create a new all red Color using float values (0.0 - 1.0)<br\/>Color redColor = new Color(1.0f, 0.0f, 0.0f);<br\/><br\/>\/\/ Create another all red Color using byte values (0 - 255)<br\/>Color otherRedColor = new Color(255, 0, 0);<br\/><br\/>\/\/ Create a red Color using static field<br\/>Color finalRedColor = Color.Red;<br\/><\/pre><p><\/p><!--CodeHelp: Sprite-->\u0009\u0009\u0009\u0009<p><strong>Sprite<\/strong> &#8211; This is a utility class with several sub-systems which allow for simple image rendering. With only a few method calls, a Sprite can load a texture, render, and move around. <\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Create a new SpriteTexture and load its content<br\/>SpriteTexture texture = new SpriteTexture(&quot;Graphics\\\\moon&quot;);<br\/>texture.LoadContent(_contentManager);<br\/><br\/>\/\/ Declare a new Sprite on layer 1<br\/>Sprite mySprite = new Sprite(1);<br\/><br\/>\/\/ Set the size of the sprite to 10 by 10<br\/>mySprite.SetSize(10.0f, 10.0f);<br\/><br\/>\/\/ Set the Sprite&#039;s position to the center of the screen<br\/>mySprite.SetPosition(0.0f, 0.0f);<br\/><br\/>\/\/ Set the Sprite&#039;s rotation, in radians.<br\/>mySprite.SetRotation(3.14159f);<br\/><br\/>\/\/ Set the sprite texture<br\/>mySprite.SetSpriteTexture(texture);<br\/><br\/>\/\/ Set the color tint of the Sprite to red<br\/>mySprite.SetTint(Color.Red);<br\/><\/pre><p><\/p><!--CodeHelp: DebugDraw-->\u0009\u0009<p><strong>DebugDraw<\/strong>  &#8211; DebugDraw is a static class used for rendering primitives. It is useful when debugging data that would not normally be drawn to the screen, such as the boundaries of a collision object or a vector. Because it is a static class, we do not need to create an instance before use. However, we must initialize it before calling its methods:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Initialize the DebugDraw class with a GraphicsDevice and ContentManager<br\/>DebugDraw.Initialize(_graphicsDevice, _contentManager);<br\/><\/pre><p>Once it is initialized, the DebugDraw class can render a variety of primitives. For example, the following code will render a vector:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Get the view projection matrix<br\/>Matrix viewProjection = DefaultCamera.View * DefaultCamera.Projection;<br\/><br\/>\/\/ Draw the vector<br\/>DebugDraw.DrawVector(_graphicsDevice, viewProjection, new Vector3(0, -10, 0), new Vector3(0, 20, 0), Color.Green, Vector3.UnitZ);<br\/><\/pre><p><\/p><!--page:~~vector-exercise~~-->","link":"exercise","mod":"vector","movie":null,"name":"vector","promptfile":null,"prompts":null,"reference":null,"text":null,"title":"Exercise"}]},{"bIsChecked":true,"name":"matrix","title":"Matrix","topics":[{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"matrix","movie":".\/video\/Course2-animated-scene-arc-matrix-overview.mp4","name":"Overview","promptfile":null,"prompts":null,"reference":"matrix-1","text":null,"title":"Overview"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"matrix","mod":"matrix","movie":".\/video\/Course2-animated-scene-arc-matrix-how-games-use-matricies.mp4","name":"How Games Use Matricies","promptfile":null,"prompts":null,"reference":"matrix-2","text":null,"title":"How Games Use Matrices"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"handedness","mod":"matrix","movie":".\/video\/Course2-animated-scene-arc-matrix-concatenation.mp4","name":"Matrix Concatenation","promptfile":null,"prompts":null,"reference":"matrix-3","text":null,"title":"Matrix Concatenation"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"2d-3d","mod":"matrix","movie":".\/video\/Course2-animated-scene-arc-matrix-objandworld.mp4","name":"Object and World Space","promptfile":null,"prompts":null,"reference":"matrix-4","text":null,"title":"Object and World Space"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"order-operations","mod":"matrix","movie":".\/video\/Course2-animated-scene-arc-matrix-order-of-operations.mp4","name":"Order of Operations","promptfile":null,"prompts":null,"reference":"matrix-5","text":null,"title":"Order of Operations"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"reference","mod":"matrix","movie":null,"name":"Reference","promptfile":null,"prompts":null,"reference":null,"text":"<a id=\"matrix-1\"><\/a><div class=\"accent\"><h1>Overview<\/h1><p>A Matrix is a table of rows and columns organized in a way that is useful for performing complex calculations. In math, matrices are used to analyze business systems, statistics, or other systems. Matrices are an important concept in linear algebra, a branch of mathematics that focuses on vector spaces and linear mappings between spaces.<\/p><img class=\"aligncenter\" src=\".\/images\/image_matrix_1.png\" alt=\"image_matrix_1\" width=\"309\" height=\"477\" \/><p style=\"text-align: center;\">The above image shows several versions of matrices. Matrix A is a 3x3 matrix. Matrix B is a 3x3 matrix. Matrix C is a 2x3 matrix. There are many operations we can perform on the matrices above, such as multiplying by another matrix or a vector (these are both common operations in game development). To understand why we want to do that, we must first understand the topic of transformations.<\/p><h2>Transformations<\/h2><p>Transformations is a short way of saying transforming from one space to another. For our purposes, let's think of the word \"space\" as if it means Cartesian coordinate system.<\/p><p>There are three transformations we will focus on, since they are most common in game development. These are: translation, rotation, and scale. First, we will focus on translation and rotation.<\/p><p>Imagine an object floating in a 3D world. Let's say we want that object to move. But what does moving mean in terms of transformations? Typically when we move something, we are talking about translation and rotation.<\/p><p>Translating the object means you are going to shift position along one or more axes.<\/p><img class=\"aligncenter\" src=\".\/images\/image_matrix_2.png\" alt=\"image_matrix_2\" width=\"760\" height=\"366\" \/><p style=\"text-align: center;\"><strong>Figure 1<\/strong> <em>This object was translated along the positive x axis<\/em><\/p><p>Rotating the object means you want to spin it along one or more axes.<\/p><img class=\"aligncenter\" src=\".\/images\/image_matrix_3.png\" alt=\"image_matrix_3\" width=\"764\" height=\"361\" \/><p style=\"text-align: center;\"><strong>Figure 2<\/strong> <em>Now the same object is rotated about several axes at the point (0, 0, 0)<\/em><\/p><p>With combinations of rotation and translation, you can place things anywhere in the 3D space with any orientation. Matrices are the objects we use to define rotation and translation in one handy table.<\/p><p>But looks can be deceiving. It may appear as though we've simply moved the box or rotated it, but that's just a small part of what's really going on. We call these operations transformations because we are transforming the entire space, not just the object in it. We can clarify that a bit by describing scale.<\/p><img class=\"aligncenter\" src=\".\/images\/image_matrix_4.png\" alt=\"image_matrix_4\" width=\"368\" height=\"360\" \/><p style=\"text-align: center;\"><strong>Figure 3<\/strong> <em>Applying scale<\/em><\/p><p>When we scale something, we transform the entire space and everything in that space. Looking at the picture above, we can see that the box was scaled; due to the scaling, the height is longer than the width. If there was another box <em>sharing this space<\/em> located 1,000 units along the positive X axis, that would have scaled as well.<\/p><p><strong>Note:<\/strong> We underlined 'sharing this space' because not all objects need to share the same space. By using another matrix to define the box at 1,000 units, we could isolate the changes to each box and each space.<\/p><p>The structure we use in game development to define world space transformations is known as a world matrix. The world matrix is a 4x4 matrix, meaning it has four rows and four columns. Each area of the matrix has a special role.<\/p><img class=\"aligncenter\" src=\".\/images\/image_matrix_5.png\" alt=\"image_matrix_5\" width=\"387\" height=\"267\" \/><p style=\"text-align: center;\"><strong>Figure 4<\/strong> <em>Typical 4x4 matrix. Red is translation. Orange and green is rotation. Green is scale.<\/em><\/p><p>The above figure is an example of a typical 4x4 matrix used in game development. The area in orange is used to define rotation, the green is used to define scale, and the red defines translation. We will learn more about each transform in future Modules. For now, we need only to understand that a matrix is a table of numbers and the different sections represent different transformations. In some cases, like scale and rotation, the representations share some of the same numbers.<\/p><div style=\"text-align: center;\"><ul class=\"anchorGroup\" style=\"text-align: left; display: inline-block;\"><li><a class=\"ankor\" href=\"#matrix-2\">How Games Use Matrices<\/a><\/li><li><a class=\"ankor\" href=\"#matrix-3\">Matrix Concatenation<\/a><\/li><li><a class=\"ankor\" href=\"#matrix-4\">Object and World Space Transformations<\/a><\/li><li><a class=\"ankor\" href=\"#matrix-5\">Order of Operations<\/a><\/li><\/ul><\/div><\/div><a class=\"dest\" id=\"matrix-2\"><\/a>&nbsp;<div class=\"accent\"><h1>How Games Use Matrices<\/h1><p>Understanding how games use matrices will give us valuable insight into how they work. Let's define two matrices, A and B.<\/p><img class=\"aligncenter wp-image-5145 size-full\" src=\".\/images\/image_matrix_6.png\" alt=\"image_matrix_6\" width=\"735\" height=\"355\" \/><p style=\"text-align: center;\"><strong>Figure 5<\/strong> <em>Matrix A is translation, Matrix B is rotation<\/em><\/p><p>Matrix A describes a translation 5 units up the Y axis. How do we know it was the Y axis? Because each place in the translation section of the matrix represents X, Y, and Z. Rotation is a bit more complex to recognize on first glance.<\/p><p>Matrix B describes a rotation of 180 degrees (pi radians) about the Y or up axis. How do we know? The secret lies within the columns of the rotation section of the matrix. After applying the rotation, each column shows us where the new right, up, and forward vector is.<\/p><img class=\"aligncenter\" src=\".\/images\/image_matrix_7.png\" alt=\"image_matrix_7\" width=\"372\" height=\"336\" \/><p style=\"text-align: center;\"><strong>Figure 6<\/strong> <em>180 degree rotation<\/em><\/p><p>In the picture above, a 180 degree rotation has rotated the original right vector from positive 1 to -1 (shown in red) and the forward vector from positive 1 to -1. The up vector rotated counter-clockwise, but it's still in the same place.<\/p><p>Now that we've set the stage for what Matrix A and Matrix B do, let's use them to draw an object in the world using the translation from Matrix A and the rotation from Matrix B. To achieve this, we need to first do a review of how we render a scene and where the world matrix fits in.<\/p><\/div><a class=\"dest\" id=\"matrix-3\"><\/a>&nbsp;<div class=\"accent\"><h1>Matrix Concatenation<\/h1><p>Let's discuss drawing an object on the screen that has both a rotation, defined by matrix A, and a scale transformation applied to it, defined by matrix B. First, though we need to review how drawing works.<\/p><h2>Draw Call Review<\/h2><p>To make a game work, we learned that the game renders in frames. We also learned that in every frame, we have many draw calls that draw objects in the world. Let's focus on one draw call.<\/p><p>Before we draw an object like a cube, we must set the world matrix (the second step in figure 7 below) so that the graphics card knows where in the world that cube should go (i.e. what is its scale, translation, and rotation).<\/p><img class=\"aligncenter\" src=\".\/images\/image_matrix_8.png\" alt=\"image_matrix_8\" width=\"783\" height=\"211\" \/><p style=\"text-align: center;\"><strong>Figure 7<\/strong> <em>Draw call steps<\/em><\/p><h2>Matrix Concatenation<\/h2><p>As demonstrated in Figure 7 above, there is only one world matrix but we have two matrices to define the rotation and position of the cube. To combine these matrices we can multiply them together. It's a process called Matrix concatenation.<\/p><img class=\"aligncenter\" src=\".\/images\/image_matrix_9.png\" alt=\"image_matrix_9\" width=\"358\" height=\"139\" \/><p style=\"text-align: center;\"><strong>Figure 8<\/strong> <em>Matrix concatenation<\/em><\/p><p>When we concatenate the two matrices, we produce a third: Matrix C. Matrix C contains the translation information from Matrix A and the rotation information of Matrix B combined into one table. Since Matrix C contains all of the information from the previous matrices, it can be used as a singular world matrix.<\/p><p>Matrix concatenation isn't just for two matrices. We can combine many together to formulate a final output matrix that accumulates each matrix's information. For now, let's keep it simple and stick with two.<\/p><p>Learning how to implement matrix concatenation by hand isn't terribly hard, but it's also something that we won't really need to do as a developer. Typically, we can use the multiplication operator or a special function such as \"Concatenate( Matrix A, Matrix B)\". Below is the code to demonstrate matrix multiplication using Matrix A and B in MonoGame.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">Matrix A = Matrix.CreateTranslation(new Vector3(0, 5, 0));<br\/>Matrix B = Matrix.CreateRotationY((float)Math.PI);<br\/>Matrix C = A * B;<br\/><\/pre><p>That's a lot to learn for three lines of code. But in the end, that's why we use Matrices; they do so much but we don't need to write a lot of code (plus they are very efficient from a computer performance perspective).<\/p><h2>Row vs. Column Order<\/h2><p>We can multiply a 4x4 matrix by a vector. We can think of this vector as a row of numbers or a column of numbers. It's an arbitrary decision, but a game engine must choose a standard and be consistent. MonoGame uses a row-vector standard. This decision impacts the order in which matrices need to be written. In a row-vector system, we can think of the order of matrices as flowing from right to left. In a column vector system, we can think of the order as flowing from left to right.<\/p><p>This following code achieves the same transformation result of a spinning object translated five units away from the origin.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/Translate then rotate in a Row-Vector based system.<br\/>Matrix mat = Matrix.CreateRotation(new Vector3(0, 1, 0)) * Matrix.CreateTranslation(new Vector3(0, 2, 0));<br\/><\/pre><p>&nbsp;<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/Translate then rotate in a Column-Vector based system.<br\/>Matrix mat = Matrix.CreateTranslation(new Vector3(0, 2, 0)) * Matrix.CreateRotation(new Vector3(0, 1, 0));<br\/><\/pre><\/div><a class=\"dest\" id=\"matrix-4\"><\/a>&nbsp;<div class=\"accent\"><h1>Object and World Space Transformations<\/h1><p>We mentioned previously that a space is a Cartesian coordinate system. We would like to build on that now by describing the concepts of object and world space. Consider the following picture:<\/p><img class=\"aligncenter\" src=\".\/images\/image_matrix_10.png\" alt=\"image_matrix_10\" width=\"407\" height=\"376\" \/><p style=\"text-align: center;\"><strong>Figure 9<\/strong> <em>Two coordinate systems (a.k.a. spaces).<\/em><\/p><p>Notice there are two coordinate systems drawn: a big one and a smaller one located at the centroid of the box. Let's discuss the point at the center of the box. What are its coordinates? The answer is: it depends. This may seem surprising, but after some careful observation we understand that we can describe the center relative to the black coordinate system or the red one.<\/p><p>Relative to the center of the black coordinate system: (1, 1, 0)<br \/>Relative to the center of the red coordinate system: (0, 0, 0)<\/p><p>Understanding that one space can occupy the space of another helps us build more complex systems. The system in black is known as World Space. The system in red, which is a coordinate system central to the cube, is Object Space. When we write code, how do we move from world space to object space? We simply use a matrix concatenation and we are transformed from one space to another.<\/p><p>What if we had another object orbiting the cube? We could define that as a matrix relative to the cube or relative to the world. Why might we want to define it relative to object space? We will answer that question in a later Module.<\/p><\/div><a class=\"dest\" id=\"matrix-5\"><\/a>&nbsp;<div class=\"accent\"><h1>Order of Operations<\/h1><p>We've only scratched the surface of matrices, but we will cover them in more detail in the next few Modules. Before we conclude, we want to set the stage for understanding an important characteristic of matrix multiplication.<\/p><p>Matrix concatenation, unlike the multiplication of real numbers, is not always commutative, meaning we can't change the order of matrix multiplication and assume that we will <em>always<\/em> arrive at the same answer. There are some specifics cases where matrix multiplication is commutative, but they are the exception and not the general case.<\/p><p>Using Matrix A and B from above: A * B != B * A.<\/p><p>Understanding why this is true is easy in a real world scenario. Let's say we are in a city and are given three street directions:<\/p><p>A) Move Forward 1 block<br \/>B) Turn Clockwise 3\/4 turn<br \/>C) Move Forward 1 block<\/p><p>If we change the order of the instructions, you won't end up in the same place. This is the exact same reason that transformations can be order dependent.<\/p><img class=\"aligncenter\" src=\".\/images\/image_matrix_111.png\" alt=\"image_matrix_11\" width=\"651\" height=\"344\" \/><p style=\"text-align: center;\"><strong>Figure 10<\/strong> <em>Different results due to order change<\/em><\/p><p>In sequence A,B,C, the journey ends in the upper right quadrant of our city. In sequence B, C, A, the journey ends in the upper left. Directions like the one above are similar to translations.<\/p><\/div><!--page:~~matrix-reference-text~~-->","title":"Reference Material"},{"bIsChecked":true,"exercise":".\/exercise\/matrix.zip","instructions":"<h1>Goal<\/h1><p>In this exercise, we will build up the world transform matrix for an astronaut textured quad, and have the astronaut orbit a planet.<\/p><img class=\"aligncenter size-full wp-image-701\" src=\".\/images\/matrix_exercise_1.jpg\" alt=\"matrix_exercise_1\" width=\"800\" height=\"450\" \/><p style=\"text-align: center;\">The final scene should look similar to the one in this image.<\/p><h1>Steps<\/h1><p>All work will be done within the <em>MatrixExercise<\/em> class.<\/p><ol><li>First, let's see what the Exercise looks like without modification. Run the Exercise by clicking the Start button or pressing F5. (<a href='.\/simulation\/MatrixExercise_1\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><li>In <em>Focus Area 1<\/em> we have set the <code>_translationWorldMatrix<\/code> to be an identity matrix. Replace <code>Matrix.Identity<\/code> with a call to <code>Matrix.CreateTranslation<\/code>, such that the <code>_translationWorldMatrix<\/code> will translate the astronaut to the same location as the planet. Be sure to make use of the <code>planetLocation<\/code> variable when constructing this matrix.<\/li><li>In <em>Focus Area 1<\/em>, initialize <code>_astronautWorldMatrix<\/code> to an identity matrix. You should now see a tiny astronaut at the center of the screen.<\/li><li>Within <em>Focus Area 2<\/em> we have set the <code>_translationLocalMatrix<\/code> to be an identity matrix. Replace <code>Matrix.Identity<\/code> with a call to <code>Matrix.CreateTranslation<\/code>, such that the <code>_translationLocalMatrix<\/code> will place the unscaled astronaut quad 1.5 units along the positive Y axis.<\/li><li>Within <em>Focus Area 3<\/em> we have set the <code>_rotationMatrix<\/code> to be an identity matrix. Replace <code>Matrix.Identity<\/code> with a call to <code>Matrix.CreateRotationZ<\/code>, such that the <code>_rotationMatrix<\/code> will rotate about the Z axis by the amount given by the <code>_currentRotation<\/code> variable.<\/li><li>Within <em>Focus Area 4<\/em> we have set the <code>_scaleMatrix<\/code> to be an identity matrix. Replace <code>Matrix.Identity<\/code> with a call to <code>Matrix.CreateScale<\/code>, such that the <code>_scaleMatrix<\/code> will scale the astronaut quad by 8 times in all directions.<\/li><li><em>Focus Area 5<\/em> is where the astronaut's rotation matrix will be updated to reflect the astronaut's current rotation. Call <code>Matrix.CreateRotationZ<\/code> here so that the <code>_rotationMatrix<\/code> will rotate about the Z axis by the current rotation amount defined just above this Focus Area.<\/li><li><em>Focus Area 6<\/em> is where the astronaut's world transformation matrix is built based on the concatenation of all previously defined matrices. As with most matrix concatenation the order of the matrices is important when multiplying them together. In MonoGame, the order in which transforms are applied are written from right to left (I.e. A concatenation written as: matrix = A * B * C will apply the matrix in the order of C, B, and then A). Write the code that sets the <code>_astronautWorldMatrix<\/code> variable to a combination of the <code>_translationWorldMatrix<\/code>, <code>_translationLocalMatrix<\/code>, <code>_rotationMatrix<\/code>, and <code>_scaleMatrix<\/code>. The proper order will result in a giant astronaut orbiting the planet.(hint: if you are having problems, try concatenating one matrix and then running the application to check that the matrix offset the astronaut appropriately.)<\/li><li>To view the final result, build and run the simulation by clicking the Start button or pressing F5. (<a href='.\/simulation\/MatrixExercise_2\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><\/ol><h1>Rubric<\/h1><ul><li>1 point for displaying the tiny astronaut in the center of the sceeen in step 3.<\/li><li>2 points for scaling the astronaut 8x in step 6.<\/li><li>3 points for a giant astronaut rotating around the planet as shown in the simulation in step 9.<\/li><\/ul><h1>Code Help<\/h1>\u0009\u0009<!--CodeHelp: Matrix-->        <p><strong>Matrix<\/strong> &#8211; An XNA structure that represents a matrix. Matrices use a row vector layout in the XNA Framework. It is essentially a two-dimensional array of numbers.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Returns an instance of the identity matrix.<br\/>Matrix identityMatrix = Matrix.Identity;<br\/><br\/>\/\/ Create a translation matrix<br\/>Matrix translateMatrix = Matrix.CreateTranslation(new Vector3(2.0f, 2.0f, 2.0f);<br\/><br\/>\/\/ Create a rotation matrix at 45 degrees about the Z axis<br\/>Matrix rotateMatrix = Matrix.CreateRotationZ(MathHelper.ToRadians(45.0f));<br\/><br\/>\/\/ Create a complex transform from multiple operations<br\/>Matrix complexMatrix = Matrix.CreateRotationZ(MathHelper.ToRadians(45.0f)) * Matrix.CreateTranslation(new Vector3(2.0f, 2.0f, 2.0f);<br\/><\/pre><p><\/p><!--CodeHelp: Vector2-->        <p><strong>Vector2<\/strong> &#8211; A vector data structure containing two components (X, Y). The values can represent UV texture coordinates, 2D object positioning, and several other forms of data. When creating a new Vector2, we can pass in two float values:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Example X\/Y floats. Values are arbitrary<br\/>float x = 1.0f;<br\/>float y = 2.0f;<br\/><br\/>\/\/ Create a new Vector2<br\/>Vector2 myVector = new Vector2(x, y);<br\/><br\/>\/\/ Create a zeroed out Vector2<br\/>Vector2 zeroedVector = Vector2.Zero;<br\/><\/pre><p><\/p><!--CodeHelp: Vector3--><p><strong>Vector3<\/strong> &#8211;  A vector data structure containing 3 components (X, Y, Z). When creating a new Vector3, we can pass in three float values:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Example X\/Y\/Z floats. Values are arbitrary<br\/>float x = 1.0f;<br\/>float y = 2.0f;<br\/>float z = 3.0f;<br\/><br\/>\/\/ Create a new Vector3<br\/>Vector3 vectorA = new Vector3(x, y, z);<br\/>Vector3 vectorB = new Vector3(4.0f, 5.0f, 6.0f);<br\/><br\/>\/\/ Values of vectorC will be 5.0f, 7.0f, 9.0f for X, Y, and Z respectively<br\/>Vector3 vectorC = vectorA + vectorB;<br\/><br\/>\/\/ Create a Vector3 by transforming a Matrix <br\/>Vector3 distance = new Vector3(1.0f, 2.0f, 3.0f);<br\/>Vector3 transformedVector = Vector3.Transform(distance, Matrix.CreateRotationY(MathHelper.ToRadians(45.0f)));<br\/><br\/>\/\/ Create a Vector3 from Vector2 values<br\/>Vector2 vectorTwo = new Vector2(10.0f, 5.0f);<br\/>Vector3 vectorThree = new Vector3(vectorTwo.X, vectorTwo.Y, 0.0f);<br\/><\/pre><p><\/p><!--page:~~matrix-exercise~~-->","link":"exercise","mod":"matrix","movie":null,"name":"matrix","promptfile":null,"prompts":null,"reference":null,"text":null,"title":"Exercise"}]},{"bIsChecked":true,"name":"translation","title":"Translation","topics":[{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"translation","movie":".\/video\/Course2-animated-scene-arc-translation-overview.mp4","name":"Overview","promptfile":null,"prompts":null,"reference":"translation-1","text":null,"title":"Overview"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"translate-vector","mod":"translation","movie":".\/video\/Course2-animated-scene-arc-translation-create_a_translation.mp4","name":"Create a Translation","promptfile":null,"prompts":null,"reference":"translation-2","text":null,"title":"Create a Translation"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"translate-matrix","mod":"translation","movie":".\/video\/Course2-animated-scene-arc-translation-matrix_times_matrix.mp4","name":"Translate with Another Matrix","promptfile":null,"prompts":null,"reference":"translation-3","text":null,"title":"Translate with Another Matrix"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"reference","mod":"translation","movie":null,"name":"Reference","promptfile":null,"prompts":null,"reference":null,"text":"<a id=\"translation-1\"><\/a><div class=\"accent\"><h1>Overview<\/h1><p>Translation is a transformation that moves geometry in games up, down, left, right, forward, and backwards.<\/p><p>In order to translate an object, we need to understand what up, down, left, right, forward, and backwards mean in terms of X, Y, Z. That may sound intuitive, but it's not necessarily so simple. Coordinate system convention is defined by the game engine and even though it may seem like an odd choice, they engine could define positive X as left.<\/p><p>Most engines do agree on positive x being right and negative x being left, but many engines follow different conventions in up or depth axis. For consistency, we will always use the coordinate system below. When looking at our monitor, Positive Y is up, positive Z is out of the screen, and positive X is to the right.<\/p><img class=\"aligncenter size-full wp-image-956 img-responsive\" src=\".\/images\/image021.png\" alt=\"image021\" \/><p style=\"text-align: center;\"><strong>Figure 1<\/strong> <em>The standard coordinate system for this course. The arrows indicate a positive axis.<\/em><\/p><p>We will cover the following topics in the Translation Module:<\/p><div style=\"text-align: center;\"><ul class=\"anchorGroup\" style=\"text-align: left; display: inline-block;\"><li><a class=\"ankor\" href=\"#translation-2\">Matrix Translation by Vectors<\/a><\/li><li><a class=\"ankor\" href=\"#translation-3\">Matrix Translation by Matrix<\/a><\/li><\/ul><\/div><\/div><a class=\"dest\" id=\"translation-2\"><\/a>&nbsp;<div class=\"accent\"><h1>Matrix Translation by Vectors<\/h1><p>Using a vector, we can create a matrix for the purpose of concatenating it with another matrix or submitting it as the world matrix when we draw the geometry. Below are some examples of how we do that in MonoGame:<\/p><h2>Example 1<\/h2><pre class=\"wp-code-highlight prettyprint linenums:1\">Vector3 pos = new Vector3(0, 10, 0);<br\/>Matrix mtrx = Matrix.CreateTranslation(pos);<br\/><\/pre><p>The code above would translate any object using this matrix up ten units.<br \/>Alternatively, you can set the translation for an existing matrix, we can do that in the following way:<\/p><h2>Example 2<\/h2><pre class=\"wp-code-highlight prettyprint linenums:1\">Matrix mtrx = Matrix.CreateRotationY((float)Math.PI);<br\/>Vector3 pos = new Vector3(0, 10, 0);<br\/>mtrx.Translation = pos;<br\/><\/pre><p>In the code above, the matrix has an existing rotation followed by a translation. It's important to realize that rotating an object and then translating it is not the same as translating an object and then rotating it.<br \/>There is yet another way we can set translation:<\/p><h2>Example 3<\/h2><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Create a new matrix from a rotation about the Y axis<br\/>Matrix mtrx = Matrix.CreateRotationY((float)Math.PI);<br\/><br\/>\/\/ Create a new offset in along the Y axis<br\/>Vector3 pos = new Vector3(0, 10, 0);<br\/><br\/>\/\/ Set the Matrix 4th column, 1st row to the offset&#039;s X<br\/>mtrx.M41 = pos.X;<br\/><br\/>\/\/ Set the Matrix 4th column, 2nd row to the offset&#039;s Y<br\/>mtrx.M42 = pos.Y;<br\/><br\/>\/\/ Set the Matrix 4th column, 3rd row to the offset&#039;s Z<br\/>mtrx.M43 = pos.Z;<br\/><\/pre><p>In this method, we are setting each axis of the translation section of the matrix directly (See the Matrix Module Overview for a figure that defines the areas of a matrix defined for translation). While not incorrect, this method, isn't as concise as the other examples. Understanding a matrix in this format; however, may aid you when debugging a matrix for errors; we are presenting this method for that purpose.<\/p><p>There are many examples in games where you might find translation code similar to the three examples above. Players, cameras, or even lights will move around a game world and use a translation matrix to do so.<\/p><p>In addition to using a vector to add translation to a matrix, you can also do the opposite and use a matrix to translate a vector like we will do in the next example.<\/p><h2>Example 4<\/h2><pre class=\"wp-code-highlight prettyprint linenums:1\">Matrix mtrx = Matrix.CreateTranslation(0, 10, 0);<br\/>Vector3 vecStart = new Vector3(0, 0, 0);<br\/>Vector3 vecEnd = new Vector3(0, 1, 0);<br\/>Vector3 vecStartPrime = Vector3.Transform(vecStart, mtrx);<br\/>Vector3 vecEndPrime = Vector3.Transform(vecEnd, mtrx);<br\/><\/pre><p>The above code uses two vector objects as points to create a segment. The two points are then multiplied by a translation matrix initialized with the value (0, 10, 0). The output are vectors that are offset by the values in the translation. In this example, vecStartPrime equals (0, 10, 0) and vecEndPrime equals (0, 11, 0).<\/p><\/div><a class=\"dest\" id=\"translation-3\"><\/a>&nbsp;<div class=\"accent\"><h1>Matrix Translation by Matrix<\/h1><p>For our final example, we will concatenate two matrices to form a third matrix that contains the translation information of both.<br \/>In the Matrix Module, we said that, in general, matrix multiplication is not commutative. There are some specific instances (E.g. translation * translation) where matrix multiplication is. Two or more sequential translation matrices multiplied are always commutative, meaning order doesn't change the answer.<\/p><h2>Example 5<\/h2><pre class=\"wp-code-highlight prettyprint linenums:1\">Matrix mtrx1 = Matrix.CreateTranslation(0, 2, 0);<br\/>Matrix mtrx2 = Matrix.CreateTranslation(2, 0, 0);<br\/>Matrix mtrx3 = mtrx1 * mtrx2;<br\/><\/pre><p>In this example, mtrx3 will have a translation section of (2, 2, 0). And while we've simplified this example to only concatenate two translation matrices, it's important to understand that we can combine many transformations including combinations of translation, rotation, and scale.<\/p><\/div><!--page:~~translation-reference-text~~-->","title":"Reference Material"},{"bIsChecked":true,"exercise":".\/exercise\/translation.zip","instructions":"<h1>Goal<\/h1><p>In this Exercise, we will apply translations to a Matrix and move textured quads around the screen. The Exercise provides the textures, quads, and part of the Matrix properties to get us started. The two objects we will be manipulating are already rendering on screen. All Focus Areas for this Exercise are in the Update function, which is where we will add our code.<\/p><img class=\"aligncenter size-full wp-image-701\" src=\".\/images\/translation_exercise_1.jpg\" alt=\"translation_exercise_1\" width=\"800\" height=\"450\" \/><p style=\"text-align: center;\">The final scene should look similar to the one in this image.<\/p><h1>Steps<\/h1><ol><li>Translating the ship<ol><li>First, let's see what the Exercise looks like without modification. Run the Exercise by clicking the Start button or pressing F5. (<a href='.\/simulation\/TranslationExercise_1\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><li>The ship is already rendering in the center of the screen. In <em>Focus Area 3<\/em>, set <code>_shipTransform<\/code> using the method <code>Matrix.CreateTranslation<\/code> and pass a new Vector3 to move the ship to a different location. Offset the ship by 10 units in the positive Y direction.<\/li><li>Run the game by pressing the Start button or pressing F5. The astronaut should be in the center, whereas the ship will be offset.  (<a href='.\/simulation\/TranslationExercise_2\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><li>Change the code again to set the ship at the origin (0,0,0).<\/li><li>Run the game again to make sure the ship and astronaut are both in the middle of the screen.<\/li><\/ol><\/li><li>Constant movement<ol><li>In <em>Focus Area 1<\/em>, increase the value of <code>_shipTranslation<\/code> by adding the result of <code>_shipTranslatePerSecond<\/code> times <code>deltaSeconds<\/code>.<\/li><li>Back in <em>Focus Area 3<\/em>, use <code>_shipTranslation<\/code> in the new Vector3&#8242;s X value to make it constantly move horizontally.<\/li><li>In <em>Focus Area 2<\/em>, there are two if statements that check the value of <code>_shipTranslation<\/code>. In the first if statement, set <code>_shipTranslation<\/code> to match the value in the if() check. Then, invert <code>_shipTranslatePerSecond<\/code> by multiplying it by -1.0.<\/li><li>Still in <em>Focus Area 2<\/em>, modify the contents of the second if check similarly to 2.3. Match the value of <code>_shipTranslation<\/code> to the if statement, then inverse <code>_shipTranslatePerSecond<\/code>.<\/li><li>Run the game by pressing the Start button or pressing F5. The ship moves to the right, hits the edge of the extents defined by the if() statement, then moves left until it hits the other edge defined by the other if() statement. (<a href='.\/simulation\/TranslationExercise_3\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><\/ol><\/li><li>Translating the astronaut<ol><li>At the bottom of the Update function we will find <em>Focus Area 4<\/em>. Create a new Vector3 and name it <code>astronautPosition<\/code>. Set its value equal to the <code>_shipTransform<\/code>&#8216;s translation property added to the <code>_astronautOffset<\/code>. <\/li><li>Next, still in <em>Focus Area 4<\/em>, set the <code>_astronautTransform<\/code> by using <code>Matrix.CreateTranslation<\/code> and the <code>astronautPosition<\/code>.<\/li><li>Run the game by pressing the Start button or pressing F5. The astronaut should now move with the ship, though staying slightly ahead because of its offset being added to the ship's translation. (<a href='.\/simulation\/TranslationExercise_4\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><\/ol><\/li><\/ol><h1>Rubric<\/h1><ul><li>2 points for moving the ship and astronaut to the center of the screen in step 1.<\/li><li>2 points for animating the ship translation in step 2.<\/li><li>2 points for translating the astronaut in step 3.<\/li><\/ul><h1>Code Help<\/h1><!--CodeHelp: Vector3--><p><strong>Vector3<\/strong> &#8211;  A vector data structure containing 3 components (X, Y, Z). When creating a new Vector3, we can pass in three float values:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Example X\/Y\/Z floats. Values are arbitrary<br\/>float x = 1.0f;<br\/>float y = 2.0f;<br\/>float z = 3.0f;<br\/><br\/>\/\/ Create a new Vector3<br\/>Vector3 vectorA = new Vector3(x, y, z);<br\/>Vector3 vectorB = new Vector3(4.0f, 5.0f, 6.0f);<br\/><br\/>\/\/ Values of vectorC will be 5.0f, 7.0f, 9.0f for X, Y, and Z respectively<br\/>Vector3 vectorC = vectorA + vectorB;<br\/><br\/>\/\/ Create a Vector3 by transforming a Matrix <br\/>Vector3 distance = new Vector3(1.0f, 2.0f, 3.0f);<br\/>Vector3 transformedVector = Vector3.Transform(distance, Matrix.CreateRotationY(MathHelper.ToRadians(45.0f)));<br\/><br\/>\/\/ Create a Vector3 from Vector2 values<br\/>Vector2 vectorTwo = new Vector2(10.0f, 5.0f);<br\/>Vector3 vectorThree = new Vector3(vectorTwo.X, vectorTwo.Y, 0.0f);<br\/><\/pre><p><\/p><!--CodeHelp: Matrix--><p><strong>Matrix<\/strong> &#8211; An XNA structure that represents a matrix. Matrices use a row vector layout in the XNA Framework. It is essentially a two-dimensional array of numbers.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Returns an instance of the identity matrix.<br\/>Matrix identityMatrix = Matrix.Identity;<br\/><br\/>\/\/ Create a translation matrix<br\/>Matrix translateMatrix = Matrix.CreateTranslation(new Vector3(2.0f, 2.0f, 2.0f);<br\/><br\/>\/\/ Create a rotation matrix at 45 degrees about the Z axis<br\/>Matrix rotateMatrix = Matrix.CreateRotationZ(MathHelper.ToRadians(45.0f));<br\/><br\/>\/\/ Create a complex transform from multiple operations<br\/>Matrix complexMatrix = Matrix.CreateRotationZ(MathHelper.ToRadians(45.0f)) * Matrix.CreateTranslation(new Vector3(2.0f, 2.0f, 2.0f);<br\/><\/pre><p><\/p><!--CodeHelp: DrawTexturedQuad--><p><strong>DrawTexturedQuad<\/strong> &#8211; This function is provided for us and wrapped in a dynamic-link library. It will draw a textured quad to the screen:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ The first parameter is the textured quad, set up earlier<br\/>\/\/ The second parameter is its transform.<br\/>DrawTexturedQuad(_backgroundQuad, Matrix.Identity);<br\/><\/pre><p><\/p><!--CodeHelp: Module--><p><strong>Module<\/strong> &#8211; Module is a custom class written for this course. It is wrapped in a dynamic-link library, so we do not have to worry about adding to it:<\/p><ul><li>_graphicsDevice – An XNA\/MonoGame GraphicsDevice. This is used in SpriteManager's rendering methods. It is already initialized for us and we simply need to know its name and where to use it.<\/li><li>_contentManager – An XNA\/MonoGame ContentManager. This is used in SpriteTexture's texture methods. It is already initialized for us and we simply need to know its name and where to use it.<\/li><li>DefautCamera – A simple Camera object which manages our game's projection and view. It is already initialized for us and we simply need to know its name and where to use it.<\/li><\/ul><p><\/p><!--page:~~translation-exercise~~-->","link":"exercise","mod":"translation","movie":null,"name":"translation","promptfile":null,"prompts":null,"reference":null,"text":null,"title":"Exercise"}]},{"bIsChecked":true,"name":"rotation","title":"Rotation","topics":[{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"rotation","movie":".\/video\/Course2-animated-scene-arc-rotation-Scene_Overview.mp4","name":"Overview","promptfile":null,"prompts":null,"reference":"rotation-1","text":null,"title":"Overview"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"rotation-axes","mod":"rotation","movie":".\/video\/Course2-animated-scene-arc-rotation-rot-about-axis.mp4","name":"Rotation About Axes","promptfile":null,"prompts":null,"reference":"rotation-2","text":null,"title":"Rotation About Axes"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"object-space-rotations","mod":"rotation","movie":".\/video\/Course2-animated-scene-arc-rotation-object-and-worldspace.mp4","name":"Object and World Space Rotations","promptfile":null,"prompts":null,"reference":"rotation-3","text":null,"title":"Object and World Space Rotations"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"order-operations","mod":"rotation","movie":".\/video\/Course2-animated-scene-arc-rotation-order-of-operations.mp4","name":"Order of Operations","promptfile":null,"prompts":null,"reference":"rotation-4","text":null,"title":"Order of Operations"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"quaternions-euler","mod":"rotation","movie":".\/video\/Course2-animated-scene-arc-rotation-gimbal-lock.mp4","name":"Quaternions and Gimbal Lock","promptfile":null,"prompts":null,"reference":"rotation-5","text":null,"title":"Quaternions and Gimbal Lock"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"reference","mod":"rotation","movie":null,"name":"Reference","promptfile":null,"prompts":null,"reference":null,"text":"<a id=\"rotation-1\"><\/a><div class=\"accent\"><h1>Overview<\/h1><p>This section focuses on rotation from the perspective of a gameplay programmer. Remember, rotation is one type of transformation discussed in the Matrix Module.<\/p><img class=\"img-responsive aligncenter\" src=\".\/images\/test.gif\" alt=\"test\" width=\"1280\" height=\"720\" \/><p style=\"text-align: center;\"><strong>Figure 1:<\/strong> <em>Orbital rotation (revolution) where one object rotates around another.<\/em><\/p><p>First, let's look at how rotation is used in games. Two of the most basic examples: orbital rotation and spin. The Earth rotating around the Sun is an example of orbital rotation because the Earth is moving around a point that is different than its center. The Earth rotating in place on its poles is an example of spin. In this Module, we will cover:<\/p><div style=\"text-align: center;\"><ul class=\"anchorGroup\" style=\"text-align: left; display: inline-block;\"><li><a class=\"topic-link ankor\" href=\"#rotation-2\">Rotation About Axes<\/a><\/li><li><a class=\"topic-link ankor\" href=\"#rotation-3\">Object and World Space Rotations<\/a><\/li><li><a class=\"topic-link ankor\" href=\"#rotation-4\">Order of Operations<\/a><\/li><li><a class=\"topic-link ankor\" href=\"#rotation-5\">Quaternions vs Euler<\/a><\/li><\/ul><\/div><\/div><a class=\"dest\" id=\"rotation-2\"><\/a>&nbsp;<div class=\"accent\"><h1>Rotation About Axes<\/h1><p>Rotation will typically occur based on axes manipulation. The following diagram, which shows three axes (X Y Z) in a Cartesian coordinate system:<\/p><img class=\"img-responsive aligncenter wp-image-956 size-full\" src=\".\/images\/image021.png\" alt=\"image021\" width=\"824\" height=\"562\" \/><p style=\"text-align: center;\"><strong>Figure 2:<\/strong> <em>Cartesian coordinate system showing X, Y, Z axes.<\/em><\/p><p>Euler (pronounced <b>oi<\/b>-ler) angles are one way to represent rotation about an axis. The measurements are determined through yaw, pitch, and roll. While Euler angles are easier to understand and visualize, the disadvantages include a chance to encounter Gimbal lock (discussed later in this Module). We can visualize these angles using a real world example, think of how planes rotate using yaw, pitch, and roll. The rotation still happens on an axis by spinning in place:<\/p><img class=\"img-responsive aligncenter\" src=\".\/images\/yawpitchroll.png\" alt=\"ypw\" width=\"655\" height=\"322\" \/><p style=\"text-align: center;\"><strong>Figure 3<\/strong> <em>Spin rotation along axes, sometimes referred to as yaw, pitch, and roll.<\/em><\/p><p>Additionally, some game engines allow us to assign rotation about a defined axis. The script programmer provides the axis which is typically a vector of three values. Once the axis is defined, the scripter only needs to provide the value of the rotation about that axis (e.g. 3.14 radians)<\/p><img class=\"aligncenter size-full wp-image-709 img-responsive\" src=\".\/images\/rotation_4.png\" alt=\"rotation_4\" \/><p style=\"text-align: center;\"><strong>Figure 4 <\/strong><em>Spin rotation about an axis angle (in green).<\/em><\/p><\/div><a class=\"dest\" id=\"rotation-3\"><\/a>&nbsp;<div class=\"accent\"><h1>Object and World Space Rotations<\/h1><p>This topic builds on the topic Object and World Space Transformations in the Matrix Module. Rotation occurs against an axis or a fixed point (i.e. multiple axis). When we rotate our wrists, the center of the rotation is the axis of our wrists. When we rotate our arm, the center of the rotation is a point in our shoulder. With an object is in 3D space, it's common to discuss the rotation by what “space” the rotation is occurring in. Generally, gameplay developer's and designers focus on two different spaces: object and world.<\/p><p style=\"padding-left: 30px;\"><strong>Object Space<\/strong> - Sometimes referred to as local space, object rotations occur at a point relative to the coordinate system of the object, often the center of that object. If a lamppost is rotating in object space, it might be spinning in place around its center point.<\/p><p style=\"padding-left: 30px;\"><strong>World Space<\/strong> - When rotating in world space, an object will rotate according to a point relative to the center of the world. A lamppost rotating in world space might orbit around a fixed point in the center of the game level.<\/p><p>Here is the take away: rotations must be described in terms relative to a point or axis. In order to describe the rotation, we must define if the rotation is relative to the object space coordinate system or the world's.<\/p><\/div><a class=\"dest\" id=\"rotation-4\"><\/a>&nbsp;<div class=\"accent\"><h1>Order of Operations<\/h1><p>Rotation (and other matrix operations) are not commutative; the order in which we apply a rotation is important. Imagine we are going to apply two operations in the following order (Table 1):<\/p><ol><li>Pitch (rotate about the X axis) an object in object space by 90 degrees<\/li><li>Yaw (rotate about the Y axis) an object in object space by 90 degrees<\/li><\/ol><p>If we reverse the order (Table 2) and apply rotation 2 before operation 1, the object will be in a different position.<\/p><h2>Table 1<\/h2><table><tbody><tr><td>Start<\/td><td>Pitch 90 Degrees<\/td><td>Yaw 90 Degrees<\/td><\/tr><tr><td><img class=\"img-responsive aligncenter\" src=\".\/images\/RotImage1.png\" alt=\"RotImage1\" width=\"200\" height=\"200\" \/><\/td><td><img class=\"img-responsive aligncenter\" src=\".\/images\/RotImage2.png\" alt=\"RotImage2\" width=\"200\" height=\"200\" \/><\/td><td style=\"text-align: center;\"><img class=\"img-responsive alignnone\" src=\".\/images\/RotImage3.png\" alt=\"RotImage3\" width=\"200\" height=\"200\" \/><\/td><\/tr><\/tbody><\/table><h2>Table 2<\/h2><table><tbody><tr><td>Start<\/td><td>Yaw 90 Degrees<\/td><td>Pitch 90 Degrees<\/td><\/tr><tr><td><img class=\"img-responsive aligncenter wp-image-85 size-full\" src=\".\/images\/RotImage4.png\" alt=\"RotImage4\" width=\"200\" height=\"200\" \/><\/td><td><img class=\"img-responsive aligncenter wp-image-86 size-full\" src=\".\/images\/RotImage5.png\" alt=\"RotImage5\" width=\"200\" height=\"200\" \/><\/td><td style=\"text-align: center;\"><img class=\"img-responsive alignnone wp-image-87 size-full\" src=\".\/images\/RotImage6.png\" alt=\"RotImage6\" width=\"200\" height=\"200\" \/><\/td><\/tr><\/tbody><\/table><\/div><a class=\"dest\" id=\"rotation-5\"><\/a>&nbsp;<div class=\"accent\"><h1>Quaternions vs Euler<\/h1><h2>Gimbal Lock<\/h2><p>Gimbal lock is a problem that occurs when using Euler angles used in three dimensions that result in rotations not working as expected. Gimbal lock is a limitation of Euler angles caused by 1) the order in which we apply the rotations (i.e. Yaw, Pitch, Roll, vs. Roll, Pitch, and Yaw) 2) the values of certain angles causing two axes to become co-planer. Understanding the conditions for which Gimbal lock occurs isn't that important for beginner game developers since most game engines solve this problem for us automatically by storing rotation internally as quaternions. As game developers, we get the best of both worlds: the simplicity of Euler angles without the problems such as Gimbal lock.<\/p><h2>Quaternions<\/h2><p>A quaternion is another way to represent a rotation. In game development, we will commonly see it represented as X,Y,Z,W. Quaternions have some advantages over Euler angles since they are not susceptible to Gimbal lock. The downside is that quaternions are not the easiest concept to visualize and debug. Typically, gameplay programmers don't need to know how to build a quaternion based system but we may see them. Typically, game engines will allow us to construct a quaternion by providing a yaw, pitch, and roll, as input.<\/p><\/div><!--page:~~rotation-reference-text~~-->","title":"Reference Material"},{"bIsChecked":true,"exercise":".\/exercise\/rotation.zip","instructions":"<h1>Goal<\/h1><p>In this exercise, we will use translation and rotation Matrix operations to cause multiple 2D and 3D objects to spin and orbit. When we first run the exercise, we will see all the objects rendering on screen. Most of the Focus Areas for this exercise are in the Update function, which is where we will add our code.<\/p><img class=\"aligncenter size-full wp-image-701\" src=\".\/images\/rotation_exercise_1.jpg\" alt=\"rotation_exercise_1\" width=\"800\" height=\"451\" \/><p style=\"text-align: center;\">The final scene should look similar to the one in this image.<\/p><h1>Steps<\/h1><ol><li>Browse the code and find our way around (<a href='.\/simulation\/RotationExercise_1\/index.html' target=\"_blank\" class=\"sim-popup\">Simulation<\/a>)<ol><li>All the properties we will be working with are located at the beginning of the RotationExercise class, within <em>Focus Area 1<\/em>. Notice the properties are separated into groups, based on the object being manipulated. There are properties for a corona, astronaut, Mars, Sun, and Earth.<\/li><li>Next, scroll down to the Update function and look at the code contained in <em>Focus Area 2<\/em>. While the properties being manipulated have the word \"rotation\" in them, these are not actual rotation operations. This code calculates values that will be used in rotation operations.<\/li><li>Run the exercise by pressing the Start button or pressing F5. We should see all objects on screen, in various positions.<\/li><\/ol><\/li><li>Corona Rotation (<a href='.\/simulation\/RotationExercise_2\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<ol><li>First, we will make the Sun's corona spin in place. Scroll down to the Update function and locate <em>Focus Area 3<\/em>. We should see <code>_coronaTransform<\/code> getting set by a <code>Matrix.CreateTranslation(_CoronaDistance)<\/code> call. On the same line, multiply the CreateTranslation call by <code>Matrix.CreateRotationZ<\/code>. Use the <code>_coronaRotation<\/code> value. If the planet wobbles, try switching the order of matrix multiplication.<\/li><li>Run the exercise by pressing the Start button or pressing F5. We should see the Sun's corona spinning in place.<\/li><\/ol><\/li><li>Mars Rotation (<a href='.\/simulation\/RotationExercise_3\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<ol><li>Next, we are going to make Mars orbit around the planet. Scroll down to <em>Focus Area 4<\/em>. Above the existing code in <em>Focus Area 4<\/em>, create a new Matrix and name it <code>marsMatrix<\/code>. Set the value to the result of <code>Matrix.CreateRotationZ<\/code>. Use the <code>_marsRotation<\/code> property.<\/li><li>Just beneath the <code>marsMatrix<\/code> code, create a new Vector3 named <code>marsOffset<\/code>. Set its value to the result of Vector3.Transform(). Use <code>_marsDistance<\/code> and <code>marsMatrix<\/code> as parameters to the Transform call.<\/li><li>Change the value of <code>marsPosition<\/code> from its current value in the Exercise code to the sum of <code>_coronaTransform<\/code>&#8216;s translation and <code>marsOffset<\/code><\/li><li>Finally, locate this line of code:<pre class=\"wp-code-highlight prettyprint linenums:1\">_marsTransform = Matrix.CreateTranslation(marsPosition);<\/pre><\/li><li>Modify it by setting <code>_marsTransform<\/code> equal to the result of multiplying the <code>Matrix.CreateTranslation(marsPosition)<\/code> and <code>marsMatrix<\/code>.<\/li><li>Run the game by pressing the Start Button or pressing F5. Mars should be orbiting around the Sun.<\/li><\/ol><\/li><li>Sun Rotation (<a href='.\/simulation\/RotationExercise_4\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<ol><li>Next, we will make the 3D Sun spin in place. Locate <em>Focus Area 5<\/em>. We should see <code>_sunTransform<\/code> getting set by a call to <code>Matrix.CreateTranslation<\/code>. On the same line, multiply the CreateTranslation call by <code>Matrix.CreateRotationZ<\/code>. Use the <code>_sunRotation<\/code> value.<\/li><li>Run the exercise by pressing the Start button or pressing F5. We should see the Sun spinning in place at the center of the screen.<\/li><\/ol><\/li><li>Earth Rotation (<a href='.\/simulation\/RotationExercise_5\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<ol><li>Next, we are going to make the Earth spin and rotate around the Sun. Scroll down to <em>Focus Area 6<\/em>. Create a new Matrix and name it <code>earthMatrix<\/code>. Set the value to the result of Matrix.CreateRotationY. Use the <code>_rotationAroundSun<\/code> property.<\/li><li>Create a new Vector3 named <code>earthOffset<\/code>. Set its value to the result of <code>Vector3.Transform()<\/code>. Use <code>_earthDistance and earthMatrix<\/code> as parameters for the Transform call.<\/li><li>Next, locate this line of code:<pre class=\"wp-code-highlight prettyprint linenums:1\">_earthTransform = Matrix.CreateTranslation(earthPosition);<\/pre><\/li><li>Replace it by setting <code>_earthTransform<\/code> equal to the result of multiplying the Matrix calls CreateRotationY and CreateTranslation. Use <code>_earthRotation<\/code> and <code>earthPosition<\/code> in the appropriate calls.<\/li><li>Finally, find the following line of code:<pre class=\"wp-code-highlight prettyprint linenums:1\">Vector3 earthPosition = _sunTransform.Translation + _earthDistance;<\/pre><\/li><li>Replace _earthDistance with our newly created earthOffset.<\/li><li>Run the game by pressing the start button or pressing F5. The Earth should be rotating around the Sun and spinning about the Y-axis.<\/li><\/ol><\/li><li>Astronaut Rotation (<a href='.\/simulation\/RotationExercise_6\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<ol><li>Next, we are going to make the astronaut spin and rotate around the Earth. Scroll down to <em>Focus Area 7<\/em>. Create a new Matrix and name it <code>astronautMatrix<\/code>. Set the value to the result of Matrix.CreateRotationZ. Use the <code>_astronautRotation<\/code> property.<\/li><li>Create a new Vector3 named <code>astronautOffset<\/code>. Set its value to the result of <code>Vector3.Transform()<\/code>. Use <code>_astronautDistance and astronautMatrix<\/code> as parameters for the Transform call.<\/li><li>Next, find this line of code:<pre class=\"wp-code-highlight prettyprint linenums:1\">Vector3 astronautPosition = _earthTransform.Translation + _astronautDistance;<\/pre><\/li><li>Change _astronautDistance to our newly created astronautOffset.<\/li><li>Finally, locate this line of code:<pre class=\"wp-code-highlight prettyprint linenums:1\">_astronautTransform = Matrix.CreateTranslation(astronautPosition);<\/pre><\/li><li>Replace it by setting <code>_astronautTransform<\/code> equal to the result of multiplying the Matrix calls CreateRotationZ and CreateTranslation. Use <code>_astronautRotation<\/code> and <code>astronautPosition<\/code> in the appropriate calls.<\/li><li>Run the exercise by clicking the start button or pressing F5. If our code is correct, the astronaut should be rotating around the Earth and moving it with around the Sun. It should also be spinning at rate that keeps the same side facing Earth at all times.<\/li><\/ol><\/li><\/ol><h1>Rubric<\/h1><ul><li>1 point for correct corona rotation in step 1.<\/li><li>1 point for correct mars rotation in step 3.<\/li><li>1 point for correct sun rotation in step 4.<\/li><li>1 point for correct earth rotation in step 5.<\/li><li>2 points for correct astronaut roation in step 6.<\/li><\/ul><h1>Code Help<\/h1>        <!--CodeHelp: Vector3-->        <p><strong>Vector3<\/strong> &#8211;  A vector data structure containing 3 components (X, Y, Z). When creating a new Vector3, we can pass in three float values:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Example X\/Y\/Z floats. Values are arbitrary<br\/>float x = 1.0f;<br\/>float y = 2.0f;<br\/>float z = 3.0f;<br\/><br\/>\/\/ Create a new Vector3<br\/>Vector3 vectorA = new Vector3(x, y, z);<br\/>Vector3 vectorB = new Vector3(4.0f, 5.0f, 6.0f);<br\/><br\/>\/\/ Values of vectorC will be 5.0f, 7.0f, 9.0f for X, Y, and Z respectively<br\/>Vector3 vectorC = vectorA + vectorB;<br\/><br\/>\/\/ Create a Vector3 by transforming a Matrix <br\/>Vector3 distance = new Vector3(1.0f, 2.0f, 3.0f);<br\/>Vector3 transformedVector = Vector3.Transform(distance, Matrix.CreateRotationY(MathHelper.ToRadians(45.0f)));<br\/><br\/>\/\/ Create a Vector3 from Vector2 values<br\/>Vector2 vectorTwo = new Vector2(10.0f, 5.0f);<br\/>Vector3 vectorThree = new Vector3(vectorTwo.X, vectorTwo.Y, 0.0f);<br\/><\/pre><p><\/p><!--CodeHelp: Matrix-->        <p><strong>Matrix<\/strong> &#8211; An XNA structure that represents a matrix. Matrices use a row vector layout in the XNA Framework. It is essentially a two-dimensional array of numbers.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Returns an instance of the identity matrix.<br\/>Matrix identityMatrix = Matrix.Identity;<br\/><br\/>\/\/ Create a translation matrix<br\/>Matrix translateMatrix = Matrix.CreateTranslation(new Vector3(2.0f, 2.0f, 2.0f);<br\/><br\/>\/\/ Create a rotation matrix at 45 degrees about the Z axis<br\/>Matrix rotateMatrix = Matrix.CreateRotationZ(MathHelper.ToRadians(45.0f));<br\/><br\/>\/\/ Create a complex transform from multiple operations<br\/>Matrix complexMatrix = Matrix.CreateRotationZ(MathHelper.ToRadians(45.0f)) * Matrix.CreateTranslation(new Vector3(2.0f, 2.0f, 2.0f);<br\/><\/pre><p><\/p><!--CodeHelp: Quad-->        <p><strong>Quad<\/strong> &#8211; Quad is a custom class written for this course. The code is stored in a dynamic-link library, so we do not have to worry about writing the low-level members. This is a basic class, primarily used for rendering a texture to the screen:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Create a new quad. It should be in the center of the screen and be 60x60 in size<br\/>\/\/ The first parameter represents its origin <br\/>\/\/ The second parameter is the width. <br\/>\/\/ The third parameter is the height.<br\/>Quad backgroundQuad = new Quad(new Vector3(0.0f, 0.0f, 0.0f), 60f, 60f);<br\/><br\/>\/\/ Declare vectors that represent the texture coordinates<br\/>Vector2 _textureUpperLeft = new Vector2(0.0f, 0.0f);<br\/>Vector2 _textureUpperRight = new Vector2(1.0f, 0.0f);<br\/>Vector2 _textureLowerLeft = new Vector2(0.0f, 1.0f);<br\/>Vector2 _textureLowerRight = new Vector2(1.0f, 1.0f);<br\/><br\/>\/\/  Set the Quad&#039;s texture coordinates by calling FillVertices<br\/>backgroundQuad.FillVertices(_textureUpperLeft, _textureUpperRight, _textureLowerLeft, _textureLowerRight);<br\/><\/pre><p><\/p><!--CodeHelp: Texture2D--><p><strong>Texture2D<\/strong> &#8211; This is a stock XNA\/MonoGame object which represents a 2D grid of texels.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Load the texture from file<br\/>Texture2D backgroundTexture = _contentManager.Load&lt;Texture2D&gt;(&quot;Graphics\\\\background&quot;);<br\/><br\/>\/\/ Get the width<br\/>int textureWidth = backgroundTexture.Width;<br\/><br\/>\/\/ Get the height<br\/>int textureHeight = backgroundTexture.Height;<br\/><\/pre><p><\/p><!--page:~~rotation-exercise~~-->","link":"exercise","mod":"rotation","movie":null,"name":"rotation","promptfile":null,"prompts":null,"reference":null,"text":null,"title":"Exercise"}]},{"bIsChecked":true,"name":"scale","title":"Scale","topics":[{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"scale","movie":".\/video\/Course2-animated-scene-arc-scale-overview.mp4","name":"Overview","promptfile":null,"prompts":null,"reference":"scale-1","text":null,"title":"Overview"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"scale-dimension","mod":"scale","movie":".\/video\/Course2-animated-scene-arc-scale-growing-something.mp4","name":"Scale & Translation","promptfile":null,"prompts":null,"reference":"scale-2","text":null,"title":"Scale & Translation"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"reference","mod":"scale","movie":null,"name":"Reference","promptfile":null,"prompts":null,"reference":null,"text":"<a id=\"scale-1\"><\/a><div class=\"accent\"><h1>Overview<\/h1><p>Scale is the third and final transformation we will discuss in this Arc. As you have seen in the previous exercise, scale stretches space along one or more axis. If you were to scale a box about the Y axis, it would grow towards the positive and negative direction; if you were to scale a box about the Z axis, it would grow towards and away from the screen.<\/p><p>In this Module we'll explore the use of scale within code and how it can alter the size and shape of an object on screen.<\/p><h2>Uniform vs Non-Uniform Scaling<\/h2><p>As we mentioned previously, the size and shape of an object can be changed by applying a scale factor to an object's matrix. The value used for a scale factor will affect the object in different ways. A scale factor of 1 will result in the object being rendered normally, with no scaling applied. Increasing the value of the scale factor will render the object larger than it normally is while reducing it less than 1 will result in the object being rendered smaller than its normal size.<\/p><p>When we scale an object we do so by applying the scale factor to one or more of the object's axes. This gives us two different types of scaling, uniform and non-uniform scaling.<\/p><h2>Uniform Scaling<\/h2><p>Uniform scaling is when a single scale factor is applied to all three axes of an object in a single operation. An example of this would be applying a scale factor of 2 to the X, Y, and Z axes of object.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Create the original quad<br\/>originalQuad = new Quad(new Vector3(0, 0, 0), 4.0f, 4.0f);<br\/>originalQuadTransform = Matrix.Identity;<br\/><br\/>\/\/ Create the scaled version of the quad<br\/>scaledQuad = new Quad(new Vector3(0, 0, 0), 4.0f, 4.0f);<br\/>scaledQuadTransform = Matrix.CreateScale(2.0f);<br\/><\/pre><p>This operation would result in the object doubling its size while maintaining its shape in all dimensions.<\/p><h2>Non-Uniform Scaling<\/h2><p>Non-Uniform scaling is when different scale factors are applied to each axis of an object. This causes the object to become skewed or distorted across the scaled axis. An example of this would be a scale factor of 2 being applied to an object's Y axis, while maintaining a scale factor of 1 is applied to the object's X and Z axes.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Create the original quad<br\/>originalQuad = new Quad(new Vector3(0, 0, 0), 4.0f, 4.0f);<br\/>originalQuadTransform = Matrix.Identity;<br\/><br\/>\/\/ Create the scaled version of the quad, stretching it in the Y axis<br\/>scaledQuad = new Quad(new Vector3(0, 0, 0), 4.0f, 4.0f);<br\/>scaledQuadTransform = Matrix.CreateScale(1.0f, 2.0f, 1.0f);<br\/>scaledQuadTransform *= Matrix.CreateTranslation(new Vector3(15.0f, 0.0f, 0.0f));<br\/><\/pre><p>This would result in the object doubling its height, and the object's shape would not be the same as it was originally. The object would instead look stretched. Non-Uniform scaling is typically only used for special effects that would result in an object having to be distorted or lengthened.<\/p><div style=\"text-align: center;\"><ul class=\"anchorGroup\" style=\"text-align: left; display: inline-block;\"><li><a class=\"ankor\" href=\"#scale-2\">Combining Scaling with Other Operations<\/a><\/li><\/ul><\/div><\/div><a class=\"dest\" id=\"scale-2\"><\/a>&nbsp;<div class=\"accent\"><h1>Combining Scaling with Other Operations<\/h1><p>Often in game programming a scaling operation will need to be combined with other operations in order to achieve the desired effect. A common example used in games is a growth power-up. A player may touch the power-up item and double, triple, or even quadruple in size.<\/p><p>The first inclination may be to apply a uniform scale to the player's avatar when it interacts with the power-up. But this doesn't quite create the effect.<\/p><img class=\"img-responsive aligncenter wp-image-1096 size-full\" src=\".\/images\/scalegrowissue.jpg\" alt=\"scalegrowissue\" width=\"634\" height=\"470\" \/><p style=\"text-align: center;\"><strong>Figure 1<\/strong> The player's avatar (a dinosaur in this game) is scaled uniformly by 2 and sinks into the ground.<\/p><p>The avatar's origin point is typically at the center of the avatar. This means that the avatar will be enlarged uniformly with the bottom of the object partially under the ground. To correct this a translate operation must be performed to correct the avatar's position by the amount that scaled below the ground plane.<\/p><img class=\"img-responsive aligncenter wp-image-1097 size-full\" src=\".\/images\/scalegrowsolution.jpg\" alt=\"scalegrowsolution\" width=\"634\" height=\"470\" \/><p style=\"text-align: center;\"><strong>Figure 2<\/strong> The player's avatar is scaled uniformly by 2 and then translated up by 1 to have standing on top of the ground<\/p><\/div><!--page:~~scale-reference-text~~-->","title":"Reference Material"},{"bIsChecked":true,"exercise":".\/exercise\/scale.zip","instructions":"<h1>Goal<\/h1><p>This Exercise will have us scale two textured quads by building up the correct scale matrices.<\/p><img class=\"aligncenter size-full wp-image-701\" src=\".\/images\/scale_exercise_1.jpg\" alt=\"scale_exercise_1\" width=\"800\" height=\"450\" \/><p style=\"text-align: center;\">The final scene should look similar to the one in this image.<\/p><h1>Steps<\/h1><p>All work will be done within the <em>ScaleExercise<\/em> class.<\/p><ol><li>Build and Run the Exercise. The Exercise should Build successfully and display three quads with textures lined up in the center of the window. (<a href='.\/simulation\/ScaleExercise_1\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><li>Within <em>Focus Area 1<\/em> the <code>_leftQuadTransform<\/code> matrix starts off as an identity matrix prior to being translated.  Change this code such that the <code>_leftQuadTransform<\/code> matrix is scaled two times in all directions before it is translated by the line below.<\/li><li>Build and Run the Exercise. The Exercise should Build successfully and display the three quads lined up in the center of the window with the left quad rendering as twice the size of the other two. (<a href='.\/simulation\/ScaleExercise_2\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><li>Within <em>Focus Area 2<\/em> the <code>_rightQuadTransform<\/code> matrix is being set to an identity matrix prior to being translated.  Change this code such that the <code>_rightQuadTransform<\/code> matrix is scaled by <code>_rightQuadScale<\/code> in the Y axis and 1.0f in the X and Z axes.<\/li><li>Build and Run the Exercise. The Exercise should Build successfully and display the three quads lined up in the center of the window. The left quad should still be twice the size of the center quad and the right quad should now be stretching and shrinking (vertically) along the Y axis continuously. (<a href='.\/simulation\/ScaleExercise_3\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><\/ol><h1>Rubric<\/h1><ul><li>3 points for rendering the left quad at twice the size of the other two in step 4.<\/li><li>3 points for the right ball animating with a vertical stretch in step 5.<\/li><\/ul><h1>Code Help<\/h1>        <!--CodeHelp: Matrix-->        <p><strong>Matrix<\/strong> &#8211; An XNA structure that represents a matrix. Matrices use a row vector layout in the XNA Framework. It is essentially a two-dimensional array of numbers.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Returns an instance of the identity matrix.<br\/>Matrix identityMatrix = Matrix.Identity;<br\/><br\/>\/\/ Create a translation matrix<br\/>Matrix translateMatrix = Matrix.CreateTranslation(new Vector3(2.0f, 2.0f, 2.0f);<br\/><br\/>\/\/ Create a rotation matrix at 45 degrees about the Z axis<br\/>Matrix rotateMatrix = Matrix.CreateRotationZ(MathHelper.ToRadians(45.0f));<br\/><br\/>\/\/ Create a complex transform from multiple operations<br\/>Matrix complexMatrix = Matrix.CreateRotationZ(MathHelper.ToRadians(45.0f)) * Matrix.CreateTranslation(new Vector3(2.0f, 2.0f, 2.0f);<br\/><\/pre><p><\/p><!--CodeHelp: Vector3-->        <p><strong>Vector3<\/strong> &#8211;  A vector data structure containing 3 components (X, Y, Z). When creating a new Vector3, we can pass in three float values:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Example X\/Y\/Z floats. Values are arbitrary<br\/>float x = 1.0f;<br\/>float y = 2.0f;<br\/>float z = 3.0f;<br\/><br\/>\/\/ Create a new Vector3<br\/>Vector3 vectorA = new Vector3(x, y, z);<br\/>Vector3 vectorB = new Vector3(4.0f, 5.0f, 6.0f);<br\/><br\/>\/\/ Values of vectorC will be 5.0f, 7.0f, 9.0f for X, Y, and Z respectively<br\/>Vector3 vectorC = vectorA + vectorB;<br\/><br\/>\/\/ Create a Vector3 by transforming a Matrix <br\/>Vector3 distance = new Vector3(1.0f, 2.0f, 3.0f);<br\/>Vector3 transformedVector = Vector3.Transform(distance, Matrix.CreateRotationY(MathHelper.ToRadians(45.0f)));<br\/><br\/>\/\/ Create a Vector3 from Vector2 values<br\/>Vector2 vectorTwo = new Vector2(10.0f, 5.0f);<br\/>Vector3 vectorThree = new Vector3(vectorTwo.X, vectorTwo.Y, 0.0f);<br\/><\/pre><p><\/p><!--CodeHelp: DrawTexturedQuad-->        <p><strong>DrawTexturedQuad<\/strong> &#8211; This function is provided for us and wrapped in a dynamic-link library. It will draw a textured quad to the screen:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ The first parameter is the textured quad, set up earlier<br\/>\/\/ The second parameter is its transform.<br\/>DrawTexturedQuad(_backgroundQuad, Matrix.Identity);<br\/><\/pre><p><\/p><!--CodeHelp: Module--><p><strong>Module<\/strong> &#8211; Module is a custom class written for this course. It is wrapped in a dynamic-link library, so we do not have to worry about adding to it:<\/p><ul><li>_graphicsDevice – An XNA\/MonoGame GraphicsDevice. This is used in SpriteManager's rendering methods. It is already initialized for us and we simply need to know its name and where to use it.<\/li><li>_contentManager – An XNA\/MonoGame ContentManager. This is used in SpriteTexture's texture methods. It is already initialized for us and we simply need to know its name and where to use it.<\/li><li>DefautCamera – A simple Camera object which manages our game's projection and view. It is already initialized for us and we simply need to know its name and where to use it.<\/li><\/ul><p><\/p><!--page:~~scale-exercise~~-->","link":"exercise","mod":"scale","movie":null,"name":"scale","promptfile":null,"prompts":null,"reference":null,"text":null,"title":"Exercise"}]},{"bIsChecked":true,"name":"animated-scene","title":"Animated Scene","topics":[{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"animated-scene","movie":".\/video\/Course2-animated-scene-arc-animated-scene-overview.mp4","name":"Overview","promptfile":null,"prompts":null,"reference":"animated-scene-1","text":null,"title":"Overview"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"flip-book","mod":"animated-scene","movie":".\/video\/Course2-animated-scene-arc-animated-scene-flipbook.mp4","name":"Flip Book Animations","promptfile":null,"prompts":null,"reference":"animated-scene-2","text":null,"title":"Flip Book Animations"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"linear-interpolation","mod":"animated-scene","movie":".\/video\/Course2-animated-scene-arc-animated-scene-motion-animation.mp4","name":"Linear Interpolation","promptfile":null,"prompts":null,"reference":"animated-scene-3","text":null,"title":"Motion Animations"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"animation-states","mod":"animated-scene","movie":".\/video\/Course2-animated-scene-arc-animated-scene-animation-states.mp4","name":"Basic Animation States","promptfile":null,"prompts":null,"reference":"animated-scene-4","text":null,"title":"Animation States"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"reference","mod":"animated-scene","movie":null,"name":"Reference","promptfile":null,"prompts":null,"reference":null,"text":"<a id=\"animated-scene-1\" class=\"dest\"><\/a><div class=\"accent\"><h1>Overview<\/h1><p>The earliest games did not feature much in the way of animation. Games like <em>Zork<\/em> had no animation at all, only text to describe the gameplay. As games advanced and hardware became more capable, developers were able to add life to their games through animation. Modern games can feature robust animations of varying kinds. For this Module, we are going to focus on common 2D animation techniques.<\/p><div style=\"text-align: center;\"><ul class=\"anchorGroup\" style=\"text-align: left; display: inline-block;\"><li><a class=\"ankor\" href=\"#animated-scene-2\">Flip Book Animations<\/a><\/li><li><a class=\"ankor\" href=\"#animated-scene-3\">Linear Transform Interpolation<\/a><\/li><li><a class=\"ankor\" href=\"#animated-scene-4\">Basic Animation States<\/a><\/li><\/ul><\/div><\/div><a id=\"animated-scene-2\" class=\"dest\"><\/a>&nbsp;<div class=\"accent\"><h1>Flip Book Animations<\/h1><p>Perhaps the longest running and most common animation style is the flip book animation. While there are different ways of coding a flip book, the art requirements and general approach remain consistent. For optimization and ease of use, sprite sheets became very popular in game development. A sprite sheet is a single image containing multiple, smaller images.<\/p><img class=\"aligncenter\" src=\".\/images\/image_run.png\" alt=\"image_run\" width=\"480\" height=\"480\" \/><p style=\"text-align: center;\"><strong>Figure 1<\/strong> <em>A sprite sheet of a run animation<\/em><\/p><p>The individual images in the sprite sheet are sometimes referred to as \"cells,\" which is why flip book animation is also referred to as \"cell animation.\" Using the same sprite sheet from Figure 1, we can visualize individual cells by superimposing a grid and numbers:<\/p><img class=\"aligncenter\" src=\".\/images\/image_run_grid.png\" alt=\"image_run_grid\" width=\"500\" height=\"500\" \/><p style=\"text-align: center;\"><strong>Figure 2<\/strong> <em>Isolated cells and indexes on a sprite sheet<\/em><\/p><p>As shown above, there are a total of 25 cells in the sprite sheet. Much like a real world flip book, when we render one cell after another over time, we will have an animation sequence:<\/p><img class=\"aligncenter\" src=\".\/images\/Mongor.gif\" alt=\"Mongor\" width=\"96\" height=\"96\" \/><p style=\"text-align: center;\"><strong>Figure 3<\/strong> <em>A full flip book animation<\/em><\/p><p>Calculating and accessing the correct cells to render varies from tech to tech. We only want to render one at a time, which means rendering a portion of the image like we did in the Texture Module. Essentially, an animation would be responsible for moving texture coordinates constantly, like thumbing through a flip book.<\/p><p>Setting up the data to calculate cell dimensions and indices only requires a few pieces of information. The example sprite sheet shown earlier is 512x512, so we know the texture dimensions. Next, we either need the number of rows and columns or the dimensions of the cells. If we count the number of frames in the sprite sheet, we will get 25, which includes the blank cell in the bottom right. That's five rows and five columns.<\/p><p>If split evenly, the width of each cell will be the total image width divided by the number of columns. The height of each cell will be the total image height divided by the number of rows.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ texture is a Texture2D loaded previously. Store its Width and Height properties<br\/>float imageWidth = texture.Width;<br\/>float imageHeight = texture.Height;<br\/><br\/>\/\/ Set the number of rows, columns, and total cell count<br\/>int rows = 5;<br\/>int columns = 5;<br\/>int cellCount = rows * columns;<br\/><br\/>\/\/ Set the cell dimensions<br\/>int cellWidth = imageWidth \/ columns;<br\/>int cellHeight = imageHeight \/ rows;<br\/><\/pre>&nbsp;<p>All of the above code is dealing with pixel space. Thinking back to the Texture Module, we also have to work with texels. A texel is the fundamental unit of texture space. Unlike pixels which can have a value like 512x512, texels use a value range of 0.0 to 1.0. We can visualize the texel coordinates like the following image:<\/p><img class=\"aligncenter\" src=\".\/images\/texture_coordinates.jpg\" alt=\"texture_coordinates\" width=\"390\" height=\"326\" \/><p style=\"text-align: center;\"><strong>Figure 4<\/strong> <em>Texture Coordinates<\/em><\/p><p>So how do we get those texel coordinates in code? We need three main pieces of information: texel scale, texel dimensions, and texel coordinates.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Get a scaling factor by converting from pixel to texel range<br\/>float texelWidthScale = 1.0f \/ imageWidth;<br\/>float texelHeightScale = 1.0f \/ imageHeight;<br\/><br\/>\/\/ Get the texel dimensions by multiplying the cell dimensions by the texel scale<br\/>float texelWidth = texelWidthScale * cellWidth;<br\/>float texelHeight = texelHeightScale * cellHeight;<br\/><\/pre>&nbsp;<p>As we can see, we are now using cell information to calculate the texel data. At this point, one of the last pieces of information we need to figure out is the starting X and Y texel coordinates. This is where the cell index comes in. In our example, the indexes range from 0 - 24. Our first cell is 0, so it should be fairly easy to get the rest of the information:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Get the pixel X and Y based on the index<br\/>int pixelX = cellIndex % rows;<br\/>int pixelY = cellIndex \/ columns;<br\/><br\/>\/\/ Get the texel X and Y based on the pixel coordinates<br\/>float texelX = pixelX * cellWidth;<br\/>float texelY = pixelY * cellHeight;<br\/><\/pre>&nbsp;<p>Finally, we have our cell coordinates, which basically create a rectangle of UV coordinates:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Remember to apply the texel scaling to stay in the 0.0 to 1.0 range<br\/>\/\/ Get the U<br\/>float u = texelX * texelWidthScale;<br\/><br\/>\/\/ Get the V<br\/>float v = texelY * texelHeightScale;<br\/><br\/>\/\/ Store the UV coordinates<br\/>Vector4 textureUV = new Vector4(u, v, texelWidth, texelHeight);<br\/><\/pre><\/div><a id=\"animated-scene-3\" class=\"dest\"><\/a>&nbsp;<div class=\"accent\"><h1>Linear Transform Interpolation<\/h1><p>Another form of animation involves interpolation. When we interpolate, we take at least two transforms and calculate the interpolated value between those transforms. Often, we use linear interpolation. A process that uses simple linear (as opposed to polynomial or piece-wise) math use the percent change to calculate a resulting transform.<\/p><p>We can demonstrate a simple example of linear interpolation using two vectors. Let's assume vector A is (0,0,0) and vector B is (5,0,0). Assume we want to calculate the vector half-way between the two vectors. The code for interpolation is as follows:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">Vector3 LinearInterpolate(Vector3 start, Vector3 end, float percent)<br\/>{<br\/>return start + percent * (end - start));<br\/>}<br\/><\/pre><p>The returned vector is the sum of the start point plus the percent times the vector between the start and end vector. To animate the interpolation, you simply need to account for time.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">float totalTime = 5.0f;<br\/>float timePassed = 2.5f;<br\/><br\/>Vector3 startPos = new Vector3(0, 0, 0);<br\/>Vector3 endPos = new Vector3(5, 0, 0);<br\/><br\/>Vector3 currentPos = LinearInterpolate(startPos, endPos, timePassed \/ totalTime);<br\/><\/pre>&nbsp;<img class=\"aligncenter\" src=\".\/images\/linear_motion.png\" alt=\"linear_motion\" width=\"481\" height=\"218\" \/><p style=\"text-align: center;\"><strong>Figure 5<\/strong> <em>Linear (side to side) motion<\/em><\/p><p>The same concept applied to vectors can also be used to interpolate transformations other than translations. Rotation, scale, and entire matrices can be interpolated between a start and an end. In fact, building these transforms and the rules for interpolation between them is what artists do when they animate complex objects such as characters.<\/p><img class=\"aligncenter\" src=\".\/images\/curved_motion.png\" alt=\"curved_motion\" width=\"574\" height=\"407\" \/><p style=\"text-align: center;\"><strong>Figure 6<\/strong> <em>Interpolation of an orbit.<\/em><\/p><p>This concept, while basic in these examples, provides a foundation for most of the animation we see in games. In the exercise, we will perform a basic linear interpolation of a transform applied to a quad.<\/p><\/div><a id=\"animated-scene-4\" class=\"dest\"><\/a>&nbsp;<div class=\"accent\"><h1>Basic Animation States<\/h1><p>After many animations are built, we as gameplay programmers will need to use them to create lively objects such as characters. And even a single character can have dozens of animations. The volume and combinations of animations can become overwhelming. Animation states are systems that let programmers manage animations by naming animations or combinations of animations.<\/p><p>Rather than only creating simple animations like reverse, repeat, or stop; animation states are also used for concepts that are more complex. Let's take a platformer as an example. When the character is not moving, it might playing an idle animation. When the character is moving forward, it should be playing the run animation.<\/p><p>More complex animation systems will smoothly transition from one state to another and allow a character to move from a crouching position to a run with only one change of state (from crouch to run).<\/p><p>In the forthcoming exercise, we will manipulate very basic animation states. In a later exercise, you will manipulate more complex animations and states of characters.<\/p><\/div><!--page:~~animated-scene-reference-text~~-->","title":"Reference Material"},{"bIsChecked":true,"exercise":".\/exercise\/animated-scene.zip","instructions":"<h1>Goal<\/h1><p>In this exercise, we are going to create an amusing scene full of animated sprites. To achieve this, we are first going to fill in missing portions of some core classes. Once we have our completed sprite classes, we can then build the fully animated scene. In this exercise, there are four classes we will write code for:<\/p><ul><li>SpriteTexture - Responsible for loading textures, managing cells, and generating texture coordinates.<\/li><li>SpriteQuad - Responsible for generating vertices, color, and updating rendering settings.<\/li><li>Sprite - Main sprite class, which wraps up lower level objects such as SpriteQuad and SpriteTexture. Responsible for managing position, rotation, scaling, movement, animation, and layers.<\/li><li>AnimatedExercise - The module we will build the scene in.<\/li><\/ul><p><strong>IMPORTANT NOTE 1:<\/strong> Any time values we will use should be in milliseconds, not seconds. For example, 1.5 seconds is actually 1500 milliseconds.<\/p><p><strong>IMPORTANT NOTE 2:<\/strong> Any angle or rotation values we will use should be in radians, not degrees. If we want the value of 180 degrees, we must use the MathHelper static class to get the radian value (MathHelper.ToRadians(180)).<\/p><img class=\"aligncenter\" src=\".\/images\/animated_scene_exercise_1.png\" alt=\"animated_scene_exercise_1\" width=\"800\" height=\"451\" \/><p style=\"text-align: center;\">The final scene should look similar to the one in this image.<\/p><h1>Steps<\/h1><ol><li>Our first goal is to finish the SpriteTexture class<ol><li>We'll start by filling out the SpriteTexture's Set method. Start by opening SpriteTexture.cs. Go to <em>Focus Area 1<\/em>. Set <code>_texturePath, _cellWidth, _cellHeight,<\/code> and <code>_cellIndex<\/code> to the appropriate arguments passed into the method. Follow the comments in the method for direction.<\/li><li>Next, we'll fill out the <code>LoadContent<\/code> method. Scroll down to <em>Focus Area 2<\/em>. Start by setting <code>_texture<\/code> to the result of <code>_contentManager<\/code> calling its Load method. Use <code>_texturePath<\/code> as the argument for Load.<\/li><li>Still in <em>Focus Area 2<\/em>, locate the \"Get the texture's dimensions\" comment. Set <code>_imageWidth<\/code> and <code>_imageHeight<\/code> properties to the values of <code>_texture's<\/code> width and height, respectively.<\/li><li>Still in <em>Focus Area 2<\/em>, locate the \"Calculate the number of cell rows and columns\" comment. Set <code>_cellrows, _cellColumns,<\/code> and <code>_cellCount<\/code>. The number of cell rows should be equal to the image height divided by the height of the cells. The cell columns should be equal to the image width divided by the cell width. The cell count should be equal to the number of rows multiplied by the number of columns.<\/li><li>Next, we'll fill out the SetCell method. Scroll down to <em>Focus Area 3<\/em>. The first line of code should check to see if the passed <code>cellIndex<\/code> is valid. If it is less than zero, or greater than or equal to <code>_cellCount<\/code>, the method should not proceed.<\/li><li>Still in <em>Focus Area 3<\/em>, under the \"Store the current cell index\" comment, set <code>_cellIndex<\/code> to the passed parameter.<\/li><li>Still in <em>Focus Area 3<\/em>, under the \"Texel dimensions of a cell,\" create two new floats: <code>texelWidth<\/code> and <code>texelHeight<\/code>. The width of an individual texel should be the texel width scale multiplied by the width of a cell. The height of an individual texel should be the texel height scale multiplied by the cell height.<\/li><li>Still in <em>Focus Area 3<\/em>, we need to determine the X and Y pixel positions inside the texture. Create two new integers named <code>pixelX<\/code> and <code>pixelY<\/code>. The X coordinate should be the remainder (%) of <code>_cellIndex<\/code> and <code>_cellColumns<\/code>, multiplied by <code>_cellWidth<\/code>. The Y coordinate should be the quotient of <code>_cellIndex<\/code> and <code>_cellColumns<\/code>, multiplied by <code>_cellHeight<\/code>.<\/li><li>Next, we are going to set the UV position in <em>Focus Area 3<\/em>. Create a Vector2 named <code>uvPos<\/code> and set it equal to a new Vector2. The <code>uvPos's<\/code> X should be <code>pixelX<\/code> multiplied by the texel's width scale. <em>uvPos's<\/em> Y value should be equal to <code>pixelY<\/code> multiplied by the texel's height scale.<\/li><li>Now, we need to set the full texture UV coordinates. Under the \"Set the full texture UV coordinates\" comment, initialize <code>_textureUV<\/code> to a new Vector4. We will use <code>uvPos.X<\/code>, <code>uvPos.Y<\/code>, <code>texelWidth<\/code>, and <code>texelHeight<\/code> as parameters in the new Vector4.<\/li><li>Finally, we need to set the dirty flag to alert the class that the coordinates have changed. Under the \"Indicate that the UV coordinates have changed\" comment, set the <code>_isDirty<\/code> field to true.<\/li><\/ol><\/li><li>Next, we are going to finish the SpriteQuad class<ol><li>First, we are going calculate the corners and position of the SpriteQuad. Most of the code will be similar to what we wrote for the QuadExercise. Scroll down to the SpriteQuad constructor and locate <em>Focus Area 1<\/em>.<\/li><li>In <em>Focus Area 1<\/em>, we need to calculate the half-width and half-height of the quad. This will make sure everything is drawn from the center of the quad's origin. Create two new float variables named <code>halfWidth<\/code> and <code>halfHeight<\/code>.<\/li><li>Next, half the <code>width<\/code> and <code>height<\/code> parameters passed in to the method and store them in <code>halfWidth<\/code> and <code>halfHeight<\/code>, respectively.<\/li><li>In <em>Focus Area 2<\/em>, calculate the corners of the quad. We will need to allocate the memory for the Vector3s (<code>_upperLeft<\/code>, <code>_upperRight<\/code>, <code>_lowerRight<\/code>, and <code>_lowerLeft<\/code>), then use the <em>halfWidth<\/em> and <em>halfHeight<\/em> variables. The 3rd parameter for Vector3 should be 0. Additionally, we need to account for the quad's origin. Add the origin to each new Vector3 before they set the quad corner properties.<\/li><li>In <em>Focus Area 3<\/em>, initialize the <code>_vertices<\/code> property with enough memory to represent 4 vertices.<\/li><li>In <em>Focus Area 4<\/em>, set the position and texture coordinate for each index in <code>_vertices<\/code>. Assign the previously modified Vector3 variables accordingly (lower left, upper letft, lower right, upper right).<\/li><li>Because the final texture coordinates are calculated by TextureSprite, we only need starting values for each index's TextureCoordinate property. Initialize them in this order: 0,1; 0,0; 1,1; and 1,0.<\/li><\/ol><\/li><li>It's time for us to finish the Sprite class implementation.<ol><li>This portion of the exercise focuses on filling out the matrix and vector operations for the Sprite class. First, we are going to fill in the SetPosition method.<\/li><li>Open Sprite.cs, then scroll down to <em>Focus Area 1<\/em>. Sprite has a Vector2 property named <code>_translation<\/code>. Set its X and Y values to what's passed in as method arguments.<\/li><li>Next, we are going to translate based on the position change. Scroll down to <em>Focus Area 2<\/em> and make a call to <code>Matrix.CreateTranslation<\/code>. The first two arguments should be <code>_translation's X<\/code> and <code>Y<\/code>. The third argument should be 0, since we are not using the Z value. Store the result in the Sprite's <code>_translationMatrix<\/code>.<\/li><li>Scroll down to <em>Focus Area 3<\/em> and store the rot value in Sprite's <code>_rotation<\/code> field.<\/li><li>Now that we have the new rotation, scroll down to <em>Focus Area 4<\/em>. Make a <code>Matrix.CreateRotationZ<\/code> method call, passing in <code>_rotation<\/code>. Store the return value in Sprite's <code>_rotationMatrix<\/code>.<\/li><li>Scroll down to <em>Focus Area 5<\/em>. Sprite has a Vector2 property named <code>_size<\/code>. Set its X and Y values to what's passed in as method arguments.<\/li><li>Next, we are going to scale based on the size change. Head to <em>Focus Area 6<\/em> and make a call to <code>Matrix.CreateScale<\/code>. The first two arguments should be the <code>_size's<\/code> X and Y. The third argument should be 0, since we are not using the Z value. Store the result in the Sprite's <code>_sizeMatrix<\/code>.<\/li><li>The Sprite has a special Vector2 named <code>_pivotPoint<\/code>. This determines the rotation point for the sprite. Scroll down to <em>Focus Area 7<\/em>. The _pivotPoint values are already calculated. We need to make a call to <code>Matrix.CreateTranslation<\/code> using <code>_pivotPoint's<\/code> X and Y, 0.0f for Z, and capturing the return in <code>_pivotPointMatrix<\/code>.<\/li><li>Now we need to fill out the Sprite's constructor. The goal of this method is to simply fill out the Sprite's important properties using default values. Scroll down to the <code>public Sprite<\/code> method.<\/li><li>In <em>Focus Area 8<\/em>, set <code>_quad<\/code> to a new SpriteQuad. The first argument will be a new Vector3 with all 0s for arguments. The last two arguments of SpriteQuad will be 1.0.<\/li><li>Next, we need to initialize Sprite's orientation properties. Scroll down to <em>Focus Area 9<\/em>, then uncomment the code. The <code>_translationMatrix<\/code> should be set to Identity and the <code>_translation<\/code> should be set to Zero.<\/li><li>Scroll down to <em>Focus Area 10<\/em>, then uncomment the code. The <code>_pivotPointMatrix<\/code> should be set to Identity and the <code>_pivotPoint<\/code> should be set to Zero.<\/li><li>Scroll down to <em>Focus Area 11<\/em>, then uncomment the code. The <code>_rotationMatrix<\/code> should be set to Identity and the <code>_rotation<\/code> should be set to 0.<\/li><li>Scroll down to <em>Focus Area 12<\/em>, then uncomment the code. <code>_sizeMatrix<\/code> should be set to Identity and the <code>_size<\/code> should be set to One.<\/li><\/ol><\/li><li>Before coding the AnimatedExercise, we should review some of its code.<ol><li>First, let's see what the Exercise looks like without modification. Run the Exercise by clicking the Start button or pressing F5. We should immediately see a crash in AnimatedExercise.cs. This is because our textures have yet to be instantiated. (<a href=\".\/simulation\/AnimatedSceneExercise_1\/index.html\" target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><li>Start by opening AnimatedExercise.cs. <em>Focus Area 1<\/em> should be at the top of the AnimatedExercise class.<\/li><li>In this focus area, review all the fields that have been provided. We can see there is a Sprite and SpriteTexture for each unique object that will be in the scene.<\/li><li>However, not all Sprite and SpriteTextures are represented here. Non-unique sprites for bubbles, butterflies, and flags will be procedurally generated in their own methods.<\/li><li>We have also been provided with all the content we need. If we expand the Content directory in the Solution Explorer, we will see all the names. Since they are each labeled based on their appearance (moon, pig, turtle, etc.), we will know exactly what textures to load for each sprite.<\/li><\/ol><\/li><li>Now we can proceed with coding. Let's start by initializing the AnimatedExercise fields.<ol><li>Jump to the Create method. We can see that some Sprites and SpriteTextures have already been initialized for us. Scroll down to <em>Focus Area 2<\/em> and initialize the rest of the Sprite and SpriteTexture fields. The comments in this focus area tell us which property to initialize and what layer to use. Use the code for <code>_turtleShell<\/code> and <code>_turtleShellTexture<\/code> as an example.<\/li><li>Run the Exercise by clicking the Start button or pressing F5. We should see the background, turtle shell, and turtle head in the scene. (<a href=\".\/simulation\/AnimatedSceneExercise_2\/index.html\" target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><\/ol><\/li><li>AnimatedExercise: Creating A Turtle<ol><li>Jump to the <code>CreateTurtle<\/code> method. This method builds the entire turtle by creating individual parts. The shell and head have already been built for us. Use these as an example for the rest of the code.<\/li><li>Scroll down to <em>Focus Area 3<\/em>. The comments in this focus area tell us what Sprites need to be built. For each Sprite, we need to call <code>SetSpriteTexture<\/code>,<code> SetSize<\/code>, and <code>SetPosition.<\/code><\/li><li>After each Sprite is created, add it to the SpriteManager by calling <code>_spriteManager.AddSprite<\/code>, just like with the _turtleHead.<\/li><li>Several of the turtle Sprites are animated via motion. Each comment tells us what motion event(s) to call and values to use.<\/li><li>Run the Exercise by clicking the Start button or pressing F5. (<a href=\".\/simulation\/AnimatedSceneExercise_3\/index.html\" target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><\/ol><\/li><li>AnimatedExercise: Creating Turtle Props<ol><li>Jump to the <code>CreateTurtleProps<\/code> method. This method adds decorations to the turtle.<\/li><li>Scroll down to <em>Focus Area 4<\/em>. The comments in this focus area tell us what Sprites need to be built. For each Sprite, we need to call <code>SetSpriteTexture<\/code>, <code>SetSize<\/code>, and <code>SetPosition.<\/code><\/li><li>After each Sprite is created, add it to the SpriteManager by calling <code>_spriteManager.AddSprite<\/code>, just like with the <code>_turtleHead.<\/code><\/li><li>The <code>_bubble<\/code> and <code>_fishingLine<\/code> sprites should animate. The comments for those sprites hint at what motion animation and values to use.<\/li><li>Run the Exercise by clicking the Start button or pressing F5. (<a href=\".\/simulation\/AnimatedSceneExercise_4\/index.html\" target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><\/ol><\/li><li>AnimatedExercise: Creating An Environment<ol><li>Jump to the <code>CreateEnvironment<\/code> method. This method adds the background sprites to the scene.<\/li><li>Scroll down to <em>Focus Area 5<\/em>. The comments in this focus area tell us what Sprites need to be built. For each Sprite, we need to call <code>SetSpriteTexture<\/code>, <code>SetSize<\/code>, and <code>SetPosition.<\/code><\/li><li>After each Sprite is created, add it to the SpriteManager by calling <code>_spriteManager.AddSprite<\/code>, just like with the <code>_turtleHead<\/code>.<\/li><li>The <code>_moon<\/code> and <code>_fishbowl<\/code> sprites should animate. Make them spin (RotateContinuous) in place.<\/li><li>The <code>_pig<\/code> also animates, but using a different motion. To make it seem as if it's flying in space, we want to move it left to right, in and out. Since we are not utilizing the Z axis, we can simulate moving in and out by scaling subtly. Look at the comment to see what animation methods we need to call.<\/li><li>Run the Exercise by clicking the Start button or pressing F5. (<a href=\".\/simulation\/AnimatedSceneExercise_5\/index.html\" target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><\/ol><\/li><li>AnimatedExercise: Creating A Flag<ol><li>Jump to the <code>CreateFlag<\/code> method. This is a utility method that allows us to procedurally generate animated flags, without hard-coding multiple flag properties.<\/li><li>Scroll down to <em>Focus Area 6<\/em>. The comments in this focus area tell us how to create a flag Sprite and SpriteTexture.<\/li><li>First, create a new SpriteTexture and name it <code>flagTexture<\/code>. Use the <code>art_flipbook_flag<\/code> content.<\/li><li>Set the new <code>flagTexture's<\/code> cells to have a width of 80 and a height of 30.<\/li><li>Use <code>flagTexture.LoadContent<\/code> to load the texture. Pass <code>_contentManager<\/code> for the argument.<\/li><li>Next, create a new Sprite named <code>flag<\/code>. Allocate the memory and set it to layer 9 (new Sprite(9)).<\/li><li>Set the flag sprite's SpriteTexture using <code>flagTexture<\/code> as the argument.<\/li><li>Next, we need to set the size for <code>flag<\/code>. Use logic similar to what was shown in the <code>CreateTurtle<\/code> method, except using cell information instead of texture details (cell width \/ texture ratio, cell height \/ texture ratio).<\/li><li>Set the position of the <code>flag<\/code> Sprite by calling <code>SetPosition<\/code>. Use the values from <code>position<\/code>, which is passed in as an argument in <code>CreateFlag<\/code>.<\/li><li>Since the <code>art_flipbook_flag<\/code> content is grayscale, it allows us to change the color through code. Call <code>flag.SetTint()<\/code> and pass in the <code>color<\/code> parameter.<\/li><li>The flag uses a flipbook animation, so we need to call <code>flag.Animate()<\/code>. The flag animates from cells 0 - 5, at a speed of 500 ms. It loops, so use AnimAction.EndAction.Restart as the final argument in <code>Animate<\/code>.<\/li><li>Finally, call <code>_spriteManager.AddSprite<\/code> and pass in the <code>flag<\/code> Sprite object.<\/li><li>Run the Exercise by clicking the Start button or pressing F5. (<a href=\".\/simulation\/AnimatedSceneExercise_6\/index.html\" target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><\/ol><\/li><li>AnimatedExercise: Creating A Butterfly<ol><li>Jump to the <code>CreateButterfly<\/code> method. This is a utility method that allows us to procedurally generate animated butterflies, without hard-coding multiple butterfly properties.<\/li><li>Scroll down to <em>Focus Area 7<\/em>. The comments in this focus area tell us how to create a butterfly Sprite and SpriteTexture.<\/li><li>First, create a new SpriteTexture and name it <code>butterflyTexture<\/code>. Use the <code>art_flipbook_butterfly<\/code> content.<\/li><li>Set the new <code>butterflyTexture<\/code> cells to have a width of 44 and a height of 44.<\/li><li>Use <code>butterflyTexture.LoadContent<\/code> to load the texture. Pass <code>_contentManager<\/code> for the argument.<\/li><li>Next, create a new Sprite named <code>butterfly<\/code>. Allocate the memory and set it to layer 9 (new Sprite(9)).<\/li><li>Set the butterfly sprite's SpriteTexture using <code>butterflyTexture<\/code> as the argument.<\/li><li>Next, we need to set the size for <code>butterfly<\/code>. Use logic similar to what was shown in the <code>CreateTurtle<\/code> method, except using cell information instead of texture details (cell width \/ texture ratio, cell height \/ texture ratio).<\/li><li>Set the position of the <code>butterfly<\/code> Sprite by calling SetPosition. Use the values from <code>position<\/code>, which is passed in as an argument in <code>CreateButterfly<\/code>.<\/li><li>Since the <code>art_flipbook_butterfly<\/code> content is grayscale, it allows us to change the color through code. Call <code>butterfly.SetTint()<\/code> and pass in the <code>color<\/code> parameter.<\/li><li>The butterfly uses a flipbook animation, so we need to call <code>butterfly.Animate()<\/code>. The butterfly animates from cells 0 - 1, at a speed of 100 ms. It loops, so use AnimAction.EndAction.Restart as the final argument in <code>Animate<\/code>.<\/li><li>To add a touch of chaos and life to this scene, we are going to make the butterflies use different flight patterns. Still in <em>Focus Area 7<\/em>, there is a switch statement which checks the <code>FlightPattern<\/code> argument passed into this method. There are comments in each case that instruct us on which <code>Sprite<\/code> calls to invoke from the butterfly. Call the given methods with the suggested values\/variables mentioned in the comments.<\/li><li>Finally, call <code>_spriteManager.AddSprite<\/code> and pass in the <code>butterfly<\/code> Sprite object.<\/li><li>Run the Exercise by clicking the Start button or pressing F5. (<a href=\".\/simulation\/AnimatedSceneExercise_7\/index.html\" target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><\/ol><\/li><li>AnimatedExercise: Creating A Star<ol><li>Jump to the <code>CreateStar<\/code> method. This is a utility method that allows us to procedurally generate spinning stars, without hard-coding multiple star properties.<\/li><li>Scroll down to <em>Focus Area 8<\/em>. The comments in this focus area tell us how to create a star Sprite and SpriteTexture.<\/li><li>First, create a new SpriteTexture and name it <code>starTexture<\/code>. Use the <code>art_star<\/code> content.<\/li><li>Use <code>starTexture.LoadContent<\/code> to load the texture. Pass <code>_contentManager<\/code> for the argument.<\/li><li>Next, create a new Sprite named <code>star<\/code>. Allocate the memory and set it to layer 7 (new Sprite(7)).<\/li><li>Set the star's SpriteTexture using <code>starTexture<\/code> as the argument.<\/li><li>Next, we need to set the size for <code>star<\/code>. Use the same logic shown in the <code>CreateTurtle<\/code> method (texture image width \/ texture ratio, texture image height \/ texture ratio).<\/li><li>Set the position of the <code>star<\/code> Sprite by calling SetPosition. Use the values from <code>position<\/code>, which is passed in as an argument in <code>CreateStar<\/code>.<\/li><li>The Star needs motion animation. Call <code>star.MoveTo()<\/code> and pass in <code>target<\/code>, <code>descentTime<\/code>, and MotionAction.EndAction.Restart for arguments.<\/li><li>In addition to falling, we want the star to spin. Call <code>star.RotateContinuous<\/code> and pass in <code>MathHelper.ToRadians(360.0f)<\/code> and 2000 for the arguments.<\/li><li>Finally, call <code>_spriteManager.AddSprite<\/code> and pass in the <code>star<\/code> Sprite object.<\/li><li>Run the Exercise by clicking the Start button or pressing F5. The fully animated scene should be complete. (<a href=\".\/simulation\/AnimatedSceneExercise_8\/index.html\" target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><\/ol><\/li><\/ol><h1>Rubric<\/h1><ul><li>1 point for rendering the background, turtle shell and turtle head in step 5.<\/li><li>1 point for finishing the turtle in steps 6&7.<\/li><li>1 point for creating an environment in step 8.<\/li><li>1 point for creating a flat in sep 9.<\/li><li>1 point for creating a butterfly in step 10.<\/li><li>1 point for creating a star in step 11.<\/li><\/ul><h1>Code Help<\/h1>        <!--CodeHelp: Vector2-->        <p><strong>Vector2<\/strong> &#8211; A vector data structure containing two components (X, Y). The values can represent UV texture coordinates, 2D object positioning, and several other forms of data. When creating a new Vector2, we can pass in two float values:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Example X\/Y floats. Values are arbitrary<br\/>float x = 1.0f;<br\/>float y = 2.0f;<br\/><br\/>\/\/ Create a new Vector2<br\/>Vector2 myVector = new Vector2(x, y);<br\/><br\/>\/\/ Create a zeroed out Vector2<br\/>Vector2 zeroedVector = Vector2.Zero;<br\/><\/pre><p><\/p><!--CodeHelp: Vector3-->        <p><strong>Vector3<\/strong> &#8211;  A vector data structure containing 3 components (X, Y, Z). When creating a new Vector3, we can pass in three float values:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Example X\/Y\/Z floats. Values are arbitrary<br\/>float x = 1.0f;<br\/>float y = 2.0f;<br\/>float z = 3.0f;<br\/><br\/>\/\/ Create a new Vector3<br\/>Vector3 vectorA = new Vector3(x, y, z);<br\/>Vector3 vectorB = new Vector3(4.0f, 5.0f, 6.0f);<br\/><br\/>\/\/ Values of vectorC will be 5.0f, 7.0f, 9.0f for X, Y, and Z respectively<br\/>Vector3 vectorC = vectorA + vectorB;<br\/><br\/>\/\/ Create a Vector3 by transforming a Matrix <br\/>Vector3 distance = new Vector3(1.0f, 2.0f, 3.0f);<br\/>Vector3 transformedVector = Vector3.Transform(distance, Matrix.CreateRotationY(MathHelper.ToRadians(45.0f)));<br\/><br\/>\/\/ Create a Vector3 from Vector2 values<br\/>Vector2 vectorTwo = new Vector2(10.0f, 5.0f);<br\/>Vector3 vectorThree = new Vector3(vectorTwo.X, vectorTwo.Y, 0.0f);<br\/><\/pre><p><\/p><!--CodeHelp: Vector4-->        <p><strong>Vector4<\/strong> &#8211; A vector data structure containing four components (X, Y, Z, W). When creating a new Vector4, we can pass in four float values:.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Example X\/Y floats. Values are arbitrary<br\/>float x = 0.5f;<br\/>float y = 0.5f;<br\/><br\/>\/\/ Width and height of texel<br\/>float width = 0.5f;<br\/>float height = 0.5f;<br\/><br\/>\/\/ Create a new Vector4<br\/>Vector4 textureUV = new Vector4(x, y, width, height);<br\/><\/pre><p><\/p><!--CodeHelp: Matrix-->        <p><strong>Matrix<\/strong> &#8211; An XNA structure that represents a matrix. Matrices use a row vector layout in the XNA Framework. It is essentially a two-dimensional array of numbers.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Returns an instance of the identity matrix.<br\/>Matrix identityMatrix = Matrix.Identity;<br\/><br\/>\/\/ Create a translation matrix<br\/>Matrix translateMatrix = Matrix.CreateTranslation(new Vector3(2.0f, 2.0f, 2.0f);<br\/><br\/>\/\/ Create a rotation matrix at 45 degrees about the Z axis<br\/>Matrix rotateMatrix = Matrix.CreateRotationZ(MathHelper.ToRadians(45.0f));<br\/><br\/>\/\/ Create a complex transform from multiple operations<br\/>Matrix complexMatrix = Matrix.CreateRotationZ(MathHelper.ToRadians(45.0f)) * Matrix.CreateTranslation(new Vector3(2.0f, 2.0f, 2.0f);<br\/><\/pre><p><\/p><!--CodeHelp: Texture2D-->        <p><strong>Texture2D<\/strong> &#8211; This is a stock XNA\/MonoGame object which represents a 2D grid of texels.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Load the texture from file<br\/>Texture2D backgroundTexture = _contentManager.Load&lt;Texture2D&gt;(&quot;Graphics\\\\background&quot;);<br\/><br\/>\/\/ Get the width<br\/>int textureWidth = backgroundTexture.Width;<br\/><br\/>\/\/ Get the height<br\/>int textureHeight = backgroundTexture.Height;<br\/><\/pre><p><\/p><!--CodeHelp: ContentManager-->        <p><strong>ContentManager<\/strong> &#8211; The ContentManager is an XNA\/MonoGame run-time component which loads managed objects from the binary files produced by the design time content pipeline:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Load a texture from file and store it in a Texture2D<br\/>Texture2D texture = _contentManager.Load&lt;Texture2D&gt;(&quot;Graphics\\\\skyBackground&quot;);<br\/><br\/>\/\/ Load a font file and store it in a SpriteFont<br\/>SpriteFont font = _contentManager.Load&lt;SpriteFont&gt;(&quot;Fonts\\\\SegoeUIMono&quot;);<br\/><\/pre><p><\/p><!--CodeHelp: VertexPositionColor-->        <p><strong>VertexPositionColor <\/strong> &#8211; Describes a custom vertex format structure that contains position and color information. We mainly need to know how to create an array of the structs and set their primary values:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Declare an array of 2 vertices<br\/>VertexPositionColor[2] vertices;<br\/><br\/>\/\/ Allocate the memory<br\/>vertices = new VertexPositionColor[2];<br\/><br\/>vertices[0].Position = new Vector3(1.0f, 2.0f, 3.0f);<br\/>vertices[0].Color = Color.White;<br\/><br\/>vertices[1].Position = new Vector3(4.0f, 5.0f, 6.0f);<br\/>vertices[1].Color = Color.Black;<br\/><\/pre>      <p><\/p>    <!--CodeHelp: SpriteQuad-->        <p><strong>SpriteQuad<\/strong> &#8211; SpriteQuad – This is a utility class which represents the geometry for a Sprite. It is responsible for managing the coordinates of a quad, the projection, vertices, and shader effect for Sprite rendering:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Prepare variables for use<br\/>Vector3 origin = new Vector3(5.0f, 15.0f, 0.0f);<br\/>float width = 5.0f;<br\/>float height = 12.0f;<br\/>bool flipHorizontal = false;<br\/>bool flipVertical = true;<br\/><br\/>\/\/ Create a new SpriteQuad<br\/>\/\/ First parameter is the origin in world space<br\/>\/\/ Second parameter is the width of the sprite<br\/>\/\/ Third parameter is the height of the sprite<br\/>\/\/ Fourth parameter toggles flipping the horizontal rendering of the sprite<br\/>\/\/ Fifth parameter toggles flipping the vertical rendering of the sprite<br\/>SpriteQuad = new SpriteQuad(origin, width, height, flipHorizontal, flipVertical);<br\/><\/pre><p><\/p><!--CodeHelp: SpriteTexture-->        <p><strong>SpriteTexture<\/strong> &#8211; This is a utility class responsible for managing the content and processing of a Sprite's texture.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Create a new SpriteTexture and load its content<br\/>SpriteTexture texture = new SpriteTexture(&quot;Graphics\\\\moon&quot;);<br\/>texture.LoadContent(_contentManager);<br\/><\/pre><p><\/p><!--CodeHelp: Sprite-->        <p><strong>Sprite<\/strong> &#8211; This is a utility class with several sub-systems which allow for simple image rendering. With only a few method calls, a Sprite can load a texture, render, and move around. <\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Create a new SpriteTexture and load its content<br\/>SpriteTexture texture = new SpriteTexture(&quot;Graphics\\\\moon&quot;);<br\/>texture.LoadContent(_contentManager);<br\/><br\/>\/\/ Declare a new Sprite on layer 1<br\/>Sprite mySprite = new Sprite(1);<br\/><br\/>\/\/ Set the size of the sprite to 10 by 10<br\/>mySprite.SetSize(10.0f, 10.0f);<br\/><br\/>\/\/ Set the Sprite&#039;s position to the center of the screen<br\/>mySprite.SetPosition(0.0f, 0.0f);<br\/><br\/>\/\/ Set the Sprite&#039;s rotation, in radians.<br\/>mySprite.SetRotation(3.14159f);<br\/><br\/>\/\/ Set the sprite texture<br\/>mySprite.SetSpriteTexture(texture);<br\/><br\/>\/\/ Set the color tint of the Sprite to red<br\/>mySprite.SetTint(Color.Red);<br\/><\/pre><p><\/p><!--CodeHelp: SpriteManager-->        <p><strong>SpriteManager<\/strong> &#8211; SpriteManager is a utility class which is responsible for sorting, updating, and rendering sprites.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Create a new Sprite<br\/>Sprite mySprite = new Sprite();<br\/><br\/>\/\/ In order for mySprite to render and update, it MUST be added to _spriteManager<br\/>_spriteManager.AddSprite(mySprite);<br\/><br\/>\/\/ Update the sprites. Takes in a GameTime as argument<br\/>_spriteManager.UpdateSprites(time);<br\/><br\/>\/\/ Render the sprites. Takes in a GraphicsDevice and Camera for arguments<br\/>_spriteManager.RenderSprites(_graphicsDevice, DefaultCamera);<br\/><\/pre><p><\/p><!--CodeHelp: Module--><p><strong>Module<\/strong> &#8211; Module is a custom class written for this course. It is wrapped in a dynamic-link library, so we do not have to worry about adding to it:<\/p><ul><li>_graphicsDevice – An XNA\/MonoGame GraphicsDevice. This is used in SpriteManager's rendering methods. It is already initialized for us and we simply need to know its name and where to use it.<\/li><li>_contentManager – An XNA\/MonoGame ContentManager. This is used in SpriteTexture's texture methods. It is already initialized for us and we simply need to know its name and where to use it.<\/li><li>DefautCamera – A simple Camera object which manages our game's projection and view. It is already initialized for us and we simply need to know its name and where to use it.<\/li><\/ul><p><\/p><!--page:~~animated-scene-exercise~~-->","link":"exercise","mod":"animated-scene","movie":null,"name":"animated-scene","promptfile":null,"prompts":null,"reference":null,"text":null,"title":"Exercise"}]}],"title":"Intro to Graphics Programming"},{"bIsChecked":true,"description":"Add player controller, collision, behaviors and win conditions to your programming knowledge as you start to focus more directly on how to develop games.","image":"tronprogrammer.jpg","modules":[{"bIsChecked":true,"name":"player-controller","title":"Player Controller","topics":[{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"player-controller","movie":".\/video\/Course2-intro-to-game-programming-player-conroller-overview.mp4","name":"Overview","promptfile":null,"prompts":null,"reference":"player-controller-1","text":null,"title":"Overview"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"controlling game objects","mod":"player-controller","movie":".\/video\/Course2-intro-to-game-programming-player-conroller-controlling-game-objects.mp4","name":"Controlling Game Objects","promptfile":null,"prompts":null,"reference":"player-controller-2","text":null,"title":"Controlling Game Objects"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"reference","mod":"player-controller","movie":null,"name":"Reference","promptfile":null,"prompts":null,"reference":null,"text":"<a class=\"dest\" id=\"player-controller-1\"><\/a><div class=\"accent\"><h1>Overview<\/h1><p>As the logic that determines how the player's avatar reacts to a multitude inputs, the Player Controller is arguably one of the most important objects in a game's architecture. The Player Controller is normally an object seen in the code of larger games or within game engines. A game engine's architecture is, typically, meant to be as general purpose as possible. This means that certain pieces of logic will want to be reused when possible. Take the case of an AI controlled NPC that is battling a player controlled avatar. Both the NPC and the player's avatar are the same species and have the same movement constraints and abilities. This means that the code for performing an attack could be the same for both the NPC and the player avatar. The difference would be in their respective controllers calling the shots.<\/p><img class=\"aligncenter\" src=\".\/images\/image_example11.png\" alt=\"image_example1\" width=\"766\" height=\"548\" \/><p style=\"text-align: center;\"><strong>Figure 1<\/strong> <em>Same function being called by AI and player controllers.<\/em><\/p><p>Here we see that the NPC's controller receives input from elsewhere that it needs to perform an attack. The NPC's controller then takes another input in the form of the NPC's attack speed stat and calls the relevant attack function to achieve the result of the NPC performing an attack at a speed the character is capable of. The player's controller looks very similar. Its attack call is initiated via a button pressed by the player and the controller uses the player's stat as additional input to perform the player's attack. Our player has been playing this particular game for a while now and has leveled up their attack speed stat a few times, thus resulting in an attack that, while it uses the same logic, is executed differently and faster than the NPC.<\/p><div style=\"text-align: center;\"><ul class=\"anchorGroup\" style=\"text-align: left; display: inline-block;\"><li><a class=\"ankor\" href=\"#player-controller-2\">Controlling Game Object<\/a><\/li><\/ul><\/div><\/div><a class=\"dest\" id=\"player-controller-2\"><\/a>&nbsp;<div class=\"accent\"><h1>Controlling Game Objects<\/h1><p>Another example of a Player Controller in action is when the player has to take control of different objects within a game. A fairly common example of this in games would be a player's avatar running around a world on foot, then climbing into and taking control of a vehicle of some sort. A vehicle behaves differently than a character does on foot and thus the player controller has to change to issue commands differently.<\/p><img class=\"aligncenter\" src=\".\/images\/image_example21.png\" alt=\"image_example2\" width=\"766\" height=\"548\" \/><p style=\"text-align: center;\"><strong>Figure 2<\/strong> <em>Controlling a player's avatar.<\/em><\/p><p>Here we see what the Player Controller's logic would look like while the Soldier in the screenshot is the object being controlled. When the player presses W the Soldier will move forward. When they press S the Soldier will move backward. When they press A or D the Soldier will strafe to the left or right respectively. Moving the mouse to the left and right rotates the Soldier in that respective direction.<\/p><img class=\"aligncenter\" src=\".\/images\/image_example31.png\" alt=\"image_example3\" width=\"766\" height=\"548\" \/><p style=\"text-align: center;\"><strong>Figure 3<\/strong> <em>Controlling a vehicle.<\/em><\/p><p>Now our player has decided that traversing this expansive desert is going to take way too long on foot and has taken control of a vehicle they found. Now the object that our player is controlling has changed. They're no longer controlling the Soldier, he's seated inside the vehicle and they're in command of the vehicle now. What does this mean for our control scheme? We don't want the player to have to switch to a completely different set of buttons to control the vehicle. In hectic gameplay that would be problematic, not to mention near impossible in the case of the player using a gamepad where the number of buttons available are much more limited. Instead we have our controller alter what commands are issued for the same control scheme based on the object that we're controlling. In this case there are some elements of the control scheme that remain similar. Pressing W or S will result in the vehicle moving forward or backward respectively, but it will do so based on the characteristics of the vehicle. The vehicle will move based on its movement systems causing it to spin its tires to propel the vehicle forward or backward. In the same respect, the behaviors of pressing A or D, or moving the mouse left or right, are altered as well. These inputs now all result in rotating the vehicles front tires to provide the capability of steering the vehicle.<\/p><p>Not all games explicitly have a controller object. Some simpler or smaller games may not need this from an architectural standpoint. However, the underlying concept still exists whether a defined controller exists or not. Remember that the controller at its core is the logic that determines what action to take based on inputs from the player or other sources. It's not uncommon for a developer of a smaller game to hard code their controller's logic right along with their input updating. The more complex or intricate a game becomes the more use there is for an explicitly defined Player Controller to make creating our game a little bit easier.<\/p><\/div><!--page:~~player-controller-reference-text~~-->","title":"Reference Material"},{"bIsChecked":true,"exercise":".\/exercise\/player-controller.zip","instructions":"<h1>Goal<\/h1><p>Implement three different control schemes for a spaceship and understand how different they feel to the player and how this can affect gameplay.<\/p><img src=\".\/images\/PlayerControllerResult.jpg\" alt=\"PlayerControllerResult\" width=\"1280\" height=\"717\" class=\"aligncenter\" \/><h1>Steps<\/h1><ol><li>Build and Run the Exercise without modification. The Exercise should build and run successfully. We should see a space background with 3 spaceships all pointing toward the right edge of the window. (<a href='.\/simulation\/PlayerController_1\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><li>In <em>Focus Area 1<\/em>, implement controls for ShipA that achieve the following (use if, else-if, and else as needed):<ol><li>If the Key D is down, set <code>_shipAVelocity.X<\/code> to _shipASpeed<\/li><li>If the Key A is down, set <code>_shipAVelocity.X<\/code> to -_shipASpeed<\/li><li>Otherwise, set <code>_shipAVelocity.X<\/code> to 0<\/li><li>If the Key W is down, set <code>_shipAVelocity.Y<\/code> to -_shipASpeed<\/li><li>If the Key S is down, set <code>_shipAVelocity.Y<\/code> to _shipASpeed<\/li><li>Otherwise set <code>_shipAVelocity.Y<\/code> to 0<\/li><\/ol><\/li><li>Build and Run the Exercise. The Exercise should build successfully without error. Pressing D should make Ship A move to the right and letting go should make it stop. Pressing A should make Ship A move to the left and letting go should make it stop. The same should happen for each cardinal direction. W should move the ship to the top of the screen, S to the bottom. The ship should also be able to move in inter-cardinal directions by pressing two keys at the same time (W &#038; D or W &#038; A, etc.). (<a href='.\/simulation\/PlayerController_2\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><li>In <em>Focus Area 2<\/em>, implement controls for Ship B that achieve the following (use if, else-if and else as needed):<ol><li>If the Key Up is down, create a Vector3 named <code>shipVector<\/code> and set it to the result of <code>Vector3.Transform()<\/code> using <code>Vector3.UnitX<\/code> and a Z Rotation matrix created using <code>_shipBHeading<\/code> as the parameters to the Transform call. Set <code>_shipBVelocity<\/code> to <code>shipVector<\/code> multiplied by <code>_shipBSpeed<\/code>.<\/li><li>Otherwise, if the Key is up set <code>_shipBVelocity<\/code> to 0,0<\/li><li>If the Key Left is down, increase <code>_shipBHeading<\/code> by -0.1f<\/li><li>If the Key Right is down, increase <code>_shipBHeading<\/code> by 0.1f<\/li><\/ol><\/li><li>Build and Run the Exercise. The exercise should build successfully and run without error. In addition to being able to control Ship A to move along cardinal and inter-cardinal directions, we should now be able to control Ship B. When pressing Up Ship B should move forward in whatever direction it's facing and when letting go it should stop. When pressing Left or Right Ship B should rotate left or right accordingly and stop when released. (<a href='.\/simulation\/PlayerController_3\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><li>In <em>Focus Area 3<\/em>, implement controls for Ship C that achieve the following (use if, else-if, and else as needed):<ol><li>If the Key Space is down, create a Vector3 named <code>shipVector<\/code> and set it to the result of <code>Vector3.Transform()<\/code> using <code>Vector3.UnitX<\/code> and a Z Rotation matrix created using <code>_shipCHeading<\/code> as the parameters to the Transform call. Set <code>_shipCVelocity<\/code> to <code>shipVector<\/code> multiplied by <code>_shipCSpeed<\/code>.<\/li><li>Otherwise, if the Key Space is up set the Velocity to 0,0<\/li><li>Call the method GDMath.CalculateObjectHeadingToMouse and pass it <code>_shipC.Position<\/code>, a Vector2 created using the <code>mouseState.X<\/code> and <code>mouseState.Y<\/code>, <code>_shipCHeading<\/code>, and <code>_graphicsDevice<\/code>. Set <code>_shipCHeading<\/code> to the results of the calculation.<\/li><\/ol><\/li><li>Build and Run the Exercise. The Exercise should build successfully and run without error. Ship C should now move forward in the direction it's facing when the space bar is pressed and stop when released. Ship C should orient itself to face the mouse cursor's position. The controls for Ship A and Ship B should continue to function as well. (<a href='.\/simulation\/PlayerController_4\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><\/ol><h1>Rubric<\/h1><ul><li>2 points for ship control moving ship A in step 3.<\/li><li>2 points for ship control moving ship B in step 4.<\/li><li>2 points for ship control moving ship C in step 7.<\/li><\/ul><h1>Code Help<\/h1>        <!--CodeHelp: Vector2-->        <p><strong>Vector2<\/strong> &#8211; A vector data structure containing two components (X, Y). The values can represent UV texture coordinates, 2D object positioning, and several other forms of data. When creating a new Vector2, we can pass in two float values:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Example X\/Y floats. Values are arbitrary<br\/>float x = 1.0f;<br\/>float y = 2.0f;<br\/><br\/>\/\/ Create a new Vector2<br\/>Vector2 myVector = new Vector2(x, y);<br\/><br\/>\/\/ Create a zeroed out Vector2<br\/>Vector2 zeroedVector = Vector2.Zero;<br\/><\/pre><p><\/p><!--CodeHelp: Vector3--><p><strong>Vector3<\/strong> &#8211;  A vector data structure containing 3 components (X, Y, Z). When creating a new Vector3, we can pass in three float values:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Example X\/Y\/Z floats. Values are arbitrary<br\/>float x = 1.0f;<br\/>float y = 2.0f;<br\/>float z = 3.0f;<br\/><br\/>\/\/ Create a new Vector3<br\/>Vector3 vectorA = new Vector3(x, y, z);<br\/>Vector3 vectorB = new Vector3(4.0f, 5.0f, 6.0f);<br\/><br\/>\/\/ Values of vectorC will be 5.0f, 7.0f, 9.0f for X, Y, and Z respectively<br\/>Vector3 vectorC = vectorA + vectorB;<br\/><br\/>\/\/ Create a Vector3 by transforming a Matrix <br\/>Vector3 distance = new Vector3(1.0f, 2.0f, 3.0f);<br\/>Vector3 transformedVector = Vector3.Transform(distance, Matrix.CreateRotationY(MathHelper.ToRadians(45.0f)));<br\/><br\/>\/\/ Create a Vector3 from Vector2 values<br\/>Vector2 vectorTwo = new Vector2(10.0f, 5.0f);<br\/>Vector3 vectorThree = new Vector3(vectorTwo.X, vectorTwo.Y, 0.0f);<br\/><\/pre><p><\/p><!--page:~~player-controller-exercise~~-->","link":"exercise","mod":"player-controller","movie":null,"name":"player-controller","promptfile":null,"prompts":null,"reference":null,"text":null,"title":"Exercise"}]},{"bIsChecked":true,"name":"basic-collision","title":"Basic Collision","topics":[{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"basic-collision","movie":".\/video\/Course2-intro-to-game-programming-basic_collision-overview.mp4","name":"Overview","promptfile":null,"prompts":null,"reference":"basic-collision-1","text":null,"title":"Overview"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"basic-collision","movie":".\/video\/Course2-intro-to-game-programming-basic_collision-primitives.mp4","name":"Collision Primitives","promptfile":null,"prompts":null,"reference":"basic-collision-2","text":null,"title":"Collision Primitives"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"basic-collision","movie":".\/video\/Course2-intro-to-game-programming-basic_collision-detection.mp4","name":"Collision Detection","promptfile":null,"prompts":null,"reference":"basic-collision-3","text":null,"title":"Collision Detection"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"","mod":"basic-collision","movie":".\/video\/Course2-intro-to-game-programming-basic_collision-collisionResponse.mp4","name":"Collision Response","promptfile":null,"prompts":null,"reference":"basic-collision-4","text":null,"title":"Collision Response"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"reference","mod":"","movie":null,"name":"Reference","promptfile":null,"prompts":null,"reference":null,"text":"<a class=\"dest\" id=\"basic-collision-1\"><\/a><div class=\"accent\"><h1>Overview<\/h1><p>In many games, we want objects to move around and act like they do in the physical world. When objects move around, we often want them to collide with other objects. Objects in the game are represented by Collision Primitives, which are simple geometric shapes such as boxes, spheres, capsules, or other geometric shapes that are representative of their visual geometry. Collisions are handled in two major steps: Collision Detection and Collision Response. Before we get into those two steps, let's further explore collision primitives.<\/p><div style=\"text-align: center;\"><ul class=\"anchorGroup\" style=\"text-align: left; display: inline-block;\"><li><a class=\"ankor\" href=\"#basic-collision-2\">Collision Primitives<\/a><\/li><li><a class=\"ankor\" href=\"#basic-collision-3\">Collision Detection<\/a><\/li><li><a class=\"ankor\" href=\"#basic-collision-4\">Collision Response<\/a><\/li><\/ul><\/div><\/div><a class=\"dest\" id=\"basic-collision-2\"><\/a>&nbsp;<div class=\"accent\"><h1>Collision Primitives<\/h1><p>Collision detection is almost always done with collision primitives instead of the actual geometry of the game objects. Collision primitives are basic geometric shapes that are much simpler than the more complicated graphics of an object. Objects will often contain multiple levels of collision primitives which range from low to high fidelity. The lower fidelity levels have computationally simplistic shapes like spheres or bounding boxes. Higher fidelity levels use the actual polygon mesh used for rendering the visual model. <\/p><p>For example, a sphere test is faster than most other collision tests, leading us to use it for the purposes of performance. If we find that the sphere is colliding with objects in the scene, we would then do a more complicated check with more refined primitives to see if there is actually a collision or not. Put simply, we perform computationally cheaper collision tests first so we know which more expensive tests are required. This allows us to conserve processing for other features in the game.<\/p><p>Here are some common collision primitives:<\/p><ol><li><strong>Spheres &#038; Circles<\/strong> - A sphere is defined by a center point and a radius. A circle is just a 2D representation of a sphere. It has the same center point and radius, but the center point only has 2 dimensions. Spheres and circles are easy to wrap around most objects and offer very cheap tests. They are not very accurate unless the object happens to be a perfect sphere or circle (e.g. a ball).<\/li><li><strong>Boxes<\/strong> - A 3D box has 6 sides and a 2D box has 4 sides. It is usually built to fit tightly around the object it is representing. This can offer a bit more accuracy than spheres, but still may not fit perfectly.<\/li><li><strong>Axis Aligned Boxes<\/strong> - Axis aligned boxes are a special type of box. All of the box walls are oriented along the X, Y, and Z axes. This provides less accuracy than a normal box, but is much faster. This type of box is typically stored with a center point and axis extents which describe how to get from the center point to one corner of the box. When that information is known, all of the other corners can be calculated from there.<\/li><li><strong>Capsules<\/strong> - A capsule is a pill shaped object, like a tube with rounded caps on the end. It is built using line segments and a radius. The line segment runs through the middle of the capsule. The distance between the middle line segment and the capsule walls are determined by the length of the radius. The end caps are like half-spheres comprised of the line segment end points and the radius. Capsules are most commonly used for swept sphere tests, which we will talk about more later on in this Module.<\/li><li><strong>Planes<\/strong> - A plane is an infinite flat 2D object, like a floor that never ends. A plane can exist along any arbitrary axes. It is usually defined by a point on the plane and a normal vector describing which way the plane is 'facing'. Planes are useful for representing objects like walls, floors, and other flat boundaries.<\/li><li><strong>Rays<\/strong> - A ray is basically a line that starts at a point and goes forever. This is represented by a ray origin point and a ray direction vector. Rays are useful for line-of-sight calculations and representing objects like bullets.<\/li><\/ol><\/div><a class=\"dest\" id=\"basic-collision-3\"><\/a>&nbsp;<div class=\"accent\"><h1>Collision Detection<\/h1><p>Collision detection is the process of determining which objects will hit other objects within a given frame and where they will hit. There are many ways to detect collisions. It is up to us to decide which is the right method, based on each scenario we want to detect.<\/p><h2>Point vs Axis<\/h2><p>Sometimes we just want to detect when an object goes past an axis. In this situation, we do not really care how accurate it is.<\/p><p>For example, let's say we have a character in our game who runs along the ground and jumps over holes. When this character falls into a hole, this character loses one life. To determine when the character has fallen in a hole, we can see if the character's position is lower than the ground. If it is, we can determine that the character fell in a hole.<\/p><p>In this example, let's say our ground runs across the screen from left to right. The character moves left and right along the X axis. Let's say the ground is at 0 in the Y axis and up is positive Y. Now to determine if the character falls in the hole, we can just test to see if the character position's Y coordinate is less than 0. If it's less than 0, the character has fallen in the hole.<\/p><p>This would detect the instant that the character started falling in the hole. This would happen so fast that the player might not have even noticed it yet. In some cases, this may be fine and might be what we want. Now, let's assume that we want to wait a little bit after the character falls below the ground level. If we test to see if the character position's Y value is less than an offset, say -10 for example, we know that at this point the character is well below the ground level and we can trigger the appropriate event (e.g. character loses a life).<\/p><h2>Overlap Tests<\/h2><p>We have done some basic overlap testing of circles in previous Exercises; the math for a 2D circle is the same for a 3D sphere except there is one added dimension. A sphere vs sphere overlap test is simply getting the distance between the two spheres' centers and checking to see if that distance is less that the combined radii of both spheres. If it is, then they are overlapping. If the distance is more than the combined radii of both spheres, they are not overlapping. This test is not computationally intensive and is efficient enough to handle thousands of overlap tests every frame.<\/p><p>For example, let's imagine we have a plasma explosion in the middle of an enemy camp. How do we know what enemies to damage? How do we know what buildings are affected? We can put a sphere centered at the detonation point with a radius corresponding to the explosion radius. We can then perform overlap tests for all the objects in that enemy camp vs our explosion sphere. This gives us a list of all the objects within the blast radius.<\/p><p>An overlap test works fine when not considering movement over time. However, since games typically involve change over time, overlaps aren't suitable for all conditions. Developers fall into a common trap when thinking about a single frame with static (non moving) objects, instead of considering multiple frames over time during which dynamic (moving) objects update. This type of test is not very good for detecting collisions of moving objects since it is only one instance in time, not the whole frame. <\/p><p>Let's take a look at a possible scenario. Imagine we have a rock that has been thrown at a window. We want the window to break when the rock hits it so we need to detect that collision. Our game is running at 60 frames per second, giving us 16 milliseconds (0.0166667 seconds) between each frame.<\/p><img class=\"img-responsive aligncenter\" src=\".\/images\/overlap3-300x245.png\" alt=\"overlap3\" width=\"300\" height=\"245\" \/><p style=\"text-align: center;\"><strong>Figure 1<\/strong> <em>Rock about to hit window.<\/em><\/p><p>If we do an overlap test on our current frame, we determine the rock is not overlapping the window. In that sense, no collision.<\/p><img class=\"img-responsive aligncenter\" src=\".\/images\/overlap2-300x245.png\" alt=\"overlap2\" width=\"300\" height=\"245\" \/><p style=\"text-align: center;\"><strong>Figure 2<\/strong> <em>Rock overlapping the window.<\/em><\/p><p>On the next frame, the rock is now overlapping the window. This is a collision and the window breaks. This looks like it works, right? In this situation, this test can only find this collision if we get lucky.<\/p><img class=\"img-responsive aligncenter\" src=\".\/images\/overlap1-300x245.png\" alt=\"overlap1\" width=\"300\" height=\"245\" \/><p style=\"text-align: center;\"><strong>Figure 3<\/strong> <em>Rock missed collision with window.<\/em><\/p><p>More often than not, the rock will have moved completely past the window in one frame. When we do an overlap test, we determine there is no overlap. No overlap means no collision, so the window goes unbroken.<\/p><h2>Swept Tests<\/h2><p>A swept test is a collision test that takes into account time. This is most commonly done with spheres, but can be done with any type of collision primitive.<\/p><p>Let's continue with the scenario of the rock and the window. Instead of doing an overlap test, we can do a swept test to account for the time of the frame. To do this, we build a capsule using the current position of the rock and where the rock will be at the end of the frame. These two positions define the capsule line segment. The radius of the circle defines the capsule radius.<\/p><img class=\"img-responsive aligncenter\" src=\".\/images\/overlap4-300x245.png\" alt=\"overlap4\" width=\"300\" height=\"245\" \/><p style=\"text-align: center;\"><strong>Figure 4<\/strong> <em>Capsule representing rock travel.<\/em><\/p><p>Now, if we test to see if the capsule is overlapping the window, we see that it is. This not only tells us that the rock will hit the window this frame, it also can tell us the exact position of the collision and the exact time of the collision in this frame. Sometimes this information is useful if we need to draw the object in the exact position where a collision happens or if we need to do something specific based on exactly how far the object moved. It can be useful in many different scenarios.<\/p><\/div><a class=\"dest\" id=\"basic-collision-4\"><\/a>&nbsp;<div class=\"accent\"><h1>Collision Response<\/h1><p>After we have determined that a collision happens, we need to decide what to do about it. Sometimes we might want objects to bounce off of other objects. Sometimes we might want to destroy things. We may even just want to change game states. For example, when a football player crosses into the end zone, we need to adjust the score.<\/p><p>Collision responses are often implemented as callback functions or event handlers. The collision being the event, the response being the action taken when that event happens. Writing isolated callback functions allows programmers to reuse the code in different situations. For example, enemies on the screen might get destroyed when they collide with bullets or the player, but they might also get destroyed by a power-up or some game rule. Having an event handler for when the enemy gets destroyed lets the event code for both situations reuse that code.<\/p><p>Collision detection functions will typically return some information about the collision. This information may include which object was hit, the time value within the frame that it was hit, the position of the object when the collision happened, the collision normal, and sometimes other data that might be specific to that game.<\/p><p>Most of this return data is self-explanatory, but beginners are often confused about how to use the collision normal. The collision normal will typically represent one of two things: it is usually either the reflection vector indicating the object's new trajectory after collision, or it's the normal used to generate that reflection vector. Let's review this in more detail.<\/p><img src=\".\/images\/reflect2-300x245.png\" alt=\"reflect2\" width=\"300\" height=\"245\" class=\"aligncenter\" \/><p style=\"text-align: center;\"><strong>Figure 5<\/strong> <em>Direction and Surface Normal Vectors<\/em><\/p><p>Here we have a black plane and a red circle moving toward the plane. The blue vector shows the direction of the circle's travel. The orange vector shows the normal of the plane. When the circle hits the plane and bounces off, the new trajectory after the bounce is the reflection of the travel direction around the axis described by the normal.<\/p><img src=\".\/images\/reflect3-300x245.png\" alt=\"reflect3\" width=\"300\" height=\"245\" class=\"aligncenter\" \/><p style=\"text-align: center;\"><strong>Figure 6<\/strong> <em>Reflection Vector<\/em><\/p><p>The reflection vector looks something like the green vector shown in Figure 6. Most vector libraries will have a function to compute reflection vectors given a direction vector and a normal vector. Using the vectors, along with environment data such as gravity, we can calculate forces for either very realistic reactions such as accurate real world physics or more non-earth physics models that might be more fun. It's up to the designer to describe to the programmer how the collision information should be used. It's the programmers job to build the appropriate reaction. Alternatively, the programmer can give the designer a tool or configuration to \"play\" with the parameters so they can make the game \"feel\" right.<\/p><\/div><!--page:~~basic-collision-reference-text~~-->","title":"Reference Material"},{"bIsChecked":true,"exercise":".\/exercise\/basic-collision.zip","instructions":"\u0009\u0009\u0009<h1>Goal<\/h1>\u0009\u0009\u0009<p>In this exercise, we are going to learn how to detect and handle some basic collisions.<\/p>\u0009\u0009\u0009<img src=\".\/images\/exercise-basic-collision.png\" alt=\"LoopsResult\" width=\"1276\" height=\"716\" class=\"img-responsive aligncenter size-full wp-image-2662\" \/>\u0009\u0009\u0009<h1>Steps<\/h1>\u0009\u0009\u0009<p>All work for this Exercise will be done in the basic_collision class.<\/p>\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009<li>Build and run the exercise. You should see three space ships flying off the screen. Let's make them blow up when they hit the edge of the screen. (<a href='.\/simulation\/BasicCollision_1\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li>\u0009\u0009\u0009\u0009<li>In <em>Focus Area 1<\/em>, create a float variable for the ship's collision radius. Set it to be half the width of the ship.<\/li>\u0009\u0009\u0009\u0009<li>In <em>Focus Area 2<\/em>, write a function called <code>BlowShipUp<\/code> that takes in an int for ship index and a <em>Vector3<\/em> for the location for the explosion. The <code>BlowShipUp<\/code> function should have the void return type.<\/li>                <li>Inside the function, do the following:\u0009\u0009\u0009\u0009    <ol>\u0009\u0009\u0009\u0009\u0009    <li>Hide the ship by using the ship index to set the <code>Visible<\/code> flag of the correct ship in the <code>_ships<\/code> array to false.<\/li>\u0009\u0009\u0009\u0009\u0009    <li>Call the <code>SetPosition<\/code> function on the explosion sprite in the <code>_shipExplosions<\/code> array using the ship index and the location.<\/li>\u0009\u0009\u0009\u0009\u0009    <li>Add the explosion sprite to the sprite manager.<\/li>\u0009\u0009\u0009\u0009    <\/ol>                <\/li>\u0009\u0009\u0009\u0009<li>In <em>Focus Area 3<\/em>, check to see if the ship's future X coordinate plus the ship's collision radius is greater than the right edge of the screen. If it is, do the following:\u0009\u0009\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009\u0009\u0009<li>Set the ship's future X coordinate to be the right edge of the screen minus the ship's collision radius, putting the ship just barely touching the wall.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<li>Call the <code>BlowShipUp<\/code> function passing in the ship's index and the future position of the ship.<\/li>\u0009\u0009\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009\u0009<\/li>\u0009\u0009\u0009\u0009<li>Build and run the exercise again. The ships should explode when they get to the right edge of the screen. Now let's add something more exciting to crash into. (<a href='.\/simulation\/BasicCollision_2\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li>\u0009\u0009\u0009\u0009<li>In <em>Focus Area 4<\/em>, create the <code>_planet<\/code> sprite object on layer 1 and set it to use the <code>planetTexture<\/code>.<\/li>\u0009\u0009\u0009\u0009<li>Still in <em>Focus Area 4<\/em>, set the position of the planet to be 250 units left of the right side of the screen in the X, and half the screen's height in the Y.<\/li>\u0009\u0009\u0009\u0009<li>Then also in <em>Focus Area 4<\/em>, set the planet's size using the <code>_planetWidthHeight<\/code> variable for both width and height.<\/li>\u0009\u0009\u0009\u0009<li>Finally in <em>Focus Area 4<\/em>, add the planet sprite to the sprite manager.<\/li>\u0009\u0009\u0009\u0009<li>Build and run the exercise again. Now there should be a large planet on the right side of the screen. Notice the ships go right through the planet; let's fix that. (<a href='.\/simulation\/BasicCollision_3\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li>\u0009\u0009\u0009\u0009<li>In <em>Focus Area 5<\/em>, create a float variable for the planet's collision radius and set its value to be half the width of the planet.<\/li>\u0009\u0009\u0009\u0009<li>In <em>Focus Area 6<\/em>, check for collisions with the planet by calling the <code>Intersection.SweptSphereVsSphere<\/code> function. Pass in the current ship's position, the future position of the ship, the ship's collision radius, the planet's position, and the planet's collision radius. Store the result in a <code>Collision_HitInfo<\/code> object.<\/li>\u0009\u0009\u0009\u0009<li>Still in <em>Focus Area 6<\/em>, check to see if the <code>Collision_HitInfo<\/code> object is null. If it is null, there is no collision. If it is not null, do the following:\u0009\u0009\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009\u0009\u0009<li>Set the future position of the ship equal to the <code>point<\/code> member of the <code>Collision_HitInfo<\/code> object. This is the point where the ship's sphere collides with the planet's sphere.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<li>Now let's only blow up if we crash directly into the planet; if we hit it at an angle let's glance off instead.<br \/>\u0009\u0009\u0009\u0009\u0009\u0009\u0009If the dot product of the collision normal and the ship direction is near 1 or near -1, they are almost parallel. If it is near 0, they are almost perpendicular.<br \/>\u0009\u0009\u0009\u0009\u0009\u0009\u0009Create a local float variable and use it to hold the cosine of the angle (dot product) between the <code>normal<\/code> member of the <code>Collision_HitInfo<\/code> object and <code>Vector3.UnitX<\/code>.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<li>Check to see if the absolute value of the cosine of the angle between the collision normal and the ship's direction is greater than 0.8f or so. If it is, blow up the ship.  Otherwise, do the following:\u0009\u0009\u0009\u0009\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Change the ship's velocity in the <code>_shipVelocities<\/code> array by using the collision normal as the direction and multiplying by <code>_shipSpeed<\/code>.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009<li>Rotate the ship to face the new direction.  Get the angle between the ship's direction and the collision normal by passing the cosine of the angle to the <code>Math.Acos<\/code> function.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009\u0009\u0009\u0009<\/li>\u0009\u0009\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009\u0009<\/li>\u0009\u0009\u0009\u0009<li>Build and run the exercise again. The ships should now collide with the planet. But we have a couple problems - the ships look like they are colliding before getting to the planet and the bottom ship goes right off the bottom of the screen. Let's add collision detection for the bottom of the screen. (<a href='.\/simulation\/BasicCollision_4\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li>\u0009\u0009\u0009\u0009<li>In <em>Focus Area 7<\/em>, check to see if the ship's future Y coordinate plus the ship's collision radius is greater than the bottom of the screen.  If it is, do the following:\u0009\u0009\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009\u0009\u0009<li>Set the ship's future Y coordinate to the bottom of the screen minus the ship's collision radius.<\/li>\u0009\u0009\u0009\u0009\u0009\u0009<li>Blow up the ship!<\/li>\u0009\u0009\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009\u0009<\/li>\u0009\u0009\u0009\u0009<li>Build and run the exercise again. The bottom ship should now blow up when it gets to the bottom edge of the screen. But the ships are still colliding with the planet too early. Let's investigate why. (<a href='.\/simulation\/BasicCollision_5\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li>\u0009\u0009\u0009\u0009<li>In <em>Focus Area 8<\/em>, let's draw some debugging graphics so we can see where the collisions are going to happen. Call the <code>DebugDraw.DrawCircle<\/code> method passing in the <code>_graphicsDevice<\/code>, the <code>viewProjection<\/code> matrix, the planet's position, the planet's collision radius, <code>Vector3.UnitY<\/code>, <code>Vector3.UnitZ<\/code>, and <code>Color.Red<\/code> for the color.<\/li>\u0009\u0009\u0009\u0009<li>Still in <em>Focus Area 8<\/em>, go through each ship in the <code>_ships<\/code> array with a foreach loop. Inside the loop, do the following:\u0009\u0009\u0009\u0009\u0009<ol>\u0009\u0009\u0009\u0009\u0009\u0009<li>If the ship is visible, call the <code>DebugDraw.DrawCircle<\/code> method again, but this time with the ship's position, the ship's collision radius, and blue for the color.<\/li>\u0009\u0009\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009\u0009<\/li>\u0009\u0009\u0009\u0009<li>Build and run the exercise again. There is now a blue circle around each ship and a red circle around the planet. We can see that when these circles touch, we get our collisions. Now it is clear why the ships are colliding with the planet too early - the red circle is bigger than the planet graphic.  Adjust the planet collision radius down so that it more closely matches the graphic. (<a href='.\/simulation\/BasicCollision_6\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li>\u0009\u0009\u0009\u0009<li>Build and run the exercise again. Now the middle ship should blow up on impact with the planet, the bottom ship should glance off and explode when it hits the bottom wall. The top ship should miss the planet and then crash into the wall. (<a href='.\/simulation\/BasicCollision_7\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li>\u0009\u0009\u0009<\/ol>\u0009\u0009\u0009<h1>Rubric<\/h1><ul><li>2 points for ships exploding into the wall in step 6.<\/li><li>2 points for incomplete explosion in step 15.<\/li><li>1 point for exploding on screen bottom in step 17.<\/li><li>1 point for complete & correct collisions in sep 21.<\/li><\/ul>\u0009\u0009\u0009<h1>Code Help<\/h1>            <!--CodeHelp: Math-->            <p><strong>Math <\/strong> &#8211; This is a class built into C#. It provides constants and static methods for performing common math calculations.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Get the absolute value of -60. Result should be 60<br\/>float absoluteValue = Math.Abs(-60);<br\/><br\/>\/\/ Get the square root of 16 (should be 4)<br\/>float squareRoot = (float)Math.Sqrt(16);<br\/><br\/>\/\/ Get the sine, cosine, tangent, inverse tangent, and inverse cosine of the angle (must be in radians)<br\/>float cosine = Math.Cos(0.5f);<br\/>float sine = Math.Sin(0.5f);<br\/>float tangent = Math.Tan(0.5f);<br\/>float inverseCosine = Math.Acos(0.5f);<br\/>float inverseTangent = Math.Atan(0.5f);<br\/><\/pre><p><\/p><!--CodeHelp: Vector3-->            <p><strong>Vector3<\/strong> &#8211;  A vector data structure containing 3 components (X, Y, Z). When creating a new Vector3, we can pass in three float values:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Example X\/Y\/Z floats. Values are arbitrary<br\/>float x = 1.0f;<br\/>float y = 2.0f;<br\/>float z = 3.0f;<br\/><br\/>\/\/ Create a new Vector3<br\/>Vector3 vectorA = new Vector3(x, y, z);<br\/>Vector3 vectorB = new Vector3(4.0f, 5.0f, 6.0f);<br\/><br\/>\/\/ Values of vectorC will be 5.0f, 7.0f, 9.0f for X, Y, and Z respectively<br\/>Vector3 vectorC = vectorA + vectorB;<br\/><br\/>\/\/ Create a Vector3 by transforming a Matrix <br\/>Vector3 distance = new Vector3(1.0f, 2.0f, 3.0f);<br\/>Vector3 transformedVector = Vector3.Transform(distance, Matrix.CreateRotationY(MathHelper.ToRadians(45.0f)));<br\/><br\/>\/\/ Create a Vector3 from Vector2 values<br\/>Vector2 vectorTwo = new Vector2(10.0f, 5.0f);<br\/>Vector3 vectorThree = new Vector3(vectorTwo.X, vectorTwo.Y, 0.0f);<br\/><\/pre><p><\/p><!--CodeHelp: Module-->            <p><strong>Module<\/strong> &#8211; Module is a custom class written for this course. It is wrapped in a dynamic-link library, so we do not have to worry about adding to it:<\/p><ul><li>_graphicsDevice – An XNA\/MonoGame GraphicsDevice. This is used in SpriteManager's rendering methods. It is already initialized for us and we simply need to know its name and where to use it.<\/li><li>_contentManager – An XNA\/MonoGame ContentManager. This is used in SpriteTexture's texture methods. It is already initialized for us and we simply need to know its name and where to use it.<\/li><li>DefautCamera – A simple Camera object which manages our game's projection and view. It is already initialized for us and we simply need to know its name and where to use it.<\/li><\/ul><p><\/p><!--CodeHelp: GraphicsDevice-->            <p><strong>GraphicsDevice<\/strong> &#8211; An XNA\/MonoGame GraphicsDevice used for rendering primitives and handling graphical resources:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>_spriteManager.RenderSprites(_graphicsDevice, DefaultCamera);<br\/><\/pre><p><\/p><!--CodeHelp: Sprite-->            <p><strong>Sprite<\/strong> &#8211; This is a utility class with several sub-systems which allow for simple image rendering. With only a few method calls, a Sprite can load a texture, render, and move around. <\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Create a new SpriteTexture and load its content<br\/>SpriteTexture texture = new SpriteTexture(&quot;Graphics\\\\moon&quot;);<br\/>texture.LoadContent(_contentManager);<br\/><br\/>\/\/ Declare a new Sprite on layer 1<br\/>Sprite mySprite = new Sprite(1);<br\/><br\/>\/\/ Set the size of the sprite to 10 by 10<br\/>mySprite.SetSize(10.0f, 10.0f);<br\/><br\/>\/\/ Set the Sprite&#039;s position to the center of the screen<br\/>mySprite.SetPosition(0.0f, 0.0f);<br\/><br\/>\/\/ Set the Sprite&#039;s rotation, in radians.<br\/>mySprite.SetRotation(3.14159f);<br\/><br\/>\/\/ Set the sprite texture<br\/>mySprite.SetSpriteTexture(texture);<br\/><br\/>\/\/ Set the color tint of the Sprite to red<br\/>mySprite.SetTint(Color.Red);<br\/><\/pre><p><\/p><!--CodeHelp: SpriteManager-->            <p><strong>SpriteManager<\/strong> &#8211; SpriteManager is a utility class which is responsible for sorting, updating, and rendering sprites.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Create a new Sprite<br\/>Sprite mySprite = new Sprite();<br\/><br\/>\/\/ In order for mySprite to render and update, it MUST be added to _spriteManager<br\/>_spriteManager.AddSprite(mySprite);<br\/><br\/>\/\/ Update the sprites. Takes in a GameTime as argument<br\/>_spriteManager.UpdateSprites(time);<br\/><br\/>\/\/ Render the sprites. Takes in a GraphicsDevice and Camera for arguments<br\/>_spriteManager.RenderSprites(_graphicsDevice, DefaultCamera);<br\/><\/pre><p><\/p><!--CodeHelp: Vector3.Dot-->\u0009\u0009\u0009\u0009\u0009\u0009      <p>        <strong>Vector3.Dot<\/strong> &#8211; Calculates the dot product of two vectors. If the two vectors are unit vectors, the dot product returns a floating point value between -1 and 1 that represents the cosine of the angle between the two vectors.      <\/p>      <pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Declare an array of 2 vertices<br\/>Vector3 vectorA = Vector3.UnitX;<br\/>Vector3 vectorB = Vector3.UnitY;<br\/><br\/>float dot = Vector3.Dot(vectorA, vectorB);<br\/>float angle = (float)Math.Acos(dot);<br\/><\/pre>  <!--page:~~basic-collision-exercise~~-->","link":"exercise","mod":"basic-collision","movie":null,"name":"basic-collision","promptfile":null,"prompts":null,"reference":null,"text":null,"title":"Exercise"}]},{"bIsChecked":true,"name":"behaviors","title":"Behaviors","topics":[{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"behaviors","movie":".\/video\/Course2-intro-to-game-programming-behavior-overview.mp4","name":"Overview","promptfile":null,"prompts":null,"reference":"behaviors-1","text":null,"title":"Overview"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"Procedural","mod":"behavior-procedural","movie":".\/video\/Course2-intro-to-game-programming-behavior-procedural.mp4","name":"Procedural","promptfile":null,"prompts":null,"reference":"behaviors-2","text":null,"title":"Procedural"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"OOP","mod":"behavior-oop","movie":".\/video\/Course2-intro-to-game-programming-behavior-oop.mp4","name":"OOP","promptfile":null,"prompts":null,"reference":"behaviors-3","text":null,"title":"OOP"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"Components","mod":"behaviors-components","movie":".\/video\/Course2-intro-to-game-programming-behavior-components.mp4","name":"Components","promptfile":null,"prompts":null,"reference":"behaviors-4","text":null,"title":"Components"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"Visual Scripting","mod":"behavior-visualScriptiong","movie":".\/video\/Course2-intro-to-game-programming-behavior-visualScripting.mp4","name":"Visual Scripting","promptfile":null,"prompts":null,"reference":"behaviors-5","text":null,"title":"Visual Scripting"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"reference","mod":"","movie":null,"name":"Reference","promptfile":null,"prompts":null,"reference":null,"text":"<a class=\"dest\" id=\"behaviors-1\"><\/a><div class=\"accent\"><h1>Overview<\/h1><p>Behaviors are essentially what makes a game come alive. While rendering images, playing animations, and setting orientation are part of a game, we would end up watching a video or GIF without any behaviors. For the sake of simplicity, behaviors can be broken down into a few broad categories: input, interaction, and reaction.<\/p><p>Let's look at a very basic gameplay example. The game has a hero and an enemy. The enemy uses AI to chase the hero. The hero is controlled by a player through keyboard input. If the enemy catches the hero, the hero loses health. If the hero's health reaches zero, it loses a life. If the hero has remaining lives, it will respawn. Otherwise, the game will be over.<\/p><p>While very basic, all three of our core game behaviors requirements are satisfied. The hero's <strong>input<\/strong> comes from the player's keyboard. The hero and enemy <strong>interact<\/strong> with each other. The <strong>reaction<\/strong> to the interaction is that the hero will lose health. In game development, there is no definitive way to code behaviors. Different languages, engines, and coding styles allow for flexibility when programming behaviors. In this Reference, we are going to analyze some of the most common methods of creating behaviors.<\/p><div style=\"text-align: center;\"><ul class=\"anchorGroup\" style=\"text-align: left; display: inline-block;\"><li><a class=\"ankor\" href=\"#behaviors-2\">Procedural Behaviors<\/a><\/li><li><a class=\"ankor\" href=\"#behaviors-3\">OOP Behaviors<\/a><\/li><li><a class=\"ankor\" href=\"#behaviors-4\">Components<\/a><\/li><li><a class=\"ankor\" href=\"#behaviors-5\">Visual Scripting<\/a><\/li><\/ul><\/div><\/div><a class=\"dest\" id=\"behaviors-2\"><\/a>&nbsp;<div class=\"accent\"><h1>Procedural Behaviors<\/h1><p>Perhaps the most basic way to code behaviors is through procedural programming. We have already written procedural behaviors in past Modules, without really knowing it. Procedural coding is tried and true, but it is not complex or always portable between games. This approach relies heavily on creating a lot of functions and variables. There is little to no object-oriented programming, which reduces the complexity of the code and yields faster results up front.<\/p><p>Let's observe the following code, which is just a small piece of a larger game:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Integers representing player health and life.<br\/>int playerHealth = 100;<br\/>int playerLives = 3;<br\/><br\/>\/\/ Bounding spheres that represent player and enemy positions\/collision<br\/>BoundingSphere player = new BoundingSphere(new Vector3(0.0f, 0.0f, 0.0f), 25.0f);<br\/>BoundingSphere enemy = new BoundingSphere(new Vectore3(100.0f, 100.0f, 0.0f), 25.0f);<br\/><br\/>\/\/ Update a game object&#039;s position based on keyboard input<br\/>void UpdateInput(KeyboardState keyState, BoundingSphere gameObject)<br\/>{<br\/>\/\/ Up key was pressed, move the game object up<br\/>if (keyState.IsKeyDown(Keys.Up))<br\/>gameObject.Center = new Vector3(gameObject.Center.X, gameObject.Center.Y + 1, 0.0f);<br\/><br\/>\/\/ Down key was pressed, move the game object down<br\/>if (keyState.IsKeyDown(Keys.Down))<br\/>gameObject.Center = new Vector3(gameObject.Center.X, gameObject.Center.Y - 1, 0.0f);<br\/>}<br\/><br\/>\/\/ Update loop called every frame. Use to update game objects<br\/>void UpdateGame(KeyboardState keyboardState)<br\/>{<br\/>\/\/ Update the player based on keyboard input<br\/>UpdateInput(keyboardState, player);<br\/><br\/>\/\/ Check to see if player and enemy are colliding. If so, reduce player health<br\/>if (!gInvincible &amp;amp;&amp;amp; player.Intersects(enemy))<br\/>{<br\/>playerHealth -= 10;<br\/>player.invincibility(2);   <br\/>}<br\/><br\/>\/\/ If the player&#039;s life is at zero, lose a life<br\/>if (playerHealth &amp;lt;= 0)<br\/>{   <br\/>\/\/ Lose one life<br\/>playerLives--;<br\/><br\/>\/\/ Player still has lives remaining, so respawn<br\/>if (playerLives &amp;gt;= 0)<br\/>Respawn(gameObject);<br\/>}<br\/>}<br\/><br\/>\/\/ Reset the game object back to a default position<br\/>void Respawn(BoundingSphere gameObject)<br\/>{<br\/>gameObject.Center = new Vector3(0.0f, 0.0f, 0.0f);<br\/>}<br\/><\/pre>&nbsp;<p>The above code uses individual variables for player health, player lives, player collision sphere, and enemy collision sphere. Three stand-alone functions are used for processing game behaviors, which requires passing in objects to work. The code is simple, easy to write, and a valid way to create a behavior. The main drawback is that any changes to the game's design could drastically affect every function and variable. What if the enemy damage changes? What if armor is added to the design, which would affect player health and damage absorption?<\/p><\/div><a class=\"dest\" id=\"behaviors-3\"><\/a>&nbsp;<div class=\"accent\"><h1>OOP Solution<\/h1><p>Utilizing basic OOP can increase the flexibility of our game when making changes to behaviors or design. We could make changes to a player class without breaking an enemy class. When compared to procedural coding, creating behaviors using OOP does require more time for planning and writing more elegant code. The upfront hit to progress is offset by the later stages of development where it's easier to track down and modify code in clean classes. Observe the following example to see how the procedural code shown previously is encapsulated in a Player class:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">class Player<br\/>{<br\/>\/\/ Private fields for tracking max health, current health, and life count<br\/>int _maxHealth, _lives, _currentHealth;<br\/><br\/>\/\/ Bounding sphere used for tracking player position and collision<br\/>BoundingSphere _collisionSphere;<br\/><br\/>\/\/ Player constructor<br\/>public Player(int health = 100, int lives = 3)<br\/>{<br\/>\/\/ Set both the current and max health to the passed in values.<br\/>_maxHealth = _currentHealth = health;<br\/><br\/>\/\/ Set the number of lives<br\/>_lives = lives;<br\/>}<br\/><br\/>\/\/ Helper property which lets us know if Player is alive based on remaining lives<br\/>public bool IsAlive<br\/>{<br\/>get { return _lives &amp;gt; 0; }<br\/>}<br\/><br\/>\/\/ Do specified damage to the player<br\/>public void Damage(int damage)<br\/><br\/>\/\/ Reduce the current health by damage<br\/>_currentHealth -= damage;<br\/><br\/>\/\/ If health has been reduced to zero or less, respawn<br\/>if (_currentHealth &amp;lt;= 0)<br\/>Respawn();<br\/>}<br\/><br\/>\/\/ Restore health to the player<br\/>public void Heal(int health)<br\/>{<br\/>_currentHealth += health;<br\/>}<br\/><br\/>\/\/ Respawn this player<br\/>public void Respawn()<br\/>{<br\/>\/\/ Check to see if the player is still alive<br\/>if (IsAlive)<br\/>{<br\/>\/\/ Cost 1 life to respawn<br\/>_lives--;<br\/><br\/>\/\/ Reset the current health to the max value<br\/>_currentHealth = _maxHealth;<br\/><br\/>\/\/ Reset the player&#039;s position to a default location<br\/>_collisionSphere.Center = new Vector3(0.0f, 0.0f, 0.0f);<br\/>}<br\/>}<br\/><br\/>\/\/ Check for collision with another game object. Could be health or an enemy or anything<br\/>public bool CheckCollision(BoundingSphere otherObject)<br\/>{<br\/>if (_collisionSphere.Intersects(otherObject))<br\/>return true;<br\/>else<br\/>return false;<br\/>}<br\/><br\/>\/\/ Move the player vertically<br\/>public void MoveVertical(float amount)<br\/>{<br\/>_collisionSphere.Center.Y = amount;<br\/>}<br\/><br\/>\/\/ Move the player horizontally<br\/>public void MoveHorizontal(float amount)<br\/>{<br\/>_collisionSphere.Center.X = amount;<br\/>}<br\/><br\/>public void CheckDamageCollision( BoundingSphere enemy )<br\/>{<br\/>\/\/ If the player is colliding with an enemy, deal damage to player<br\/>if (player.CheckCollision(enemy))<br\/>player.Damage(10);<br\/>}<br\/><br\/>public void CheckHealthCollision( BoundingSphere health )<br\/>{   <br\/>\/\/ If the player is colliding with health, restore health to player<br\/>if (player.CheckCollision(health))<br\/>player.Heal(10); <br\/>}<br\/>}<br\/><\/pre>&nbsp;<p>The example <em>Player<\/em> class encapsulates the variables and methods specific to a type of game object. The game behaviors include interaction via the Damage, Heal, and CheckCollision methods. The Respawn, MoveVertical, and MoveHorizontal methods are reactions to both internal and external actions. Player objects will be controlled by external forces, but it does not care which. Movement could be controlled by mouse, keyboard, gamepad, or other non-hardware inputs.<\/p><p>Let's see how the usage of the Player class might look in the following example:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Bounding sphere representing enemy position and collision<br\/>BoundingSphere enemy = new BoundingSphere(new Vector3(100.0f, 100.0f, 0.0f), 25.0f);<br\/><br\/>\/\/ Bounding sphere representing health power-up position and collision<br\/>BoundingSphere health = new BoundingSphere(new Vector3(200.0f, 200.0f, 0.0f), 15.0f);<br\/><br\/>\/\/ Game&#039;s player object. Start with 200 health and only 1 life.<br\/>Player player = new Player(200, 1);<br\/><br\/>\/\/ Update the game<br\/>void Update(KeyboardState keyState)<br\/>{<br\/>\/\/ If the player is now longer alive, the game is over<br\/>if (!player.IsAlive)<br\/>{<br\/>GameOver();<br\/>return;<br\/>}<br\/><br\/>\/\/ If the up key is pressed, move the player up<br\/>if (keyState.IsKeyDown(Keys.Up))<br\/>player.MoveVertical(1.0f);    <br\/><br\/>\/\/ If the down key is pressed, move the player down<br\/>if (keyState.IsKeyDown(Keys.Left))<br\/>player.MoveHorizontal(-1.0f);    <br\/><br\/>CheckDamageCollision( enemy );<br\/>CheckHealthCollision( health )<br\/>}<br\/><\/pre>&nbsp;<p>Through OOP, we've improved the flexibility of our game and its behaviors. We could add more varied game objects that damage the player, like projectiles or traps, without changing the player's behavior. The player still supports collision, taking damage, and healing elegantly, regardless of what design changes happen outside of it.<\/p><p>While the benefits are obvious, it is possible to abuse the usage of classes. Making a class for every single object could result in writing a lot of duplicate code. If a player and enemy need positioning, rendering, collision, and movement, it would make sense to have them inherit from a base class with those shared features. This requires more planning and time, but it also can affect development in later stages. Changes to the base class affects the behaviors of all its children, so needing a change to only affect the player becomes tricky. This could mean further extending the class hierarchy with more classes, creating a monolithic class to handle more features\/cases, or breaking the inheritance into different trees. Our code could quickly spider out of control and become a hassle to manage with on-the-fly changes to design.<\/p><p>Another drawback is that our classes containing the game behaviors could become so specific that we can't reuse the code in other games we create. A Player class in one game may be completely unsuitable for a Player class in another game of different genre. Granted, not all code needs to be portable, but there are some features that are worth isolating into reusable parts. This leads to our next approach to developing game behaviors.<\/p><\/div><a class=\"dest\" id=\"behaviors-4\"><\/a>&nbsp;<div class=\"accent\"><h1>Components<\/h1><p>In the past few years, components systems have risen in popularity to the point where they are a heralded feature in reusable technology, such as game engines. Even when creating our game without using an engine, using components could greatly speed up development and take code flexibility to the next level. So what are components?<\/p><p>If we were to pull a concept from real life, components are a lot like building blocks. It's possible to buy premade castle or boats, but they are completely unchanging in their purpose. However, building blocks are reusable to the point where a piece could be used as a wall, floor, or ceiling. The point is that the end result is the sum of its various pieces. An empty box is not representative of much, except maybe something for storage. If we add wheels to that box, it is now a wagon. Adding an engine and steering wheel makes it a car. We can take away the wheel and replace them with wings to make a plane. This is the concept behind components.<\/p><p>Like procedural and OOP behavior development, there is not a definitive component system. Both Torque 2D and Unity have component systems, yet they differ in syntax and how they are put together. Perhaps the most generic component design is that of the \"entity-component-system\", or \"ECS\". As the name states, an ECS consists of three major parts:<\/p><p><strong>Entity<\/strong> - A very basic, generic object which is defined by the components attached to it. On its own, it cannot receive input, react, interact, render, or do anything.<\/p><p><strong>Component<\/strong> - A container object, in which we store game behavior data and a minimal number of methods to connect in a system. When attached to an Entity, it is changing the nature of the Entity.<\/p><p><strong>System<\/strong> - An object which processes entities and their behaviors. A system is where the majority of game behavior logic is maintained, such as the reaction and interaction between entities and their components.<\/p><p>An ECS removed the need to create specific classes like a player or enemy. An Entity by itself is basically a pointless object that exists in the game's memory. However, if we add a render component and transform component, it is now a sprite that can be move around and be drawn to a screen. Adding a health component and movement component then turns the Entity into a player object. In the game, an Entity is a player if it has components for rendering, transformation, movement, and health.<\/p><p>Let's observe a few simple examples from the ECS that was written for us in this curriculum, which we will use in the Exercise later:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ A component that contains the data for tracking health and lives<br\/>class HealthComponent : Component<br\/>{<br\/>int _maxHealth, _currentHealth, _lives;<br\/><br\/>public int Health<br\/>{<br\/>get { return _currentHealth; }<br\/>set { _currentHealth = value; }<br\/>}<br\/><br\/>public bool IsAlive<br\/>{<br\/>get { return _lives &amp;lt;= 0; }<br\/>}<br\/><br\/>public HealthComponent(int maxHealth, int lives)<br\/>{<br\/>_maxHealth = _currentHealth = maxHealth;<br\/>_lives = lives;<br\/><br\/>_name = &quot;HealthComponent&quot;;<br\/>}        <br\/>}<br\/><br\/>\/\/ A movement component that is used in controlling an objects dynamic movement in the game<br\/>class MoveComponent : Component<br\/>{<br\/>public float Acceleration, Mass, MaxSpeed, CurrentSpeed;<br\/><br\/>public MoveComponent(float acceleration, float mass, float maxSpeed)<br\/>{<br\/>Acceleration = acceleration;<br\/>Mass = mass;<br\/>MaxSpeed = maxSpeed;<br\/><br\/>_name = &quot;MoveComponent&quot;;<br\/>}<br\/>}<br\/><br\/>\/\/ A damage component that provides the necessary data <br\/>class DamageComponent : Component<br\/>{<br\/>public int MaxDamage, MinDamage;<br\/>public float CriticalHitChance;<br\/><br\/>public int Damage<br\/>{<br\/>get<br\/>{<br\/>\/\/ Get a random number between 0 and 100 (percentage)<br\/>var random = new GDRandom();<br\/>float randValue = random.Next(0, 100);<br\/><br\/>\/\/ If the random number is greater than the CriticalHitChance, do more damage.<br\/>if (randValue &amp;gt;= CriticalHitChance)<br\/>return MinDamage;<br\/>else<br\/>return MaxDamage;<br\/>}<br\/>}<br\/>public DamageComponent(int minDamage, int maxDamage, float critChance)<br\/>{<br\/>MinDamage = minDamage;<br\/>MaxDamage = maxDamage;<br\/>CriticalHitChance = critChance;<br\/>}<br\/>}<br\/><\/pre>&nbsp;<p>The above components are enough to create two different objects, using the same Entity class. For our example, a player entity has health\/lives, movement, and collision. An enemy entity has damage dealing, movement, and collision. The following example shows how to piece these components together:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\">\/\/ Create a new Entity that will represent our player<br\/>Entity player = new Entity(0);<br\/><br\/>\/\/ Player consists of health, movement, and collision, so add those components<br\/>player.AddComponent(new HealthComponent(100, 3));<br\/>player.AddComponent(new MoveComponent(1.0f, 2.0f, 3.0f));<br\/>player.AddComponent(new CollisionComponent(15.0f));<br\/><br\/>\/\/ Use a KeyboardMoveSystem to handle controlling player movement via arrow keys<br\/>KeyboardMoveSystem keyboardMoveSystem = new KeyboardMoveSystem(Keys.Up, Keys.Down, Keys.Left, Keys.Right, 0.5f);<br\/>keyboardMoveSystem.AddEntity(player);<br\/><br\/>\/\/ Create a new Entity that will represent our enemy<br\/>Entity enemy = new Entity(1);<br\/><br\/>\/\/ Enemy consists of damage, movement, and collision, so add those components<br\/>enemy.AddComponent(new DamageComponent(5, 15, 10.0f));<br\/>enemy.AddComponent(new MoveComponent(0.5f, 1.0f, 2.0f));<br\/>enemy.AddComponent(new CollisionComponent(25.0f));<br\/><br\/>\/\/ Use a ChaseTargetSystem to make an enemy chase a player around the screen.<br\/>ChaseTargetSystem chaseSystem = new ChaseTargetSystem(2.0f);<br\/>chaseSystem.AddEntity(enemy);<br\/><\/pre>&nbsp;<p>In the above code, we should notice the two systems used for processing the entities. The components themselves have no real logic for game behaviors, yet they contain the important behavior data. The KeyboardMoveSystem in the above example will grab the MoveComponent and CollisionComponent from the player entity during processing, then execute logic based on their values. In essence, the core game behavior is kept in the systems.<\/p><p>The true power of a component system is its reusability, reduction of large classes, and dynamic building of complex objects. A secondary benefit is that some components can be ported to multiple games, if they are generic enough. For example, a 2D sprite render component could be used in multiple games, regardless of genre. A keyboard system that provides basic four-directional movement is used in thousands of games, so it would make a good system to create for multiple projects.<\/p><p>Despite the power, flexibility, reusability, and ease of use provided by an ECS, the main drawback is availability. Component systems, while popular, are not quite a standard yet. Not every game engine or framework provides a premade component system. If we were writing a game from scratch and wanted a component system, we would need to architect and implement it before we could get to any actual game behavior development. This is not an entry level game developer task. Newer game developers tend to go the route of procedural or pure OOP development, or opt to use an existing engine that provides components if that is a requirement.<\/p><\/div><a class=\"dest\" id=\"behaviors-5\"><\/a>&nbsp;<div class=\"accent\"><h1>Visual Scripting<\/h1><p>Another concept gaining popularity, though less common than even components, is visual scripting. Unlike raw coding, visual scripting allows game developers to build behaviors using a tool. Instead of learning a programming language and compiling, a visual scripting tool provides an interface designers and novice developers use to \"drag and drop\" pre-defined \"blocks\" into a single behavior. While not coding, visual scripting requires some of the same concepts a programmer must understand to develop a decent game, such as variable management, object relationships, problem solving, and logical connections.<\/p><p>Visual scripting depends completely on an interface, which is almost always connected to a larger suite of tools for a game engine. Stencyl is a game development product which provides a behavior creation tool that allows a developer to make components visually, then attach them to game objects in a level editor. Their tool uses a \"blocky\" editor, which is very much like snapping multiple Lego pieces together to make a larger object. The concept is very much like a component system, except creation is done visually.<\/p><img class=\"aligncenter\" src=\".\/images\/image_example1.png\" alt=\"image_example1\" width=\"281\" height=\"284\" \/><p style=\"text-align: center;\"><strong>Figure 1<\/strong> <em>Behavior Block Editor<\/em><\/p><h2>Node Based<\/h2><p>Unreal Engine is perhaps the most well known game engine, used to create amazing games ranging from the hobbyist to AAA tiers. The latest version, Unreal Engine 4, features a system named \"Blueprints\". The Blueprints editor allows developers to make individual component nodes and string them together with other nodes to create a behavior. This is akin to creating a diagram or flowchart of game logic and properties, which when combined and added to an object can create complex behaviors an object will follow.<\/p><img class=\"aligncenter\" src=\".\/images\/image_example2.png\" alt=\"image_example2\" width=\"800\" height=\"291\" \/><p style=\"text-align: center;\"><strong>Figure 2<\/strong> <em>Node Behavior Diagram<\/em><\/p><p>The obvious benefit of visual scripting for game behaviors is that the barrier to entry is much lower. Programmers, designers, and artists can use the tools to create game behaviors. Equally obvious are the drawbacks of being less standard, tied to another suite of tools or engine, and having less control than raw coding. Not all visual scripting tools expose every possible feature or variable.<\/p><h2>Behavior Trees<\/h2><p>Behavior trees are an interesting approach to developing game behaviors. The roots of behavior trees stem back to traditional computer science, engineering, and robotics. The most common application of this approach is creating behaviors for AI controlled game objects. The core premise of a behavior tree is piecing together a series of states in a hierarchy, which will be traversed by a game object as it is influenced by internal and external actions.<\/p><img class=\"aligncenter wp-image-4560 size-full\" src=\".\/images\/image_example3.png\" alt=\"image_example3\" width=\"610\" height=\"399\" \/><p style=\"text-align: center;\"><strong>Figure 3<\/strong> <em>Generic Behavior Tree Structure<\/em><\/p><p>For example, let's say a game has an enemy object. When the enemy does not detect any threats, it is idling. When another game object comes near it, it begins scanning. If the object is a player, the enemy will go into chase mode. If the enemy is close enough, it will engage the player and begin attacking. Should the player exit the attack range, the enemy will revert back to chasing. Should be player leave the scan area completely, the enemy will revert back to the idle mode.<\/p><img class=\"aligncenter\" src=\".\/images\/image_example4.png\" alt=\"image_example4\" width=\"539\" height=\"470\" \/><p style=\"text-align: center;\"><strong>Figure 4<\/strong> <em>Example Enemy Behavior Tree<\/em><\/p><p>A behavior tree can be developed through visual editors or through raw coding. Both approaches require upfront knowledge and development, whether its learning an existing tool, studying a framework, or writing a behavior tree system for a game. The power of a behavior tree lies in the ability to remove, add, or replace leaves based on the game object. The hierarchy allows for easy modification and debugging of an object not controlled directly through player input.<\/p><p>Like other behavior development approaches discussed in this Reference, the system can be abused to the point where a clean hierarchy is blown up to massive network of decisions, fringe states, and rarely used leaves.<\/p><p>The overall point of this Reference is that there is no go-to, definitive approach to creating game behaviors. In fact, many games are created using a combination of all the approaches and a few that are not covered in this Reference. What's important is that we pick a technology and approach that is the most useful to our game's development, then tailor it to our needs. There is no \"right way.\" A game behaviors are the most subjective part of game development, which results in enough freedom for us to pick what's right for us and our game.<\/p><\/div><!--page:~~behaviors-reference-text~~-->","title":"Reference Material"},{"bIsChecked":true,"exercise":".\/exercise\/behaviors.zip","instructions":"<h1>Goal<\/h1><p>The goal of this exercise is to utilize one form of game behavior programming to create a simple interactive scene. To complete this exercise, we are going to use an entity-component-system (ECS). Since the ECS framework is already written, we will focus on using examples components and systems, managing entities, and adding new systems.<\/p><img class=\"aligncenter size-full wp-image-701\" src=\".\/images\/exercise_behavior.png\" alt=\"oop_exercise\" width=\"800\" height=\"450\" \/><p style=\"text-align: center;\">The final scene should look similar to the one in this image.<\/p><h1>Steps<\/h1><p>Steps to complete this exercise<\/p><ol><li>Player Entity<ol><li>First, let's see what the Exercise looks like without modification. Run the Exercise by clicking the Start button or pressing F5. We should only see a black screen. (<a href='.\/simulation\/Behaviors_1\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><li>Close the game and open BehaviorsExercise.cs. Scroll down to <em>Focus Area 1<\/em> in the <code>LoadContent<\/code> method.<\/li><li>Declare a new Entity named player. Pass zero as its constructor argument. See the Code Help at the bottom of this exercise for more information.<\/li><li>Next we are going to add a component for positioning in the game. Create a new TransformComponent named <code>playerTransformComponent<\/code>. This component's constructor takes a <em>Vector3<\/em> for position, a <em>Vector2<\/em> for size, and a <em>float<\/em> for rotation. The position should be 200 in the X, 200 in the Y, and 0 in the Z. The size should be 45 width (X) and 45 height (Y). The rotation should be left at zero. See the Code Help at the bottom of this exercise for more information.<\/li><li>Add the <code>playerTransformComponent<\/code> to the player <em>Entity<\/em> by calling <code>AddComponent<\/code> from the player. See the Code Help at the bottom of this exercise for more information.<\/li><li>Next, we need to give the player object the ability to render. Still in <em>Focus Area 1<\/em>, create a new <em>RenderComponent<\/em> named <code>playerRenderComponent<\/code>. This component's constructor takes a string for the texture. Pass in \"Graphics\\\\mongor\". As with the <em>TransformComponent<\/em> above, add <code>playerRenderComponent<\/code> to the player. See the Code Help at the bottom of this exercise for more information.<\/li><li>In order to get the player on screen, it needs to be processed. Scroll down to <em>Focus Area 2<\/em>.<\/li><li>Create a new <em>SpriteSystem<\/em> named <code>spriteSystem<\/code>.<\/li><li>Add the player to <em>spriteSystem<\/em>&#8216;s process list by calling <code>AddEntity<\/code> and passing in <code>player<\/code>. See the Code Help at the bottom of this exercise for more information.<\/li><li>This exercise contains a list of <em>EntityProcessor<\/em> objects. Include <code>spriteSystem<\/code> in this list by calling <code>_systemList.Add<\/code>. Pass <code>spriteSystem<\/code> as the argument.<\/li><li>Finally, run the game by clicking the Start Button or pressing F5. Our player sprite should be rendering on screen. (<a href='.\/simulation\/Behaviors_2\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><\/ol><\/li><li>Mouse Control<ol><li>Now that our player is rendering, we need to add some interactive behavior. Scroll down to <em>Focus Area 3<\/em>.<\/li><li>Create a new <em>FollowMouseSystem<\/em> named <code>followMouseSystem<\/code>.<\/li><li>Add the <code>player<\/code> to <code>followMouseSystem<\/code> processor by calling <code>AddEntity<\/code>. See the Code Help at the bottom of this exercise for more information.<\/li><li>Next, add <code>followMouseSystem<\/code> to <code>_systemList<\/code>.<\/li><li>Finally, run the game by clicking the Start Button or pressing F5. We should be able to move our player around screen using the mouse. (<a href='.\/simulation\/Behaviors_3\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><\/ol><\/li><li>Enemy Entity<ol><li>Now that we have a controllable player, we should add an enemy to interact with. Scroll down to <em>Focus Area 4<\/em>.<\/li><li>Allocate a new Entity named <code>enemy<\/code>. Pass the number 1 as the argument in its constructor.<\/li><li>Create a new <code>TransformComponent<\/code> named <code>enemyTransformComponent<\/code>. In its constructor, pass in a position of 10 in the X, 10 in the Y, and zero in the Z. For the size, use 65 width (X) and 65 height( Y). The rotation should be zero.<\/li><li>Next, create a new <em>RenderComponent<\/em> named <code>enemyRenderComponent<\/code>. Pass \"Graphics\\\\spikedball\" for its texture.<\/li><li>Add both the <code>enemyTransformComponent<\/code> and <code>enemyRenderComponent<\/code> to the <code>enemy<\/code> object.<\/li><li>In order to get the <code>enemy<\/code> rendering, add it to the <code>spriteSystem<\/code> using the <code>AddEntity<\/code> method.<\/li><li>Run the game by clicking the Start Button or pressing F5. We should see the new enemy sprite in the upper-left hand corner of the screen. (<a href='.\/simulation\/Behaviors_4\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><\/ol><\/li><li>Collision Component<ol><li>We are going to make the enemy chase the player around the screen if they are close enough. One way to accomplish this is to use basic collision. We can use a <em>Component<\/em> to manage the collision data for us. Open <code>CollisionComponent.cs<\/code>.<\/li><li>This <em>Component<\/em> is only partially filled out. We need to add the important content ourselves. Start by scrolling down to <em>Focus Area 5<\/em>.<\/li><li>We are going to use sphere-to-sphere collision in another system, so we will need sphere data. Declare a private floating point variable named <code>_radius<\/code>.<\/li><li>Next, declare a public property named <code>Radius<\/code>. We do not want to change the radius after the collision data is first generated. Implement a <code>get<\/code> accessor (hint: see <em>Fields and Properties<\/em> Topic in the Object Oriented Programming Module for review ) and return the private radius field.<\/li><li>Declare another private field named <code>_boundingSphere<\/code>, of the <em>BoundingSphere<\/em> type.<\/li><li>Add a public <code>BoundingSphere<\/code> property named <code>CollisionSphere<\/code>. This will only contain a <code>get<\/code> accessor for the private bounding sphere we previously declared.<\/li><li>Scroll down to <em>Focus Area 6<\/em> in the <code>CollisionComponent<\/code> constructor. Assign the private <code>_radius<\/code> and <code>_target<\/code> fields to the appropriate constructor parameters.<\/li><li>Finally, scroll down to <em>Focus Area 7<\/em> in the <code>Initialize<\/code> method. Create a new <em>BoundingSphere<\/em> and assign it to this component's private <code>BoundingSphere<\/code> field. The first constructor argument is a Vector3 that represents the starting position of the sphere. Pass <code>Vector.Zero<\/code>, as the position will be updated dynamically later. For the second argument, pass this component's private radius field.<\/li><li>The <em>CollisionComponent<\/em> is ready for use. Open <em>BehaviorsExercise.cs<\/em> and scroll down to <em>Focus Area 8<\/em>.<\/li><li>Add a new <em>CollisionComponent<\/em> to the <em>player<\/em>. Pass 0.25 as the only argument in the constructor, since the player will not be targeting anything.<\/li><li>Finally, add a new <em>CollisionComponent<\/em> to the <em>enemy<\/em>. Pass 155 and <code>player<\/code> as the constructor arguments.<\/li><\/ol><\/li><li>Chase Target System<ol><li>Our player and enemy entities have enough information to interact with each other. Let's continue by adding some basic AI to the enemy. Open <em>ChaseTargetSystem.cs<\/em> and scroll down to <em>Focus Area 9<\/em>.<\/li><li>Declare a private floating point field named <code>_speed<\/code>. This will control how fast the enemy can chase its target.<\/li><li>Scroll down to <em>Focus Area 10<\/em> and set the <code>_speed<\/code> field to the value passed into the constructor.<\/li><li>Next, we are going to add logic to this system. Scroll to <em>Focus Area 11<\/em> in the <code>ProcessEntity<\/code> method.<\/li><li>Start by declaring two <em>BoundingSphere<\/em> objects named <code>firstSphere<\/code> and <code>secondSphere<\/code>. The first should be assigned to the <code>CollisionSphere<\/code> property from the <code>collComp<\/code> collision component. The second should be assigned to the <code>CollisionSphere<\/code> property from the <code>targetCollisionComponet<\/code>.<\/li><li>Next, update the <code>firstSphere<\/code> center to the position contained in the <code>transComp<\/code> transform component.<\/li><li>Update the <code>secondSphere<\/code> center to the position contained in the <code>targetTransformComponent<\/code> transform component.<\/li><li>Write an if statement that checks the result of calling <code>firstSphere.Insersects(secondSphere)<\/code>. This is a very basic collision check, which we will learn more about in another Module.<\/li><li>Inside of the if statement, we are going to cause the <em>Entity<\/em> being processed to move toward a target. This needs to be time based, so declare a new <em>TimeSpan<\/em> variable named <code>deltaTimeSpan<\/code>.<\/li><li>Assign <code>deltaTimeSpan<\/code> the value of the elapsed game time (<code>BlackBoard.GameTime.ElapsedGameTime<\/code>.<\/li><li>Next, we need the delta time in milliseconds. Create a new floating point variable named <code>deltaTime<\/code>.<\/li><li>Assign <code>deltaTime<\/code> the value of <code>deltaTimeSpan.TotalMilliseconds<\/code>. We must cast this value to a <em>float<\/em>.<\/li><li>Next, we need to find the direction for the <em>Entity<\/em> to move toward. Create a new <em>Vector3<\/em> named <code>direction<\/code>. Set its value to the difference of the <code>secondSphere<\/code>&#8216;s center and the <code>firstSphere<\/code>&#8216;s center.<\/li><li>Next, we need to normalize the <code>direction<\/code> vector. Simply call the <code>Normalize<\/code> method from the vector.<\/li><li>Finally, we need to add to the entity's position through its transform component (<code>transComp.Position<\/code>). Increase the position (+=) to the result of multiplying the direction, times the speed, times the delta time.<\/li><li>Our <em>ChaseTargetSystem<\/em> is ready to use. Open <em>BehaviorsExercise.cs<\/em> and scroll down to <em>Focus Area 12<\/em>.<\/li><li>Instantiate a new instance of <em>ChaseTargetSystem<\/em> and name it <code>chaseTargetSystem<\/code>. Use a small value for the speed, which is passed as an argument in the constructor. 0.25 should be enough.<\/li><li>Add the <code>enemy<\/code> entity to the <code>chaseTargetSystem<\/code>.<\/li><li>Add the <code>chaseTargetSystem<\/code> to the <code>_systemList<\/code> collection.<\/li><li>Finally, run the game by clicking the Start Button or pressing F5. Use the mouse to move the player toward the enemy. When they are close enough, the enemy should start chasing. Once the player moves out of range, the enemy should stop. (<a href='.\/simulation\/Behaviors_5\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><\/ol><\/li><li>Keyboard Move System<ol><li>Moving the <em>player<\/em> around the screen using the mouse is not very challenging, since it can outrun the <code>enemy<\/code> entity easily. Let's change that. Scroll up to <em>Focus Area 3<\/em>.<\/li><li>Comment all the lines related to the <em>FollowMouse System<\/em>. This should include the instantiation of the system, adding the <em>player<\/em> object, and adding the system to <code>_systemList<\/code>.<\/li><li>We are going to use a <em>KeyboardMoveSystem<\/em> to control the player via arrow keys. Scroll down to <em>Focus Area 13<\/em>.<\/li><li>Instantiate a new <em>KeyboardMoveSystem<\/em> named <code>keyboardMoveSystem<\/code>. Pass <code>Keys.Up<\/code>, <code>Keys.Down<\/code>, <code>Keys.Left<\/code>, <code>Keys.Right<\/code>, and 0.5 for the constructor arguments.<\/li><li>Add <code>player<\/code> to the <code>keyboardMoveSystem<\/code>.<\/li><li>Next, add <code>keyboardMoveSystem<\/code> to the <code>_systemList<\/code> collection.<\/li><li>Finally, run the game by clicking the Start Button or pressing F5. Use the arrow keys to move the player around. The enemy should still chase, but the game should be a little more challenging. (<a href='.\/simulation\/Behaviors_6\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><\/ol><\/li><\/ol><h1>Rubric<\/h1><ul><li>1 point for rendering the player sprite in step 1.k.<\/li><li>1 point for player following the mouse in step 2.<\/li><li>1 point for enemy being in the upper-left hand corner.<\/li><li>2 points for enemy chasing the player in step 5.<\/li><li>1 point for using the keyboard move system in step 6.<\/li><\/ul><h1>Code Help<\/h1>        <!--CodeHelp: Vector2-->        <p><strong>Vector2<\/strong> &#8211; A vector data structure containing two components (X, Y). The values can represent UV texture coordinates, 2D object positioning, and several other forms of data. When creating a new Vector2, we can pass in two float values:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Example X\/Y floats. Values are arbitrary<br\/>float x = 1.0f;<br\/>float y = 2.0f;<br\/><br\/>\/\/ Create a new Vector2<br\/>Vector2 myVector = new Vector2(x, y);<br\/><br\/>\/\/ Create a zeroed out Vector2<br\/>Vector2 zeroedVector = Vector2.Zero;<br\/><\/pre><p><\/p><!--CodeHelp: Vector3-->        <p><strong>Vector3<\/strong> &#8211;  A vector data structure containing 3 components (X, Y, Z). When creating a new Vector3, we can pass in three float values:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Example X\/Y\/Z floats. Values are arbitrary<br\/>float x = 1.0f;<br\/>float y = 2.0f;<br\/>float z = 3.0f;<br\/><br\/>\/\/ Create a new Vector3<br\/>Vector3 vectorA = new Vector3(x, y, z);<br\/>Vector3 vectorB = new Vector3(4.0f, 5.0f, 6.0f);<br\/><br\/>\/\/ Values of vectorC will be 5.0f, 7.0f, 9.0f for X, Y, and Z respectively<br\/>Vector3 vectorC = vectorA + vectorB;<br\/><br\/>\/\/ Create a Vector3 by transforming a Matrix <br\/>Vector3 distance = new Vector3(1.0f, 2.0f, 3.0f);<br\/>Vector3 transformedVector = Vector3.Transform(distance, Matrix.CreateRotationY(MathHelper.ToRadians(45.0f)));<br\/><br\/>\/\/ Create a Vector3 from Vector2 values<br\/>Vector2 vectorTwo = new Vector2(10.0f, 5.0f);<br\/>Vector3 vectorThree = new Vector3(vectorTwo.X, vectorTwo.Y, 0.0f);<br\/><\/pre><p><\/p><!--CodeHelp: Entity Component System-->        <p><strong>Entity Component System<\/strong> &#8211; The ECS is a proprietary system written for the Game Development Curriculum. It consists of three main classes: Entity, Component, ComponentSystem. An Entity represents a game object, yet it contains very little functionality. It acts as a container for components. Internally, it has a dictionary of components, which can be added to using the AddComponent method.<\/p><p>Component is a base class, which we do not instantiate directly. Instead, derivatives of Component are created and used in the game. For example, the TransForm component has enough information to provide positioning for an Entity. The RenderComponent contains the data used for rendering. A Component itself does not perform any logic. It is a container of data used by a ComponentSystem.<\/p><p>Like the Component class, we do not instantiate ComponentSystem directly. The derivatives we create are tailored to how we wish to combine multiple components from an Entity to create game behaviors\/features. For example, the SpriteSystem will use the information from both TransformComponent and RenderComponent to draw a sprite to the screen. <\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Declare a new Entity. Constructor takes a unique number for the ID<br\/>Entity player = new Entity(0);<br\/><br\/>Vector3 position = new Vector3(0.0f, 0.0f, 0.0f);<br\/>Vector2 size = new Vector2(10.0f, 10.0f);<br\/>float angle = 0.0f;<br\/><br\/>TransformComponent transComp = new TransformComponent(position, size, angle);<br\/>RenderComponent renderComp = new RenderComponent(&quot;Graphics\\\\ship&quot;);<br\/><br\/>player.AddComponent(transComp);<br\/>player.AddComponent(renderComp);<br\/><br\/>SpriteSystem spriteSystem = new SpriteSystem();<br\/><br\/>spriteSystem.addEntity(player);<br\/><\/pre><p><\/p><!--CodeHelp: BoundingSphere-->        <p><strong>BoundingSphere<\/strong> &#8211; This is an XNA structure used to define a 3D sphere in a game and check for collision.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Instantiate a new BoundingSphere in the center of the scene, with a radius of 20<br\/>float radius = 20.0f;<br\/>BoundingSphere firstSphere = new BoundingSphere(new Vector3(0.0f, 0.0f, 0.0f), radius);<br\/><br\/>\/\/ Instantiate a second BoundingSphere<br\/>float secondRadius = 40.0f;<br\/>BoundingSphere secondSphere = new BoundingSphere(new Vector3(5.0f, 3.0f, 0.0f), secondRadius);<br\/><br\/>\/\/ Check to see if the two bounding spheres intersect<br\/>bool didIntersect = firstSphere.Intersects(secondSphere);<br\/><\/pre><p><\/p><!--CodeHelp: TimeSpan--><p><strong>TimeSpan<\/strong> &#8211; A C# struct that represents a time interval. We will mainly use it to control our games' updating based on time, rather than frames:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>public void Update(GameTime time)<br\/>{<br\/>\/\/ Determine how much time has passed, in milliseconds<br\/>TimeSpan deltaTimeSpan = time.ElapsedGameTime;<br\/>float deltaTime = (float)deltaTimeSpan.TotalMilliseconds;<br\/>}<br\/><\/pre><p><\/p><!--page:~~behaviors-exercise~~-->","link":"exercise","mod":"behaviors","movie":null,"name":"behaviors","promptfile":null,"prompts":null,"reference":null,"text":null,"title":"Exercise"}]},{"bIsChecked":true,"name":"win-condition","title":"Win Condition","topics":[{"bIsChecked":true,"exercise":null,"instructions":null,"link":"overview","mod":"win-condition","movie":".\/video\/Course2-intro-to-game-programming-win-condition-overivew.mp4","name":"Overview","promptfile":null,"prompts":null,"reference":"win-condition-1","text":null,"title":"Overview"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"Case Study","mod":"win-condition-case-study","movie":".\/video\/Course2-intro-to-game-programming-win-condition-case-study.mp4","name":"Case Study","promptfile":null,"prompts":null,"reference":"win-condition-2","text":null,"title":"Case Study"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"Practical Application","mod":"win-condition-practical-application","movie":".\/video\/Course2-intro-to-game-programming-win-condition-practical-application.mp4","name":"Practical Application","promptfile":null,"prompts":null,"reference":"win-condition-3","text":null,"title":"Practical Application"},{"bIsChecked":true,"exercise":null,"instructions":null,"link":"reference","mod":"","movie":null,"name":"Reference","promptfile":null,"prompts":null,"reference":null,"text":"<a class=\"dest\" id=\"win-condition-1\"><\/a><div class=\"accent\"><h1>Overview<\/h1><p>When we play a game there has to be some mechanism in place that defines when that game is over. This mechanism is known as the End Condition. End conditions vary from game to game and occur when a defined condition or scenario is met that marks the end of the game for a player or players. A good example of an end condition would be game length. Some games define this as the number of rounds or turns, others define it as an amount of time to complete a level or game in. Other examples of end conditions are mission objectives where a set of objectives must be met or failed to end the game. Some end conditions can also be Win Conditions. Win conditions are the mechanism that defines how the player or players win the game. This condition will be specific to each game, but a win condition can typically fall into one of these general categories:<\/p><ul><li>Goals - A general win condition that defines an objective or objectives that are specific to the game for the player to accomplish<\/li><li>Loss Avoidance - A win condition in which object of the game is to be the only remaining player not to have triggered a condition or scenario that eliminates them from the game<\/li><li>Puzzle Guessing - A win condition in which the player guesses or solves the answer to a puzzle<\/li><li>Races - A win condition in which the player is the first to advance their token or tokens beyond a pre-defined point<\/li><li>Piece Elimination - A win condition in which the player is the first to eliminate all of their opponent or opponents game pieces from the field of play<\/li><li>Structure Building - A win condition in which the player must gather a set of in-game resources to construct a structure that is either defined as the winning structure or is better than those built by other players<\/li><li>Territory Control - A win condition in which the player must control the most territory in the gameplay area or a specific piece of territory<\/li><li>Victory Points - A win condition in which the player has accumulated more points or in-game rewards than the other players<\/li><\/ul><p>Chess is a prime example of win and end conditions. In Chess, the players have the goal win condition to perform checkmate on their opponent. This win condition is also an end condition for the game, however chess contains multiple end conditions. Another end condition in chess is a stalemate. This occurs when both players are unable to make a legal move or a checkmate is impossible to be achieved with their remaining pieces.<\/p><div style=\"text-align: center;\"><ul class=\"anchorGroup\" style=\"text-align: left; display: inline-block;\"><li><a class=\"ankor\" href=\"#win-condition-2\">Case Study Examples<\/a><\/li><li><a class=\"ankor\" href=\"#win-condition-3\">Practical Application<\/a><\/li><\/ul><\/div><\/div><a class=\"dest\" id=\"win-condition-2\"><\/a>&nbsp;<div class=\"accent\"><h1>Case Study Examples<\/h1><p>Now let's take a look at a few games from different eras of the industry and see how win and end conditions are applied to them.<\/p><h2>Super Mario Bros.<\/h2><h3>Win Condition<\/h3><p>Super Mario Bros actually has a couple levels of win and end conditions. Each level in the game carries the win condition of touching the flagpole at the end of the level, unless its a castle level in which the win condition is to defeat Bowser at the end of the level. The game itself has only one overall win condition of defeat Bowser at the end of the final level to save the Princess. All of these fall into the goals category of win conditions. An argument could be made that loss avoidance is also a win condition in the game when two players are playing. However, the game itself never actually pits the two players into direct competition against one another. First, player one starts the game off and gets to advance as far as they can in one life. When player one dies player two gets to do the same. Both players advance through the entirety of the game at their own pace. The loss avoidance argument could be made here in emergent gameplay, which is gameplay that was unintended by the developers and is created by how the players play the game, in which both players are trying to make it farther than the other and survive longer. Victory points could also be included as a win condition in this scenario if the two players compare their scores at the end of the game.<\/p><li>Touch the flagpole at the end of a level<\/li><li>Defeat Bowser in each castle level<\/li><li>Defeat Bowser in the final castle level<\/li><h3>End Condition<\/h3><p>Much like the win conditions, Super Mario Bros has multiple levels of end conditions. In addition to the win conditions, which are also end conditions, each level has the end condition of the timer. If the player runs out of time they lose a life and are forced to start the level over. This happens as well with the general end condition of losing a life to a hazard in the level. These hazards include touching the enemies in the world from an unsafe direction, being hit by enemy projectiles, and falling into pits. The overall end condition occurs when the player loses all their lives. Once this happens the game is over.<\/p><ul><li>Lose a life due to a hazard in the current level<\/li><li>Run out of time in the current level<\/li><li>Lose all lives<\/li><li>Touch the flagpole at the end of a level<\/li><li>Defeat Bowser in each castle level<\/li><li>Defeat Bowser in the final castle level<\/li><\/ul><h2>Pong<\/h2><p>In the case of Pong there exists only a single win and end condition which are both the same condition. In Pong, two players compete to score 11 points before the other player. This win condition clearly falls into the victory points category. Once a player reaches 11 points that player wins the game and the game is over.<\/p><h3>Win Condition<\/h3><ul><li>Reach 11 points before the other player<\/li><\/ul><h3>End Condition<\/h3><ul><li>A player reaches 11 points<\/li><\/ul><h2>Angry Birds<\/h2><h3>Win Condition<\/h3><p>Angry Birds is different from our previous examples. Angry Birds has a few different win conditions and only one of them is also an end condition. Each level in Angry Birds is a puzzle in which the player must use their birds to affect the environment in a way that results in destroying all the pigs within the level. This puzzle guessing condition is the core win condition for Angry Birds, but it also has multiple goal based win conditions on top of that. In each level the player is encouraged to solve the level in a way that earns them a three star rating. This typically means using fewer birds to solve the puzzle and getting a higher score for doing so. The player is free to replay levels any time they want, so while they could just complete all the levels and consider the game completed there is more for them to accomplish. In addition to striving to solve the puzzles in a way that earns them a three star rating, players also attempt to satisfy the victory points win condition of being the player with the highest score on the leaderboard.<\/p><ul><li>Destroy all the pigs in the level<\/li><li>Receive three stars for the solution in which all pigs are destroyed in a level<\/li><li>Complete all levels<\/li><li>Get three stars on all levels<\/li><li>Get the highest score on the leaderboards<\/li><\/ul><h3>End Condition<\/h3><p>While there are many layers to the win conditions in Angry Birds, the end conditions are inversely very simple. Either player destroys all the pigs in the level, or they do not. One results in a victory for the player and the other results in the level being over and the player is forced to try again.<\/p><li>Fail to destroy all the pigs in a level<\/li><li>Destroy all the pigs in the level<\/li><\/div><a class=\"dest\" id=\"win-condition-3\"><\/a>&nbsp;<div class=\"accent\"><h1>Practical Application of Win Conditions<\/h1><p>We've covered the design theory of win conditions, what they are, their types, and some examples of them in use in the industry, but how do we actually make use of them? How do we go from theory to practical application within a game? Let's take a look at another game and see how we would translate its win and end conditions from their design on paper to working in the game logic.<\/p><h2>Breakout<\/h2><p>For this discussion we'll use the example of Breakout. After Pong in 1972, Breakout was the next big hit in games when it was released in 1976. The gameplay was heavily influenced by Pong. Breakout rotates the field of play so that the ball travels up and down the screen rather than side to side. Instead of trying to prevent the ball from going past their side of the screen by deflecting it back to an opponent the player has to prevent the ball from traveling past the bottom of the screen with no opponent. In Breakout the goal is for the player to eliminate rows of bricks that arranged on the screen. The players win a level in Breakout when they eliminate all the bricks and still have balls, or attempts, remaining, players typically start with five balls. When the player wins the level they advance to the next level and try to make it as far as they can until they no longer have any balls remaining.<\/p><p>Over the years there have been countless versions of Breakout. Some provided a finite number of levels for the player to complete, some provided a near infinite or even infinite number of levels. For the sake of keeping things simple we'll focus now on the original Breakout which had only two levels, if the player completed the second level they were left with no choice but to allow the end conditions to trigger in order for the game to end. This of course seems absurd by today's standards, but at the time of the original Breakout there was only enough storage space on the game's circuit boards for two levels.<\/p><h3>Win Condition<\/h3><p>We touched on the win conditions above already, so let's jump right in and take a look at how each one would be implemented.<\/p><p><strong>Eliminate all the bricks\/Complete the level<\/strong><\/p><p>The first win condition is for the player to eliminate all the bricks to complete the level. There are a few different ways we could achieve this. In the original Breakout each brick was worth one point. We could check to see if the player's score has reached the maximum value for the level. While this would make for very simple code to write it would ultimately be problematic in the long run. What if we choose to change the value of the bricks or introduce special bricks in a bid to differentiate our version of Breakout from others? Now we would be left with a win condition that would be less accurate and prone to bugs. For this reason its best to write our logic for the win condition based on what it is exactly.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>bool levelComplete = false;<br\/><br\/>for(int i = 0; i &lt; bricks.Count; ++i)<br\/>{<br\/>if(bricks[i].Visible == true)<br\/>{<br\/>levelComplete = false;<br\/>break;<br\/>}<br\/>else<br\/>{<br\/>levelComplete = true;<br\/>}<br\/>}<br\/><br\/>if(levelComplete == true)<br\/>{<br\/>AdvanceToSecondLevel();<br\/>}<br\/><\/pre><h3>End Condition<\/h3><p><strong>Ball travels past the the bottom of the screen<\/strong><\/p><p>Our first end condition is the one the player will see most often during gameplay and that is when the ball travels past the bottom of the screen. We've seen an example of this previously in the Basic Collision module as Point vs Axis collision detection. The concept here is the same. The ball moves off the bottom edge of the screen and the player's current attempt at eliminating the bricks ends. This collision and our response will make up our end condition as a whole. When we detect that the ball has gone past the bottom edge of the window we simply need to decrement the number of balls remaining for the player and relaunch the ball for them from the starting position. <\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>if(ball.Position.Y &gt; gameWindow.Bottom)<br\/>{<br\/>--ballsRemaining;<br\/><br\/>RelaunchBall();<br\/>}<br\/><\/pre><p>Note that we don't make the player start over. We don't want to punish the player for a single miss. While the original Breakout didn't factor in the number of balls remaining, this is something future developers can and have easily improved upon. Whether that's by adding bonus points for balls remaining at the end, adding more levels thereby providing the player with the opportunity to achieve a higher score, or some other mechanism.<\/p><p><strong>Player runs out of balls<\/strong><\/p><p>Our final end condition is the condition which ends the game whether the player has eliminated all the bricks or not. The player has a set number of attempts to eliminate the bricks, represented as balls. In the previous end condition we see that losing an attempt means losing a ball. Once the player has lost all their balls they can no longer continue the game and the game is over. This condition is simpler than our other condition and is simply a matter of checking to see if the number of balls remaining for the player has reached zero or not. If it is then we perform some Game Over logic. This type of logic in a full game would typically be along the lines of halting gameplay, switching to a different screen or displaying some kind of message that alerts the player as to the game being over.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>if(ballsRemaining &lt;= 0)<br\/>{<br\/>GameOver();<br\/>}<br\/><\/pre><p>In terms of order of our checks we would want the above example to come after our example of the end condition for the current attempt. However, when we have two end conditions that also intertwine like these two we will often combine them in order to have cleaner, more efficient code. In the example below we've refactored both individual checks into a single nested statement. Not only does this make for cleaner and more efficient code, but it also helps to reduce the potential for logical errors in the code. We know that the only time we need to check if the player runs out of balls is if the number of balls remaining has been changed and we know that the number of balls remaining is only changed if the ball travels past the bottom edge of the screen. This leads us to knowing that we can confidently combine the two into the example below and still achieve our intended result.<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>if(ball.Position.Y &gt; gameWindow.Bottom)<br\/>{<br\/>--ballsRemaining;<br\/><br\/>if(ballsRemaining &lt;= 0)<br\/>{<br\/>GameOver();<br\/>}<br\/>else<br\/>{<br\/>RelaunchBall();<br\/>}<br\/>}<br\/><\/pre><\/div><!--page:~~win-condition-reference-text~~-->","title":"Reference Material"},{"bIsChecked":true,"exercise":".\/exercise\/win-condition.zip","instructions":"<h1>Goal<\/h1><p>In this Exercise we are going to build a simple breakout game. We will set up some behaviors, implement basic collision detection and response, and implement basic game states with win and lose conditions.<\/p><h1>Steps<\/h1><p>All work for this Exercise will be done in the win_condition class.<\/p><ol><li>Build and Run the Exercise without modification.  You should see the walls, blocks, paddle, and ball all set up already.  The ball should fall and go right through the paddle. Let's add some collision. (<a href='.\/simulation\/WinCondition_1\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><li>In <em>Focus Area 1<\/em>, call the <code>CheckForCollision<\/code> function passing in the current position of the ball and the position that the ball is going to be at. Store the result in a <code>Collision_HitInfo<\/code> object.<\/li><li>Still in <em>Focus Area 1<\/em>, add a while loop to loop until the <code>Collision_HitInfo<\/code> object is null. Inside the loop do the following:<ol><li>Set the <code>_ballVelocity<\/code> vector to be the new direction stored in the <code>Collision_HitInfo<\/code> normal field multiplied by the <code>_ballSpeed<\/code>.<\/li><li>Set the <code>ballNewPosition<\/code> variable to be the intersection point stored in the <code>Collision_HitInfo<\/code> point field.<\/li><li>Call the <code>CheckForCollision<\/code> function again with the ball's current position and the <code>ballNewPosition<\/code> variable to resolve collisions with everything it might hit. Store the result in the <code>Collision_HitInfo<\/code> object.<\/li><\/ol><\/li><li>Run the exercise again and watch the ball. It should bounce off of the paddle, a block, the wall, and finally fall into oblivion. Let's add in some player control. (<a href='.\/simulation\/WinCondition_2\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><li>In <em>Focus Area 2<\/em>, bind the paddle position to the mouse by setting the paddle's X coordinate to the mouse's X position. Use the <code>MathHelper.Clamp<\/code> function to constrain the mouse's x value so the paddle can't go into the walls using <code>wallThickness<\/code> + <code>paddleWidth<\/code> for the minimum value and the same result subtracted from the viewport's width for the maximum value.<\/li><li>Run the exercise again. Now you should be able to move the paddle with the mouse and keep the ball from falling in the hole. Next let's add some extra lives so the player has more than one chance. (<a href='.\/simulation\/WinCondition_3\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><li>In <em>Focus Area 3<\/em>, add an integer variable for <code>_lives<\/code> and set its value to 3.<\/li><li>In <em>Focus Area 4<\/em>, check to see if the ball's position is below the bottom of the screen using the <code>Bottom<\/code> property of the <code>Viewport<\/code> <code>Bounds<\/code> in <code>_graphicsDevcie<\/code>. If the ball is below the bottom of the screen, do the following:<ol><li>Check if <code>_lives<\/code> is greater than zero. If it is, decrement it.<\/li><li>Check <code>_lives<\/code> again. If it is still greater than zero, call the <code>ResetBall<\/code> function to reset the ball for a new life<\/li><\/ol><\/li><li>Run the exercise again and let the ball fall in the hole. The ball should now reset back to its starting position for each extra life. It would be nice for the player to be able to see how many lives they have left, let's add a display for that. (<a href='.\/simulation\/WinCondition_4\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><li>In <em>Focus Area 5<\/em>, print the string \"Lives: \" and the lives count in the top left of the screen at coordinates (5,20) using the <code>_littleFont<\/code>, the <code>_spriteBatch.DrawString<\/code> function and <code>Color.Green<\/code>.<\/li><li>Run the exercise again. Watch the lives display count down to zero as you let the ball fall into the hole. Next, let's tell the player they lost if they run out of lives. (<a href='.\/simulation\/WinCondition_5\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><li>In <em>Focus Area 6<\/em>, check to see if lives is less than or equal to zero. If it is, do the following:<ol><li>Use the <code>_bigFont<\/code> to print the <code>_gameOverMessage<\/code> in the center of the screen in red. The positioning for the message can be determined by dividing the viewport width by 2 and subtracting <code>_gameOverMessageHalfWidth<\/code> from the result for the X and dividing the viewport height by 2 for the Y.<\/li><li>Use the <code>_littleFont<\/code> to print the <code>_startMessage<\/code> centered under the <code>_gameOverMessage<\/code> text in goldenrod. The positioning for the message can be determined by dividing the viewport width by 2 and subtracting <code>_startMessageHalfWidth<\/code> from the result for the X and dividing the viewport height by 2 and adding <code>_gameOverMessageHeight<\/code> to the result for the Y.<\/li><\/ol><\/li><li>Run the exercise and let the ball fall in the hole until you run out of lives. Now that we have a way to lose the game, let's add a way to win! (<a href='.\/simulation\/WinCondition_6\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><li>In <em>Focus Area 7<\/em>, add a bool variable for <code>_gameWon<\/code> and set its value to false.<\/li><li>In <em>Focus Area 8<\/em>, create a local bool variable we can use to check to see if the game has been won and set its value to true<\/li><li>Still in <em>Focus Area 8<\/em>, create a foreach loop to iterate through all of the blocks in the <code>_blocks<\/code> array.  For each block, do the following:<ol><li>If the block is visible, set the local bool variable to false and break out of the loop<\/li><\/ol><\/li><li>Still in <em>Focus Area 8<\/em>, check the local bool variable after the loop to see if it is still true. If it is, set the <code>_gameWon<\/code> variable to true.<\/li><li>In <em>Focus Area 9<\/em>, check the <code>_gameWon<\/code> variable.  If it is true, do the following:<ol><li>Use the <code>_bigFont<\/code> to print the <code>_winMessage<\/code> in the center of the screen in yellow. The positioning for the message can be determined by dividing the viewport width by 2 and subtracting <code>_winMessageHalfWidth<\/code> from the result for the X and dividing the viewport height by 2 for the Y.<\/li><li>Use the <code>_littleFont<\/code> to print the <code>_startMessage<\/code> centered under the <code>_winMessage<\/code> text in goldenrod. The positioning for the message can be determined by dividing the viewport width by 2 and subtracting <code>_startMessageHalfWidth<\/code> from the result for the X and dividing the viewport height by 2 and adding <code>_winMessageHeight<\/code> to the result for the Y.<\/li><\/ol><\/li><li>Run the exercise again and clear all the blocks to see that we have won the game! (Tip: you can test this without going through the whole game by setting the <code>_gameWon<\/code> variable to true temporarily. Don't forget to reset it!) Notice even after winning, the ball keeps moving and can still fall in the hole. Let's do something about that. (<a href='.\/simulation\/WinCondition_7\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><li>In <em>Focus Area 10<\/em>, check the <code>_gameWon<\/code> variable so that the ball does not get updated when the <code>_gameWon<\/code> variable is true. The body for this statement has been provided.<\/li><li>Run the exercise and win the game again. Notice the ball stops and can't fall in the hole anymore. We have already told the player they can start again by clicking, so let's make that a reality. (<a href='.\/simulation\/WinCondition_8\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><li>In <em>Focus Area 11<\/em>, check to see if the left mouse button is pressed. If it is, do the following:<ol><li>Check to see if <code>_lives<\/code> is less than or equal to zero or if the <code>_gameWon<\/code> variable is true. If either of these is true, call the <code>StartGame<\/code> function to start a new game.<\/li><\/ol><\/li><li>In <em>Focus Area 12<\/em>, call the <code>ResetBall<\/code> function and the <code>ResetBlocks<\/code> function to reset the game state.<\/li><li>Still in <em>Focus Area 12<\/em>, use the <code>Mouse.SetPosition<\/code> function to reset the mouse cursor to the center of the screen.<\/li><li>Still in <em>Focus Area 12<\/em>, reset the <code>_lives<\/code> variable and the <code>_gameWon<\/code> variable to their default values.<\/li><li>Run the exercise and win or lose the game. Clicking the left mouse button should now reset the game so you can play again. (<a href='.\/simulation\/WinCondition_9\/index.html' target=\"_blank\" class=\"simPopup\">Simulation<\/a>)<\/li><\/ol><h1>Rubric<\/h1><ul><li>1 point for ball bouncing off the paddle and block in step 4.<\/li><li>1 point for moving the paddle with the mouse in step 6.<\/li><li>1 point for ball resetting in step 9.<\/li><li>1 point for ball running out of lives in step 11.<\/li><li>1 point for building a losable game in step 13.<\/li><li>1 point for building a winnable game in step 19.<\/li><li>1 point for a game that resets in step 26.<\/li><\/ul><h1>Code Help<\/h1><!--CodeHelp: Vector3--><p><strong>Vector3<\/strong> &#8211;  A vector data structure containing 3 components (X, Y, Z). When creating a new Vector3, we can pass in three float values:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Example X\/Y\/Z floats. Values are arbitrary<br\/>float x = 1.0f;<br\/>float y = 2.0f;<br\/>float z = 3.0f;<br\/><br\/>\/\/ Create a new Vector3<br\/>Vector3 vectorA = new Vector3(x, y, z);<br\/>Vector3 vectorB = new Vector3(4.0f, 5.0f, 6.0f);<br\/><br\/>\/\/ Values of vectorC will be 5.0f, 7.0f, 9.0f for X, Y, and Z respectively<br\/>Vector3 vectorC = vectorA + vectorB;<br\/><br\/>\/\/ Create a Vector3 by transforming a Matrix <br\/>Vector3 distance = new Vector3(1.0f, 2.0f, 3.0f);<br\/>Vector3 transformedVector = Vector3.Transform(distance, Matrix.CreateRotationY(MathHelper.ToRadians(45.0f)));<br\/><br\/>\/\/ Create a Vector3 from Vector2 values<br\/>Vector2 vectorTwo = new Vector2(10.0f, 5.0f);<br\/>Vector3 vectorThree = new Vector3(vectorTwo.X, vectorTwo.Y, 0.0f);<br\/><\/pre><p><\/p><!--CodeHelp: GraphicsDevice--><p><strong>GraphicsDevice<\/strong> &#8211; An XNA\/MonoGame GraphicsDevice used for rendering primitives and handling graphical resources:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>_spriteManager.RenderSprites(_graphicsDevice, DefaultCamera);<br\/><\/pre><p><\/p><!--CodeHelp: SpriteBatch--><p><strong>SpriteBatch and SpriteFont<\/strong> &#8211; SpriteBatch is an XNA class which enables the rendering of a group of sprites, rather than drawing them to the screen one at a time in a large loop. It can also be used to draw strings to the screen using a SpriteFront:<\/p><pre class=\"wp-code-highlight prettyprint linenums:1\"><br\/>\/\/ Load the font using the content manager<br\/>SpriteFont bigFont = _contentManager.Load&lt;SpriteFont&gt;(&quot;Fonts\\\\QuartzMS&quot;);<br\/><br\/>\/\/ Draw the string &quot;GAME OVER&quot; to the center of the screen, using red color and the QuartzMS font<br\/>_spriteBatch.DrawString(bigFont, &quot;GAME OVER&quot;, new Vector2(390, 350), Color.Red);<br\/><\/pre><p><\/p><!--CodeHelp: Module--><p><strong>Module<\/strong> &#8211; Module is a custom class written for this course. It is wrapped in a dynamic-link library, so we do not have to worry about adding to it:<\/p><ul><li>_graphicsDevice – An XNA\/MonoGame GraphicsDevice. This is used in SpriteManager's rendering methods. It is already initialized for us and we simply need to know its name and where to use it.<\/li><li>_contentManager – An XNA\/MonoGame ContentManager. This is used in SpriteTexture's texture methods. It is already initialized for us and we simply need to know its name and where to use it.<\/li><li>DefautCamera – A simple Camera object which manages our game's projection and view. It is already initialized for us and we simply need to know its name and where to use it.<\/li><\/ul><p><\/p><!--page:~~win-condition-exercise~~-->","link":"exercise","mod":"win-condition","movie":null,"name":"win-condition","promptfile":null,"prompts":null,"reference":null,"text":null,"title":"Exercise"}]}],"title":"Intro to Game Programming"}],"bIsChecked":true,"course_name":"Game Development Programming","image":"Course2_Image.jpg","long_desc":"","title":"Game Development Programming","url":"course1.html","version":"July-2017.9.70"}]};